
GUI_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c5c8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b1c  0802c778  0802c778  0002d778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00002162  0802f294  0802f294  00030294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001b8  080313f8  080313f8  000323f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0001edc0  080315b0  080315b0  000325b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000005c  08050370  08050370  00051370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080503cc  080503cc  0005216c  2**0
                  CONTENTS
  8 .ARM          00000008  080503cc  080503cc  000513cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080503d4  080503d4  0005216c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080503d4  080503d4  000513d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080503e8  080503e8  000513e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000016c  20000000  080503f0  00052000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000131ac  2000016c  0805055c  0005216c  2**2
                  ALLOC
 14 ._user_heap_stack 00001400  20013318  0805055c  00052318  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  0005216c  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00070800  d0000000  d0000000  00053000  2**2
                  ALLOC
 17 .debug_info   0009889b  00000000  00000000  0005219c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00012612  00000000  00000000  000eaa37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000040a8  00000000  00000000  000fd050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00003046  00000000  00000000  001010f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0000f709  00000000  00000000  0010413e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000460a5  00000000  00000000  00113847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00119583  00000000  00000000  001598ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000c2  00000000  00000000  00272e6f  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00011f30  00000000  00000000  00272f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 0000004a  00000000  00000000  00284e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0802c760 	.word	0x0802c760

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000170 	.word	0x20000170
 80001ec:	0802c760 	.word	0x0802c760

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_ldivmod>:
 8000290:	b97b      	cbnz	r3, 80002b2 <__aeabi_ldivmod+0x22>
 8000292:	b972      	cbnz	r2, 80002b2 <__aeabi_ldivmod+0x22>
 8000294:	2900      	cmp	r1, #0
 8000296:	bfbe      	ittt	lt
 8000298:	2000      	movlt	r0, #0
 800029a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800029e:	e006      	blt.n	80002ae <__aeabi_ldivmod+0x1e>
 80002a0:	bf08      	it	eq
 80002a2:	2800      	cmpeq	r0, #0
 80002a4:	bf1c      	itt	ne
 80002a6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002aa:	f04f 30ff 	movne.w	r0, #4294967295
 80002ae:	f000 b9b5 	b.w	800061c <__aeabi_idiv0>
 80002b2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ba:	2900      	cmp	r1, #0
 80002bc:	db09      	blt.n	80002d2 <__aeabi_ldivmod+0x42>
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db1a      	blt.n	80002f8 <__aeabi_ldivmod+0x68>
 80002c2:	f000 f84d 	bl	8000360 <__udivmoddi4>
 80002c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ce:	b004      	add	sp, #16
 80002d0:	4770      	bx	lr
 80002d2:	4240      	negs	r0, r0
 80002d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db1b      	blt.n	8000314 <__aeabi_ldivmod+0x84>
 80002dc:	f000 f840 	bl	8000360 <__udivmoddi4>
 80002e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e8:	b004      	add	sp, #16
 80002ea:	4240      	negs	r0, r0
 80002ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f0:	4252      	negs	r2, r2
 80002f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f6:	4770      	bx	lr
 80002f8:	4252      	negs	r2, r2
 80002fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fe:	f000 f82f 	bl	8000360 <__udivmoddi4>
 8000302:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030a:	b004      	add	sp, #16
 800030c:	4240      	negs	r0, r0
 800030e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000312:	4770      	bx	lr
 8000314:	4252      	negs	r2, r2
 8000316:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031a:	f000 f821 	bl	8000360 <__udivmoddi4>
 800031e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000322:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000326:	b004      	add	sp, #16
 8000328:	4252      	negs	r2, r2
 800032a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032e:	4770      	bx	lr

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b96a 	b.w	800061c <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	460c      	mov	r4, r1
 8000368:	2b00      	cmp	r3, #0
 800036a:	d14e      	bne.n	800040a <__udivmoddi4+0xaa>
 800036c:	4694      	mov	ip, r2
 800036e:	458c      	cmp	ip, r1
 8000370:	4686      	mov	lr, r0
 8000372:	fab2 f282 	clz	r2, r2
 8000376:	d962      	bls.n	800043e <__udivmoddi4+0xde>
 8000378:	b14a      	cbz	r2, 800038e <__udivmoddi4+0x2e>
 800037a:	f1c2 0320 	rsb	r3, r2, #32
 800037e:	4091      	lsls	r1, r2
 8000380:	fa20 f303 	lsr.w	r3, r0, r3
 8000384:	fa0c fc02 	lsl.w	ip, ip, r2
 8000388:	4319      	orrs	r1, r3
 800038a:	fa00 fe02 	lsl.w	lr, r0, r2
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f f68c 	uxth.w	r6, ip
 8000396:	fbb1 f4f7 	udiv	r4, r1, r7
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb07 1114 	mls	r1, r7, r4, r1
 80003a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a6:	fb04 f106 	mul.w	r1, r4, r6
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003b6:	f080 8112 	bcs.w	80005de <__udivmoddi4+0x27e>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 810f 	bls.w	80005de <__udivmoddi4+0x27e>
 80003c0:	3c02      	subs	r4, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	fa1f f38e 	uxth.w	r3, lr
 80003ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ce:	fb07 1110 	mls	r1, r7, r0, r1
 80003d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d6:	fb00 f606 	mul.w	r6, r0, r6
 80003da:	429e      	cmp	r6, r3
 80003dc:	d90a      	bls.n	80003f4 <__udivmoddi4+0x94>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e6:	f080 80fc 	bcs.w	80005e2 <__udivmoddi4+0x282>
 80003ea:	429e      	cmp	r6, r3
 80003ec:	f240 80f9 	bls.w	80005e2 <__udivmoddi4+0x282>
 80003f0:	4463      	add	r3, ip
 80003f2:	3802      	subs	r0, #2
 80003f4:	1b9b      	subs	r3, r3, r6
 80003f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003fa:	2100      	movs	r1, #0
 80003fc:	b11d      	cbz	r5, 8000406 <__udivmoddi4+0xa6>
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	2200      	movs	r2, #0
 8000402:	e9c5 3200 	strd	r3, r2, [r5]
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d905      	bls.n	800041a <__udivmoddi4+0xba>
 800040e:	b10d      	cbz	r5, 8000414 <__udivmoddi4+0xb4>
 8000410:	e9c5 0100 	strd	r0, r1, [r5]
 8000414:	2100      	movs	r1, #0
 8000416:	4608      	mov	r0, r1
 8000418:	e7f5      	b.n	8000406 <__udivmoddi4+0xa6>
 800041a:	fab3 f183 	clz	r1, r3
 800041e:	2900      	cmp	r1, #0
 8000420:	d146      	bne.n	80004b0 <__udivmoddi4+0x150>
 8000422:	42a3      	cmp	r3, r4
 8000424:	d302      	bcc.n	800042c <__udivmoddi4+0xcc>
 8000426:	4290      	cmp	r0, r2
 8000428:	f0c0 80f0 	bcc.w	800060c <__udivmoddi4+0x2ac>
 800042c:	1a86      	subs	r6, r0, r2
 800042e:	eb64 0303 	sbc.w	r3, r4, r3
 8000432:	2001      	movs	r0, #1
 8000434:	2d00      	cmp	r5, #0
 8000436:	d0e6      	beq.n	8000406 <__udivmoddi4+0xa6>
 8000438:	e9c5 6300 	strd	r6, r3, [r5]
 800043c:	e7e3      	b.n	8000406 <__udivmoddi4+0xa6>
 800043e:	2a00      	cmp	r2, #0
 8000440:	f040 8090 	bne.w	8000564 <__udivmoddi4+0x204>
 8000444:	eba1 040c 	sub.w	r4, r1, ip
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	2101      	movs	r1, #1
 8000452:	fbb4 f6f8 	udiv	r6, r4, r8
 8000456:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800045a:	fb08 4416 	mls	r4, r8, r6, r4
 800045e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000462:	fb07 f006 	mul.w	r0, r7, r6
 8000466:	4298      	cmp	r0, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x11c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x11a>
 8000474:	4298      	cmp	r0, r3
 8000476:	f200 80cd 	bhi.w	8000614 <__udivmoddi4+0x2b4>
 800047a:	4626      	mov	r6, r4
 800047c:	1a1c      	subs	r4, r3, r0
 800047e:	fa1f f38e 	uxth.w	r3, lr
 8000482:	fbb4 f0f8 	udiv	r0, r4, r8
 8000486:	fb08 4410 	mls	r4, r8, r0, r4
 800048a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800048e:	fb00 f707 	mul.w	r7, r0, r7
 8000492:	429f      	cmp	r7, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x148>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 34ff 	add.w	r4, r0, #4294967295
 800049e:	d202      	bcs.n	80004a6 <__udivmoddi4+0x146>
 80004a0:	429f      	cmp	r7, r3
 80004a2:	f200 80b0 	bhi.w	8000606 <__udivmoddi4+0x2a6>
 80004a6:	4620      	mov	r0, r4
 80004a8:	1bdb      	subs	r3, r3, r7
 80004aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ae:	e7a5      	b.n	80003fc <__udivmoddi4+0x9c>
 80004b0:	f1c1 0620 	rsb	r6, r1, #32
 80004b4:	408b      	lsls	r3, r1
 80004b6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ba:	431f      	orrs	r7, r3
 80004bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004c0:	fa04 f301 	lsl.w	r3, r4, r1
 80004c4:	ea43 030c 	orr.w	r3, r3, ip
 80004c8:	40f4      	lsrs	r4, r6
 80004ca:	fa00 f801 	lsl.w	r8, r0, r1
 80004ce:	0c38      	lsrs	r0, r7, #16
 80004d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004d4:	fbb4 fef0 	udiv	lr, r4, r0
 80004d8:	fa1f fc87 	uxth.w	ip, r7
 80004dc:	fb00 441e 	mls	r4, r0, lr, r4
 80004e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004e4:	fb0e f90c 	mul.w	r9, lr, ip
 80004e8:	45a1      	cmp	r9, r4
 80004ea:	fa02 f201 	lsl.w	r2, r2, r1
 80004ee:	d90a      	bls.n	8000506 <__udivmoddi4+0x1a6>
 80004f0:	193c      	adds	r4, r7, r4
 80004f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004f6:	f080 8084 	bcs.w	8000602 <__udivmoddi4+0x2a2>
 80004fa:	45a1      	cmp	r9, r4
 80004fc:	f240 8081 	bls.w	8000602 <__udivmoddi4+0x2a2>
 8000500:	f1ae 0e02 	sub.w	lr, lr, #2
 8000504:	443c      	add	r4, r7
 8000506:	eba4 0409 	sub.w	r4, r4, r9
 800050a:	fa1f f983 	uxth.w	r9, r3
 800050e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000512:	fb00 4413 	mls	r4, r0, r3, r4
 8000516:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800051a:	fb03 fc0c 	mul.w	ip, r3, ip
 800051e:	45a4      	cmp	ip, r4
 8000520:	d907      	bls.n	8000532 <__udivmoddi4+0x1d2>
 8000522:	193c      	adds	r4, r7, r4
 8000524:	f103 30ff 	add.w	r0, r3, #4294967295
 8000528:	d267      	bcs.n	80005fa <__udivmoddi4+0x29a>
 800052a:	45a4      	cmp	ip, r4
 800052c:	d965      	bls.n	80005fa <__udivmoddi4+0x29a>
 800052e:	3b02      	subs	r3, #2
 8000530:	443c      	add	r4, r7
 8000532:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000536:	fba0 9302 	umull	r9, r3, r0, r2
 800053a:	eba4 040c 	sub.w	r4, r4, ip
 800053e:	429c      	cmp	r4, r3
 8000540:	46ce      	mov	lr, r9
 8000542:	469c      	mov	ip, r3
 8000544:	d351      	bcc.n	80005ea <__udivmoddi4+0x28a>
 8000546:	d04e      	beq.n	80005e6 <__udivmoddi4+0x286>
 8000548:	b155      	cbz	r5, 8000560 <__udivmoddi4+0x200>
 800054a:	ebb8 030e 	subs.w	r3, r8, lr
 800054e:	eb64 040c 	sbc.w	r4, r4, ip
 8000552:	fa04 f606 	lsl.w	r6, r4, r6
 8000556:	40cb      	lsrs	r3, r1
 8000558:	431e      	orrs	r6, r3
 800055a:	40cc      	lsrs	r4, r1
 800055c:	e9c5 6400 	strd	r6, r4, [r5]
 8000560:	2100      	movs	r1, #0
 8000562:	e750      	b.n	8000406 <__udivmoddi4+0xa6>
 8000564:	f1c2 0320 	rsb	r3, r2, #32
 8000568:	fa20 f103 	lsr.w	r1, r0, r3
 800056c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000570:	fa24 f303 	lsr.w	r3, r4, r3
 8000574:	4094      	lsls	r4, r2
 8000576:	430c      	orrs	r4, r1
 8000578:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800057c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000580:	fa1f f78c 	uxth.w	r7, ip
 8000584:	fbb3 f0f8 	udiv	r0, r3, r8
 8000588:	fb08 3110 	mls	r1, r8, r0, r3
 800058c:	0c23      	lsrs	r3, r4, #16
 800058e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000592:	fb00 f107 	mul.w	r1, r0, r7
 8000596:	4299      	cmp	r1, r3
 8000598:	d908      	bls.n	80005ac <__udivmoddi4+0x24c>
 800059a:	eb1c 0303 	adds.w	r3, ip, r3
 800059e:	f100 36ff 	add.w	r6, r0, #4294967295
 80005a2:	d22c      	bcs.n	80005fe <__udivmoddi4+0x29e>
 80005a4:	4299      	cmp	r1, r3
 80005a6:	d92a      	bls.n	80005fe <__udivmoddi4+0x29e>
 80005a8:	3802      	subs	r0, #2
 80005aa:	4463      	add	r3, ip
 80005ac:	1a5b      	subs	r3, r3, r1
 80005ae:	b2a4      	uxth	r4, r4
 80005b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005b4:	fb08 3311 	mls	r3, r8, r1, r3
 80005b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005bc:	fb01 f307 	mul.w	r3, r1, r7
 80005c0:	42a3      	cmp	r3, r4
 80005c2:	d908      	bls.n	80005d6 <__udivmoddi4+0x276>
 80005c4:	eb1c 0404 	adds.w	r4, ip, r4
 80005c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005cc:	d213      	bcs.n	80005f6 <__udivmoddi4+0x296>
 80005ce:	42a3      	cmp	r3, r4
 80005d0:	d911      	bls.n	80005f6 <__udivmoddi4+0x296>
 80005d2:	3902      	subs	r1, #2
 80005d4:	4464      	add	r4, ip
 80005d6:	1ae4      	subs	r4, r4, r3
 80005d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005dc:	e739      	b.n	8000452 <__udivmoddi4+0xf2>
 80005de:	4604      	mov	r4, r0
 80005e0:	e6f0      	b.n	80003c4 <__udivmoddi4+0x64>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e706      	b.n	80003f4 <__udivmoddi4+0x94>
 80005e6:	45c8      	cmp	r8, r9
 80005e8:	d2ae      	bcs.n	8000548 <__udivmoddi4+0x1e8>
 80005ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80005f2:	3801      	subs	r0, #1
 80005f4:	e7a8      	b.n	8000548 <__udivmoddi4+0x1e8>
 80005f6:	4631      	mov	r1, r6
 80005f8:	e7ed      	b.n	80005d6 <__udivmoddi4+0x276>
 80005fa:	4603      	mov	r3, r0
 80005fc:	e799      	b.n	8000532 <__udivmoddi4+0x1d2>
 80005fe:	4630      	mov	r0, r6
 8000600:	e7d4      	b.n	80005ac <__udivmoddi4+0x24c>
 8000602:	46d6      	mov	lr, sl
 8000604:	e77f      	b.n	8000506 <__udivmoddi4+0x1a6>
 8000606:	4463      	add	r3, ip
 8000608:	3802      	subs	r0, #2
 800060a:	e74d      	b.n	80004a8 <__udivmoddi4+0x148>
 800060c:	4606      	mov	r6, r0
 800060e:	4623      	mov	r3, r4
 8000610:	4608      	mov	r0, r1
 8000612:	e70f      	b.n	8000434 <__udivmoddi4+0xd4>
 8000614:	3e02      	subs	r6, #2
 8000616:	4463      	add	r3, ip
 8000618:	e730      	b.n	800047c <__udivmoddi4+0x11c>
 800061a:	bf00      	nop

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <B2D>:
static LCD_DrvTypeDef* LcdDrv;

uint32_t I2c3Timeout = I2C3_TIMEOUT_MAX; /*<! Value of Timeout when I2C communication fails */
uint32_t Spi5Timeout = SPI5_TIMEOUT_MAX; /*<! Value of Timeout when SPI communication fails */
unsigned char B2D(unsigned char byte)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	unsigned char low, high;
	low = byte & 0x0F;
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	f003 030f 	and.w	r3, r3, #15
 8000630:	73fb      	strb	r3, [r7, #15]
	high = ((byte >> 4) & 0x0F) * 10;
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	091b      	lsrs	r3, r3, #4
 8000636:	b2db      	uxtb	r3, r3
 8000638:	461a      	mov	r2, r3
 800063a:	0092      	lsls	r2, r2, #2
 800063c:	4413      	add	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	73bb      	strb	r3, [r7, #14]
	return high + low;
 8000642:	7bba      	ldrb	r2, [r7, #14]
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	4413      	add	r3, r2
 8000648:	b2db      	uxtb	r3, r3
}
 800064a:	4618      	mov	r0, r3
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <HAL_UART_RxCpltCallback>:
uint8_t rx_data[10];
uint8_t str[] = "0\r\n";
uint8_t cnt = 0;
uint8_t buf;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a2e      	ldr	r2, [pc, #184]	@ (8000720 <HAL_UART_RxCpltCallback+0xc8>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d147      	bne.n	80006fa <HAL_UART_RxCpltCallback+0xa2>

		//HAL_UART_Transmit(&huart3, str, sizeof(str), 100);

		if(buf==' '){
 800066a:	4b2e      	ldr	r3, [pc, #184]	@ (8000724 <HAL_UART_RxCpltCallback+0xcc>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b20      	cmp	r3, #32
 8000670:	d131      	bne.n	80006d6 <HAL_UART_RxCpltCallback+0x7e>
			cnt=0;
 8000672:	4b2d      	ldr	r3, [pc, #180]	@ (8000728 <HAL_UART_RxCpltCallback+0xd0>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, rx_data, sizeof(rx_data), 100);
 8000678:	2364      	movs	r3, #100	@ 0x64
 800067a:	220a      	movs	r2, #10
 800067c:	492b      	ldr	r1, [pc, #172]	@ (800072c <HAL_UART_RxCpltCallback+0xd4>)
 800067e:	482c      	ldr	r0, [pc, #176]	@ (8000730 <HAL_UART_RxCpltCallback+0xd8>)
 8000680:	f006 fd70 	bl	8007164 <HAL_UART_Transmit>
			now_temp=0;
 8000684:	4b2b      	ldr	r3, [pc, #172]	@ (8000734 <HAL_UART_RxCpltCallback+0xdc>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
			now_temp+=rx_data[0]-'0';
 800068a:	4b28      	ldr	r3, [pc, #160]	@ (800072c <HAL_UART_RxCpltCallback+0xd4>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000692:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <HAL_UART_RxCpltCallback+0xdc>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4413      	add	r3, r2
 8000698:	4a26      	ldr	r2, [pc, #152]	@ (8000734 <HAL_UART_RxCpltCallback+0xdc>)
 800069a:	6013      	str	r3, [r2, #0]
			now_temp*=10;
 800069c:	4b25      	ldr	r3, [pc, #148]	@ (8000734 <HAL_UART_RxCpltCallback+0xdc>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4613      	mov	r3, r2
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	4413      	add	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <HAL_UART_RxCpltCallback+0xdc>)
 80006ac:	601a      	str	r2, [r3, #0]
			now_temp+=rx_data[1]-'0';
 80006ae:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <HAL_UART_RxCpltCallback+0xd4>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80006b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <HAL_UART_RxCpltCallback+0xdc>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000734 <HAL_UART_RxCpltCallback+0xdc>)
 80006be:	6013      	str	r3, [r2, #0]

			memset(rx_data,0,sizeof(rx_data));
 80006c0:	220a      	movs	r2, #10
 80006c2:	2100      	movs	r1, #0
 80006c4:	4819      	ldr	r0, [pc, #100]	@ (800072c <HAL_UART_RxCpltCallback+0xd4>)
 80006c6:	f02b f88a 	bl	802b7de <memset>
			HAL_UART_Receive_IT(&huart3, &buf, 1);
 80006ca:	2201      	movs	r2, #1
 80006cc:	4915      	ldr	r1, [pc, #84]	@ (8000724 <HAL_UART_RxCpltCallback+0xcc>)
 80006ce:	481a      	ldr	r0, [pc, #104]	@ (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 80006d0:	f006 fdd3 	bl	800727a <HAL_UART_Receive_IT>



			return;
 80006d4:	e021      	b.n	800071a <HAL_UART_RxCpltCallback+0xc2>
		}


		rx_data[cnt] = buf;
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <HAL_UART_RxCpltCallback+0xd0>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <HAL_UART_RxCpltCallback+0xcc>)
 80006de:	7819      	ldrb	r1, [r3, #0]
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <HAL_UART_RxCpltCallback+0xd4>)
 80006e2:	5499      	strb	r1, [r3, r2]
		cnt++;
 80006e4:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <HAL_UART_RxCpltCallback+0xd0>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <HAL_UART_RxCpltCallback+0xd0>)
 80006ee:	701a      	strb	r2, [r3, #0]

		HAL_UART_Receive_IT(&huart3, &buf, 1);
 80006f0:	2201      	movs	r2, #1
 80006f2:	490c      	ldr	r1, [pc, #48]	@ (8000724 <HAL_UART_RxCpltCallback+0xcc>)
 80006f4:	4810      	ldr	r0, [pc, #64]	@ (8000738 <HAL_UART_RxCpltCallback+0xe0>)
 80006f6:	f006 fdc0 	bl	800727a <HAL_UART_Receive_IT>


	}

	if (huart->Instance == USART1) {
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a0f      	ldr	r2, [pc, #60]	@ (800073c <HAL_UART_RxCpltCallback+0xe4>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d10a      	bne.n	800071a <HAL_UART_RxCpltCallback+0xc2>
			HAL_UART_Transmit(&huart1, rx_data, sizeof(rx_data), 100);
 8000704:	2364      	movs	r3, #100	@ 0x64
 8000706:	220a      	movs	r2, #10
 8000708:	4908      	ldr	r1, [pc, #32]	@ (800072c <HAL_UART_RxCpltCallback+0xd4>)
 800070a:	4809      	ldr	r0, [pc, #36]	@ (8000730 <HAL_UART_RxCpltCallback+0xd8>)
 800070c:	f006 fd2a 	bl	8007164 <HAL_UART_Transmit>

			HAL_UART_Receive_IT(&huart1, rx_data, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	4906      	ldr	r1, [pc, #24]	@ (800072c <HAL_UART_RxCpltCallback+0xd4>)
 8000714:	4806      	ldr	r0, [pc, #24]	@ (8000730 <HAL_UART_RxCpltCallback+0xd8>)
 8000716:	f006 fdb0 	bl	800727a <HAL_UART_Receive_IT>
	}



}
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40004800 	.word	0x40004800
 8000724:	2000041f 	.word	0x2000041f
 8000728:	2000041e 	.word	0x2000041e
 800072c:	20000414 	.word	0x20000414
 8000730:	20000344 	.word	0x20000344
 8000734:	2000007c 	.word	0x2000007c
 8000738:	2000038c 	.word	0x2000038c
 800073c:	40011000 	.word	0x40011000

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	@ 0x30
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f002 f80d 	bl	8002764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 f85d 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074e:	f000 fae3 	bl	8000d18 <MX_GPIO_Init>
  MX_CRC_Init();
 8000752:	f000 f8c5 	bl	80008e0 <MX_CRC_Init>
  MX_I2C3_Init();
 8000756:	f000 f909 	bl	800096c <MX_I2C3_Init>
  MX_SPI5_Init();
 800075a:	f000 f9fb 	bl	8000b54 <MX_SPI5_Init>
  MX_FMC_Init();
 800075e:	f000 fa83 	bl	8000c68 <MX_FMC_Init>
  MX_LTDC_Init();
 8000762:	f000 f943 	bl	80009ec <MX_LTDC_Init>
  MX_DMA2D_Init();
 8000766:	f000 f8cf 	bl	8000908 <MX_DMA2D_Init>
  MX_USART1_UART_Init();
 800076a:	f000 fa29 	bl	8000bc0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800076e:	f000 fa51 	bl	8000c14 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000772:	f000 f9c9 	bl	8000b08 <MX_RTC_Init>
  MX_TouchGFX_Init();
 8000776:	f00b fa66 	bl	800bc46 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 800077a:	f00b fa5d 	bl	800bc38 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  RTC_DateTypeDef date;
	date.Year = 0x22;
 800077e:	2322      	movs	r3, #34	@ 0x22
 8000780:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	date.Month = RTC_MONTH_MAY;
 8000784:	2305      	movs	r3, #5
 8000786:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	date.Date = 0x29;
 800078a:	2329      	movs	r3, #41	@ 0x29
 800078c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	date.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000790:	2307      	movs	r3, #7
 8000792:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BCD);
 8000796:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800079a:	2201      	movs	r2, #1
 800079c:	4619      	mov	r1, r3
 800079e:	4813      	ldr	r0, [pc, #76]	@ (80007ec <main+0xac>)
 80007a0:	f005 f9f5 	bl	8005b8e <HAL_RTC_SetDate>

	RTC_TimeTypeDef time;
	time.Hours = 0x18;
 80007a4:	2318      	movs	r3, #24
 80007a6:	763b      	strb	r3, [r7, #24]
	time.Minutes = 0x26;
 80007a8:	2326      	movs	r3, #38	@ 0x26
 80007aa:	767b      	strb	r3, [r7, #25]
	time.Seconds = 0x13;
 80007ac:	2313      	movs	r3, #19
 80007ae:	76bb      	strb	r3, [r7, #26]
	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BCD);
 80007b0:	f107 0318 	add.w	r3, r7, #24
 80007b4:	2201      	movs	r2, #1
 80007b6:	4619      	mov	r1, r3
 80007b8:	480c      	ldr	r0, [pc, #48]	@ (80007ec <main+0xac>)
 80007ba:	f005 f8f0 	bl	800599e <HAL_RTC_SetTime>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007be:	f007 fe35 	bl	800842c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007c2:	4a0b      	ldr	r2, [pc, #44]	@ (80007f0 <main+0xb0>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	480b      	ldr	r0, [pc, #44]	@ (80007f4 <main+0xb4>)
 80007c8:	f007 fe7a 	bl	80084c0 <osThreadNew>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4a0a      	ldr	r2, [pc, #40]	@ (80007f8 <main+0xb8>)
 80007d0:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 80007d2:	4a0a      	ldr	r2, [pc, #40]	@ (80007fc <main+0xbc>)
 80007d4:	2100      	movs	r1, #0
 80007d6:	480a      	ldr	r0, [pc, #40]	@ (8000800 <main+0xc0>)
 80007d8:	f007 fe72 	bl	80084c0 <osThreadNew>
 80007dc:	4603      	mov	r3, r0
 80007de:	4a09      	ldr	r2, [pc, #36]	@ (8000804 <main+0xc4>)
 80007e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007e2:	f007 fe47 	bl	8008474 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e6:	bf00      	nop
 80007e8:	e7fd      	b.n	80007e6 <main+0xa6>
 80007ea:	bf00      	nop
 80007ec:	200002cc 	.word	0x200002cc
 80007f0:	0802d6d0 	.word	0x0802d6d0
 80007f4:	080012d5 	.word	0x080012d5
 80007f8:	20000408 	.word	0x20000408
 80007fc:	0802d6f4 	.word	0x0802d6f4
 8000800:	0800bc57 	.word	0x0800bc57
 8000804:	2000040c 	.word	0x2000040c

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	@ 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	2230      	movs	r2, #48	@ 0x30
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f02a ffe1 	bl	802b7de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	4b29      	ldr	r3, [pc, #164]	@ (80008d8 <SystemClock_Config+0xd0>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	4a28      	ldr	r2, [pc, #160]	@ (80008d8 <SystemClock_Config+0xd0>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083a:	6413      	str	r3, [r2, #64]	@ 0x40
 800083c:	4b26      	ldr	r3, [pc, #152]	@ (80008d8 <SystemClock_Config+0xd0>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <SystemClock_Config+0xd4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a22      	ldr	r2, [pc, #136]	@ (80008dc <SystemClock_Config+0xd4>)
 8000852:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b20      	ldr	r3, [pc, #128]	@ (80008dc <SystemClock_Config+0xd4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000864:	2309      	movs	r3, #9
 8000866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000868:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800086e:	2301      	movs	r3, #1
 8000870:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800087a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800087c:	2308      	movs	r3, #8
 800087e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000880:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000884:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800088a:	2304      	movs	r3, #4
 800088c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	4618      	mov	r0, r3
 8000894:	f004 f976 	bl	8004b84 <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800089e:	f000 fdb9 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2302      	movs	r3, #2
 80008a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2105      	movs	r1, #5
 80008c0:	4618      	mov	r0, r3
 80008c2:	f004 fbd7 	bl	8005074 <HAL_RCC_ClockConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80008cc:	f000 fda2 	bl	8001414 <Error_Handler>
  }
}
 80008d0:	bf00      	nop
 80008d2:	3750      	adds	r7, #80	@ 0x50
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_CRC_Init+0x20>)
 80008e6:	4a07      	ldr	r2, [pc, #28]	@ (8000904 <MX_CRC_Init+0x24>)
 80008e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_CRC_Init+0x20>)
 80008ec:	f002 f882 	bl	80029f4 <HAL_CRC_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008f6:	f000 fd8d 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000188 	.word	0x20000188
 8000904:	40023000 	.word	0x40023000

08000908 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_DMA2D_Init+0x5c>)
 800090e:	4a16      	ldr	r2, [pc, #88]	@ (8000968 <MX_DMA2D_Init+0x60>)
 8000910:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_DMA2D_Init+0x5c>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_DMA2D_Init+0x5c>)
 800091a:	2202      	movs	r2, #2
 800091c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_DMA2D_Init+0x5c>)
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_DMA2D_Init+0x5c>)
 8000926:	2200      	movs	r2, #0
 8000928:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <MX_DMA2D_Init+0x5c>)
 800092c:	2202      	movs	r2, #2
 800092e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000930:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <MX_DMA2D_Init+0x5c>)
 8000932:	2200      	movs	r2, #0
 8000934:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <MX_DMA2D_Init+0x5c>)
 8000938:	2200      	movs	r2, #0
 800093a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800093c:	4809      	ldr	r0, [pc, #36]	@ (8000964 <MX_DMA2D_Init+0x5c>)
 800093e:	f002 f907 	bl	8002b50 <HAL_DMA2D_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000948:	f000 fd64 	bl	8001414 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800094c:	2101      	movs	r1, #1
 800094e:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_DMA2D_Init+0x5c>)
 8000950:	f002 fa58 	bl	8002e04 <HAL_DMA2D_ConfigLayer>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800095a:	f000 fd5b 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000190 	.word	0x20000190
 8000968:	4002b000 	.word	0x4002b000

0800096c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000970:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <MX_I2C3_Init+0x74>)
 8000972:	4a1c      	ldr	r2, [pc, #112]	@ (80009e4 <MX_I2C3_Init+0x78>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_I2C3_Init+0x74>)
 8000978:	4a1b      	ldr	r2, [pc, #108]	@ (80009e8 <MX_I2C3_Init+0x7c>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_I2C3_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_I2C3_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000988:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_I2C3_Init+0x74>)
 800098a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800098e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <MX_I2C3_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000996:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <MX_I2C3_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099c:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <MX_I2C3_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_I2C3_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009a8:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <MX_I2C3_Init+0x74>)
 80009aa:	f002 fcb5 	bl	8003318 <HAL_I2C_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80009b4:	f000 fd2e 	bl	8001414 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80009b8:	2110      	movs	r1, #16
 80009ba:	4809      	ldr	r0, [pc, #36]	@ (80009e0 <MX_I2C3_Init+0x74>)
 80009bc:	f003 fcd0 	bl	8004360 <HAL_I2CEx_ConfigAnalogFilter>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80009c6:	f000 fd25 	bl	8001414 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_I2C3_Init+0x74>)
 80009ce:	f003 fd03 	bl	80043d8 <HAL_I2CEx_ConfigDigitalFilter>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80009d8:	f000 fd1c 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200001d0 	.word	0x200001d0
 80009e4:	40005c00 	.word	0x40005c00
 80009e8:	000186a0 	.word	0x000186a0

080009ec <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	@ 0x38
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2234      	movs	r2, #52	@ 0x34
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f02a fef0 	bl	802b7de <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80009fe:	4b3e      	ldr	r3, [pc, #248]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a00:	4a3e      	ldr	r2, [pc, #248]	@ (8000afc <MX_LTDC_Init+0x110>)
 8000a02:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a04:	4b3c      	ldr	r3, [pc, #240]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a10:	4b39      	ldr	r3, [pc, #228]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a16:	4b38      	ldr	r3, [pc, #224]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000a1c:	4b36      	ldr	r3, [pc, #216]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a1e:	2209      	movs	r2, #9
 8000a20:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000a22:	4b35      	ldr	r3, [pc, #212]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000a28:	4b33      	ldr	r3, [pc, #204]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a2a:	221d      	movs	r2, #29
 8000a2c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000a2e:	4b32      	ldr	r3, [pc, #200]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a30:	2203      	movs	r2, #3
 8000a32:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000a34:	4b30      	ldr	r3, [pc, #192]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a36:	f240 120d 	movw	r2, #269	@ 0x10d
 8000a3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a3e:	f240 1243 	movw	r2, #323	@ 0x143
 8000a42:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000a44:	4b2c      	ldr	r3, [pc, #176]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a46:	f240 1217 	movw	r2, #279	@ 0x117
 8000a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a4e:	f240 1247 	movw	r2, #327	@ 0x147
 8000a52:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a54:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a5c:	4b26      	ldr	r3, [pc, #152]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a64:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a6c:	4822      	ldr	r0, [pc, #136]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000a6e:	f003 fcf3 	bl	8004458 <HAL_LTDC_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000a78:	f000 fccc 	bl	8001414 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000a80:	23f0      	movs	r3, #240	@ 0xf0
 8000a82:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000a88:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a8c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a92:	23ff      	movs	r3, #255	@ 0xff
 8000a94:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000aa0:	2305      	movs	r3, #5
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000aa8:	23f0      	movs	r3, #240	@ 0xf0
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000aac:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ab0:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <MX_LTDC_Init+0x10c>)
 8000acc:	f003 fe4c 	bl	8004768 <HAL_LTDC_ConfigLayer>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000ad6:	f000 fc9d 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
    /*Select the device */
  LcdDrv = &ili9341_drv;
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_LTDC_Init+0x114>)
 8000adc:	4a09      	ldr	r2, [pc, #36]	@ (8000b04 <MX_LTDC_Init+0x118>)
 8000ade:	601a      	str	r2, [r3, #0]
  /* LCD Init */
  LcdDrv->Init();
 8000ae0:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <MX_LTDC_Init+0x114>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4798      	blx	r3

  LcdDrv->DisplayOff();
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <MX_LTDC_Init+0x114>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	4798      	blx	r3
  /* USER CODE END LTDC_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3738      	adds	r7, #56	@ 0x38
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000224 	.word	0x20000224
 8000afc:	40016800 	.word	0x40016800
 8000b00:	20000410 	.word	0x20000410
 8000b04:	20000010 	.word	0x20000010

08000b08 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b0e:	4a10      	ldr	r2, [pc, #64]	@ (8000b50 <MX_RTC_Init+0x48>)
 8000b10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b1a:	227f      	movs	r2, #127	@ 0x7f
 8000b1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b20:	22ff      	movs	r2, #255	@ 0xff
 8000b22:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b38:	f004 feae 	bl	8005898 <HAL_RTC_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b42:	f000 fc67 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200002cc 	.word	0x200002cc
 8000b50:	40002800 	.word	0x40002800

08000b54 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000b58:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <MX_SPI5_Init+0x64>)
 8000b5a:	4a18      	ldr	r2, [pc, #96]	@ (8000bbc <MX_SPI5_Init+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <MX_SPI5_Init+0x64>)
 8000b60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b64:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000b66:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_SPI5_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_SPI5_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <MX_SPI5_Init+0x64>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_SPI5_Init+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <MX_SPI5_Init+0x64>)
 8000b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b84:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <MX_SPI5_Init+0x64>)
 8000b88:	2218      	movs	r2, #24
 8000b8a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <MX_SPI5_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <MX_SPI5_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b98:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <MX_SPI5_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <MX_SPI5_Init+0x64>)
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	@ (8000bb8 <MX_SPI5_Init+0x64>)
 8000ba6:	f005 fa14 	bl	8005fd2 <HAL_SPI_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000bb0:	f000 fc30 	bl	8001414 <Error_Handler>



  /* USER CODE END SPI5_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200002ec 	.word	0x200002ec
 8000bbc:	40015000 	.word	0x40015000

08000bc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	@ (8000c10 <MX_USART1_UART_Init+0x50>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000bca:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000bcc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000bd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000bf8:	f006 fa64 	bl	80070c4 <HAL_UART_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c02:	f000 fc07 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000344 	.word	0x20000344
 8000c10:	40011000 	.word	0x40011000

08000c14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <MX_USART3_UART_Init+0x50>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c20:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c4c:	f006 fa3a 	bl	80070c4 <HAL_UART_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c56:	f000 fbdd 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000038c 	.word	0x2000038c
 8000c64:	40004800 	.word	0x40004800

08000c68 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	@ 0x30
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	615a      	str	r2, [r3, #20]
 8000c80:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c82:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <MX_FMC_Init+0xa8>)
 8000c84:	4a23      	ldr	r2, [pc, #140]	@ (8000d14 <MX_FMC_Init+0xac>)
 8000c86:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c88:	4b21      	ldr	r3, [pc, #132]	@ (8000d10 <MX_FMC_Init+0xa8>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <MX_FMC_Init+0xa8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <MX_FMC_Init+0xa8>)
 8000c96:	2204      	movs	r2, #4
 8000c98:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <MX_FMC_Init+0xa8>)
 8000c9c:	2210      	movs	r2, #16
 8000c9e:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_FMC_Init+0xa8>)
 8000ca2:	2240      	movs	r2, #64	@ 0x40
 8000ca4:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <MX_FMC_Init+0xa8>)
 8000ca8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000cac:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <MX_FMC_Init+0xa8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <MX_FMC_Init+0xa8>)
 8000cb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cba:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_FMC_Init+0xa8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <MX_FMC_Init+0xa8>)
 8000cc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc8:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 4;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  SdramTiming.RPDelay = 2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SdramTiming.RCDDelay = 2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4808      	ldr	r0, [pc, #32]	@ (8000d10 <MX_FMC_Init+0xa8>)
 8000cee:	f005 f8df 	bl	8005eb0 <HAL_SDRAM_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8000cf8:	f000 fb8c 	bl	8001414 <Error_Handler>
  /* USER CODE BEGIN FMC_Init 2 */

  FMC_SDRAM_CommandTypeDef command;

  /* Program the SDRAM external device */
  BSP_SDRAM_Initialization_Sequence(&hsdram1, &command);
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4803      	ldr	r0, [pc, #12]	@ (8000d10 <MX_FMC_Init+0xa8>)
 8000d02:	f000 f8e3 	bl	8000ecc <BSP_SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 8000d06:	bf00      	nop
 8000d08:	3730      	adds	r7, #48	@ 0x30
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200003d4 	.word	0x200003d4
 8000d14:	a0000140 	.word	0xa0000140

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08e      	sub	sp, #56	@ 0x38
 8000d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
 8000d32:	4b61      	ldr	r3, [pc, #388]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a60      	ldr	r2, [pc, #384]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000d38:	f043 0310 	orr.w	r3, r3, #16
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b5e      	ldr	r3, [pc, #376]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0310 	and.w	r3, r3, #16
 8000d46:	623b      	str	r3, [r7, #32]
 8000d48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
 8000d4e:	4b5a      	ldr	r3, [pc, #360]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a59      	ldr	r2, [pc, #356]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000d54:	f043 0320 	orr.w	r3, r3, #32
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b57      	ldr	r3, [pc, #348]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0320 	and.w	r3, r3, #32
 8000d62:	61fb      	str	r3, [r7, #28]
 8000d64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
 8000d6a:	4b53      	ldr	r3, [pc, #332]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a52      	ldr	r2, [pc, #328]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b50      	ldr	r3, [pc, #320]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d7e:	61bb      	str	r3, [r7, #24]
 8000d80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	4b4c      	ldr	r3, [pc, #304]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a4b      	ldr	r2, [pc, #300]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b49      	ldr	r3, [pc, #292]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b45      	ldr	r3, [pc, #276]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a44      	ldr	r2, [pc, #272]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b42      	ldr	r3, [pc, #264]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a3d      	ldr	r2, [pc, #244]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	4b37      	ldr	r3, [pc, #220]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a36      	ldr	r2, [pc, #216]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000de0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b34      	ldr	r3, [pc, #208]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b30      	ldr	r3, [pc, #192]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a2f      	ldr	r2, [pc, #188]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000dfc:	f043 0308 	orr.w	r3, r3, #8
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb8 <MX_GPIO_Init+0x1a0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	213c      	movs	r1, #60	@ 0x3c
 8000e12:	482a      	ldr	r0, [pc, #168]	@ (8000ebc <MX_GPIO_Init+0x1a4>)
 8000e14:	f002 fa4c 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2104      	movs	r1, #4
 8000e1c:	4828      	ldr	r0, [pc, #160]	@ (8000ec0 <MX_GPIO_Init+0x1a8>)
 8000e1e:	f002 fa47 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000e28:	4826      	ldr	r0, [pc, #152]	@ (8000ec4 <MX_GPIO_Init+0x1ac>)
 8000e2a:	f002 fa41 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e34:	4824      	ldr	r0, [pc, #144]	@ (8000ec8 <MX_GPIO_Init+0x1b0>)
 8000e36:	f002 fa3b 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VSYNC_FREQ_Pin RENDER_TIME_Pin FRAME_RATE_Pin MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin;
 8000e3a:	233c      	movs	r3, #60	@ 0x3c
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	481a      	ldr	r0, [pc, #104]	@ (8000ebc <MX_GPIO_Init+0x1a4>)
 8000e52:	f002 f869 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e56:	2304      	movs	r3, #4
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e62:	2302      	movs	r3, #2
 8000e64:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4814      	ldr	r0, [pc, #80]	@ (8000ec0 <MX_GPIO_Init+0x1a8>)
 8000e6e:	f002 f85b 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e72:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e80:	2302      	movs	r3, #2
 8000e82:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480e      	ldr	r0, [pc, #56]	@ (8000ec4 <MX_GPIO_Init+0x1ac>)
 8000e8c:	f002 f84c 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4807      	ldr	r0, [pc, #28]	@ (8000ec8 <MX_GPIO_Init+0x1b0>)
 8000eaa:	f002 f83d 	bl	8002f28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eae:	bf00      	nop
 8000eb0:	3738      	adds	r7, #56	@ 0x38
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	40020c00 	.word	0x40020c00
 8000ec8:	40021800 	.word	0x40021800

08000ecc <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
static void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
 __IO uint32_t tmpmrd =0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	2201      	movs	r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2208      	movs	r2, #8
 8000ee4:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000ef2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f005 f80d 	bl	8005f18 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000efe:	2001      	movs	r0, #1
 8000f00:	f001 fc72 	bl	80027e8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode             = FMC_SDRAM_CMD_PALL;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	2202      	movs	r2, #2
 8000f08:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	2201      	movs	r2, #1
 8000f14:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000f1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f20:	6839      	ldr	r1, [r7, #0]
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f004 fff8 	bl	8005f18 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command->CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	2208      	movs	r2, #8
 8000f32:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 4;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2204      	movs	r2, #4
 8000f38:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000f40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f44:	6839      	ldr	r1, [r7, #0]
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f004 ffe6 	bl	8005f18 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000f4c:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8000f50:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	2204      	movs	r2, #4
 8000f56:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2201      	movs	r2, #1
 8000f62:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = tmpmrd;
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000f6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f6e:	6839      	ldr	r1, [r7, #0]
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f004 ffd1 	bl	8005f18 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8000f76:	f240 516a 	movw	r1, #1386	@ 0x56a
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f005 f801 	bl	8005f82 <HAL_SDRAM_ProgramRefreshRate>
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  //Dummy function called when initializing to stmpe811 to setup the i2c.
  //This is done with cubmx and is therfore not done here.
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  //Dummy function called when initializing to stmpe811 to setup interupt for the i2c.
  //The interupt is not used in our case, therefore nothing is done here.
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	71bb      	strb	r3, [r7, #6]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	717b      	strb	r3, [r7, #5]
  I2C3_WriteData(Addr, Reg, Value);
 8000fb6:	797a      	ldrb	r2, [r7, #5]
 8000fb8:	79b9      	ldrb	r1, [r7, #6]
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f839 	bl	8001034 <I2C3_WriteData>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	71bb      	strb	r3, [r7, #6]
  return I2C3_ReadData(Addr, Reg);
 8000fda:	79ba      	ldrb	r2, [r7, #6]
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f84b 	bl	800107c <I2C3_ReadData>
 8000fe6:	4603      	mov	r3, r0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	603a      	str	r2, [r7, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	460b      	mov	r3, r1
 8001000:	71bb      	strb	r3, [r7, #6]
 8001002:	4613      	mov	r3, r2
 8001004:	80bb      	strh	r3, [r7, #4]
 return I2C3_ReadBuffer(Addr, Reg, pBuffer, Length);
 8001006:	88bb      	ldrh	r3, [r7, #4]
 8001008:	79b9      	ldrb	r1, [r7, #6]
 800100a:	79f8      	ldrb	r0, [r7, #7]
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	f000 f85d 	bl	80010cc <I2C3_ReadBuffer>
 8001012:	4603      	mov	r3, r0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f001 fbdf 	bl	80027e8 <HAL_Delay>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <I2C3_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2C3_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af04      	add	r7, sp, #16
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	460b      	mov	r3, r1
 8001040:	71bb      	strb	r3, [r7, #6]
 8001042:	4613      	mov	r3, r2
 8001044:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	b299      	uxth	r1, r3
 800104e:	79bb      	ldrb	r3, [r7, #6]
 8001050:	b29a      	uxth	r2, r3
 8001052:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <I2C3_WriteData+0x40>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	2301      	movs	r3, #1
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	1d7b      	adds	r3, r7, #5
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	4805      	ldr	r0, [pc, #20]	@ (8001078 <I2C3_WriteData+0x44>)
 8001064:	f002 fa9c 	bl	80035a0 <HAL_I2C_Mem_Write>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();
  }
}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000004 	.word	0x20000004
 8001078:	200001d0 	.word	0x200001d0

0800107c <I2C3_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2C3_ReadData(uint8_t Addr, uint8_t Reg)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af04      	add	r7, sp, #16
 8001082:	4603      	mov	r3, r0
 8001084:	460a      	mov	r2, r1
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	b299      	uxth	r1, r3
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <I2C3_ReadData+0x48>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	f107 030e 	add.w	r3, r7, #14
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2301      	movs	r3, #1
 80010ae:	4806      	ldr	r0, [pc, #24]	@ (80010c8 <I2C3_ReadData+0x4c>)
 80010b0:	f002 fb70 	bl	8003794 <HAL_I2C_Mem_Read>
 80010b4:	4603      	mov	r3, r0
 80010b6:	73fb      	strb	r3, [r7, #15]
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();

  }
  return value;
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000004 	.word	0x20000004
 80010c8:	200001d0 	.word	0x200001d0

080010cc <I2C3_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2C3_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	603a      	str	r2, [r7, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	460b      	mov	r3, r1
 80010dc:	71bb      	strb	r3, [r7, #6]
 80010de:	4613      	mov	r3, r2
 80010e0:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	b299      	uxth	r1, r3
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <I2C3_ReadBuffer+0x50>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	88bb      	ldrh	r3, [r7, #4]
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	4808      	ldr	r0, [pc, #32]	@ (8001120 <I2C3_ReadBuffer+0x54>)
 8001100:	f002 fb48 	bl	8003794 <HAL_I2C_Mem_Read>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status == HAL_OK)
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <I2C3_ReadBuffer+0x46>
  {
    return 0;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <I2C3_ReadBuffer+0x48>
  else
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();

    return 1;
 8001112:	2301      	movs	r3, #1
  }
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000004 	.word	0x20000004
 8001120:	200001d0 	.word	0x200001d0

08001124 <SPI5_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPI5_Read(uint8_t ReadSize)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <SPI5_Read+0x38>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f107 0108 	add.w	r1, r7, #8
 800113e:	4808      	ldr	r0, [pc, #32]	@ (8001160 <SPI5_Read+0x3c>)
 8001140:	f005 f913 	bl	800636a <HAL_SPI_Receive>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SPI5_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
 800114e:	f000 f827 	bl	80011a0 <SPI5_Error>
  }

  return readvalue;
 8001152:	68bb      	ldr	r3, [r7, #8]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000008 	.word	0x20000008
 8001160:	200002ec 	.word	0x200002ec

08001164 <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <SPI5_Write+0x34>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	1db9      	adds	r1, r7, #6
 8001178:	2201      	movs	r2, #1
 800117a:	4808      	ldr	r0, [pc, #32]	@ (800119c <SPI5_Write+0x38>)
 800117c:	f004 ffb2 	bl	80060e4 <HAL_SPI_Transmit>
 8001180:	4603      	mov	r3, r0
 8001182:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SPI5_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
 800118a:	f000 f809 	bl	80011a0 <SPI5_Error>
  }
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008
 800119c:	200002ec 	.word	0x200002ec

080011a0 <SPI5_Error>:

/**
  * @brief  SPI5 error treatment function.
  */
static void SPI5_Error(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  //HAL_SPI_DeInit(&SpiHandle);

  /* Re- Initialize the SPI communication BUS */
  //SPIx_Init();
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <LCD_IO_Init>:

void LCD_IO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Set or Reset the control line */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2104      	movs	r1, #4
 80011b8:	4804      	ldr	r0, [pc, #16]	@ (80011cc <LCD_IO_Init+0x1c>)
 80011ba:	f002 f879 	bl	80032b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	2104      	movs	r1, #4
 80011c2:	4802      	ldr	r0, [pc, #8]	@ (80011cc <LCD_IO_Init+0x1c>)
 80011c4:	f002 f874 	bl	80032b0 <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020800 	.word	0x40020800

080011d0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011e0:	480a      	ldr	r0, [pc, #40]	@ (800120c <LCD_IO_WriteData+0x3c>)
 80011e2:	f002 f865 	bl	80032b0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2104      	movs	r1, #4
 80011ea:	4809      	ldr	r0, [pc, #36]	@ (8001210 <LCD_IO_WriteData+0x40>)
 80011ec:	f002 f860 	bl	80032b0 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ffb6 	bl	8001164 <SPI5_Write>

  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2104      	movs	r1, #4
 80011fc:	4804      	ldr	r0, [pc, #16]	@ (8001210 <LCD_IO_WriteData+0x40>)
 80011fe:	f002 f857 	bl	80032b0 <HAL_GPIO_WritePin>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40020800 	.word	0x40020800

08001214 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001224:	480a      	ldr	r0, [pc, #40]	@ (8001250 <LCD_IO_WriteReg+0x3c>)
 8001226:	f002 f843 	bl	80032b0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2104      	movs	r1, #4
 800122e:	4809      	ldr	r0, [pc, #36]	@ (8001254 <LCD_IO_WriteReg+0x40>)
 8001230:	f002 f83e 	bl	80032b0 <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	b29b      	uxth	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff93 	bl	8001164 <SPI5_Write>

  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800123e:	2201      	movs	r2, #1
 8001240:	2104      	movs	r1, #4
 8001242:	4804      	ldr	r0, [pc, #16]	@ (8001254 <LCD_IO_WriteReg+0x40>)
 8001244:	f002 f834 	bl	80032b0 <HAL_GPIO_WritePin>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40020800 	.word	0x40020800

08001258 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	80fb      	strh	r3, [r7, #6]
 8001264:	4613      	mov	r3, r2
 8001266:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2104      	movs	r1, #4
 8001270:	4810      	ldr	r0, [pc, #64]	@ (80012b4 <LCD_IO_ReadData+0x5c>)
 8001272:	f002 f81d 	bl	80032b0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800127c:	480e      	ldr	r0, [pc, #56]	@ (80012b8 <LCD_IO_ReadData+0x60>)
 800127e:	f002 f817 	bl	80032b0 <HAL_GPIO_WritePin>

  SPI5_Write(RegValue);
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff6d 	bl	8001164 <SPI5_Write>

  readvalue = SPI5_Read(ReadSize);
 800128a:	797b      	ldrb	r3, [r7, #5]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff49 	bl	8001124 <SPI5_Read>
 8001292:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800129a:	4807      	ldr	r0, [pc, #28]	@ (80012b8 <LCD_IO_ReadData+0x60>)
 800129c:	f002 f808 	bl	80032b0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2104      	movs	r1, #4
 80012a4:	4803      	ldr	r0, [pc, #12]	@ (80012b4 <LCD_IO_ReadData+0x5c>)
 80012a6:	f002 f803 	bl	80032b0 <HAL_GPIO_WritePin>

  return readvalue;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020c00 	.word	0x40020c00

080012bc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f001 fa8f 	bl	80027e8 <HAL_Delay>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012d8:	b092      	sub	sp, #72	@ 0x48
 80012da:	af04      	add	r7, sp, #16
 80012dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	RTC_DateTypeDef date;
	date.Year = 0x22;
 80012de:	2322      	movs	r3, #34	@ 0x22
 80012e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	date.Month = RTC_MONTH_MAY;
 80012e4:	2305      	movs	r3, #5
 80012e6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	date.Date = 0x29;
 80012ea:	2329      	movs	r3, #41	@ 0x29
 80012ec:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	date.WeekDay = RTC_WEEKDAY_SUNDAY;
 80012f0:	2307      	movs	r3, #7
 80012f2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BCD);
 80012f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012fa:	2201      	movs	r2, #1
 80012fc:	4619      	mov	r1, r3
 80012fe:	4836      	ldr	r0, [pc, #216]	@ (80013d8 <StartDefaultTask+0x104>)
 8001300:	f004 fc45 	bl	8005b8e <HAL_RTC_SetDate>

	RTC_TimeTypeDef time;
	time.Hours = 0x18;
 8001304:	2318      	movs	r3, #24
 8001306:	f887 3020 	strb.w	r3, [r7, #32]
	time.Minutes = 0x26;
 800130a:	2326      	movs	r3, #38	@ 0x26
 800130c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	time.Seconds = 0x13;
 8001310:	2313      	movs	r3, #19
 8001312:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BCD);
 8001316:	f107 0320 	add.w	r3, r7, #32
 800131a:	2201      	movs	r2, #1
 800131c:	4619      	mov	r1, r3
 800131e:	482e      	ldr	r0, [pc, #184]	@ (80013d8 <StartDefaultTask+0x104>)
 8001320:	f004 fb3d 	bl	800599e <HAL_RTC_SetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BCD);
 8001324:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001328:	2201      	movs	r2, #1
 800132a:	4619      	mov	r1, r3
 800132c:	482a      	ldr	r0, [pc, #168]	@ (80013d8 <StartDefaultTask+0x104>)
 800132e:	f004 fcb2 	bl	8005c96 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BCD);
 8001332:	f107 0320 	add.w	r3, r7, #32
 8001336:	2201      	movs	r2, #1
 8001338:	4619      	mov	r1, r3
 800133a:	4827      	ldr	r0, [pc, #156]	@ (80013d8 <StartDefaultTask+0x104>)
 800133c:	f004 fbc9 	bl	8005ad2 <HAL_RTC_GetTime>
	  char msg[21];
		sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n",
		B2D(date.Year) + 2000, B2D(date.Month), B2D(date.Date),
 8001340:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f96b 	bl	8000620 <B2D>
 800134a:	4603      	mov	r3, r0
		sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n",
 800134c:	f503 64fa 	add.w	r4, r3, #2000	@ 0x7d0
		B2D(date.Year) + 2000, B2D(date.Month), B2D(date.Date),
 8001350:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f963 	bl	8000620 <B2D>
 800135a:	4603      	mov	r3, r0
		sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n",
 800135c:	4698      	mov	r8, r3
		B2D(date.Year) + 2000, B2D(date.Month), B2D(date.Date),
 800135e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f95c 	bl	8000620 <B2D>
 8001368:	4603      	mov	r3, r0
		sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n",
 800136a:	461d      	mov	r5, r3
		B2D(time.Hours), B2D(time.Minutes), B2D(time.Seconds));
 800136c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f955 	bl	8000620 <B2D>
 8001376:	4603      	mov	r3, r0
		sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n",
 8001378:	461e      	mov	r6, r3
		B2D(time.Hours), B2D(time.Minutes), B2D(time.Seconds));
 800137a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f94e 	bl	8000620 <B2D>
 8001384:	4603      	mov	r3, r0
		sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n",
 8001386:	603b      	str	r3, [r7, #0]
		B2D(time.Hours), B2D(time.Minutes), B2D(time.Seconds));
 8001388:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f947 	bl	8000620 <B2D>
 8001392:	4603      	mov	r3, r0
		sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n",
 8001394:	f107 0008 	add.w	r0, r7, #8
 8001398:	9303      	str	r3, [sp, #12]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	9601      	str	r6, [sp, #4]
 80013a0:	9500      	str	r5, [sp, #0]
 80013a2:	4643      	mov	r3, r8
 80013a4:	4622      	mov	r2, r4
 80013a6:	490d      	ldr	r1, [pc, #52]	@ (80013dc <StartDefaultTask+0x108>)
 80013a8:	f02a f9b6 	bl	802b718 <siprintf>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 80013ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013b0:	480b      	ldr	r0, [pc, #44]	@ (80013e0 <StartDefaultTask+0x10c>)
 80013b2:	f001 ff96 	bl	80032e2 <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg), 100);
 80013b6:	f107 0108 	add.w	r1, r7, #8
 80013ba:	2364      	movs	r3, #100	@ 0x64
 80013bc:	2215      	movs	r2, #21
 80013be:	4809      	ldr	r0, [pc, #36]	@ (80013e4 <StartDefaultTask+0x110>)
 80013c0:	f005 fed0 	bl	8007164 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart3, &buf, 1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	4908      	ldr	r1, [pc, #32]	@ (80013e8 <StartDefaultTask+0x114>)
 80013c8:	4808      	ldr	r0, [pc, #32]	@ (80013ec <StartDefaultTask+0x118>)
 80013ca:	f005 ff56 	bl	800727a <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {


    osDelay(100);
 80013ce:	2064      	movs	r0, #100	@ 0x64
 80013d0:	f007 f908 	bl	80085e4 <osDelay>
 80013d4:	e7fb      	b.n	80013ce <StartDefaultTask+0xfa>
 80013d6:	bf00      	nop
 80013d8:	200002cc 	.word	0x200002cc
 80013dc:	0802c790 	.word	0x0802c790
 80013e0:	40021800 	.word	0x40021800
 80013e4:	20000344 	.word	0x20000344
 80013e8:	2000041f 	.word	0x2000041f
 80013ec:	2000038c 	.word	0x2000038c

080013f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a04      	ldr	r2, [pc, #16]	@ (8001410 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001402:	f001 f9d1 	bl	80027a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40001000 	.word	0x40001000

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <HAL_MspInit+0x54>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	4a11      	ldr	r2, [pc, #68]	@ (8001478 <HAL_MspInit+0x54>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001438:	6453      	str	r3, [r2, #68]	@ 0x44
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <HAL_MspInit+0x54>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <HAL_MspInit+0x54>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <HAL_MspInit+0x54>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	@ 0x40
 8001456:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <HAL_MspInit+0x54>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	210f      	movs	r1, #15
 8001466:	f06f 0001 	mvn.w	r0, #1
 800146a:	f001 fa99 	bl	80029a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <HAL_CRC_MspInit+0x3c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d10d      	bne.n	80014aa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <HAL_CRC_MspInit+0x40>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a09      	ldr	r2, [pc, #36]	@ (80014bc <HAL_CRC_MspInit+0x40>)
 8001498:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <HAL_CRC_MspInit+0x40>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023000 	.word	0x40023000
 80014bc:	40023800 	.word	0x40023800

080014c0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001508 <HAL_DMA2D_MspInit+0x48>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d115      	bne.n	80014fe <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <HAL_DMA2D_MspInit+0x4c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a0c      	ldr	r2, [pc, #48]	@ (800150c <HAL_DMA2D_MspInit+0x4c>)
 80014dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <HAL_DMA2D_MspInit+0x4c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2105      	movs	r1, #5
 80014f2:	205a      	movs	r0, #90	@ 0x5a
 80014f4:	f001 fa54 	bl	80029a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80014f8:	205a      	movs	r0, #90	@ 0x5a
 80014fa:	f001 fa6d 	bl	80029d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	4002b000 	.word	0x4002b000
 800150c:	40023800 	.word	0x40023800

08001510 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a29      	ldr	r2, [pc, #164]	@ (80015d4 <HAL_I2C_MspInit+0xc4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d14b      	bne.n	80015ca <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b28      	ldr	r3, [pc, #160]	@ (80015d8 <HAL_I2C_MspInit+0xc8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a27      	ldr	r2, [pc, #156]	@ (80015d8 <HAL_I2C_MspInit+0xc8>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b25      	ldr	r3, [pc, #148]	@ (80015d8 <HAL_I2C_MspInit+0xc8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b21      	ldr	r3, [pc, #132]	@ (80015d8 <HAL_I2C_MspInit+0xc8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a20      	ldr	r2, [pc, #128]	@ (80015d8 <HAL_I2C_MspInit+0xc8>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <HAL_I2C_MspInit+0xc8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800156a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001570:	2312      	movs	r3, #18
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001574:	2301      	movs	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800157c:	2304      	movs	r3, #4
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4815      	ldr	r0, [pc, #84]	@ (80015dc <HAL_I2C_MspInit+0xcc>)
 8001588:	f001 fcce 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800158c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001592:	2312      	movs	r3, #18
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001596:	2301      	movs	r3, #1
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800159e:	2304      	movs	r3, #4
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	480d      	ldr	r0, [pc, #52]	@ (80015e0 <HAL_I2C_MspInit+0xd0>)
 80015aa:	f001 fcbd 	bl	8002f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <HAL_I2C_MspInit+0xc8>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	4a08      	ldr	r2, [pc, #32]	@ (80015d8 <HAL_I2C_MspInit+0xc8>)
 80015b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <HAL_I2C_MspInit+0xc8>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	@ 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40005c00 	.word	0x40005c00
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020000 	.word	0x40020000

080015e4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b09a      	sub	sp, #104	@ 0x68
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001600:	2230      	movs	r2, #48	@ 0x30
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f02a f8ea 	bl	802b7de <memset>
  if(hltdc->Instance==LTDC)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a85      	ldr	r2, [pc, #532]	@ (8001824 <HAL_LTDC_MspInit+0x240>)
 8001610:	4293      	cmp	r3, r2
 8001612:	f040 8102 	bne.w	800181a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001616:	2308      	movs	r3, #8
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800161a:	23c0      	movs	r3, #192	@ 0xc0
 800161c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800161e:	2304      	movs	r3, #4
 8001620:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001622:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001626:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001628:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162c:	4618      	mov	r0, r3
 800162e:	f003 ff73 	bl	8005518 <HAL_RCCEx_PeriphCLKConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001638:	f7ff feec 	bl	8001414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
 8001640:	4b79      	ldr	r3, [pc, #484]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 8001642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001644:	4a78      	ldr	r2, [pc, #480]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 8001646:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800164a:	6453      	str	r3, [r2, #68]	@ 0x44
 800164c:	4b76      	ldr	r3, [pc, #472]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 800164e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001650:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001654:	623b      	str	r3, [r7, #32]
 8001656:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	4b72      	ldr	r3, [pc, #456]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001660:	4a71      	ldr	r2, [pc, #452]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 8001662:	f043 0320 	orr.w	r3, r3, #32
 8001666:	6313      	str	r3, [r2, #48]	@ 0x30
 8001668:	4b6f      	ldr	r3, [pc, #444]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	4b6b      	ldr	r3, [pc, #428]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167c:	4a6a      	ldr	r2, [pc, #424]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6313      	str	r3, [r2, #48]	@ 0x30
 8001684:	4b68      	ldr	r3, [pc, #416]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	4b64      	ldr	r3, [pc, #400]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001698:	4a63      	ldr	r2, [pc, #396]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a0:	4b61      	ldr	r3, [pc, #388]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	4b5d      	ldr	r3, [pc, #372]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b4:	4a5c      	ldr	r2, [pc, #368]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 80016b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80016bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	4b56      	ldr	r3, [pc, #344]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d0:	4a55      	ldr	r2, [pc, #340]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d8:	4b53      	ldr	r3, [pc, #332]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001828 <HAL_LTDC_MspInit+0x244>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001700:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001704:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170e:	2302      	movs	r3, #2
 8001710:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001712:	230e      	movs	r3, #14
 8001714:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001716:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800171a:	4619      	mov	r1, r3
 800171c:	4843      	ldr	r0, [pc, #268]	@ (800182c <HAL_LTDC_MspInit+0x248>)
 800171e:	f001 fc03 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8001722:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001726:	657b      	str	r3, [r7, #84]	@ 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001730:	2302      	movs	r3, #2
 8001732:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001734:	230e      	movs	r3, #14
 8001736:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800173c:	4619      	mov	r1, r3
 800173e:	483c      	ldr	r0, [pc, #240]	@ (8001830 <HAL_LTDC_MspInit+0x24c>)
 8001740:	f001 fbf2 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001744:	2303      	movs	r3, #3
 8001746:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001750:	2302      	movs	r3, #2
 8001752:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001754:	2309      	movs	r3, #9
 8001756:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800175c:	4619      	mov	r1, r3
 800175e:	4835      	ldr	r0, [pc, #212]	@ (8001834 <HAL_LTDC_MspInit+0x250>)
 8001760:	f001 fbe2 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001764:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001768:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001772:	2302      	movs	r3, #2
 8001774:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001776:	230e      	movs	r3, #14
 8001778:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800177e:	4619      	mov	r1, r3
 8001780:	482c      	ldr	r0, [pc, #176]	@ (8001834 <HAL_LTDC_MspInit+0x250>)
 8001782:	f001 fbd1 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001786:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800178a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001794:	2302      	movs	r3, #2
 8001796:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001798:	230e      	movs	r3, #14
 800179a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800179c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017a0:	4619      	mov	r1, r3
 80017a2:	4825      	ldr	r0, [pc, #148]	@ (8001838 <HAL_LTDC_MspInit+0x254>)
 80017a4:	f001 fbc0 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017a8:	23c0      	movs	r3, #192	@ 0xc0
 80017aa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b4:	2302      	movs	r3, #2
 80017b6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017b8:	230e      	movs	r3, #14
 80017ba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017c0:	4619      	mov	r1, r3
 80017c2:	481e      	ldr	r0, [pc, #120]	@ (800183c <HAL_LTDC_MspInit+0x258>)
 80017c4:	f001 fbb0 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017c8:	2308      	movs	r3, #8
 80017ca:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d4:	2302      	movs	r3, #2
 80017d6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017d8:	230e      	movs	r3, #14
 80017da:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017e0:	4619      	mov	r1, r3
 80017e2:	4817      	ldr	r0, [pc, #92]	@ (8001840 <HAL_LTDC_MspInit+0x25c>)
 80017e4:	f001 fba0 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80017e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017ec:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f6:	2302      	movs	r3, #2
 80017f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017fa:	2309      	movs	r3, #9
 80017fc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001802:	4619      	mov	r1, r3
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <HAL_LTDC_MspInit+0x254>)
 8001806:	f001 fb8f 	bl	8002f28 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2105      	movs	r1, #5
 800180e:	2058      	movs	r0, #88	@ 0x58
 8001810:	f001 f8c6 	bl	80029a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001814:	2058      	movs	r0, #88	@ 0x58
 8001816:	f001 f8df 	bl	80029d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	3768      	adds	r7, #104	@ 0x68
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40016800 	.word	0x40016800
 8001828:	40023800 	.word	0x40023800
 800182c:	40021400 	.word	0x40021400
 8001830:	40020000 	.word	0x40020000
 8001834:	40020400 	.word	0x40020400
 8001838:	40021800 	.word	0x40021800
 800183c:	40020800 	.word	0x40020800
 8001840:	40020c00 	.word	0x40020c00

08001844 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08e      	sub	sp, #56	@ 0x38
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	2230      	movs	r2, #48	@ 0x30
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f029 ffc2 	bl	802b7de <memset>
  if(hrtc->Instance==RTC)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a0c      	ldr	r2, [pc, #48]	@ (8001890 <HAL_RTC_MspInit+0x4c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d111      	bne.n	8001888 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001864:	2320      	movs	r3, #32
 8001866:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001868:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800186c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	4618      	mov	r0, r3
 8001874:	f003 fe50 	bl	8005518 <HAL_RCCEx_PeriphCLKConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800187e:	f7ff fdc9 	bl	8001414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001882:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <HAL_RTC_MspInit+0x50>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3738      	adds	r7, #56	@ 0x38
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40002800 	.word	0x40002800
 8001894:	42470e3c 	.word	0x42470e3c

08001898 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	@ 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a19      	ldr	r2, [pc, #100]	@ (800191c <HAL_SPI_MspInit+0x84>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d12c      	bne.n	8001914 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <HAL_SPI_MspInit+0x88>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	4a17      	ldr	r2, [pc, #92]	@ (8001920 <HAL_SPI_MspInit+0x88>)
 80018c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80018c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <HAL_SPI_MspInit+0x88>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <HAL_SPI_MspInit+0x88>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a10      	ldr	r2, [pc, #64]	@ (8001920 <HAL_SPI_MspInit+0x88>)
 80018e0:	f043 0320 	orr.w	r3, r3, #32
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <HAL_SPI_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0320 	and.w	r3, r3, #32
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80018f2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001904:	2305      	movs	r3, #5
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	4805      	ldr	r0, [pc, #20]	@ (8001924 <HAL_SPI_MspInit+0x8c>)
 8001910:	f001 fb0a 	bl	8002f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001914:	bf00      	nop
 8001916:	3728      	adds	r7, #40	@ 0x28
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40015000 	.word	0x40015000
 8001920:	40023800 	.word	0x40023800
 8001924:	40021400 	.word	0x40021400

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08c      	sub	sp, #48	@ 0x30
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a3b      	ldr	r2, [pc, #236]	@ (8001a34 <HAL_UART_MspInit+0x10c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d135      	bne.n	80019b6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a38 <HAL_UART_MspInit+0x110>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	4a39      	ldr	r2, [pc, #228]	@ (8001a38 <HAL_UART_MspInit+0x110>)
 8001954:	f043 0310 	orr.w	r3, r3, #16
 8001958:	6453      	str	r3, [r2, #68]	@ 0x44
 800195a:	4b37      	ldr	r3, [pc, #220]	@ (8001a38 <HAL_UART_MspInit+0x110>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	4b33      	ldr	r3, [pc, #204]	@ (8001a38 <HAL_UART_MspInit+0x110>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a32      	ldr	r2, [pc, #200]	@ (8001a38 <HAL_UART_MspInit+0x110>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b30      	ldr	r3, [pc, #192]	@ (8001a38 <HAL_UART_MspInit+0x110>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001982:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001994:	2307      	movs	r3, #7
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4619      	mov	r1, r3
 800199e:	4827      	ldr	r0, [pc, #156]	@ (8001a3c <HAL_UART_MspInit+0x114>)
 80019a0:	f001 fac2 	bl	8002f28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2105      	movs	r1, #5
 80019a8:	2025      	movs	r0, #37	@ 0x25
 80019aa:	f000 fff9 	bl	80029a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ae:	2025      	movs	r0, #37	@ 0x25
 80019b0:	f001 f812 	bl	80029d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019b4:	e039      	b.n	8001a2a <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a21      	ldr	r2, [pc, #132]	@ (8001a40 <HAL_UART_MspInit+0x118>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d134      	bne.n	8001a2a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <HAL_UART_MspInit+0x110>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a38 <HAL_UART_MspInit+0x110>)
 80019ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d0:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <HAL_UART_MspInit+0x110>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <HAL_UART_MspInit+0x110>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <HAL_UART_MspInit+0x110>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ec:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <HAL_UART_MspInit+0x110>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	480b      	ldr	r0, [pc, #44]	@ (8001a44 <HAL_UART_MspInit+0x11c>)
 8001a16:	f001 fa87 	bl	8002f28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2105      	movs	r1, #5
 8001a1e:	2027      	movs	r0, #39	@ 0x27
 8001a20:	f000 ffbe 	bl	80029a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a24:	2027      	movs	r0, #39	@ 0x27
 8001a26:	f000 ffd7 	bl	80029d8 <HAL_NVIC_EnableIRQ>
}
 8001a2a:	bf00      	nop
 8001a2c:	3730      	adds	r7, #48	@ 0x30
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40011000 	.word	0x40011000
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40004800 	.word	0x40004800
 8001a44:	40020800 	.word	0x40020800

08001a48 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b4c <HAL_FMC_MspInit+0x104>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d16f      	bne.n	8001b44 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001a64:	4b39      	ldr	r3, [pc, #228]	@ (8001b4c <HAL_FMC_MspInit+0x104>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	4b38      	ldr	r3, [pc, #224]	@ (8001b50 <HAL_FMC_MspInit+0x108>)
 8001a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a72:	4a37      	ldr	r2, [pc, #220]	@ (8001b50 <HAL_FMC_MspInit+0x108>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6393      	str	r3, [r2, #56]	@ 0x38
 8001a7a:	4b35      	ldr	r3, [pc, #212]	@ (8001b50 <HAL_FMC_MspInit+0x108>)
 8001a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a86:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001a8a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	2303      	movs	r3, #3
 8001a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a98:	230c      	movs	r3, #12
 8001a9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	482c      	ldr	r0, [pc, #176]	@ (8001b54 <HAL_FMC_MspInit+0x10c>)
 8001aa2:	f001 fa41 	bl	8002f28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	4826      	ldr	r0, [pc, #152]	@ (8001b58 <HAL_FMC_MspInit+0x110>)
 8001ac0:	f001 fa32 	bl	8002f28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001ac4:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001ac8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ad6:	230c      	movs	r3, #12
 8001ad8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	4619      	mov	r1, r3
 8001ade:	481f      	ldr	r0, [pc, #124]	@ (8001b5c <HAL_FMC_MspInit+0x114>)
 8001ae0:	f001 fa22 	bl	8002f28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001ae4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001ae8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001af6:	230c      	movs	r3, #12
 8001af8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4818      	ldr	r0, [pc, #96]	@ (8001b60 <HAL_FMC_MspInit+0x118>)
 8001b00:	f001 fa12 	bl	8002f28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001b04:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001b08:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b16:	230c      	movs	r3, #12
 8001b18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4811      	ldr	r0, [pc, #68]	@ (8001b64 <HAL_FMC_MspInit+0x11c>)
 8001b20:	f001 fa02 	bl	8002f28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b24:	2360      	movs	r3, #96	@ 0x60
 8001b26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b34:	230c      	movs	r3, #12
 8001b36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480a      	ldr	r0, [pc, #40]	@ (8001b68 <HAL_FMC_MspInit+0x120>)
 8001b3e:	f001 f9f3 	bl	8002f28 <HAL_GPIO_Init>
 8001b42:	e000      	b.n	8001b46 <HAL_FMC_MspInit+0xfe>
    return;
 8001b44:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000420 	.word	0x20000420
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40021400 	.word	0x40021400
 8001b58:	40020800 	.word	0x40020800
 8001b5c:	40021800 	.word	0x40021800
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40020c00 	.word	0x40020c00
 8001b68:	40020400 	.word	0x40020400

08001b6c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001b74:	f7ff ff68 	bl	8001a48 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08e      	sub	sp, #56	@ 0x38
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	4b33      	ldr	r3, [pc, #204]	@ (8001c64 <HAL_InitTick+0xe4>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	4a32      	ldr	r2, [pc, #200]	@ (8001c64 <HAL_InitTick+0xe4>)
 8001b9a:	f043 0310 	orr.w	r3, r3, #16
 8001b9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba0:	4b30      	ldr	r3, [pc, #192]	@ (8001c64 <HAL_InitTick+0xe4>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bac:	f107 0210 	add.w	r2, r7, #16
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 fc7c 	bl	80054b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d103      	bne.n	8001bce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bc6:	f003 fc4d 	bl	8005464 <HAL_RCC_GetPCLK1Freq>
 8001bca:	6378      	str	r0, [r7, #52]	@ 0x34
 8001bcc:	e004      	b.n	8001bd8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001bce:	f003 fc49 	bl	8005464 <HAL_RCC_GetPCLK1Freq>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bda:	4a23      	ldr	r2, [pc, #140]	@ (8001c68 <HAL_InitTick+0xe8>)
 8001bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001be0:	0c9b      	lsrs	r3, r3, #18
 8001be2:	3b01      	subs	r3, #1
 8001be4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001be6:	4b21      	ldr	r3, [pc, #132]	@ (8001c6c <HAL_InitTick+0xec>)
 8001be8:	4a21      	ldr	r2, [pc, #132]	@ (8001c70 <HAL_InitTick+0xf0>)
 8001bea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001bec:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <HAL_InitTick+0xec>)
 8001bee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bf2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c6c <HAL_InitTick+0xec>)
 8001bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001c6c <HAL_InitTick+0xec>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c00:	4b1a      	ldr	r3, [pc, #104]	@ (8001c6c <HAL_InitTick+0xec>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c06:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <HAL_InitTick+0xec>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001c0c:	4817      	ldr	r0, [pc, #92]	@ (8001c6c <HAL_InitTick+0xec>)
 8001c0e:	f004 ffb7 	bl	8006b80 <HAL_TIM_Base_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001c18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d11b      	bne.n	8001c58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001c20:	4812      	ldr	r0, [pc, #72]	@ (8001c6c <HAL_InitTick+0xec>)
 8001c22:	f005 f807 	bl	8006c34 <HAL_TIM_Base_Start_IT>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001c2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d111      	bne.n	8001c58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c34:	2036      	movs	r0, #54	@ 0x36
 8001c36:	f000 fecf 	bl	80029d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d808      	bhi.n	8001c52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	2036      	movs	r0, #54	@ 0x36
 8001c46:	f000 feab 	bl	80029a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c74 <HAL_InitTick+0xf4>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e002      	b.n	8001c58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3738      	adds	r7, #56	@ 0x38
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	431bde83 	.word	0x431bde83
 8001c6c:	20000424 	.word	0x20000424
 8001c70:	40001000 	.word	0x40001000
 8001c74:	20000070 	.word	0x20000070

08001c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <NMI_Handler+0x4>

08001c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <HardFault_Handler+0x4>

08001c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <MemManage_Handler+0x4>

08001c90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <BusFault_Handler+0x4>

08001c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <UsageFault_Handler+0x4>

08001ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cb4:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <USART1_IRQHandler+0x10>)
 8001cb6:	f005 fb05 	bl	80072c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000344 	.word	0x20000344

08001cc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cc8:	4802      	ldr	r0, [pc, #8]	@ (8001cd4 <USART3_IRQHandler+0x10>)
 8001cca:	f005 fafb 	bl	80072c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000038c 	.word	0x2000038c

08001cd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cdc:	4802      	ldr	r0, [pc, #8]	@ (8001ce8 <TIM6_DAC_IRQHandler+0x10>)
 8001cde:	f005 f819 	bl	8006d14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000424 	.word	0x20000424

08001cec <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001cf0:	4802      	ldr	r0, [pc, #8]	@ (8001cfc <LTDC_IRQHandler+0x10>)
 8001cf2:	f002 fc81 	bl	80045f8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000224 	.word	0x20000224

08001d00 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001d04:	4802      	ldr	r0, [pc, #8]	@ (8001d10 <DMA2D_IRQHandler+0x10>)
 8001d06:	f000 ff6c 	bl	8002be2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000190 	.word	0x20000190

08001d14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return 1;
 8001d18:	2301      	movs	r3, #1
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_kill>:

int _kill(int pid, int sig)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d2e:	f029 fdf9 	bl	802b924 <__errno>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2216      	movs	r2, #22
 8001d36:	601a      	str	r2, [r3, #0]
  return -1;
 8001d38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <_exit>:

void _exit (int status)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ffe7 	bl	8001d24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d56:	bf00      	nop
 8001d58:	e7fd      	b.n	8001d56 <_exit+0x12>

08001d5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e00a      	b.n	8001d82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d6c:	f3af 8000 	nop.w
 8001d70:	4601      	mov	r1, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	60ba      	str	r2, [r7, #8]
 8001d78:	b2ca      	uxtb	r2, r1
 8001d7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	dbf0      	blt.n	8001d6c <_read+0x12>
  }

  return len;
 8001d8a:	687b      	ldr	r3, [r7, #4]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	e009      	b.n	8001dba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	60ba      	str	r2, [r7, #8]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	dbf1      	blt.n	8001da6 <_write+0x12>
  }
  return len;
 8001dc2:	687b      	ldr	r3, [r7, #4]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_close>:

int _close(int file)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001df4:	605a      	str	r2, [r3, #4]
  return 0;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_isatty>:

int _isatty(int file)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e0c:	2301      	movs	r3, #1
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e3c:	4a14      	ldr	r2, [pc, #80]	@ (8001e90 <_sbrk+0x5c>)
 8001e3e:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <_sbrk+0x60>)
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e48:	4b13      	ldr	r3, [pc, #76]	@ (8001e98 <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e50:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <_sbrk+0x64>)
 8001e52:	4a12      	ldr	r2, [pc, #72]	@ (8001e9c <_sbrk+0x68>)
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e56:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <_sbrk+0x64>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d207      	bcs.n	8001e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e64:	f029 fd5e 	bl	802b924 <__errno>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	e009      	b.n	8001e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e74:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	4a05      	ldr	r2, [pc, #20]	@ (8001e98 <_sbrk+0x64>)
 8001e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e86:	68fb      	ldr	r3, [r7, #12]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20030000 	.word	0x20030000
 8001e94:	00000a00 	.word	0x00000a00
 8001e98:	2000046c 	.word	0x2000046c
 8001e9c:	20013318 	.word	0x20013318

08001ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <SystemInit+0x20>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ec0 <SystemInit+0x20>)
 8001eac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ec4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001efc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ec8:	f7ff ffea 	bl	8001ea0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ecc:	480c      	ldr	r0, [pc, #48]	@ (8001f00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ece:	490d      	ldr	r1, [pc, #52]	@ (8001f04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8001f10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ef2:	f029 fd1d 	bl	802b930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef6:	f7fe fc23 	bl	8000740 <main>
  bx  lr    
 8001efa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001efc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f04:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001f08:	080503f0 	.word	0x080503f0
  ldr r2, =_sbss
 8001f0c:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001f10:	20013318 	.word	0x20013318

08001f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC_IRQHandler>

08001f16 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001f1a:	f7ff f949 	bl	80011b0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001f1e:	20ca      	movs	r0, #202	@ 0xca
 8001f20:	f000 f95d 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001f24:	20c3      	movs	r0, #195	@ 0xc3
 8001f26:	f000 f967 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001f2a:	2008      	movs	r0, #8
 8001f2c:	f000 f964 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001f30:	2050      	movs	r0, #80	@ 0x50
 8001f32:	f000 f961 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001f36:	20cf      	movs	r0, #207	@ 0xcf
 8001f38:	f000 f951 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f000 f95b 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001f42:	20c1      	movs	r0, #193	@ 0xc1
 8001f44:	f000 f958 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001f48:	2030      	movs	r0, #48	@ 0x30
 8001f4a:	f000 f955 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001f4e:	20ed      	movs	r0, #237	@ 0xed
 8001f50:	f000 f945 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001f54:	2064      	movs	r0, #100	@ 0x64
 8001f56:	f000 f94f 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001f5a:	2003      	movs	r0, #3
 8001f5c:	f000 f94c 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001f60:	2012      	movs	r0, #18
 8001f62:	f000 f949 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001f66:	2081      	movs	r0, #129	@ 0x81
 8001f68:	f000 f946 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001f6c:	20e8      	movs	r0, #232	@ 0xe8
 8001f6e:	f000 f936 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001f72:	2085      	movs	r0, #133	@ 0x85
 8001f74:	f000 f940 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f000 f93d 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001f7e:	2078      	movs	r0, #120	@ 0x78
 8001f80:	f000 f93a 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001f84:	20cb      	movs	r0, #203	@ 0xcb
 8001f86:	f000 f92a 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001f8a:	2039      	movs	r0, #57	@ 0x39
 8001f8c:	f000 f934 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001f90:	202c      	movs	r0, #44	@ 0x2c
 8001f92:	f000 f931 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 f92e 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001f9c:	2034      	movs	r0, #52	@ 0x34
 8001f9e:	f000 f92b 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	f000 f928 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001fa8:	20f7      	movs	r0, #247	@ 0xf7
 8001faa:	f000 f918 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001fae:	2020      	movs	r0, #32
 8001fb0:	f000 f922 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001fb4:	20ea      	movs	r0, #234	@ 0xea
 8001fb6:	f000 f912 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f000 f91c 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f000 f919 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001fc6:	20b1      	movs	r0, #177	@ 0xb1
 8001fc8:	f000 f909 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f000 f913 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001fd2:	201b      	movs	r0, #27
 8001fd4:	f000 f910 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001fd8:	20b6      	movs	r0, #182	@ 0xb6
 8001fda:	f000 f900 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001fde:	200a      	movs	r0, #10
 8001fe0:	f000 f90a 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001fe4:	20a2      	movs	r0, #162	@ 0xa2
 8001fe6:	f000 f907 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001fea:	20c0      	movs	r0, #192	@ 0xc0
 8001fec:	f000 f8f7 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001ff0:	2010      	movs	r0, #16
 8001ff2:	f000 f901 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001ff6:	20c1      	movs	r0, #193	@ 0xc1
 8001ff8:	f000 f8f1 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001ffc:	2010      	movs	r0, #16
 8001ffe:	f000 f8fb 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002002:	20c5      	movs	r0, #197	@ 0xc5
 8002004:	f000 f8eb 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002008:	2045      	movs	r0, #69	@ 0x45
 800200a:	f000 f8f5 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800200e:	2015      	movs	r0, #21
 8002010:	f000 f8f2 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002014:	20c7      	movs	r0, #199	@ 0xc7
 8002016:	f000 f8e2 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800201a:	2090      	movs	r0, #144	@ 0x90
 800201c:	f000 f8ec 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002020:	2036      	movs	r0, #54	@ 0x36
 8002022:	f000 f8dc 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002026:	20c8      	movs	r0, #200	@ 0xc8
 8002028:	f000 f8e6 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800202c:	20f2      	movs	r0, #242	@ 0xf2
 800202e:	f000 f8d6 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002032:	2000      	movs	r0, #0
 8002034:	f000 f8e0 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002038:	20b0      	movs	r0, #176	@ 0xb0
 800203a:	f000 f8d0 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800203e:	20c2      	movs	r0, #194	@ 0xc2
 8002040:	f000 f8da 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002044:	20b6      	movs	r0, #182	@ 0xb6
 8002046:	f000 f8ca 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800204a:	200a      	movs	r0, #10
 800204c:	f000 f8d4 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002050:	20a7      	movs	r0, #167	@ 0xa7
 8002052:	f000 f8d1 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002056:	2027      	movs	r0, #39	@ 0x27
 8002058:	f000 f8ce 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800205c:	2004      	movs	r0, #4
 800205e:	f000 f8cb 	bl	80021f8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002062:	202a      	movs	r0, #42	@ 0x2a
 8002064:	f000 f8bb 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002068:	2000      	movs	r0, #0
 800206a:	f000 f8c5 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800206e:	2000      	movs	r0, #0
 8002070:	f000 f8c2 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002074:	2000      	movs	r0, #0
 8002076:	f000 f8bf 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800207a:	20ef      	movs	r0, #239	@ 0xef
 800207c:	f000 f8bc 	bl	80021f8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002080:	202b      	movs	r0, #43	@ 0x2b
 8002082:	f000 f8ac 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002086:	2000      	movs	r0, #0
 8002088:	f000 f8b6 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800208c:	2000      	movs	r0, #0
 800208e:	f000 f8b3 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002092:	2001      	movs	r0, #1
 8002094:	f000 f8b0 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002098:	203f      	movs	r0, #63	@ 0x3f
 800209a:	f000 f8ad 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800209e:	20f6      	movs	r0, #246	@ 0xf6
 80020a0:	f000 f89d 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80020a4:	2001      	movs	r0, #1
 80020a6:	f000 f8a7 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f000 f8a4 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80020b0:	2006      	movs	r0, #6
 80020b2:	f000 f8a1 	bl	80021f8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80020b6:	202c      	movs	r0, #44	@ 0x2c
 80020b8:	f000 f891 	bl	80021de <ili9341_WriteReg>
  LCD_Delay(200);
 80020bc:	20c8      	movs	r0, #200	@ 0xc8
 80020be:	f7ff f8fd 	bl	80012bc <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80020c2:	2026      	movs	r0, #38	@ 0x26
 80020c4:	f000 f88b 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80020c8:	2001      	movs	r0, #1
 80020ca:	f000 f895 	bl	80021f8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80020ce:	20e0      	movs	r0, #224	@ 0xe0
 80020d0:	f000 f885 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80020d4:	200f      	movs	r0, #15
 80020d6:	f000 f88f 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80020da:	2029      	movs	r0, #41	@ 0x29
 80020dc:	f000 f88c 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80020e0:	2024      	movs	r0, #36	@ 0x24
 80020e2:	f000 f889 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80020e6:	200c      	movs	r0, #12
 80020e8:	f000 f886 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80020ec:	200e      	movs	r0, #14
 80020ee:	f000 f883 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80020f2:	2009      	movs	r0, #9
 80020f4:	f000 f880 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80020f8:	204e      	movs	r0, #78	@ 0x4e
 80020fa:	f000 f87d 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80020fe:	2078      	movs	r0, #120	@ 0x78
 8002100:	f000 f87a 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002104:	203c      	movs	r0, #60	@ 0x3c
 8002106:	f000 f877 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800210a:	2009      	movs	r0, #9
 800210c:	f000 f874 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002110:	2013      	movs	r0, #19
 8002112:	f000 f871 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002116:	2005      	movs	r0, #5
 8002118:	f000 f86e 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800211c:	2017      	movs	r0, #23
 800211e:	f000 f86b 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002122:	2011      	movs	r0, #17
 8002124:	f000 f868 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002128:	2000      	movs	r0, #0
 800212a:	f000 f865 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800212e:	20e1      	movs	r0, #225	@ 0xe1
 8002130:	f000 f855 	bl	80021de <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002134:	2000      	movs	r0, #0
 8002136:	f000 f85f 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800213a:	2016      	movs	r0, #22
 800213c:	f000 f85c 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002140:	201b      	movs	r0, #27
 8002142:	f000 f859 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002146:	2004      	movs	r0, #4
 8002148:	f000 f856 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800214c:	2011      	movs	r0, #17
 800214e:	f000 f853 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002152:	2007      	movs	r0, #7
 8002154:	f000 f850 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002158:	2031      	movs	r0, #49	@ 0x31
 800215a:	f000 f84d 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800215e:	2033      	movs	r0, #51	@ 0x33
 8002160:	f000 f84a 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002164:	2042      	movs	r0, #66	@ 0x42
 8002166:	f000 f847 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800216a:	2005      	movs	r0, #5
 800216c:	f000 f844 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002170:	200c      	movs	r0, #12
 8002172:	f000 f841 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002176:	200a      	movs	r0, #10
 8002178:	f000 f83e 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800217c:	2028      	movs	r0, #40	@ 0x28
 800217e:	f000 f83b 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002182:	202f      	movs	r0, #47	@ 0x2f
 8002184:	f000 f838 	bl	80021f8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002188:	200f      	movs	r0, #15
 800218a:	f000 f835 	bl	80021f8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800218e:	2011      	movs	r0, #17
 8002190:	f000 f825 	bl	80021de <ili9341_WriteReg>
  LCD_Delay(200);
 8002194:	20c8      	movs	r0, #200	@ 0xc8
 8002196:	f7ff f891 	bl	80012bc <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800219a:	2029      	movs	r0, #41	@ 0x29
 800219c:	f000 f81f 	bl	80021de <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80021a0:	202c      	movs	r0, #44	@ 0x2c
 80021a2:	f000 f81c 	bl	80021de <ili9341_WriteReg>
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}

080021aa <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80021ae:	f7fe ffff 	bl	80011b0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80021b2:	2103      	movs	r1, #3
 80021b4:	20d3      	movs	r0, #211	@ 0xd3
 80021b6:	f000 f82c 	bl	8002212 <ili9341_ReadData>
 80021ba:	4603      	mov	r3, r0
 80021bc:	b29b      	uxth	r3, r3
}
 80021be:	4618      	mov	r0, r3
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80021c6:	2029      	movs	r0, #41	@ 0x29
 80021c8:	f000 f809 	bl	80021de <ili9341_WriteReg>
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80021d4:	2028      	movs	r0, #40	@ 0x28
 80021d6:	f000 f802 	bl	80021de <ili9341_WriteReg>
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}

080021de <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f812 	bl	8001214 <LCD_IO_WriteReg>
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe ffe3 	bl	80011d0 <LCD_IO_WriteData>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	460a      	mov	r2, r1
 800221c:	80fb      	strh	r3, [r7, #6]
 800221e:	4613      	mov	r3, r2
 8002220:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002222:	797a      	ldrb	r2, [r7, #5]
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff f815 	bl	8001258 <LCD_IO_ReadData>
 800222e:	4603      	mov	r3, r0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800223c:	23f0      	movs	r3, #240	@ 0xf0
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800224c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fa59 	bl	8002720 <stmpe811_GetInstance>
 800226e:	4603      	mov	r3, r0
 8002270:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	2bff      	cmp	r3, #255	@ 0xff
 8002276:	d112      	bne.n	800229e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002278:	2000      	movs	r0, #0
 800227a:	f000 fa51 	bl	8002720 <stmpe811_GetInstance>
 800227e:	4603      	mov	r3, r0
 8002280:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002282:	7bbb      	ldrb	r3, [r7, #14]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d80a      	bhi.n	800229e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002288:	7bbb      	ldrb	r3, [r7, #14]
 800228a:	88fa      	ldrh	r2, [r7, #6]
 800228c:	b2d1      	uxtb	r1, r2
 800228e:	4a06      	ldr	r2, [pc, #24]	@ (80022a8 <stmpe811_Init+0x4c>)
 8002290:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002292:	f7fe fe79 	bl	8000f88 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f807 	bl	80022ac <stmpe811_Reset>
    }
  }
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000470 	.word	0x20000470

080022ac <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2202      	movs	r2, #2
 80022bc:	2103      	movs	r1, #3
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe fe70 	bl	8000fa4 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80022c4:	200a      	movs	r0, #10
 80022c6:	f7fe fea9 	bl	800101c <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2200      	movs	r2, #0
 80022d0:	2103      	movs	r1, #3
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fe66 	bl	8000fa4 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80022d8:	2002      	movs	r0, #2
 80022da:	f7fe fe9f 	bl	800101c <IOE_Delay>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80022e6:	b590      	push	{r4, r7, lr}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	4603      	mov	r3, r0
 80022ee:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80022f0:	f7fe fe4a 	bl	8000f88 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fe65 	bl	8000fca <IOE_Read>
 8002300:	4603      	mov	r3, r0
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2101      	movs	r1, #1
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe fe5c 	bl	8000fca <IOE_Read>
 8002312:	4603      	mov	r3, r0
 8002314:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002316:	4323      	orrs	r3, r4
 8002318:	b21b      	sxth	r3, r3
 800231a:	b29b      	uxth	r3, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bd90      	pop	{r4, r7, pc}

08002324 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2109      	movs	r1, #9
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe fe46 	bl	8000fca <IOE_Read>
 800233e:	4603      	mov	r3, r0
 8002340:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	2109      	movs	r1, #9
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fe26 	bl	8000fa4 <IOE_Write>
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2109      	movs	r1, #9
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe fe28 	bl	8000fca <IOE_Read>
 800237a:	4603      	mov	r3, r0
 800237c:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	2109      	movs	r1, #9
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fe08 	bl	8000fa4 <IOE_Write>
    
}
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	460a      	mov	r2, r1
 80023a6:	80fb      	strh	r3, [r7, #6]
 80023a8:	4613      	mov	r3, r2
 80023aa:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	210a      	movs	r1, #10
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fe07 	bl	8000fca <IOE_Read>
 80023bc:	4603      	mov	r3, r0
 80023be:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	797b      	ldrb	r3, [r7, #5]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	210a      	movs	r1, #10
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe fde7 	bl	8000fa4 <IOE_Write>
}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	460a      	mov	r2, r1
 80023e8:	80fb      	strh	r3, [r7, #6]
 80023ea:	4613      	mov	r3, r2
 80023ec:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	210a      	movs	r1, #10
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe fde6 	bl	8000fca <IOE_Read>
 80023fe:	4603      	mov	r3, r0
 8002400:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002402:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002406:	43db      	mvns	r3, r3
 8002408:	b25a      	sxtb	r2, r3
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4013      	ands	r3, r2
 8002410:	b25b      	sxtb	r3, r3
 8002412:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	210a      	movs	r1, #10
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fdc1 	bl	8000fa4 <IOE_Write>
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	460a      	mov	r2, r1
 8002434:	80fb      	strh	r3, [r7, #6]
 8002436:	4613      	mov	r3, r2
 8002438:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	210b      	movs	r1, #11
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fdc2 	bl	8000fca <IOE_Read>
 8002446:	4603      	mov	r3, r0
 8002448:	461a      	mov	r2, r3
 800244a:	797b      	ldrb	r3, [r7, #5]
 800244c:	4013      	ands	r3, r2
 800244e:	b2db      	uxtb	r3, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	460a      	mov	r2, r1
 8002462:	80fb      	strh	r3, [r7, #6]
 8002464:	4613      	mov	r3, r2
 8002466:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	797a      	ldrb	r2, [r7, #5]
 800246e:	210b      	movs	r1, #11
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe fd97 	bl	8000fa4 <IOE_Write>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	6039      	str	r1, [r7, #0]
 8002488:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2117      	movs	r1, #23
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fd98 	bl	8000fca <IOE_Read>
 800249a:	4603      	mov	r3, r0
 800249c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	b25a      	sxtb	r2, r3
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4013      	ands	r3, r2
 80024ac:	b25b      	sxtb	r3, r3
 80024ae:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	2117      	movs	r1, #23
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fd73 	bl	8000fa4 <IOE_Write>
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2104      	movs	r1, #4
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fd77 	bl	8000fca <IOE_Read>
 80024dc:	4603      	mov	r3, r0
 80024de:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	f023 0304 	bic.w	r3, r3, #4
 80024e6:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	2104      	movs	r1, #4
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fd57 	bl	8000fa4 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	21f0      	movs	r1, #240	@ 0xf0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff ffbf 	bl	800247e <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	f023 0303 	bic.w	r3, r3, #3
 8002506:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	2104      	movs	r1, #4
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fd47 	bl	8000fa4 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2249      	movs	r2, #73	@ 0x49
 800251c:	2120      	movs	r1, #32
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe fd40 	bl	8000fa4 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002524:	2002      	movs	r0, #2
 8002526:	f7fe fd79 	bl	800101c <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2201      	movs	r2, #1
 8002530:	2121      	movs	r1, #33	@ 0x21
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fd36 	bl	8000fa4 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	229a      	movs	r2, #154	@ 0x9a
 800253e:	2141      	movs	r1, #65	@ 0x41
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fd2f 	bl	8000fa4 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2201      	movs	r2, #1
 800254c:	214a      	movs	r1, #74	@ 0x4a
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fd28 	bl	8000fa4 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2201      	movs	r2, #1
 800255a:	214b      	movs	r1, #75	@ 0x4b
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe fd21 	bl	8000fa4 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2200      	movs	r2, #0
 8002568:	214b      	movs	r1, #75	@ 0x4b
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fd1a 	bl	8000fa4 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2201      	movs	r2, #1
 8002576:	2156      	movs	r1, #86	@ 0x56
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe fd13 	bl	8000fa4 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2201      	movs	r2, #1
 8002584:	2158      	movs	r1, #88	@ 0x58
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fd0c 	bl	8000fa4 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2201      	movs	r2, #1
 8002592:	2140      	movs	r1, #64	@ 0x40
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fd05 	bl	8000fa4 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	22ff      	movs	r2, #255	@ 0xff
 80025a0:	210b      	movs	r1, #11
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fcfe 	bl	8000fa4 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 80025a8:	2002      	movs	r0, #2
 80025aa:	f7fe fd37 	bl	800101c <IOE_Delay>
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2140      	movs	r1, #64	@ 0x40
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fcfd 	bl	8000fca <IOE_Read>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025d6:	2b80      	cmp	r3, #128	@ 0x80
 80025d8:	bf0c      	ite	eq
 80025da:	2301      	moveq	r3, #1
 80025dc:	2300      	movne	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80025e2:	7bbb      	ldrb	r3, [r7, #14]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00b      	beq.n	8002600 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	214c      	movs	r1, #76	@ 0x4c
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fceb 	bl	8000fca <IOE_Read>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d010      	beq.n	800261c <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	e00d      	b.n	800261c <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2201      	movs	r2, #1
 8002606:	214b      	movs	r1, #75	@ 0x4b
 8002608:	4618      	mov	r0, r3
 800260a:	f7fe fccb 	bl	8000fa4 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2200      	movs	r2, #0
 8002614:	214b      	movs	r1, #75	@ 0x4b
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fcc4 	bl	8000fa4 <IOE_Write>
  }
  
  return ret;
 800261c:	7bfb      	ldrb	r3, [r7, #15]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b086      	sub	sp, #24
 800262a:	af00      	add	r7, sp, #0
 800262c:	4603      	mov	r3, r0
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002634:	89fb      	ldrh	r3, [r7, #14]
 8002636:	b2d8      	uxtb	r0, r3
 8002638:	f107 0210 	add.w	r2, r7, #16
 800263c:	2304      	movs	r3, #4
 800263e:	21d7      	movs	r1, #215	@ 0xd7
 8002640:	f7fe fcd6 	bl	8000ff0 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002644:	7c3b      	ldrb	r3, [r7, #16]
 8002646:	061a      	lsls	r2, r3, #24
 8002648:	7c7b      	ldrb	r3, [r7, #17]
 800264a:	041b      	lsls	r3, r3, #16
 800264c:	431a      	orrs	r2, r3
 800264e:	7cbb      	ldrb	r3, [r7, #18]
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	4313      	orrs	r3, r2
 8002654:	7cfa      	ldrb	r2, [r7, #19]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	0d1b      	lsrs	r3, r3, #20
 800265e:	b29a      	uxth	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	b29b      	uxth	r3, r3
 800266a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266e:	b29a      	uxth	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002674:	89fb      	ldrh	r3, [r7, #14]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2201      	movs	r2, #1
 800267a:	214b      	movs	r1, #75	@ 0x4b
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe fc91 	bl	8000fa4 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002682:	89fb      	ldrh	r3, [r7, #14]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2200      	movs	r2, #0
 8002688:	214b      	movs	r1, #75	@ 0x4b
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fc8a 	bl	8000fa4 <IOE_Write>
}
 8002690:	bf00      	nop
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 80026a2:	f7fe fc78 	bl	8000f96 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	211f      	movs	r1, #31
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fe76 	bl	800239c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fe36 	bl	8002324 <stmpe811_EnableGlobalIT>
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fe47 	bl	8002360 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	211f      	movs	r1, #31
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fe81 	bl	80023de <stmpe811_DisableITSource>
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	211f      	movs	r1, #31
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fe99 	bl	800242a <stmpe811_ReadGITStatus>
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	211f      	movs	r1, #31
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fea1 	bl	8002458 <stmpe811_ClearGlobalIT>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	e00b      	b.n	800274c <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <stmpe811_GetInstance+0x40>)
 8002738:	5cd3      	ldrb	r3, [r2, r3]
 800273a:	461a      	mov	r2, r3
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	4293      	cmp	r3, r2
 8002740:	d101      	bne.n	8002746 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	e006      	b.n	8002754 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	3301      	adds	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d9f0      	bls.n	8002734 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002752:	23ff      	movs	r3, #255	@ 0xff
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	20000470 	.word	0x20000470

08002764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002768:	4b0e      	ldr	r3, [pc, #56]	@ (80027a4 <HAL_Init+0x40>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0d      	ldr	r2, [pc, #52]	@ (80027a4 <HAL_Init+0x40>)
 800276e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002772:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_Init+0x40>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0a      	ldr	r2, [pc, #40]	@ (80027a4 <HAL_Init+0x40>)
 800277a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800277e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002780:	4b08      	ldr	r3, [pc, #32]	@ (80027a4 <HAL_Init+0x40>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a07      	ldr	r2, [pc, #28]	@ (80027a4 <HAL_Init+0x40>)
 8002786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800278a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800278c:	2003      	movs	r0, #3
 800278e:	f000 f8fc 	bl	800298a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002792:	2000      	movs	r0, #0
 8002794:	f7ff f9f4 	bl	8001b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002798:	f7fe fe44 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023c00 	.word	0x40023c00

080027a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027ac:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <HAL_IncTick+0x20>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <HAL_IncTick+0x24>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <HAL_IncTick+0x24>)
 80027ba:	6013      	str	r3, [r2, #0]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000074 	.word	0x20000074
 80027cc:	20000474 	.word	0x20000474

080027d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return uwTick;
 80027d4:	4b03      	ldr	r3, [pc, #12]	@ (80027e4 <HAL_GetTick+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000474 	.word	0x20000474

080027e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f0:	f7ff ffee 	bl	80027d0 <HAL_GetTick>
 80027f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d005      	beq.n	800280e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002802:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <HAL_Delay+0x44>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800280e:	bf00      	nop
 8002810:	f7ff ffde 	bl	80027d0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	429a      	cmp	r2, r3
 800281e:	d8f7      	bhi.n	8002810 <HAL_Delay+0x28>
  {
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000074 	.word	0x20000074

08002830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002840:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800284c:	4013      	ands	r3, r2
 800284e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002858:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800285c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002862:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	60d3      	str	r3, [r2, #12]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800287c:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <__NVIC_GetPriorityGrouping+0x18>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 0307 	and.w	r3, r3, #7
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	db0b      	blt.n	80028be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	f003 021f 	and.w	r2, r3, #31
 80028ac:	4907      	ldr	r1, [pc, #28]	@ (80028cc <__NVIC_EnableIRQ+0x38>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	2001      	movs	r0, #1
 80028b6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000e100 	.word	0xe000e100

080028d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	6039      	str	r1, [r7, #0]
 80028da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	db0a      	blt.n	80028fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	490c      	ldr	r1, [pc, #48]	@ (800291c <__NVIC_SetPriority+0x4c>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	0112      	lsls	r2, r2, #4
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	440b      	add	r3, r1
 80028f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f8:	e00a      	b.n	8002910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	4908      	ldr	r1, [pc, #32]	@ (8002920 <__NVIC_SetPriority+0x50>)
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	3b04      	subs	r3, #4
 8002908:	0112      	lsls	r2, r2, #4
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	440b      	add	r3, r1
 800290e:	761a      	strb	r2, [r3, #24]
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000e100 	.word	0xe000e100
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002924:	b480      	push	{r7}
 8002926:	b089      	sub	sp, #36	@ 0x24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f1c3 0307 	rsb	r3, r3, #7
 800293e:	2b04      	cmp	r3, #4
 8002940:	bf28      	it	cs
 8002942:	2304      	movcs	r3, #4
 8002944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3304      	adds	r3, #4
 800294a:	2b06      	cmp	r3, #6
 800294c:	d902      	bls.n	8002954 <NVIC_EncodePriority+0x30>
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3b03      	subs	r3, #3
 8002952:	e000      	b.n	8002956 <NVIC_EncodePriority+0x32>
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	f04f 32ff 	mov.w	r2, #4294967295
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43da      	mvns	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	401a      	ands	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800296c:	f04f 31ff 	mov.w	r1, #4294967295
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	43d9      	mvns	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	4313      	orrs	r3, r2
         );
}
 800297e:	4618      	mov	r0, r3
 8002980:	3724      	adds	r7, #36	@ 0x24
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ff4c 	bl	8002830 <__NVIC_SetPriorityGrouping>
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b2:	f7ff ff61 	bl	8002878 <__NVIC_GetPriorityGrouping>
 80029b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	6978      	ldr	r0, [r7, #20]
 80029be:	f7ff ffb1 	bl	8002924 <NVIC_EncodePriority>
 80029c2:	4602      	mov	r2, r0
 80029c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ff80 	bl	80028d0 <__NVIC_SetPriority>
}
 80029d0:	bf00      	nop
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ff54 	bl	8002894 <__NVIC_EnableIRQ>
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00e      	b.n	8002a24 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	795b      	ldrb	r3, [r3, #5]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe fd30 	bl	800147c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a3a:	f7ff fec9 	bl	80027d0 <HAL_GetTick>
 8002a3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d008      	beq.n	8002a5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2280      	movs	r2, #128	@ 0x80
 8002a50:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e052      	b.n	8002b04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0216 	bic.w	r2, r2, #22
 8002a6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d103      	bne.n	8002a8e <HAL_DMA_Abort+0x62>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0208 	bic.w	r2, r2, #8
 8002a9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aae:	e013      	b.n	8002ad8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ab0:	f7ff fe8e 	bl	80027d0 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d90c      	bls.n	8002ad8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e015      	b.n	8002b04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e4      	bne.n	8002ab0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aea:	223f      	movs	r2, #63	@ 0x3f
 8002aec:	409a      	lsls	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d004      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2280      	movs	r2, #128	@ 0x80
 8002b24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00c      	b.n	8002b44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e03b      	b.n	8002bda <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe fca2 	bl	80014c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba0:	f023 0107 	bic.w	r1, r3, #7
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002bba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68d1      	ldr	r1, [r2, #12]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d026      	beq.n	8002c52 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d021      	beq.n	8002c52 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c1c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2204      	movs	r2, #4
 8002c36:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d026      	beq.n	8002caa <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d021      	beq.n	8002caa <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c74:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c82:	f043 0202 	orr.w	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d026      	beq.n	8002d02 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d021      	beq.n	8002d02 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ccc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cda:	f043 0204 	orr.w	r2, r3, #4
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d013      	beq.n	8002d34 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00e      	beq.n	8002d34 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d24:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f853 	bl	8002dda <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d024      	beq.n	8002d88 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01f      	beq.n	8002d88 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d56:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01f      	beq.n	8002dd2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01a      	beq.n	8002dd2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002daa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2210      	movs	r2, #16
 8002db2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f80e 	bl	8002dee <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_DMA2D_ConfigLayer+0x20>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e079      	b.n	8002f18 <HAL_DMA2D_ConfigLayer+0x114>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	3318      	adds	r3, #24
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002e4e:	4b35      	ldr	r3, [pc, #212]	@ (8002f24 <HAL_DMA2D_ConfigLayer+0x120>)
 8002e50:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b0a      	cmp	r3, #10
 8002e58:	d003      	beq.n	8002e62 <HAL_DMA2D_ConfigLayer+0x5e>
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b09      	cmp	r3, #9
 8002e60:	d107      	bne.n	8002e72 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e005      	b.n	8002e7e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	061b      	lsls	r3, r3, #24
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d120      	bne.n	8002ec6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	ea02 0103 	and.w	r1, r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b0a      	cmp	r3, #10
 8002eac:	d003      	beq.n	8002eb6 <HAL_DMA2D_ConfigLayer+0xb2>
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b09      	cmp	r3, #9
 8002eb4:	d127      	bne.n	8002f06 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002ec2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ec4:	e01f      	b.n	8002f06 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	ea02 0103 	and.w	r1, r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b0a      	cmp	r3, #10
 8002eee:	d003      	beq.n	8002ef8 <HAL_DMA2D_ConfigLayer+0xf4>
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b09      	cmp	r3, #9
 8002ef6:	d106      	bne.n	8002f06 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002f04:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	ff03000f 	.word	0xff03000f

08002f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b089      	sub	sp, #36	@ 0x24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	e177      	b.n	8003234 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f44:	2201      	movs	r2, #1
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	f040 8166 	bne.w	800322e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d005      	beq.n	8002f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d130      	bne.n	8002fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	2203      	movs	r2, #3
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 0201 	and.w	r2, r3, #1
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d017      	beq.n	8003018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d123      	bne.n	800306c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	08da      	lsrs	r2, r3, #3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3208      	adds	r2, #8
 800302c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	220f      	movs	r2, #15
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	08da      	lsrs	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3208      	adds	r2, #8
 8003066:	69b9      	ldr	r1, [r7, #24]
 8003068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	2203      	movs	r2, #3
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0203 	and.w	r2, r3, #3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80c0 	beq.w	800322e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4b66      	ldr	r3, [pc, #408]	@ (800324c <HAL_GPIO_Init+0x324>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b6:	4a65      	ldr	r2, [pc, #404]	@ (800324c <HAL_GPIO_Init+0x324>)
 80030b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80030be:	4b63      	ldr	r3, [pc, #396]	@ (800324c <HAL_GPIO_Init+0x324>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ca:	4a61      	ldr	r2, [pc, #388]	@ (8003250 <HAL_GPIO_Init+0x328>)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	089b      	lsrs	r3, r3, #2
 80030d0:	3302      	adds	r3, #2
 80030d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	220f      	movs	r2, #15
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4013      	ands	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a58      	ldr	r2, [pc, #352]	@ (8003254 <HAL_GPIO_Init+0x32c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d037      	beq.n	8003166 <HAL_GPIO_Init+0x23e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a57      	ldr	r2, [pc, #348]	@ (8003258 <HAL_GPIO_Init+0x330>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d031      	beq.n	8003162 <HAL_GPIO_Init+0x23a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a56      	ldr	r2, [pc, #344]	@ (800325c <HAL_GPIO_Init+0x334>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d02b      	beq.n	800315e <HAL_GPIO_Init+0x236>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a55      	ldr	r2, [pc, #340]	@ (8003260 <HAL_GPIO_Init+0x338>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d025      	beq.n	800315a <HAL_GPIO_Init+0x232>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a54      	ldr	r2, [pc, #336]	@ (8003264 <HAL_GPIO_Init+0x33c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d01f      	beq.n	8003156 <HAL_GPIO_Init+0x22e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a53      	ldr	r2, [pc, #332]	@ (8003268 <HAL_GPIO_Init+0x340>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d019      	beq.n	8003152 <HAL_GPIO_Init+0x22a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a52      	ldr	r2, [pc, #328]	@ (800326c <HAL_GPIO_Init+0x344>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_GPIO_Init+0x226>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a51      	ldr	r2, [pc, #324]	@ (8003270 <HAL_GPIO_Init+0x348>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00d      	beq.n	800314a <HAL_GPIO_Init+0x222>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a50      	ldr	r2, [pc, #320]	@ (8003274 <HAL_GPIO_Init+0x34c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <HAL_GPIO_Init+0x21e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a4f      	ldr	r2, [pc, #316]	@ (8003278 <HAL_GPIO_Init+0x350>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_GPIO_Init+0x21a>
 800313e:	2309      	movs	r3, #9
 8003140:	e012      	b.n	8003168 <HAL_GPIO_Init+0x240>
 8003142:	230a      	movs	r3, #10
 8003144:	e010      	b.n	8003168 <HAL_GPIO_Init+0x240>
 8003146:	2308      	movs	r3, #8
 8003148:	e00e      	b.n	8003168 <HAL_GPIO_Init+0x240>
 800314a:	2307      	movs	r3, #7
 800314c:	e00c      	b.n	8003168 <HAL_GPIO_Init+0x240>
 800314e:	2306      	movs	r3, #6
 8003150:	e00a      	b.n	8003168 <HAL_GPIO_Init+0x240>
 8003152:	2305      	movs	r3, #5
 8003154:	e008      	b.n	8003168 <HAL_GPIO_Init+0x240>
 8003156:	2304      	movs	r3, #4
 8003158:	e006      	b.n	8003168 <HAL_GPIO_Init+0x240>
 800315a:	2303      	movs	r3, #3
 800315c:	e004      	b.n	8003168 <HAL_GPIO_Init+0x240>
 800315e:	2302      	movs	r3, #2
 8003160:	e002      	b.n	8003168 <HAL_GPIO_Init+0x240>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_GPIO_Init+0x240>
 8003166:	2300      	movs	r3, #0
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	f002 0203 	and.w	r2, r2, #3
 800316e:	0092      	lsls	r2, r2, #2
 8003170:	4093      	lsls	r3, r2
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003178:	4935      	ldr	r1, [pc, #212]	@ (8003250 <HAL_GPIO_Init+0x328>)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	3302      	adds	r3, #2
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003186:	4b3d      	ldr	r3, [pc, #244]	@ (800327c <HAL_GPIO_Init+0x354>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031aa:	4a34      	ldr	r2, [pc, #208]	@ (800327c <HAL_GPIO_Init+0x354>)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031b0:	4b32      	ldr	r3, [pc, #200]	@ (800327c <HAL_GPIO_Init+0x354>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031d4:	4a29      	ldr	r2, [pc, #164]	@ (800327c <HAL_GPIO_Init+0x354>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031da:	4b28      	ldr	r3, [pc, #160]	@ (800327c <HAL_GPIO_Init+0x354>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031fe:	4a1f      	ldr	r2, [pc, #124]	@ (800327c <HAL_GPIO_Init+0x354>)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003204:	4b1d      	ldr	r3, [pc, #116]	@ (800327c <HAL_GPIO_Init+0x354>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003228:	4a14      	ldr	r2, [pc, #80]	@ (800327c <HAL_GPIO_Init+0x354>)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3301      	adds	r3, #1
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b0f      	cmp	r3, #15
 8003238:	f67f ae84 	bls.w	8002f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	3724      	adds	r7, #36	@ 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	40013800 	.word	0x40013800
 8003254:	40020000 	.word	0x40020000
 8003258:	40020400 	.word	0x40020400
 800325c:	40020800 	.word	0x40020800
 8003260:	40020c00 	.word	0x40020c00
 8003264:	40021000 	.word	0x40021000
 8003268:	40021400 	.word	0x40021400
 800326c:	40021800 	.word	0x40021800
 8003270:	40021c00 	.word	0x40021c00
 8003274:	40022000 	.word	0x40022000
 8003278:	40022400 	.word	0x40022400
 800327c:	40013c00 	.word	0x40013c00

08003280 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	887b      	ldrh	r3, [r7, #2]
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	e001      	b.n	80032a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800329e:	2300      	movs	r3, #0
 80032a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	807b      	strh	r3, [r7, #2]
 80032bc:	4613      	mov	r3, r2
 80032be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c0:	787b      	ldrb	r3, [r7, #1]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032c6:	887a      	ldrh	r2, [r7, #2]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032cc:	e003      	b.n	80032d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ce:	887b      	ldrh	r3, [r7, #2]
 80032d0:	041a      	lsls	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	619a      	str	r2, [r3, #24]
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032f4:	887a      	ldrh	r2, [r7, #2]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4013      	ands	r3, r2
 80032fa:	041a      	lsls	r2, r3, #16
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	43d9      	mvns	r1, r3
 8003300:	887b      	ldrh	r3, [r7, #2]
 8003302:	400b      	ands	r3, r1
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	619a      	str	r2, [r3, #24]
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e12b      	b.n	8003582 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fe f8e6 	bl	8001510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	@ 0x24
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800336a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800337a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800337c:	f002 f872 	bl	8005464 <HAL_RCC_GetPCLK1Freq>
 8003380:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4a81      	ldr	r2, [pc, #516]	@ (800358c <HAL_I2C_Init+0x274>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d807      	bhi.n	800339c <HAL_I2C_Init+0x84>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a80      	ldr	r2, [pc, #512]	@ (8003590 <HAL_I2C_Init+0x278>)
 8003390:	4293      	cmp	r3, r2
 8003392:	bf94      	ite	ls
 8003394:	2301      	movls	r3, #1
 8003396:	2300      	movhi	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	e006      	b.n	80033aa <HAL_I2C_Init+0x92>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4a7d      	ldr	r2, [pc, #500]	@ (8003594 <HAL_I2C_Init+0x27c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	bf94      	ite	ls
 80033a4:	2301      	movls	r3, #1
 80033a6:	2300      	movhi	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e0e7      	b.n	8003582 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4a78      	ldr	r2, [pc, #480]	@ (8003598 <HAL_I2C_Init+0x280>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	0c9b      	lsrs	r3, r3, #18
 80033bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a6a      	ldr	r2, [pc, #424]	@ (800358c <HAL_I2C_Init+0x274>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d802      	bhi.n	80033ec <HAL_I2C_Init+0xd4>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	3301      	adds	r3, #1
 80033ea:	e009      	b.n	8003400 <HAL_I2C_Init+0xe8>
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	4a69      	ldr	r2, [pc, #420]	@ (800359c <HAL_I2C_Init+0x284>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	099b      	lsrs	r3, r3, #6
 80033fe:	3301      	adds	r3, #1
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	430b      	orrs	r3, r1
 8003406:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003412:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	495c      	ldr	r1, [pc, #368]	@ (800358c <HAL_I2C_Init+0x274>)
 800341c:	428b      	cmp	r3, r1
 800341e:	d819      	bhi.n	8003454 <HAL_I2C_Init+0x13c>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1e59      	subs	r1, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	fbb1 f3f3 	udiv	r3, r1, r3
 800342e:	1c59      	adds	r1, r3, #1
 8003430:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003434:	400b      	ands	r3, r1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_I2C_Init+0x138>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1e59      	subs	r1, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fbb1 f3f3 	udiv	r3, r1, r3
 8003448:	3301      	adds	r3, #1
 800344a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344e:	e051      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 8003450:	2304      	movs	r3, #4
 8003452:	e04f      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d111      	bne.n	8003480 <HAL_I2C_Init+0x168>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1e58      	subs	r0, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	440b      	add	r3, r1
 800346a:	fbb0 f3f3 	udiv	r3, r0, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e012      	b.n	80034a6 <HAL_I2C_Init+0x18e>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1e58      	subs	r0, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	0099      	lsls	r1, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	fbb0 f3f3 	udiv	r3, r0, r3
 8003496:	3301      	adds	r3, #1
 8003498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_I2C_Init+0x196>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e022      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10e      	bne.n	80034d4 <HAL_I2C_Init+0x1bc>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1e58      	subs	r0, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	440b      	add	r3, r1
 80034c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c8:	3301      	adds	r3, #1
 80034ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034d2:	e00f      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	1e58      	subs	r0, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6859      	ldr	r1, [r3, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	0099      	lsls	r1, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	6809      	ldr	r1, [r1, #0]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003522:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6911      	ldr	r1, [r2, #16]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68d2      	ldr	r2, [r2, #12]
 800352e:	4311      	orrs	r1, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	430b      	orrs	r3, r1
 8003536:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	000186a0 	.word	0x000186a0
 8003590:	001e847f 	.word	0x001e847f
 8003594:	003d08ff 	.word	0x003d08ff
 8003598:	431bde83 	.word	0x431bde83
 800359c:	10624dd3 	.word	0x10624dd3

080035a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	4608      	mov	r0, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	461a      	mov	r2, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	817b      	strh	r3, [r7, #10]
 80035b2:	460b      	mov	r3, r1
 80035b4:	813b      	strh	r3, [r7, #8]
 80035b6:	4613      	mov	r3, r2
 80035b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035ba:	f7ff f909 	bl	80027d0 <HAL_GetTick>
 80035be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	f040 80d9 	bne.w	8003780 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2319      	movs	r3, #25
 80035d4:	2201      	movs	r2, #1
 80035d6:	496d      	ldr	r1, [pc, #436]	@ (800378c <HAL_I2C_Mem_Write+0x1ec>)
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fc8b 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
 80035e6:	e0cc      	b.n	8003782 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_I2C_Mem_Write+0x56>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e0c5      	b.n	8003782 <HAL_I2C_Mem_Write+0x1e2>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d007      	beq.n	800361c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800362a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2221      	movs	r2, #33	@ 0x21
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2240      	movs	r2, #64	@ 0x40
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800364c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4a4d      	ldr	r2, [pc, #308]	@ (8003790 <HAL_I2C_Mem_Write+0x1f0>)
 800365c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800365e:	88f8      	ldrh	r0, [r7, #6]
 8003660:	893a      	ldrh	r2, [r7, #8]
 8003662:	8979      	ldrh	r1, [r7, #10]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	4603      	mov	r3, r0
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fac2 	bl	8003bf8 <I2C_RequestMemoryWrite>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d052      	beq.n	8003720 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e081      	b.n	8003782 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 fd50 	bl	8004128 <I2C_WaitOnTXEFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00d      	beq.n	80036aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	2b04      	cmp	r3, #4
 8003694:	d107      	bne.n	80036a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e06b      	b.n	8003782 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	781a      	ldrb	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d11b      	bne.n	8003720 <HAL_I2C_Mem_Write+0x180>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d017      	beq.n	8003720 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1aa      	bne.n	800367e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fd43 	bl	80041b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00d      	beq.n	8003754 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	2b04      	cmp	r3, #4
 800373e:	d107      	bne.n	8003750 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800374e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e016      	b.n	8003782 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e000      	b.n	8003782 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
  }
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	00100002 	.word	0x00100002
 8003790:	ffff0000 	.word	0xffff0000

08003794 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08c      	sub	sp, #48	@ 0x30
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	4608      	mov	r0, r1
 800379e:	4611      	mov	r1, r2
 80037a0:	461a      	mov	r2, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	817b      	strh	r3, [r7, #10]
 80037a6:	460b      	mov	r3, r1
 80037a8:	813b      	strh	r3, [r7, #8]
 80037aa:	4613      	mov	r3, r2
 80037ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ae:	f7ff f80f 	bl	80027d0 <HAL_GetTick>
 80037b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b20      	cmp	r3, #32
 80037be:	f040 8214 	bne.w	8003bea <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	2319      	movs	r3, #25
 80037c8:	2201      	movs	r2, #1
 80037ca:	497b      	ldr	r1, [pc, #492]	@ (80039b8 <HAL_I2C_Mem_Read+0x224>)
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 fb91 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
 80037da:	e207      	b.n	8003bec <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_I2C_Mem_Read+0x56>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e200      	b.n	8003bec <HAL_I2C_Mem_Read+0x458>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d007      	beq.n	8003810 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800381e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2222      	movs	r2, #34	@ 0x22
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2240      	movs	r2, #64	@ 0x40
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800383a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003840:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4a5b      	ldr	r2, [pc, #364]	@ (80039bc <HAL_I2C_Mem_Read+0x228>)
 8003850:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003852:	88f8      	ldrh	r0, [r7, #6]
 8003854:	893a      	ldrh	r2, [r7, #8]
 8003856:	8979      	ldrh	r1, [r7, #10]
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	9301      	str	r3, [sp, #4]
 800385c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	4603      	mov	r3, r0
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fa5e 	bl	8003d24 <I2C_RequestMemoryRead>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e1bc      	b.n	8003bec <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003876:	2b00      	cmp	r3, #0
 8003878:	d113      	bne.n	80038a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387a:	2300      	movs	r3, #0
 800387c:	623b      	str	r3, [r7, #32]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	623b      	str	r3, [r7, #32]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	623b      	str	r3, [r7, #32]
 800388e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	e190      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d11b      	bne.n	80038e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	61fb      	str	r3, [r7, #28]
 80038ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	e170      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d11b      	bne.n	8003922 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003908:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	e150      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003938:	e144      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393e:	2b03      	cmp	r3, #3
 8003940:	f200 80f1 	bhi.w	8003b26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003948:	2b01      	cmp	r3, #1
 800394a:	d123      	bne.n	8003994 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800394c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800394e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 fc79 	bl	8004248 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e145      	b.n	8003bec <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003992:	e117      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003998:	2b02      	cmp	r3, #2
 800399a:	d14e      	bne.n	8003a3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a2:	2200      	movs	r2, #0
 80039a4:	4906      	ldr	r1, [pc, #24]	@ (80039c0 <HAL_I2C_Mem_Read+0x22c>)
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 faa4 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d008      	beq.n	80039c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e11a      	b.n	8003bec <HAL_I2C_Mem_Read+0x458>
 80039b6:	bf00      	nop
 80039b8:	00100002 	.word	0x00100002
 80039bc:	ffff0000 	.word	0xffff0000
 80039c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a38:	e0c4      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a40:	2200      	movs	r2, #0
 8003a42:	496c      	ldr	r1, [pc, #432]	@ (8003bf4 <HAL_I2C_Mem_Read+0x460>)
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 fa55 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0cb      	b.n	8003bec <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4955      	ldr	r1, [pc, #340]	@ (8003bf4 <HAL_I2C_Mem_Read+0x460>)
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 fa27 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e09d      	b.n	8003bec <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003abe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b24:	e04e      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 fb8c 	bl	8004248 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e058      	b.n	8003bec <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d124      	bne.n	8003bc4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d107      	bne.n	8003b92 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b90:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f47f aeb6 	bne.w	800393a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e000      	b.n	8003bec <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003bea:	2302      	movs	r3, #2
  }
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3728      	adds	r7, #40	@ 0x28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	00010004 	.word	0x00010004

08003bf8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	461a      	mov	r2, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	817b      	strh	r3, [r7, #10]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	813b      	strh	r3, [r7, #8]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f960 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c48:	d103      	bne.n	8003c52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e05f      	b.n	8003d16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c56:	897b      	ldrh	r3, [r7, #10]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	6a3a      	ldr	r2, [r7, #32]
 8003c6a:	492d      	ldr	r1, [pc, #180]	@ (8003d20 <I2C_RequestMemoryWrite+0x128>)
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f9bb 	bl	8003fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e04c      	b.n	8003d16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c94:	6a39      	ldr	r1, [r7, #32]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fa46 	bl	8004128 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d107      	bne.n	8003cba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e02b      	b.n	8003d16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc4:	893b      	ldrh	r3, [r7, #8]
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	611a      	str	r2, [r3, #16]
 8003cce:	e021      	b.n	8003d14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce0:	6a39      	ldr	r1, [r7, #32]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 fa20 	bl	8004128 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d107      	bne.n	8003d06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e005      	b.n	8003d16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d0a:	893b      	ldrh	r3, [r7, #8]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	00010002 	.word	0x00010002

08003d24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	461a      	mov	r2, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	817b      	strh	r3, [r7, #10]
 8003d36:	460b      	mov	r3, r1
 8003d38:	813b      	strh	r3, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f8c2 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d84:	d103      	bne.n	8003d8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e0aa      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d92:	897b      	ldrh	r3, [r7, #10]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003da0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	6a3a      	ldr	r2, [r7, #32]
 8003da6:	4952      	ldr	r1, [pc, #328]	@ (8003ef0 <I2C_RequestMemoryRead+0x1cc>)
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f91d 	bl	8003fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e097      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd0:	6a39      	ldr	r1, [r7, #32]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f9a8 	bl	8004128 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d107      	bne.n	8003df6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e076      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d105      	bne.n	8003e0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e00:	893b      	ldrh	r3, [r7, #8]
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	611a      	str	r2, [r3, #16]
 8003e0a:	e021      	b.n	8003e50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e0c:	893b      	ldrh	r3, [r7, #8]
 8003e0e:	0a1b      	lsrs	r3, r3, #8
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1c:	6a39      	ldr	r1, [r7, #32]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f982 	bl	8004128 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00d      	beq.n	8003e46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d107      	bne.n	8003e42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e050      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e46:	893b      	ldrh	r3, [r7, #8]
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e52:	6a39      	ldr	r1, [r7, #32]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f967 	bl	8004128 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d107      	bne.n	8003e78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e035      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f82b 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eb2:	d103      	bne.n	8003ebc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e013      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ec0:	897b      	ldrh	r3, [r7, #10]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	6a3a      	ldr	r2, [r7, #32]
 8003ed4:	4906      	ldr	r1, [pc, #24]	@ (8003ef0 <I2C_RequestMemoryRead+0x1cc>)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f886 	bl	8003fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	00010002 	.word	0x00010002

08003ef4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f04:	e048      	b.n	8003f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d044      	beq.n	8003f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0e:	f7fe fc5f 	bl	80027d0 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d139      	bne.n	8003f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	0c1b      	lsrs	r3, r3, #16
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d10d      	bne.n	8003f4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	43da      	mvns	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	e00c      	b.n	8003f64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	43da      	mvns	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	4013      	ands	r3, r2
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d116      	bne.n	8003f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f84:	f043 0220 	orr.w	r2, r3, #32
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e023      	b.n	8003fe0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	0c1b      	lsrs	r3, r3, #16
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d10d      	bne.n	8003fbe <I2C_WaitOnFlagUntilTimeout+0xca>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	43da      	mvns	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	4013      	ands	r3, r2
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2301      	moveq	r3, #1
 8003fb6:	2300      	movne	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	e00c      	b.n	8003fd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	43da      	mvns	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	bf0c      	ite	eq
 8003fd0:	2301      	moveq	r3, #1
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d093      	beq.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ff6:	e071      	b.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004006:	d123      	bne.n	8004050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004016:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004020:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	f043 0204 	orr.w	r2, r3, #4
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e067      	b.n	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d041      	beq.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004058:	f7fe fbba 	bl	80027d0 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	429a      	cmp	r2, r3
 8004066:	d302      	bcc.n	800406e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d136      	bne.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	d10c      	bne.n	8004092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	43da      	mvns	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4013      	ands	r3, r2
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	bf14      	ite	ne
 800408a:	2301      	movne	r3, #1
 800408c:	2300      	moveq	r3, #0
 800408e:	b2db      	uxtb	r3, r3
 8004090:	e00b      	b.n	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	43da      	mvns	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4013      	ands	r3, r2
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf14      	ite	ne
 80040a4:	2301      	movne	r3, #1
 80040a6:	2300      	moveq	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	f043 0220 	orr.w	r2, r3, #32
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e021      	b.n	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	0c1b      	lsrs	r3, r3, #16
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d10c      	bne.n	8004100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	43da      	mvns	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4013      	ands	r3, r2
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf14      	ite	ne
 80040f8:	2301      	movne	r3, #1
 80040fa:	2300      	moveq	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e00b      	b.n	8004118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	43da      	mvns	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4013      	ands	r3, r2
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	bf14      	ite	ne
 8004112:	2301      	movne	r3, #1
 8004114:	2300      	moveq	r3, #0
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	f47f af6d 	bne.w	8003ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004134:	e034      	b.n	80041a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f8e3 	bl	8004302 <I2C_IsAcknowledgeFailed>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e034      	b.n	80041b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414c:	d028      	beq.n	80041a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414e:	f7fe fb3f 	bl	80027d0 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	429a      	cmp	r2, r3
 800415c:	d302      	bcc.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d11d      	bne.n	80041a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416e:	2b80      	cmp	r3, #128	@ 0x80
 8004170:	d016      	beq.n	80041a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418c:	f043 0220 	orr.w	r2, r3, #32
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e007      	b.n	80041b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041aa:	2b80      	cmp	r3, #128	@ 0x80
 80041ac:	d1c3      	bne.n	8004136 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041c4:	e034      	b.n	8004230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f89b 	bl	8004302 <I2C_IsAcknowledgeFailed>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e034      	b.n	8004240 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041dc:	d028      	beq.n	8004230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041de:	f7fe faf7 	bl	80027d0 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d302      	bcc.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d11d      	bne.n	8004230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d016      	beq.n	8004230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421c:	f043 0220 	orr.w	r2, r3, #32
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e007      	b.n	8004240 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b04      	cmp	r3, #4
 800423c:	d1c3      	bne.n	80041c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004254:	e049      	b.n	80042ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b10      	cmp	r3, #16
 8004262:	d119      	bne.n	8004298 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0210 	mvn.w	r2, #16
 800426c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e030      	b.n	80042fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004298:	f7fe fa9a 	bl	80027d0 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d302      	bcc.n	80042ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11d      	bne.n	80042ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b8:	2b40      	cmp	r3, #64	@ 0x40
 80042ba:	d016      	beq.n	80042ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	f043 0220 	orr.w	r2, r3, #32
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e007      	b.n	80042fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	d1ae      	bne.n	8004256 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004318:	d11b      	bne.n	8004352 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004322:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	f043 0204 	orr.w	r2, r3, #4
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b20      	cmp	r3, #32
 8004374:	d129      	bne.n	80043ca <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2224      	movs	r2, #36	@ 0x24
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0210 	bic.w	r2, r2, #16
 800439c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e000      	b.n	80043cc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80043ca:	2302      	movs	r3, #2
  }
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d12a      	bne.n	8004448 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2224      	movs	r2, #36	@ 0x24
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0201 	bic.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004412:	89fb      	ldrh	r3, [r7, #14]
 8004414:	f023 030f 	bic.w	r3, r3, #15
 8004418:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	b29a      	uxth	r2, r3
 800441e:	89fb      	ldrh	r3, [r7, #14]
 8004420:	4313      	orrs	r3, r2
 8004422:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	89fa      	ldrh	r2, [r7, #14]
 800442a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	e000      	b.n	800444a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004448:	2302      	movs	r3, #2
  }
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e0bf      	b.n	80045ea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fd f8b0 	bl	80015e4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800449a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6999      	ldr	r1, [r3, #24]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80044b0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6899      	ldr	r1, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	4b4a      	ldr	r3, [pc, #296]	@ (80045f4 <HAL_LTDC_Init+0x19c>)
 80044cc:	400b      	ands	r3, r1
 80044ce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6899      	ldr	r1, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68d9      	ldr	r1, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b3e      	ldr	r3, [pc, #248]	@ (80045f4 <HAL_LTDC_Init+0x19c>)
 80044fa:	400b      	ands	r3, r1
 80044fc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	041b      	lsls	r3, r3, #16
 8004504:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68d9      	ldr	r1, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1a      	ldr	r2, [r3, #32]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6919      	ldr	r1, [r3, #16]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b33      	ldr	r3, [pc, #204]	@ (80045f4 <HAL_LTDC_Init+0x19c>)
 8004528:	400b      	ands	r3, r1
 800452a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	041b      	lsls	r3, r3, #16
 8004532:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6919      	ldr	r1, [r3, #16]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6959      	ldr	r1, [r3, #20]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4b27      	ldr	r3, [pc, #156]	@ (80045f4 <HAL_LTDC_Init+0x19c>)
 8004556:	400b      	ands	r3, r1
 8004558:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455e:	041b      	lsls	r3, r3, #16
 8004560:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6959      	ldr	r1, [r3, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800459a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0206 	orr.w	r2, r2, #6
 80045c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	f000f800 	.word	0xf000f800

080045f8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004606:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800460e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d023      	beq.n	8004662 <HAL_LTDC_IRQHandler+0x6a>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01e      	beq.n	8004662 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0204 	bic.w	r2, r2, #4
 8004632:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2204      	movs	r2, #4
 800463a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004642:	f043 0201 	orr.w	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2204      	movs	r2, #4
 8004650:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f86f 	bl	8004740 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d023      	beq.n	80046b4 <HAL_LTDC_IRQHandler+0xbc>
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d01e      	beq.n	80046b4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0202 	bic.w	r2, r2, #2
 8004684:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2202      	movs	r2, #2
 800468c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004694:	f043 0202 	orr.w	r2, r3, #2
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2204      	movs	r2, #4
 80046a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f846 	bl	8004740 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d01b      	beq.n	80046f6 <HAL_LTDC_IRQHandler+0xfe>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d016      	beq.n	80046f6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0201 	bic.w	r2, r2, #1
 80046d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2201      	movs	r2, #1
 80046de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f00e f927 	bl	8012944 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <HAL_LTDC_IRQHandler+0x140>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d016      	beq.n	8004738 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0208 	bic.w	r2, r2, #8
 8004718:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2208      	movs	r2, #8
 8004720:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f80e 	bl	8004754 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004738:	bf00      	nop
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004768:	b5b0      	push	{r4, r5, r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_LTDC_ConfigLayer+0x1a>
 800477e:	2302      	movs	r3, #2
 8004780:	e02c      	b.n	80047dc <HAL_LTDC_ConfigLayer+0x74>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2202      	movs	r2, #2
 800478e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2134      	movs	r1, #52	@ 0x34
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	4413      	add	r3, r2
 800479e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4614      	mov	r4, r2
 80047a6:	461d      	mov	r5, r3
 80047a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047b4:	682b      	ldr	r3, [r5, #0]
 80047b6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	68b9      	ldr	r1, [r7, #8]
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f849 	bl	8004854 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2201      	movs	r2, #1
 80047c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bdb0      	pop	{r4, r5, r7, pc}

080047e4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_LTDC_ProgramLineEvent+0x18>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e023      	b.n	8004844 <HAL_LTDC_ProgramLineEvent+0x60>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0201 	bic.w	r2, r2, #1
 800481a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800481c:	4a0c      	ldr	r2, [pc, #48]	@ (8004850 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0201 	orr.w	r2, r2, #1
 8004830:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40016800 	.word	0x40016800

08004854 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004854:	b480      	push	{r7}
 8004856:	b089      	sub	sp, #36	@ 0x24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004870:	4413      	add	r3, r2
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	01db      	lsls	r3, r3, #7
 8004880:	4413      	add	r3, r2
 8004882:	3384      	adds	r3, #132	@ 0x84
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	4611      	mov	r1, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	01d2      	lsls	r2, r2, #7
 8004890:	440a      	add	r2, r1
 8004892:	3284      	adds	r2, #132	@ 0x84
 8004894:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004898:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	0c1b      	lsrs	r3, r3, #16
 80048a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048aa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048ac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4619      	mov	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	01db      	lsls	r3, r3, #7
 80048b8:	440b      	add	r3, r1
 80048ba:	3384      	adds	r3, #132	@ 0x84
 80048bc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048d2:	4413      	add	r3, r2
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	01db      	lsls	r3, r3, #7
 80048e2:	4413      	add	r3, r2
 80048e4:	3384      	adds	r3, #132	@ 0x84
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	4611      	mov	r1, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	01d2      	lsls	r2, r2, #7
 80048f2:	440a      	add	r2, r1
 80048f4:	3284      	adds	r2, #132	@ 0x84
 80048f6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80048fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800490a:	4413      	add	r3, r2
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4619      	mov	r1, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	01db      	lsls	r3, r3, #7
 8004918:	440b      	add	r3, r1
 800491a:	3384      	adds	r3, #132	@ 0x84
 800491c:	4619      	mov	r1, r3
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4313      	orrs	r3, r2
 8004922:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	01db      	lsls	r3, r3, #7
 800492e:	4413      	add	r3, r2
 8004930:	3384      	adds	r3, #132	@ 0x84
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	4611      	mov	r1, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	01d2      	lsls	r2, r2, #7
 800493e:	440a      	add	r2, r1
 8004940:	3284      	adds	r2, #132	@ 0x84
 8004942:	f023 0307 	bic.w	r3, r3, #7
 8004946:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	01db      	lsls	r3, r3, #7
 8004952:	4413      	add	r3, r2
 8004954:	3384      	adds	r3, #132	@ 0x84
 8004956:	461a      	mov	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800496e:	041b      	lsls	r3, r3, #16
 8004970:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	061b      	lsls	r3, r3, #24
 8004978:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	01db      	lsls	r3, r3, #7
 8004984:	4413      	add	r3, r2
 8004986:	3384      	adds	r3, #132	@ 0x84
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	01db      	lsls	r3, r3, #7
 8004994:	4413      	add	r3, r2
 8004996:	3384      	adds	r3, #132	@ 0x84
 8004998:	461a      	mov	r2, r3
 800499a:	2300      	movs	r3, #0
 800499c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80049a4:	461a      	mov	r2, r3
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4619      	mov	r1, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	01db      	lsls	r3, r3, #7
 80049b8:	440b      	add	r3, r1
 80049ba:	3384      	adds	r3, #132	@ 0x84
 80049bc:	4619      	mov	r1, r3
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	461a      	mov	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	01db      	lsls	r3, r3, #7
 80049ce:	4413      	add	r3, r2
 80049d0:	3384      	adds	r3, #132	@ 0x84
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	4611      	mov	r1, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	01d2      	lsls	r2, r2, #7
 80049de:	440a      	add	r2, r1
 80049e0:	3284      	adds	r2, #132	@ 0x84
 80049e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80049e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	01db      	lsls	r3, r3, #7
 80049f2:	4413      	add	r3, r2
 80049f4:	3384      	adds	r3, #132	@ 0x84
 80049f6:	461a      	mov	r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	01db      	lsls	r3, r3, #7
 8004a08:	4413      	add	r3, r2
 8004a0a:	3384      	adds	r3, #132	@ 0x84
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	4611      	mov	r1, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	01d2      	lsls	r2, r2, #7
 8004a18:	440a      	add	r2, r1
 8004a1a:	3284      	adds	r2, #132	@ 0x84
 8004a1c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004a20:	f023 0307 	bic.w	r3, r3, #7
 8004a24:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	69da      	ldr	r2, [r3, #28]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	68f9      	ldr	r1, [r7, #12]
 8004a30:	6809      	ldr	r1, [r1, #0]
 8004a32:	4608      	mov	r0, r1
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	01c9      	lsls	r1, r1, #7
 8004a38:	4401      	add	r1, r0
 8004a3a:	3184      	adds	r1, #132	@ 0x84
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	01db      	lsls	r3, r3, #7
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3384      	adds	r3, #132	@ 0x84
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	01db      	lsls	r3, r3, #7
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3384      	adds	r3, #132	@ 0x84
 8004a5e:	461a      	mov	r2, r3
 8004a60:	2300      	movs	r3, #0
 8004a62:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	01db      	lsls	r3, r3, #7
 8004a6e:	4413      	add	r3, r2
 8004a70:	3384      	adds	r3, #132	@ 0x84
 8004a72:	461a      	mov	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004a82:	2304      	movs	r3, #4
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	e01b      	b.n	8004ac0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d102      	bne.n	8004a96 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004a90:	2303      	movs	r3, #3
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	e014      	b.n	8004ac0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d00b      	beq.n	8004ab6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d007      	beq.n	8004ab6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d003      	beq.n	8004ab6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ab2:	2b07      	cmp	r3, #7
 8004ab4:	d102      	bne.n	8004abc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	e001      	b.n	8004ac0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004abc:	2301      	movs	r3, #1
 8004abe:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	01db      	lsls	r3, r3, #7
 8004aca:	4413      	add	r3, r2
 8004acc:	3384      	adds	r3, #132	@ 0x84
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	01d2      	lsls	r2, r2, #7
 8004ada:	440a      	add	r2, r1
 8004adc:	3284      	adds	r2, #132	@ 0x84
 8004ade:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	6859      	ldr	r1, [r3, #4]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	1acb      	subs	r3, r1, r3
 8004afa:	69f9      	ldr	r1, [r7, #28]
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004b02:	68f9      	ldr	r1, [r7, #12]
 8004b04:	6809      	ldr	r1, [r1, #0]
 8004b06:	4608      	mov	r0, r1
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	01c9      	lsls	r1, r1, #7
 8004b0c:	4401      	add	r1, r0
 8004b0e:	3184      	adds	r1, #132	@ 0x84
 8004b10:	4313      	orrs	r3, r2
 8004b12:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	01db      	lsls	r3, r3, #7
 8004b1e:	4413      	add	r3, r2
 8004b20:	3384      	adds	r3, #132	@ 0x84
 8004b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	4611      	mov	r1, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	01d2      	lsls	r2, r2, #7
 8004b2e:	440a      	add	r2, r1
 8004b30:	3284      	adds	r2, #132	@ 0x84
 8004b32:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b36:	f023 0307 	bic.w	r3, r3, #7
 8004b3a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	01db      	lsls	r3, r3, #7
 8004b46:	4413      	add	r3, r2
 8004b48:	3384      	adds	r3, #132	@ 0x84
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b50:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	01db      	lsls	r3, r3, #7
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3384      	adds	r3, #132	@ 0x84
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	4611      	mov	r1, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	01d2      	lsls	r2, r2, #7
 8004b6c:	440a      	add	r2, r1
 8004b6e:	3284      	adds	r2, #132	@ 0x84
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	6013      	str	r3, [r2, #0]
}
 8004b76:	bf00      	nop
 8004b78:	3724      	adds	r7, #36	@ 0x24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
	...

08004b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e267      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d075      	beq.n	8004c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ba2:	4b88      	ldr	r3, [pc, #544]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d00c      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bae:	4b85      	ldr	r3, [pc, #532]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d112      	bne.n	8004be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bba:	4b82      	ldr	r3, [pc, #520]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bc6:	d10b      	bne.n	8004be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc8:	4b7e      	ldr	r3, [pc, #504]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d05b      	beq.n	8004c8c <HAL_RCC_OscConfig+0x108>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d157      	bne.n	8004c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e242      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004be8:	d106      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x74>
 8004bea:	4b76      	ldr	r3, [pc, #472]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a75      	ldr	r2, [pc, #468]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e01d      	b.n	8004c34 <HAL_RCC_OscConfig+0xb0>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c00:	d10c      	bne.n	8004c1c <HAL_RCC_OscConfig+0x98>
 8004c02:	4b70      	ldr	r3, [pc, #448]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a6f      	ldr	r2, [pc, #444]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a6c      	ldr	r2, [pc, #432]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	e00b      	b.n	8004c34 <HAL_RCC_OscConfig+0xb0>
 8004c1c:	4b69      	ldr	r3, [pc, #420]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a68      	ldr	r2, [pc, #416]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	4b66      	ldr	r3, [pc, #408]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a65      	ldr	r2, [pc, #404]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d013      	beq.n	8004c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3c:	f7fd fdc8 	bl	80027d0 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c44:	f7fd fdc4 	bl	80027d0 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b64      	cmp	r3, #100	@ 0x64
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e207      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c56:	4b5b      	ldr	r3, [pc, #364]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0xc0>
 8004c62:	e014      	b.n	8004c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7fd fdb4 	bl	80027d0 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c6c:	f7fd fdb0 	bl	80027d0 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	@ 0x64
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e1f3      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7e:	4b51      	ldr	r3, [pc, #324]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0xe8>
 8004c8a:	e000      	b.n	8004c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d063      	beq.n	8004d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ca6:	4b47      	ldr	r3, [pc, #284]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d11c      	bne.n	8004cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb2:	4b44      	ldr	r3, [pc, #272]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d116      	bne.n	8004cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cbe:	4b41      	ldr	r3, [pc, #260]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x152>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d001      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e1c7      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4937      	ldr	r1, [pc, #220]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cea:	e03a      	b.n	8004d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d020      	beq.n	8004d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf4:	4b34      	ldr	r3, [pc, #208]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fd fd69 	bl	80027d0 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d02:	f7fd fd65 	bl	80027d0 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e1a8      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d14:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d20:	4b28      	ldr	r3, [pc, #160]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	4925      	ldr	r1, [pc, #148]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]
 8004d34:	e015      	b.n	8004d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d36:	4b24      	ldr	r3, [pc, #144]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fd fd48 	bl	80027d0 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d44:	f7fd fd44 	bl	80027d0 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e187      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d56:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d036      	beq.n	8004ddc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d76:	4b15      	ldr	r3, [pc, #84]	@ (8004dcc <HAL_RCC_OscConfig+0x248>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fd fd28 	bl	80027d0 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d84:	f7fd fd24 	bl	80027d0 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e167      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d96:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <HAL_RCC_OscConfig+0x240>)
 8004d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x200>
 8004da2:	e01b      	b.n	8004ddc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da4:	4b09      	ldr	r3, [pc, #36]	@ (8004dcc <HAL_RCC_OscConfig+0x248>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004daa:	f7fd fd11 	bl	80027d0 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db0:	e00e      	b.n	8004dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db2:	f7fd fd0d 	bl	80027d0 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d907      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e150      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	42470000 	.word	0x42470000
 8004dcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd0:	4b88      	ldr	r3, [pc, #544]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004dd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1ea      	bne.n	8004db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8097 	beq.w	8004f18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dea:	2300      	movs	r3, #0
 8004dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dee:	4b81      	ldr	r3, [pc, #516]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10f      	bne.n	8004e1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	4b7d      	ldr	r3, [pc, #500]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e02:	4a7c      	ldr	r2, [pc, #496]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e0a:	4b7a      	ldr	r3, [pc, #488]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e12:	60bb      	str	r3, [r7, #8]
 8004e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e16:	2301      	movs	r3, #1
 8004e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1a:	4b77      	ldr	r3, [pc, #476]	@ (8004ff8 <HAL_RCC_OscConfig+0x474>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d118      	bne.n	8004e58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e26:	4b74      	ldr	r3, [pc, #464]	@ (8004ff8 <HAL_RCC_OscConfig+0x474>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a73      	ldr	r2, [pc, #460]	@ (8004ff8 <HAL_RCC_OscConfig+0x474>)
 8004e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e32:	f7fd fccd 	bl	80027d0 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3a:	f7fd fcc9 	bl	80027d0 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e10c      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4c:	4b6a      	ldr	r3, [pc, #424]	@ (8004ff8 <HAL_RCC_OscConfig+0x474>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d106      	bne.n	8004e6e <HAL_RCC_OscConfig+0x2ea>
 8004e60:	4b64      	ldr	r3, [pc, #400]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e64:	4a63      	ldr	r2, [pc, #396]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e6c:	e01c      	b.n	8004ea8 <HAL_RCC_OscConfig+0x324>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b05      	cmp	r3, #5
 8004e74:	d10c      	bne.n	8004e90 <HAL_RCC_OscConfig+0x30c>
 8004e76:	4b5f      	ldr	r3, [pc, #380]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7a:	4a5e      	ldr	r2, [pc, #376]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e7c:	f043 0304 	orr.w	r3, r3, #4
 8004e80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e82:	4b5c      	ldr	r3, [pc, #368]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e86:	4a5b      	ldr	r2, [pc, #364]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e8e:	e00b      	b.n	8004ea8 <HAL_RCC_OscConfig+0x324>
 8004e90:	4b58      	ldr	r3, [pc, #352]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e94:	4a57      	ldr	r2, [pc, #348]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e96:	f023 0301 	bic.w	r3, r3, #1
 8004e9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e9c:	4b55      	ldr	r3, [pc, #340]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea0:	4a54      	ldr	r2, [pc, #336]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	f023 0304 	bic.w	r3, r3, #4
 8004ea6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d015      	beq.n	8004edc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb0:	f7fd fc8e 	bl	80027d0 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb6:	e00a      	b.n	8004ece <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb8:	f7fd fc8a 	bl	80027d0 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e0cb      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ece:	4b49      	ldr	r3, [pc, #292]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0ee      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x334>
 8004eda:	e014      	b.n	8004f06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004edc:	f7fd fc78 	bl	80027d0 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee4:	f7fd fc74 	bl	80027d0 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e0b5      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efa:	4b3e      	ldr	r3, [pc, #248]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1ee      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d105      	bne.n	8004f18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f0c:	4b39      	ldr	r3, [pc, #228]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f10:	4a38      	ldr	r2, [pc, #224]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004f12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80a1 	beq.w	8005064 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f22:	4b34      	ldr	r3, [pc, #208]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 030c 	and.w	r3, r3, #12
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d05c      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d141      	bne.n	8004fba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f36:	4b31      	ldr	r3, [pc, #196]	@ (8004ffc <HAL_RCC_OscConfig+0x478>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fd fc48 	bl	80027d0 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fd fc44 	bl	80027d0 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e087      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f56:	4b27      	ldr	r3, [pc, #156]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	019b      	lsls	r3, r3, #6
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	041b      	lsls	r3, r3, #16
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f84:	061b      	lsls	r3, r3, #24
 8004f86:	491b      	ldr	r1, [pc, #108]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ffc <HAL_RCC_OscConfig+0x478>)
 8004f8e:	2201      	movs	r2, #1
 8004f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f92:	f7fd fc1d 	bl	80027d0 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f9a:	f7fd fc19 	bl	80027d0 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e05c      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fac:	4b11      	ldr	r3, [pc, #68]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0f0      	beq.n	8004f9a <HAL_RCC_OscConfig+0x416>
 8004fb8:	e054      	b.n	8005064 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fba:	4b10      	ldr	r3, [pc, #64]	@ (8004ffc <HAL_RCC_OscConfig+0x478>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc0:	f7fd fc06 	bl	80027d0 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc8:	f7fd fc02 	bl	80027d0 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e045      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fda:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_RCC_OscConfig+0x470>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x444>
 8004fe6:	e03d      	b.n	8005064 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d107      	bne.n	8005000 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e038      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	40007000 	.word	0x40007000
 8004ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005000:	4b1b      	ldr	r3, [pc, #108]	@ (8005070 <HAL_RCC_OscConfig+0x4ec>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d028      	beq.n	8005060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005018:	429a      	cmp	r2, r3
 800501a:	d121      	bne.n	8005060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005026:	429a      	cmp	r2, r3
 8005028:	d11a      	bne.n	8005060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005030:	4013      	ands	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005038:	4293      	cmp	r3, r2
 800503a:	d111      	bne.n	8005060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005046:	085b      	lsrs	r3, r3, #1
 8005048:	3b01      	subs	r3, #1
 800504a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800504c:	429a      	cmp	r2, r3
 800504e:	d107      	bne.n	8005060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800

08005074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0cc      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005088:	4b68      	ldr	r3, [pc, #416]	@ (800522c <HAL_RCC_ClockConfig+0x1b8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 030f 	and.w	r3, r3, #15
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d90c      	bls.n	80050b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005096:	4b65      	ldr	r3, [pc, #404]	@ (800522c <HAL_RCC_ClockConfig+0x1b8>)
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800509e:	4b63      	ldr	r3, [pc, #396]	@ (800522c <HAL_RCC_ClockConfig+0x1b8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d001      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0b8      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d020      	beq.n	80050fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d005      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050c8:	4b59      	ldr	r3, [pc, #356]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	4a58      	ldr	r2, [pc, #352]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050e0:	4b53      	ldr	r3, [pc, #332]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4a52      	ldr	r2, [pc, #328]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ec:	4b50      	ldr	r3, [pc, #320]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	494d      	ldr	r1, [pc, #308]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d044      	beq.n	8005194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d107      	bne.n	8005122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005112:	4b47      	ldr	r3, [pc, #284]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d119      	bne.n	8005152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e07f      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d003      	beq.n	8005132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800512e:	2b03      	cmp	r3, #3
 8005130:	d107      	bne.n	8005142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005132:	4b3f      	ldr	r3, [pc, #252]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e06f      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005142:	4b3b      	ldr	r3, [pc, #236]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e067      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005152:	4b37      	ldr	r3, [pc, #220]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f023 0203 	bic.w	r2, r3, #3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4934      	ldr	r1, [pc, #208]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	4313      	orrs	r3, r2
 8005162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005164:	f7fd fb34 	bl	80027d0 <HAL_GetTick>
 8005168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516a:	e00a      	b.n	8005182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800516c:	f7fd fb30 	bl	80027d0 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800517a:	4293      	cmp	r3, r2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e04f      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005182:	4b2b      	ldr	r3, [pc, #172]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 020c 	and.w	r2, r3, #12
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	429a      	cmp	r2, r3
 8005192:	d1eb      	bne.n	800516c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005194:	4b25      	ldr	r3, [pc, #148]	@ (800522c <HAL_RCC_ClockConfig+0x1b8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d20c      	bcs.n	80051bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a2:	4b22      	ldr	r3, [pc, #136]	@ (800522c <HAL_RCC_ClockConfig+0x1b8>)
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051aa:	4b20      	ldr	r3, [pc, #128]	@ (800522c <HAL_RCC_ClockConfig+0x1b8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d001      	beq.n	80051bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e032      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051c8:	4b19      	ldr	r3, [pc, #100]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4916      	ldr	r1, [pc, #88]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051e6:	4b12      	ldr	r3, [pc, #72]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	490e      	ldr	r1, [pc, #56]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051fa:	f000 f821 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 80051fe:	4602      	mov	r2, r0
 8005200:	4b0b      	ldr	r3, [pc, #44]	@ (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	490a      	ldr	r1, [pc, #40]	@ (8005234 <HAL_RCC_ClockConfig+0x1c0>)
 800520c:	5ccb      	ldrb	r3, [r1, r3]
 800520e:	fa22 f303 	lsr.w	r3, r2, r3
 8005212:	4a09      	ldr	r2, [pc, #36]	@ (8005238 <HAL_RCC_ClockConfig+0x1c4>)
 8005214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005216:	4b09      	ldr	r3, [pc, #36]	@ (800523c <HAL_RCC_ClockConfig+0x1c8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f7fc fcb0 	bl	8001b80 <HAL_InitTick>

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40023c00 	.word	0x40023c00
 8005230:	40023800 	.word	0x40023800
 8005234:	0802d718 	.word	0x0802d718
 8005238:	2000000c 	.word	0x2000000c
 800523c:	20000070 	.word	0x20000070

08005240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005244:	b094      	sub	sp, #80	@ 0x50
 8005246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	647b      	str	r3, [r7, #68]	@ 0x44
 800524c:	2300      	movs	r3, #0
 800524e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005250:	2300      	movs	r3, #0
 8005252:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005258:	4b79      	ldr	r3, [pc, #484]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x200>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 030c 	and.w	r3, r3, #12
 8005260:	2b08      	cmp	r3, #8
 8005262:	d00d      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0x40>
 8005264:	2b08      	cmp	r3, #8
 8005266:	f200 80e1 	bhi.w	800542c <HAL_RCC_GetSysClockFreq+0x1ec>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <HAL_RCC_GetSysClockFreq+0x34>
 800526e:	2b04      	cmp	r3, #4
 8005270:	d003      	beq.n	800527a <HAL_RCC_GetSysClockFreq+0x3a>
 8005272:	e0db      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005274:	4b73      	ldr	r3, [pc, #460]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x204>)
 8005276:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005278:	e0db      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800527a:	4b73      	ldr	r3, [pc, #460]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x208>)
 800527c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800527e:	e0d8      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005280:	4b6f      	ldr	r3, [pc, #444]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x200>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005288:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800528a:	4b6d      	ldr	r3, [pc, #436]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x200>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d063      	beq.n	800535e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005296:	4b6a      	ldr	r3, [pc, #424]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x200>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	099b      	lsrs	r3, r3, #6
 800529c:	2200      	movs	r2, #0
 800529e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80052aa:	2300      	movs	r3, #0
 80052ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052b2:	4622      	mov	r2, r4
 80052b4:	462b      	mov	r3, r5
 80052b6:	f04f 0000 	mov.w	r0, #0
 80052ba:	f04f 0100 	mov.w	r1, #0
 80052be:	0159      	lsls	r1, r3, #5
 80052c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052c4:	0150      	lsls	r0, r2, #5
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4621      	mov	r1, r4
 80052cc:	1a51      	subs	r1, r2, r1
 80052ce:	6139      	str	r1, [r7, #16]
 80052d0:	4629      	mov	r1, r5
 80052d2:	eb63 0301 	sbc.w	r3, r3, r1
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	f04f 0300 	mov.w	r3, #0
 80052e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052e4:	4659      	mov	r1, fp
 80052e6:	018b      	lsls	r3, r1, #6
 80052e8:	4651      	mov	r1, sl
 80052ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052ee:	4651      	mov	r1, sl
 80052f0:	018a      	lsls	r2, r1, #6
 80052f2:	4651      	mov	r1, sl
 80052f4:	ebb2 0801 	subs.w	r8, r2, r1
 80052f8:	4659      	mov	r1, fp
 80052fa:	eb63 0901 	sbc.w	r9, r3, r1
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800530a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800530e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005312:	4690      	mov	r8, r2
 8005314:	4699      	mov	r9, r3
 8005316:	4623      	mov	r3, r4
 8005318:	eb18 0303 	adds.w	r3, r8, r3
 800531c:	60bb      	str	r3, [r7, #8]
 800531e:	462b      	mov	r3, r5
 8005320:	eb49 0303 	adc.w	r3, r9, r3
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005332:	4629      	mov	r1, r5
 8005334:	024b      	lsls	r3, r1, #9
 8005336:	4621      	mov	r1, r4
 8005338:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800533c:	4621      	mov	r1, r4
 800533e:	024a      	lsls	r2, r1, #9
 8005340:	4610      	mov	r0, r2
 8005342:	4619      	mov	r1, r3
 8005344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005346:	2200      	movs	r2, #0
 8005348:	62bb      	str	r3, [r7, #40]	@ 0x28
 800534a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800534c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005350:	f7fa ffee 	bl	8000330 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4613      	mov	r3, r2
 800535a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800535c:	e058      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800535e:	4b38      	ldr	r3, [pc, #224]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x200>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	099b      	lsrs	r3, r3, #6
 8005364:	2200      	movs	r2, #0
 8005366:	4618      	mov	r0, r3
 8005368:	4611      	mov	r1, r2
 800536a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800536e:	623b      	str	r3, [r7, #32]
 8005370:	2300      	movs	r3, #0
 8005372:	627b      	str	r3, [r7, #36]	@ 0x24
 8005374:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005378:	4642      	mov	r2, r8
 800537a:	464b      	mov	r3, r9
 800537c:	f04f 0000 	mov.w	r0, #0
 8005380:	f04f 0100 	mov.w	r1, #0
 8005384:	0159      	lsls	r1, r3, #5
 8005386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800538a:	0150      	lsls	r0, r2, #5
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4641      	mov	r1, r8
 8005392:	ebb2 0a01 	subs.w	sl, r2, r1
 8005396:	4649      	mov	r1, r9
 8005398:	eb63 0b01 	sbc.w	fp, r3, r1
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053b0:	ebb2 040a 	subs.w	r4, r2, sl
 80053b4:	eb63 050b 	sbc.w	r5, r3, fp
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	00eb      	lsls	r3, r5, #3
 80053c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053c6:	00e2      	lsls	r2, r4, #3
 80053c8:	4614      	mov	r4, r2
 80053ca:	461d      	mov	r5, r3
 80053cc:	4643      	mov	r3, r8
 80053ce:	18e3      	adds	r3, r4, r3
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	464b      	mov	r3, r9
 80053d4:	eb45 0303 	adc.w	r3, r5, r3
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053e6:	4629      	mov	r1, r5
 80053e8:	028b      	lsls	r3, r1, #10
 80053ea:	4621      	mov	r1, r4
 80053ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053f0:	4621      	mov	r1, r4
 80053f2:	028a      	lsls	r2, r1, #10
 80053f4:	4610      	mov	r0, r2
 80053f6:	4619      	mov	r1, r3
 80053f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053fa:	2200      	movs	r2, #0
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	61fa      	str	r2, [r7, #28]
 8005400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005404:	f7fa ff94 	bl	8000330 <__aeabi_uldivmod>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4613      	mov	r3, r2
 800540e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005410:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x200>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	0c1b      	lsrs	r3, r3, #16
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	3301      	adds	r3, #1
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005420:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005424:	fbb2 f3f3 	udiv	r3, r2, r3
 8005428:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800542a:	e002      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800542c:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x204>)
 800542e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005434:	4618      	mov	r0, r3
 8005436:	3750      	adds	r7, #80	@ 0x50
 8005438:	46bd      	mov	sp, r7
 800543a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800543e:	bf00      	nop
 8005440:	40023800 	.word	0x40023800
 8005444:	00f42400 	.word	0x00f42400
 8005448:	007a1200 	.word	0x007a1200

0800544c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005450:	4b03      	ldr	r3, [pc, #12]	@ (8005460 <HAL_RCC_GetHCLKFreq+0x14>)
 8005452:	681b      	ldr	r3, [r3, #0]
}
 8005454:	4618      	mov	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	2000000c 	.word	0x2000000c

08005464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005468:	f7ff fff0 	bl	800544c <HAL_RCC_GetHCLKFreq>
 800546c:	4602      	mov	r2, r0
 800546e:	4b05      	ldr	r3, [pc, #20]	@ (8005484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	0a9b      	lsrs	r3, r3, #10
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	4903      	ldr	r1, [pc, #12]	@ (8005488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800547a:	5ccb      	ldrb	r3, [r1, r3]
 800547c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005480:	4618      	mov	r0, r3
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40023800 	.word	0x40023800
 8005488:	0802d728 	.word	0x0802d728

0800548c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005490:	f7ff ffdc 	bl	800544c <HAL_RCC_GetHCLKFreq>
 8005494:	4602      	mov	r2, r0
 8005496:	4b05      	ldr	r3, [pc, #20]	@ (80054ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	0b5b      	lsrs	r3, r3, #13
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	4903      	ldr	r1, [pc, #12]	@ (80054b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054a2:	5ccb      	ldrb	r3, [r1, r3]
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40023800 	.word	0x40023800
 80054b0:	0802d728 	.word	0x0802d728

080054b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	220f      	movs	r2, #15
 80054c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054c4:	4b12      	ldr	r3, [pc, #72]	@ (8005510 <HAL_RCC_GetClockConfig+0x5c>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 0203 	and.w	r2, r3, #3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005510 <HAL_RCC_GetClockConfig+0x5c>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005510 <HAL_RCC_GetClockConfig+0x5c>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80054e8:	4b09      	ldr	r3, [pc, #36]	@ (8005510 <HAL_RCC_GetClockConfig+0x5c>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	08db      	lsrs	r3, r3, #3
 80054ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80054f6:	4b07      	ldr	r3, [pc, #28]	@ (8005514 <HAL_RCC_GetClockConfig+0x60>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 020f 	and.w	r2, r3, #15
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	601a      	str	r2, [r3, #0]
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40023800 	.word	0x40023800
 8005514:	40023c00 	.word	0x40023c00

08005518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10b      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800553c:	2b00      	cmp	r3, #0
 800553e:	d105      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005548:	2b00      	cmp	r3, #0
 800554a:	d075      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800554c:	4b91      	ldr	r3, [pc, #580]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005552:	f7fd f93d 	bl	80027d0 <HAL_GetTick>
 8005556:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005558:	e008      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800555a:	f7fd f939 	bl	80027d0 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e189      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800556c:	4b8a      	ldr	r3, [pc, #552]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1f0      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d009      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	019a      	lsls	r2, r3, #6
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	071b      	lsls	r3, r3, #28
 8005590:	4981      	ldr	r1, [pc, #516]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01f      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055a4:	4b7c      	ldr	r3, [pc, #496]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055aa:	0f1b      	lsrs	r3, r3, #28
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	019a      	lsls	r2, r3, #6
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	061b      	lsls	r3, r3, #24
 80055be:	431a      	orrs	r2, r3
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	071b      	lsls	r3, r3, #28
 80055c4:	4974      	ldr	r1, [pc, #464]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055cc:	4b72      	ldr	r3, [pc, #456]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055d2:	f023 021f 	bic.w	r2, r3, #31
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	3b01      	subs	r3, #1
 80055dc:	496e      	ldr	r1, [pc, #440]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00d      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	019a      	lsls	r2, r3, #6
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	061b      	lsls	r3, r3, #24
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	071b      	lsls	r3, r3, #28
 8005604:	4964      	ldr	r1, [pc, #400]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800560c:	4b61      	ldr	r3, [pc, #388]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800560e:	2201      	movs	r2, #1
 8005610:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005612:	f7fd f8dd 	bl	80027d0 <HAL_GetTick>
 8005616:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005618:	e008      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800561a:	f7fd f8d9 	bl	80027d0 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e129      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800562c:	4b5a      	ldr	r3, [pc, #360]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f0      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d105      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800564c:	2b00      	cmp	r3, #0
 800564e:	d079      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005650:	4b52      	ldr	r3, [pc, #328]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005656:	f7fd f8bb 	bl	80027d0 <HAL_GetTick>
 800565a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800565c:	e008      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800565e:	f7fd f8b7 	bl	80027d0 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e107      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005670:	4b49      	ldr	r3, [pc, #292]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005678:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800567c:	d0ef      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	2b00      	cmp	r3, #0
 8005688:	d020      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800568a:	4b43      	ldr	r3, [pc, #268]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800568c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005690:	0f1b      	lsrs	r3, r3, #28
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	019a      	lsls	r2, r3, #6
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	061b      	lsls	r3, r3, #24
 80056a4:	431a      	orrs	r2, r3
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	071b      	lsls	r3, r3, #28
 80056aa:	493b      	ldr	r1, [pc, #236]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80056b2:	4b39      	ldr	r3, [pc, #228]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056b8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	4934      	ldr	r1, [pc, #208]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0308 	and.w	r3, r3, #8
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01e      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056d8:	4b2f      	ldr	r3, [pc, #188]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056de:	0e1b      	lsrs	r3, r3, #24
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	019a      	lsls	r2, r3, #6
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	061b      	lsls	r3, r3, #24
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	071b      	lsls	r3, r3, #28
 80056f8:	4927      	ldr	r1, [pc, #156]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005700:	4b25      	ldr	r3, [pc, #148]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005702:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005706:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570e:	4922      	ldr	r1, [pc, #136]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005716:	4b21      	ldr	r3, [pc, #132]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005718:	2201      	movs	r2, #1
 800571a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800571c:	f7fd f858 	bl	80027d0 <HAL_GetTick>
 8005720:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005724:	f7fd f854 	bl	80027d0 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e0a4      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005736:	4b18      	ldr	r3, [pc, #96]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800573e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005742:	d1ef      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 808b 	beq.w	8005868 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	4b10      	ldr	r3, [pc, #64]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575a:	4a0f      	ldr	r2, [pc, #60]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800575c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005760:	6413      	str	r3, [r2, #64]	@ 0x40
 8005762:	4b0d      	ldr	r3, [pc, #52]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800576e:	4b0c      	ldr	r3, [pc, #48]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a0b      	ldr	r2, [pc, #44]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005778:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800577a:	f7fd f829 	bl	80027d0 <HAL_GetTick>
 800577e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005780:	e010      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005782:	f7fd f825 	bl	80027d0 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d909      	bls.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e075      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005794:	42470068 	.word	0x42470068
 8005798:	40023800 	.word	0x40023800
 800579c:	42470070 	.word	0x42470070
 80057a0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057a4:	4b38      	ldr	r3, [pc, #224]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0e8      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057b0:	4b36      	ldr	r3, [pc, #216]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d02f      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d028      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057ce:	4b2f      	ldr	r3, [pc, #188]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80057da:	2201      	movs	r2, #1
 80057dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057de:	4b2c      	ldr	r3, [pc, #176]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057e4:	4a29      	ldr	r2, [pc, #164]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057ea:	4b28      	ldr	r3, [pc, #160]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d114      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057f6:	f7fc ffeb 	bl	80027d0 <HAL_GetTick>
 80057fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057fc:	e00a      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057fe:	f7fc ffe7 	bl	80027d0 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800580c:	4293      	cmp	r3, r2
 800580e:	d901      	bls.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e035      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005814:	4b1d      	ldr	r3, [pc, #116]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0ee      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005824:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005828:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800582c:	d10d      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800582e:	4b17      	ldr	r3, [pc, #92]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800583e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005842:	4912      	ldr	r1, [pc, #72]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005844:	4313      	orrs	r3, r2
 8005846:	608b      	str	r3, [r1, #8]
 8005848:	e005      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800584a:	4b10      	ldr	r3, [pc, #64]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	4a0f      	ldr	r2, [pc, #60]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005850:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005854:	6093      	str	r3, [r2, #8]
 8005856:	4b0d      	ldr	r3, [pc, #52]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005858:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005862:	490a      	ldr	r1, [pc, #40]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005864:	4313      	orrs	r3, r2
 8005866:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b00      	cmp	r3, #0
 8005872:	d004      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800587a:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800587c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40007000 	.word	0x40007000
 800588c:	40023800 	.word	0x40023800
 8005890:	42470e40 	.word	0x42470e40
 8005894:	424711e0 	.word	0x424711e0

08005898 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e073      	b.n	8005996 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	7f5b      	ldrb	r3, [r3, #29]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d105      	bne.n	80058c4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fb ffc0 	bl	8001844 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d055      	beq.n	8005984 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	22ca      	movs	r2, #202	@ 0xca
 80058de:	625a      	str	r2, [r3, #36]	@ 0x24
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2253      	movs	r2, #83	@ 0x53
 80058e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fa49 	bl	8005d80 <RTC_EnterInitMode>
 80058ee:	4603      	mov	r3, r0
 80058f0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d12c      	bne.n	8005952 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800590a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6899      	ldr	r1, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	68d2      	ldr	r2, [r2, #12]
 8005932:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6919      	ldr	r1, [r3, #16]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	041a      	lsls	r2, r3, #16
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fa50 	bl	8005dee <RTC_ExitInitMode>
 800594e:	4603      	mov	r3, r0
 8005950:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d110      	bne.n	800597a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005966:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	22ff      	movs	r2, #255	@ 0xff
 8005980:	625a      	str	r2, [r3, #36]	@ 0x24
 8005982:	e001      	b.n	8005988 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005984:	2300      	movs	r3, #0
 8005986:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d102      	bne.n	8005994 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800599e:	b590      	push	{r4, r7, lr}
 80059a0:	b087      	sub	sp, #28
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	7f1b      	ldrb	r3, [r3, #28]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <HAL_RTC_SetTime+0x1c>
 80059b6:	2302      	movs	r3, #2
 80059b8:	e087      	b.n	8005aca <HAL_RTC_SetTime+0x12c>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2202      	movs	r2, #2
 80059c4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d126      	bne.n	8005a1a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d102      	bne.n	80059e0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2200      	movs	r2, #0
 80059de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fa27 	bl	8005e38 <RTC_ByteToBcd2>
 80059ea:	4603      	mov	r3, r0
 80059ec:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	785b      	ldrb	r3, [r3, #1]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fa20 	bl	8005e38 <RTC_ByteToBcd2>
 80059f8:	4603      	mov	r3, r0
 80059fa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059fc:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	789b      	ldrb	r3, [r3, #2]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fa18 	bl	8005e38 <RTC_ByteToBcd2>
 8005a08:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a0a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	78db      	ldrb	r3, [r3, #3]
 8005a12:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	e018      	b.n	8005a4c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d102      	bne.n	8005a2e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a3a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a40:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	78db      	ldrb	r3, [r3, #3]
 8005a46:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	22ca      	movs	r2, #202	@ 0xca
 8005a52:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2253      	movs	r2, #83	@ 0x53
 8005a5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f98f 	bl	8005d80 <RTC_EnterInitMode>
 8005a62:	4603      	mov	r3, r0
 8005a64:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a66:	7cfb      	ldrb	r3, [r7, #19]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d120      	bne.n	8005aae <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005a76:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005a7a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a8a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6899      	ldr	r1, [r3, #8]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 f9a2 	bl	8005dee <RTC_ExitInitMode>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005aae:	7cfb      	ldrb	r3, [r7, #19]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d102      	bne.n	8005aba <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	22ff      	movs	r2, #255	@ 0xff
 8005ac0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	771a      	strb	r2, [r3, #28]

  return status;
 8005ac8:	7cfb      	ldrb	r3, [r7, #19]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd90      	pop	{r4, r7, pc}

08005ad2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b086      	sub	sp, #24
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005b04:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005b08:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	0c1b      	lsrs	r3, r3, #16
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	0a1b      	lsrs	r3, r3, #8
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	0d9b      	lsrs	r3, r3, #22
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d11a      	bne.n	8005b84 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 f98e 	bl	8005e74 <RTC_Bcd2ToByte>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 f985 	bl	8005e74 <RTC_Bcd2ToByte>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	789b      	ldrb	r3, [r3, #2]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f97c 	bl	8005e74 <RTC_Bcd2ToByte>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	461a      	mov	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b8e:	b590      	push	{r4, r7, lr}
 8005b90:	b087      	sub	sp, #28
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	7f1b      	ldrb	r3, [r3, #28]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <HAL_RTC_SetDate+0x1c>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e071      	b.n	8005c8e <HAL_RTC_SetDate+0x100>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10e      	bne.n	8005bda <HAL_RTC_SetDate+0x4c>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	785b      	ldrb	r3, [r3, #1]
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	f023 0310 	bic.w	r3, r3, #16
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	330a      	adds	r3, #10
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d11c      	bne.n	8005c1a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	78db      	ldrb	r3, [r3, #3]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 f927 	bl	8005e38 <RTC_ByteToBcd2>
 8005bea:	4603      	mov	r3, r0
 8005bec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f920 	bl	8005e38 <RTC_ByteToBcd2>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bfc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	789b      	ldrb	r3, [r3, #2]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 f918 	bl	8005e38 <RTC_ByteToBcd2>
 8005c08:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c0a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c14:	4313      	orrs	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	e00e      	b.n	8005c38 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	78db      	ldrb	r3, [r3, #3]
 8005c1e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c26:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c2c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	22ca      	movs	r2, #202	@ 0xca
 8005c3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2253      	movs	r2, #83	@ 0x53
 8005c46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f899 	bl	8005d80 <RTC_EnterInitMode>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c52:	7cfb      	ldrb	r3, [r7, #19]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10c      	bne.n	8005c72 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005c62:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c66:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 f8c0 	bl	8005dee <RTC_ExitInitMode>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005c72:	7cfb      	ldrb	r3, [r7, #19]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d102      	bne.n	8005c7e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	22ff      	movs	r2, #255	@ 0xff
 8005c84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	771a      	strb	r2, [r3, #28]

  return status;
 8005c8c:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd90      	pop	{r4, r7, pc}

08005c96 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b086      	sub	sp, #24
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005cb0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	0c1b      	lsrs	r3, r3, #16
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	0a1b      	lsrs	r3, r3, #8
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	0b5b      	lsrs	r3, r3, #13
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d11a      	bne.n	8005d2a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	78db      	ldrb	r3, [r3, #3]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 f8bb 	bl	8005e74 <RTC_Bcd2ToByte>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	461a      	mov	r2, r3
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	785b      	ldrb	r3, [r3, #1]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 f8b2 	bl	8005e74 <RTC_Bcd2ToByte>
 8005d10:	4603      	mov	r3, r0
 8005d12:	461a      	mov	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	789b      	ldrb	r3, [r3, #2]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 f8a9 	bl	8005e74 <RTC_Bcd2ToByte>
 8005d22:	4603      	mov	r3, r0
 8005d24:	461a      	mov	r2, r3
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a0d      	ldr	r2, [pc, #52]	@ (8005d7c <HAL_RTC_WaitForSynchro+0x48>)
 8005d46:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d48:	f7fc fd42 	bl	80027d0 <HAL_GetTick>
 8005d4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d4e:	e009      	b.n	8005d64 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d50:	f7fc fd3e 	bl	80027d0 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d5e:	d901      	bls.n	8005d64 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e007      	b.n	8005d74 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0ee      	beq.n	8005d50 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	00017f5f 	.word	0x00017f5f

08005d80 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d122      	bne.n	8005de4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005dac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dae:	f7fc fd0f 	bl	80027d0 <HAL_GetTick>
 8005db2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005db4:	e00c      	b.n	8005dd0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005db6:	f7fc fd0b 	bl	80027d0 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005dc4:	d904      	bls.n	8005dd0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2204      	movs	r2, #4
 8005dca:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d102      	bne.n	8005de4 <RTC_EnterInitMode+0x64>
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d1e8      	bne.n	8005db6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e08:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff ff8b 	bl	8005d34 <HAL_RTC_WaitForSynchro>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d004      	beq.n	8005e2e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2204      	movs	r2, #4
 8005e28:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005e46:	e005      	b.n	8005e54 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	3b0a      	subs	r3, #10
 8005e52:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	2b09      	cmp	r3, #9
 8005e58:	d8f6      	bhi.n	8005e48 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	79fb      	ldrb	r3, [r7, #7]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	b2db      	uxtb	r3, r3
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	091b      	lsrs	r3, r3, #4
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	005b      	lsls	r3, r3, #1
 8005e92:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	4413      	add	r3, r2
 8005ea2:	b2db      	uxtb	r3, r3
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e025      	b.n	8005f10 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d106      	bne.n	8005ede <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7fb fe47 	bl	8001b6c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3304      	adds	r3, #4
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f002 f93d 	bl	8008170 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	461a      	mov	r2, r3
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	f002 f992 	bl	800822a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005f2a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d101      	bne.n	8005f36 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005f32:	2302      	movs	r3, #2
 8005f34:	e021      	b.n	8005f7a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005f36:	7dfb      	ldrb	r3, [r7, #23]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d002      	beq.n	8005f42 <HAL_SDRAM_SendCommand+0x2a>
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
 8005f3e:	2b05      	cmp	r3, #5
 8005f40:	d118      	bne.n	8005f74 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2202      	movs	r2, #2
 8005f46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f002 f9d2 	bl	80082fc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d104      	bne.n	8005f6a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2205      	movs	r2, #5
 8005f64:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005f68:	e006      	b.n	8005f78 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005f72:	e001      	b.n	8005f78 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d101      	bne.n	8005f9c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e016      	b.n	8005fca <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d10f      	bne.n	8005fc8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6839      	ldr	r1, [r7, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f002 f9dd 	bl	8008376 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	e000      	b.n	8005fca <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e07b      	b.n	80060dc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d108      	bne.n	8005ffe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ff4:	d009      	beq.n	800600a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	61da      	str	r2, [r3, #28]
 8005ffc:	e005      	b.n	800600a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d106      	bne.n	800602a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7fb fc37 	bl	8001898 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2202      	movs	r2, #2
 800602e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006040:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608e:	ea42 0103 	orr.w	r1, r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006096:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	0c1b      	lsrs	r3, r3, #16
 80060a8:	f003 0104 	and.w	r1, r3, #4
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b0:	f003 0210 	and.w	r2, r3, #16
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69da      	ldr	r2, [r3, #28]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	4613      	mov	r3, r2
 80060f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_SPI_Transmit+0x22>
 8006102:	2302      	movs	r3, #2
 8006104:	e12d      	b.n	8006362 <HAL_SPI_Transmit+0x27e>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800610e:	f7fc fb5f 	bl	80027d0 <HAL_GetTick>
 8006112:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b01      	cmp	r3, #1
 8006122:	d002      	beq.n	800612a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006124:	2302      	movs	r3, #2
 8006126:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006128:	e116      	b.n	8006358 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_SPI_Transmit+0x52>
 8006130:	88fb      	ldrh	r3, [r7, #6]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d102      	bne.n	800613c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	77fb      	strb	r3, [r7, #31]
    goto error;
 800613a:	e10d      	b.n	8006358 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2203      	movs	r2, #3
 8006140:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	88fa      	ldrh	r2, [r7, #6]
 8006154:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	88fa      	ldrh	r2, [r7, #6]
 800615a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006182:	d10f      	bne.n	80061a4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006192:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ae:	2b40      	cmp	r3, #64	@ 0x40
 80061b0:	d007      	beq.n	80061c2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ca:	d14f      	bne.n	800626c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <HAL_SPI_Transmit+0xf6>
 80061d4:	8afb      	ldrh	r3, [r7, #22]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d142      	bne.n	8006260 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061de:	881a      	ldrh	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ea:	1c9a      	adds	r2, r3, #2
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061fe:	e02f      	b.n	8006260 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b02      	cmp	r3, #2
 800620c:	d112      	bne.n	8006234 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006212:	881a      	ldrh	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621e:	1c9a      	adds	r2, r3, #2
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006232:	e015      	b.n	8006260 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006234:	f7fc facc 	bl	80027d0 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d803      	bhi.n	800624c <HAL_SPI_Transmit+0x168>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624a:	d102      	bne.n	8006252 <HAL_SPI_Transmit+0x16e>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800625e:	e07b      	b.n	8006358 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1ca      	bne.n	8006200 <HAL_SPI_Transmit+0x11c>
 800626a:	e050      	b.n	800630e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <HAL_SPI_Transmit+0x196>
 8006274:	8afb      	ldrh	r3, [r7, #22]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d144      	bne.n	8006304 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	330c      	adds	r3, #12
 8006284:	7812      	ldrb	r2, [r2, #0]
 8006286:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006296:	b29b      	uxth	r3, r3
 8006298:	3b01      	subs	r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062a0:	e030      	b.n	8006304 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d113      	bne.n	80062d8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	330c      	adds	r3, #12
 80062ba:	7812      	ldrb	r2, [r2, #0]
 80062bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80062d6:	e015      	b.n	8006304 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062d8:	f7fc fa7a 	bl	80027d0 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d803      	bhi.n	80062f0 <HAL_SPI_Transmit+0x20c>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ee:	d102      	bne.n	80062f6 <HAL_SPI_Transmit+0x212>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006302:	e029      	b.n	8006358 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1c9      	bne.n	80062a2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 fbe0 	bl	8006ad8 <SPI_EndRxTxTransaction>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2220      	movs	r2, #32
 8006322:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800632c:	2300      	movs	r3, #0
 800632e:	613b      	str	r3, [r7, #16]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e003      	b.n	8006358 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006360:	7ffb      	ldrb	r3, [r7, #31]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b088      	sub	sp, #32
 800636e:	af02      	add	r7, sp, #8
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	603b      	str	r3, [r7, #0]
 8006376:	4613      	mov	r3, r2
 8006378:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b01      	cmp	r3, #1
 8006388:	d002      	beq.n	8006390 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800638a:	2302      	movs	r3, #2
 800638c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800638e:	e0fb      	b.n	8006588 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006398:	d112      	bne.n	80063c0 <HAL_SPI_Receive+0x56>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10e      	bne.n	80063c0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2204      	movs	r2, #4
 80063a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80063aa:	88fa      	ldrh	r2, [r7, #6]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	4613      	mov	r3, r2
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 f8ef 	bl	800659a <HAL_SPI_TransmitReceive>
 80063bc:	4603      	mov	r3, r0
 80063be:	e0e8      	b.n	8006592 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_SPI_Receive+0x64>
 80063ca:	2302      	movs	r3, #2
 80063cc:	e0e1      	b.n	8006592 <HAL_SPI_Receive+0x228>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063d6:	f7fc f9fb 	bl	80027d0 <HAL_GetTick>
 80063da:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <HAL_SPI_Receive+0x7e>
 80063e2:	88fb      	ldrh	r3, [r7, #6]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063ec:	e0cc      	b.n	8006588 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2204      	movs	r2, #4
 80063f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	88fa      	ldrh	r2, [r7, #6]
 8006406:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	88fa      	ldrh	r2, [r7, #6]
 800640c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006434:	d10f      	bne.n	8006456 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006444:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006454:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006460:	2b40      	cmp	r3, #64	@ 0x40
 8006462:	d007      	beq.n	8006474 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006472:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d16a      	bne.n	8006552 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800647c:	e032      	b.n	80064e4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b01      	cmp	r3, #1
 800648a:	d115      	bne.n	80064b8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f103 020c 	add.w	r2, r3, #12
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006498:	7812      	ldrb	r2, [r2, #0]
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064b6:	e015      	b.n	80064e4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064b8:	f7fc f98a 	bl	80027d0 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d803      	bhi.n	80064d0 <HAL_SPI_Receive+0x166>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d102      	bne.n	80064d6 <HAL_SPI_Receive+0x16c>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80064e2:	e051      	b.n	8006588 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1c7      	bne.n	800647e <HAL_SPI_Receive+0x114>
 80064ee:	e035      	b.n	800655c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d113      	bne.n	8006526 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006508:	b292      	uxth	r2, r2
 800650a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006510:	1c9a      	adds	r2, r3, #2
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006524:	e015      	b.n	8006552 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006526:	f7fc f953 	bl	80027d0 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d803      	bhi.n	800653e <HAL_SPI_Receive+0x1d4>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653c:	d102      	bne.n	8006544 <HAL_SPI_Receive+0x1da>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d106      	bne.n	8006552 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006550:	e01a      	b.n	8006588 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1c9      	bne.n	80064f0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 fa53 	bl	8006a0c <SPI_EndRxTransaction>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2220      	movs	r2, #32
 8006570:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	75fb      	strb	r3, [r7, #23]
 800657e:	e003      	b.n	8006588 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006590:	7dfb      	ldrb	r3, [r7, #23]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3718      	adds	r7, #24
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b08c      	sub	sp, #48	@ 0x30
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	607a      	str	r2, [r7, #4]
 80065a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065a8:	2301      	movs	r3, #1
 80065aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_SPI_TransmitReceive+0x26>
 80065bc:	2302      	movs	r3, #2
 80065be:	e198      	b.n	80068f2 <HAL_SPI_TransmitReceive+0x358>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065c8:	f7fc f902 	bl	80027d0 <HAL_GetTick>
 80065cc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065de:	887b      	ldrh	r3, [r7, #2]
 80065e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d00f      	beq.n	800660a <HAL_SPI_TransmitReceive+0x70>
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065f0:	d107      	bne.n	8006602 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d103      	bne.n	8006602 <HAL_SPI_TransmitReceive+0x68>
 80065fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d003      	beq.n	800660a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006602:	2302      	movs	r3, #2
 8006604:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006608:	e16d      	b.n	80068e6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <HAL_SPI_TransmitReceive+0x82>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <HAL_SPI_TransmitReceive+0x82>
 8006616:	887b      	ldrh	r3, [r7, #2]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d103      	bne.n	8006624 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006622:	e160      	b.n	80068e6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b04      	cmp	r3, #4
 800662e:	d003      	beq.n	8006638 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2205      	movs	r2, #5
 8006634:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	887a      	ldrh	r2, [r7, #2]
 8006648:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	887a      	ldrh	r2, [r7, #2]
 800664e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	887a      	ldrh	r2, [r7, #2]
 800665a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	887a      	ldrh	r2, [r7, #2]
 8006660:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006678:	2b40      	cmp	r3, #64	@ 0x40
 800667a:	d007      	beq.n	800668c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800668a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006694:	d17c      	bne.n	8006790 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d002      	beq.n	80066a4 <HAL_SPI_TransmitReceive+0x10a>
 800669e:	8b7b      	ldrh	r3, [r7, #26]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d16a      	bne.n	800677a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a8:	881a      	ldrh	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b4:	1c9a      	adds	r2, r3, #2
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066c8:	e057      	b.n	800677a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d11b      	bne.n	8006710 <HAL_SPI_TransmitReceive+0x176>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d016      	beq.n	8006710 <HAL_SPI_TransmitReceive+0x176>
 80066e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d113      	bne.n	8006710 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ec:	881a      	ldrh	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f8:	1c9a      	adds	r2, r3, #2
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b01      	cmp	r3, #1
 800671c:	d119      	bne.n	8006752 <HAL_SPI_TransmitReceive+0x1b8>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d014      	beq.n	8006752 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006732:	b292      	uxth	r2, r2
 8006734:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673a:	1c9a      	adds	r2, r3, #2
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800674e:	2301      	movs	r3, #1
 8006750:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006752:	f7fc f83d 	bl	80027d0 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800675e:	429a      	cmp	r2, r3
 8006760:	d80b      	bhi.n	800677a <HAL_SPI_TransmitReceive+0x1e0>
 8006762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006768:	d007      	beq.n	800677a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006778:	e0b5      	b.n	80068e6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1a2      	bne.n	80066ca <HAL_SPI_TransmitReceive+0x130>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d19d      	bne.n	80066ca <HAL_SPI_TransmitReceive+0x130>
 800678e:	e080      	b.n	8006892 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <HAL_SPI_TransmitReceive+0x204>
 8006798:	8b7b      	ldrh	r3, [r7, #26]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d16f      	bne.n	800687e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	330c      	adds	r3, #12
 80067a8:	7812      	ldrb	r2, [r2, #0]
 80067aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067c4:	e05b      	b.n	800687e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d11c      	bne.n	800680e <HAL_SPI_TransmitReceive+0x274>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067d8:	b29b      	uxth	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d017      	beq.n	800680e <HAL_SPI_TransmitReceive+0x274>
 80067de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d114      	bne.n	800680e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	330c      	adds	r3, #12
 80067ee:	7812      	ldrb	r2, [r2, #0]
 80067f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006800:	b29b      	uxth	r3, r3
 8006802:	3b01      	subs	r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b01      	cmp	r3, #1
 800681a:	d119      	bne.n	8006850 <HAL_SPI_TransmitReceive+0x2b6>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006820:	b29b      	uxth	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d014      	beq.n	8006850 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68da      	ldr	r2, [r3, #12]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006842:	b29b      	uxth	r3, r3
 8006844:	3b01      	subs	r3, #1
 8006846:	b29a      	uxth	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800684c:	2301      	movs	r3, #1
 800684e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006850:	f7fb ffbe 	bl	80027d0 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800685c:	429a      	cmp	r2, r3
 800685e:	d803      	bhi.n	8006868 <HAL_SPI_TransmitReceive+0x2ce>
 8006860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006866:	d102      	bne.n	800686e <HAL_SPI_TransmitReceive+0x2d4>
 8006868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686a:	2b00      	cmp	r3, #0
 800686c:	d107      	bne.n	800687e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800687c:	e033      	b.n	80068e6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006882:	b29b      	uxth	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d19e      	bne.n	80067c6 <HAL_SPI_TransmitReceive+0x22c>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d199      	bne.n	80067c6 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006894:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f91e 	bl	8006ad8 <SPI_EndRxTxTransaction>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d006      	beq.n	80068b0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2220      	movs	r2, #32
 80068ac:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80068ae:	e01a      	b.n	80068e6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10a      	bne.n	80068ce <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068b8:	2300      	movs	r3, #0
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068dc:	e003      	b.n	80068e6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80068ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3730      	adds	r7, #48	@ 0x30
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	603b      	str	r3, [r7, #0]
 8006908:	4613      	mov	r3, r2
 800690a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800690c:	f7fb ff60 	bl	80027d0 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006914:	1a9b      	subs	r3, r3, r2
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	4413      	add	r3, r2
 800691a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800691c:	f7fb ff58 	bl	80027d0 <HAL_GetTick>
 8006920:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006922:	4b39      	ldr	r3, [pc, #228]	@ (8006a08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	015b      	lsls	r3, r3, #5
 8006928:	0d1b      	lsrs	r3, r3, #20
 800692a:	69fa      	ldr	r2, [r7, #28]
 800692c:	fb02 f303 	mul.w	r3, r2, r3
 8006930:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006932:	e054      	b.n	80069de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d050      	beq.n	80069de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800693c:	f7fb ff48 	bl	80027d0 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	429a      	cmp	r2, r3
 800694a:	d902      	bls.n	8006952 <SPI_WaitFlagStateUntilTimeout+0x56>
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d13d      	bne.n	80069ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006960:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800696a:	d111      	bne.n	8006990 <SPI_WaitFlagStateUntilTimeout+0x94>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006974:	d004      	beq.n	8006980 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800697e:	d107      	bne.n	8006990 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800698e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006998:	d10f      	bne.n	80069ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e017      	b.n	80069fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	3b01      	subs	r3, #1
 80069dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4013      	ands	r3, r2
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	bf0c      	ite	eq
 80069ee:	2301      	moveq	r3, #1
 80069f0:	2300      	movne	r3, #0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	79fb      	ldrb	r3, [r7, #7]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d19b      	bne.n	8006934 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3720      	adds	r7, #32
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	2000000c 	.word	0x2000000c

08006a0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a20:	d111      	bne.n	8006a46 <SPI_EndRxTransaction+0x3a>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a2a:	d004      	beq.n	8006a36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a34:	d107      	bne.n	8006a46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a44:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a4e:	d12a      	bne.n	8006aa6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a58:	d012      	beq.n	8006a80 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2200      	movs	r2, #0
 8006a62:	2180      	movs	r1, #128	@ 0x80
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f7ff ff49 	bl	80068fc <SPI_WaitFlagStateUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d02d      	beq.n	8006acc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a74:	f043 0220 	orr.w	r2, r3, #32
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e026      	b.n	8006ace <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2200      	movs	r2, #0
 8006a88:	2101      	movs	r1, #1
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff ff36 	bl	80068fc <SPI_WaitFlagStateUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d01a      	beq.n	8006acc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a9a:	f043 0220 	orr.w	r2, r3, #32
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e013      	b.n	8006ace <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2200      	movs	r2, #0
 8006aae:	2101      	movs	r1, #1
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7ff ff23 	bl	80068fc <SPI_WaitFlagStateUntilTimeout>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac0:	f043 0220 	orr.w	r2, r3, #32
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e000      	b.n	8006ace <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2201      	movs	r2, #1
 8006aec:	2102      	movs	r1, #2
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7ff ff04 	bl	80068fc <SPI_WaitFlagStateUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afe:	f043 0220 	orr.w	r2, r3, #32
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e032      	b.n	8006b70 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8006b78 <SPI_EndRxTxTransaction+0xa0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006b7c <SPI_EndRxTxTransaction+0xa4>)
 8006b10:	fba2 2303 	umull	r2, r3, r2, r3
 8006b14:	0d5b      	lsrs	r3, r3, #21
 8006b16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006b1a:	fb02 f303 	mul.w	r3, r2, r3
 8006b1e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b28:	d112      	bne.n	8006b50 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2200      	movs	r2, #0
 8006b32:	2180      	movs	r1, #128	@ 0x80
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f7ff fee1 	bl	80068fc <SPI_WaitFlagStateUntilTimeout>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d016      	beq.n	8006b6e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b44:	f043 0220 	orr.w	r2, r3, #32
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e00f      	b.n	8006b70 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00a      	beq.n	8006b6c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b66:	2b80      	cmp	r3, #128	@ 0x80
 8006b68:	d0f2      	beq.n	8006b50 <SPI_EndRxTxTransaction+0x78>
 8006b6a:	e000      	b.n	8006b6e <SPI_EndRxTxTransaction+0x96>
        break;
 8006b6c:	bf00      	nop
  }

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	2000000c 	.word	0x2000000c
 8006b7c:	165e9f81 	.word	0x165e9f81

08006b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e041      	b.n	8006c16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f839 	bl	8006c1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	f000 f9c0 	bl	8006f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
	...

08006c34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d001      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e04e      	b.n	8006cea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0201 	orr.w	r2, r2, #1
 8006c62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a23      	ldr	r2, [pc, #140]	@ (8006cf8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d022      	beq.n	8006cb4 <HAL_TIM_Base_Start_IT+0x80>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c76:	d01d      	beq.n	8006cb4 <HAL_TIM_Base_Start_IT+0x80>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8006cfc <HAL_TIM_Base_Start_IT+0xc8>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d018      	beq.n	8006cb4 <HAL_TIM_Base_Start_IT+0x80>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1e      	ldr	r2, [pc, #120]	@ (8006d00 <HAL_TIM_Base_Start_IT+0xcc>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d013      	beq.n	8006cb4 <HAL_TIM_Base_Start_IT+0x80>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a1c      	ldr	r2, [pc, #112]	@ (8006d04 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d00e      	beq.n	8006cb4 <HAL_TIM_Base_Start_IT+0x80>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006d08 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d009      	beq.n	8006cb4 <HAL_TIM_Base_Start_IT+0x80>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a19      	ldr	r2, [pc, #100]	@ (8006d0c <HAL_TIM_Base_Start_IT+0xd8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d004      	beq.n	8006cb4 <HAL_TIM_Base_Start_IT+0x80>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a18      	ldr	r2, [pc, #96]	@ (8006d10 <HAL_TIM_Base_Start_IT+0xdc>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d111      	bne.n	8006cd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 0307 	and.w	r3, r3, #7
 8006cbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b06      	cmp	r3, #6
 8006cc4:	d010      	beq.n	8006ce8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f042 0201 	orr.w	r2, r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cd6:	e007      	b.n	8006ce8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f042 0201 	orr.w	r2, r2, #1
 8006ce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40010000 	.word	0x40010000
 8006cfc:	40000400 	.word	0x40000400
 8006d00:	40000800 	.word	0x40000800
 8006d04:	40000c00 	.word	0x40000c00
 8006d08:	40010400 	.word	0x40010400
 8006d0c:	40014000 	.word	0x40014000
 8006d10:	40001800 	.word	0x40001800

08006d14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d020      	beq.n	8006d78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01b      	beq.n	8006d78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f06f 0202 	mvn.w	r2, #2
 8006d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	f003 0303 	and.w	r3, r3, #3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f8d2 	bl	8006f08 <HAL_TIM_IC_CaptureCallback>
 8006d64:	e005      	b.n	8006d72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f8c4 	bl	8006ef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f8d5 	bl	8006f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f003 0304 	and.w	r3, r3, #4
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d020      	beq.n	8006dc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01b      	beq.n	8006dc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0204 	mvn.w	r2, #4
 8006d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2202      	movs	r2, #2
 8006d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f8ac 	bl	8006f08 <HAL_TIM_IC_CaptureCallback>
 8006db0:	e005      	b.n	8006dbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f89e 	bl	8006ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f8af 	bl	8006f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d020      	beq.n	8006e10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f003 0308 	and.w	r3, r3, #8
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01b      	beq.n	8006e10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f06f 0208 	mvn.w	r2, #8
 8006de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2204      	movs	r2, #4
 8006de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f003 0303 	and.w	r3, r3, #3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f886 	bl	8006f08 <HAL_TIM_IC_CaptureCallback>
 8006dfc:	e005      	b.n	8006e0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f878 	bl	8006ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f889 	bl	8006f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f003 0310 	and.w	r3, r3, #16
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d020      	beq.n	8006e5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f003 0310 	and.w	r3, r3, #16
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01b      	beq.n	8006e5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f06f 0210 	mvn.w	r2, #16
 8006e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2208      	movs	r2, #8
 8006e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f860 	bl	8006f08 <HAL_TIM_IC_CaptureCallback>
 8006e48:	e005      	b.n	8006e56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f852 	bl	8006ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f863 	bl	8006f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00c      	beq.n	8006e80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d007      	beq.n	8006e80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f06f 0201 	mvn.w	r2, #1
 8006e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7fa fab8 	bl	80013f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00c      	beq.n	8006ea4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d007      	beq.n	8006ea4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f906 	bl	80070b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00c      	beq.n	8006ec8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d007      	beq.n	8006ec8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f834 	bl	8006f30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00c      	beq.n	8006eec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f003 0320 	and.w	r3, r3, #32
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d007      	beq.n	8006eec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f06f 0220 	mvn.w	r2, #32
 8006ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f8d8 	bl	800709c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006eec:	bf00      	nop
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a46      	ldr	r2, [pc, #280]	@ (8007070 <TIM_Base_SetConfig+0x12c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d013      	beq.n	8006f84 <TIM_Base_SetConfig+0x40>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f62:	d00f      	beq.n	8006f84 <TIM_Base_SetConfig+0x40>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a43      	ldr	r2, [pc, #268]	@ (8007074 <TIM_Base_SetConfig+0x130>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d00b      	beq.n	8006f84 <TIM_Base_SetConfig+0x40>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a42      	ldr	r2, [pc, #264]	@ (8007078 <TIM_Base_SetConfig+0x134>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d007      	beq.n	8006f84 <TIM_Base_SetConfig+0x40>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a41      	ldr	r2, [pc, #260]	@ (800707c <TIM_Base_SetConfig+0x138>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d003      	beq.n	8006f84 <TIM_Base_SetConfig+0x40>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a40      	ldr	r2, [pc, #256]	@ (8007080 <TIM_Base_SetConfig+0x13c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d108      	bne.n	8006f96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a35      	ldr	r2, [pc, #212]	@ (8007070 <TIM_Base_SetConfig+0x12c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d02b      	beq.n	8006ff6 <TIM_Base_SetConfig+0xb2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fa4:	d027      	beq.n	8006ff6 <TIM_Base_SetConfig+0xb2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a32      	ldr	r2, [pc, #200]	@ (8007074 <TIM_Base_SetConfig+0x130>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d023      	beq.n	8006ff6 <TIM_Base_SetConfig+0xb2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a31      	ldr	r2, [pc, #196]	@ (8007078 <TIM_Base_SetConfig+0x134>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d01f      	beq.n	8006ff6 <TIM_Base_SetConfig+0xb2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a30      	ldr	r2, [pc, #192]	@ (800707c <TIM_Base_SetConfig+0x138>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d01b      	beq.n	8006ff6 <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a2f      	ldr	r2, [pc, #188]	@ (8007080 <TIM_Base_SetConfig+0x13c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d017      	beq.n	8006ff6 <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2e      	ldr	r2, [pc, #184]	@ (8007084 <TIM_Base_SetConfig+0x140>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d013      	beq.n	8006ff6 <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8007088 <TIM_Base_SetConfig+0x144>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00f      	beq.n	8006ff6 <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800708c <TIM_Base_SetConfig+0x148>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00b      	beq.n	8006ff6 <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8007090 <TIM_Base_SetConfig+0x14c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d007      	beq.n	8006ff6 <TIM_Base_SetConfig+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8007094 <TIM_Base_SetConfig+0x150>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d003      	beq.n	8006ff6 <TIM_Base_SetConfig+0xb2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a29      	ldr	r2, [pc, #164]	@ (8007098 <TIM_Base_SetConfig+0x154>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d108      	bne.n	8007008 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a10      	ldr	r2, [pc, #64]	@ (8007070 <TIM_Base_SetConfig+0x12c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d003      	beq.n	800703c <TIM_Base_SetConfig+0xf8>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a12      	ldr	r2, [pc, #72]	@ (8007080 <TIM_Base_SetConfig+0x13c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d103      	bne.n	8007044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b01      	cmp	r3, #1
 8007054:	d105      	bne.n	8007062 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f023 0201 	bic.w	r2, r3, #1
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	611a      	str	r2, [r3, #16]
  }
}
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40010000 	.word	0x40010000
 8007074:	40000400 	.word	0x40000400
 8007078:	40000800 	.word	0x40000800
 800707c:	40000c00 	.word	0x40000c00
 8007080:	40010400 	.word	0x40010400
 8007084:	40014000 	.word	0x40014000
 8007088:	40014400 	.word	0x40014400
 800708c:	40014800 	.word	0x40014800
 8007090:	40001800 	.word	0x40001800
 8007094:	40001c00 	.word	0x40001c00
 8007098:	40002000 	.word	0x40002000

0800709c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e042      	b.n	800715c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d106      	bne.n	80070f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fa fc1c 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2224      	movs	r2, #36	@ 0x24
 80070f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007106:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fdbd 	bl	8007c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691a      	ldr	r2, [r3, #16]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800711c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	695a      	ldr	r2, [r3, #20]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800712c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68da      	ldr	r2, [r3, #12]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800713c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2220      	movs	r2, #32
 8007150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08a      	sub	sp, #40	@ 0x28
 8007168:	af02      	add	r7, sp, #8
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	4613      	mov	r3, r2
 8007172:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b20      	cmp	r3, #32
 8007182:	d175      	bne.n	8007270 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <HAL_UART_Transmit+0x2c>
 800718a:	88fb      	ldrh	r3, [r7, #6]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e06e      	b.n	8007272 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2221      	movs	r2, #33	@ 0x21
 800719e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071a2:	f7fb fb15 	bl	80027d0 <HAL_GetTick>
 80071a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	88fa      	ldrh	r2, [r7, #6]
 80071ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	88fa      	ldrh	r2, [r7, #6]
 80071b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071bc:	d108      	bne.n	80071d0 <HAL_UART_Transmit+0x6c>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d104      	bne.n	80071d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	e003      	b.n	80071d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071d4:	2300      	movs	r3, #0
 80071d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071d8:	e02e      	b.n	8007238 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2200      	movs	r2, #0
 80071e2:	2180      	movs	r1, #128	@ 0x80
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 fb1f 	bl	8007828 <UART_WaitOnFlagUntilTimeout>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d005      	beq.n	80071fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e03a      	b.n	8007272 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10b      	bne.n	800721a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007210:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	3302      	adds	r3, #2
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	e007      	b.n	800722a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	781a      	ldrb	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	3301      	adds	r3, #1
 8007228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800722e:	b29b      	uxth	r3, r3
 8007230:	3b01      	subs	r3, #1
 8007232:	b29a      	uxth	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1cb      	bne.n	80071da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2200      	movs	r2, #0
 800724a:	2140      	movs	r1, #64	@ 0x40
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 faeb 	bl	8007828 <UART_WaitOnFlagUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d005      	beq.n	8007264 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e006      	b.n	8007272 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2220      	movs	r2, #32
 8007268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	e000      	b.n	8007272 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007270:	2302      	movs	r3, #2
  }
}
 8007272:	4618      	mov	r0, r3
 8007274:	3720      	adds	r7, #32
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	4613      	mov	r3, r2
 8007286:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b20      	cmp	r3, #32
 8007292:	d112      	bne.n	80072ba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <HAL_UART_Receive_IT+0x26>
 800729a:	88fb      	ldrh	r3, [r7, #6]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e00b      	b.n	80072bc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072aa:	88fb      	ldrh	r3, [r7, #6]
 80072ac:	461a      	mov	r2, r3
 80072ae:	68b9      	ldr	r1, [r7, #8]
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 fb12 	bl	80078da <UART_Start_Receive_IT>
 80072b6:	4603      	mov	r3, r0
 80072b8:	e000      	b.n	80072bc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80072ba:	2302      	movs	r3, #2
  }
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b0ba      	sub	sp, #232	@ 0xe8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072fa:	f003 030f 	and.w	r3, r3, #15
 80072fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10f      	bne.n	800732a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800730a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800730e:	f003 0320 	and.w	r3, r3, #32
 8007312:	2b00      	cmp	r3, #0
 8007314:	d009      	beq.n	800732a <HAL_UART_IRQHandler+0x66>
 8007316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fbf2 	bl	8007b0c <UART_Receive_IT>
      return;
 8007328:	e25b      	b.n	80077e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800732a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 80de 	beq.w	80074f0 <HAL_UART_IRQHandler+0x22c>
 8007334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007344:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 80d1 	beq.w	80074f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800734e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00b      	beq.n	8007372 <HAL_UART_IRQHandler+0xae>
 800735a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800735e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007362:	2b00      	cmp	r3, #0
 8007364:	d005      	beq.n	8007372 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800736a:	f043 0201 	orr.w	r2, r3, #1
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00b      	beq.n	8007396 <HAL_UART_IRQHandler+0xd2>
 800737e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d005      	beq.n	8007396 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800738e:	f043 0202 	orr.w	r2, r3, #2
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00b      	beq.n	80073ba <HAL_UART_IRQHandler+0xf6>
 80073a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b2:	f043 0204 	orr.w	r2, r3, #4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073be:	f003 0308 	and.w	r3, r3, #8
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d011      	beq.n	80073ea <HAL_UART_IRQHandler+0x126>
 80073c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d105      	bne.n	80073de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80073d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e2:	f043 0208 	orr.w	r2, r3, #8
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 81f2 	beq.w	80077d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f8:	f003 0320 	and.w	r3, r3, #32
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d008      	beq.n	8007412 <HAL_UART_IRQHandler+0x14e>
 8007400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007404:	f003 0320 	and.w	r3, r3, #32
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fb7d 	bl	8007b0c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800741c:	2b40      	cmp	r3, #64	@ 0x40
 800741e:	bf0c      	ite	eq
 8007420:	2301      	moveq	r3, #1
 8007422:	2300      	movne	r3, #0
 8007424:	b2db      	uxtb	r3, r3
 8007426:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800742e:	f003 0308 	and.w	r3, r3, #8
 8007432:	2b00      	cmp	r3, #0
 8007434:	d103      	bne.n	800743e <HAL_UART_IRQHandler+0x17a>
 8007436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800743a:	2b00      	cmp	r3, #0
 800743c:	d04f      	beq.n	80074de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fa85 	bl	800794e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800744e:	2b40      	cmp	r3, #64	@ 0x40
 8007450:	d141      	bne.n	80074d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3314      	adds	r3, #20
 8007458:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007468:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800746c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3314      	adds	r3, #20
 800747a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800747e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800748a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1d9      	bne.n	8007452 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d013      	beq.n	80074ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074aa:	4a7e      	ldr	r2, [pc, #504]	@ (80076a4 <HAL_UART_IRQHandler+0x3e0>)
 80074ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fb fb2a 	bl	8002b0c <HAL_DMA_Abort_IT>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d016      	beq.n	80074ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80074c8:	4610      	mov	r0, r2
 80074ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074cc:	e00e      	b.n	80074ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f994 	bl	80077fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d4:	e00a      	b.n	80074ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f990 	bl	80077fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074dc:	e006      	b.n	80074ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f98c 	bl	80077fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80074ea:	e175      	b.n	80077d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ec:	bf00      	nop
    return;
 80074ee:	e173      	b.n	80077d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	f040 814f 	bne.w	8007798 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80074fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074fe:	f003 0310 	and.w	r3, r3, #16
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 8148 	beq.w	8007798 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800750c:	f003 0310 	and.w	r3, r3, #16
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 8141 	beq.w	8007798 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007516:	2300      	movs	r3, #0
 8007518:	60bb      	str	r3, [r7, #8]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	60bb      	str	r3, [r7, #8]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	60bb      	str	r3, [r7, #8]
 800752a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007536:	2b40      	cmp	r3, #64	@ 0x40
 8007538:	f040 80b6 	bne.w	80076a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007548:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8145 	beq.w	80077dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800755a:	429a      	cmp	r2, r3
 800755c:	f080 813e 	bcs.w	80077dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007566:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007572:	f000 8088 	beq.w	8007686 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	330c      	adds	r3, #12
 800757c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800758c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007594:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	330c      	adds	r3, #12
 800759e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80075a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80075a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80075ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80075ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1d9      	bne.n	8007576 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3314      	adds	r3, #20
 80075c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80075d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075d4:	f023 0301 	bic.w	r3, r3, #1
 80075d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3314      	adds	r3, #20
 80075e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80075e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80075ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80075ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80075f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e1      	bne.n	80075c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3314      	adds	r3, #20
 8007604:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800760e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3314      	adds	r3, #20
 800761e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007622:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007624:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007626:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007628:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800762a:	e841 2300 	strex	r3, r2, [r1]
 800762e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007630:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e3      	bne.n	80075fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2220      	movs	r2, #32
 800763a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	330c      	adds	r3, #12
 800764a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007654:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007656:	f023 0310 	bic.w	r3, r3, #16
 800765a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	330c      	adds	r3, #12
 8007664:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007668:	65ba      	str	r2, [r7, #88]	@ 0x58
 800766a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800766e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e3      	bne.n	8007644 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007680:	4618      	mov	r0, r3
 8007682:	f7fb f9d3 	bl	8002a2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2202      	movs	r2, #2
 800768a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007694:	b29b      	uxth	r3, r3
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	b29b      	uxth	r3, r3
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f8b7 	bl	8007810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076a2:	e09b      	b.n	80077dc <HAL_UART_IRQHandler+0x518>
 80076a4:	08007a15 	.word	0x08007a15
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 808e 	beq.w	80077e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80076c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 8089 	beq.w	80077e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	330c      	adds	r3, #12
 80076d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	330c      	adds	r3, #12
 80076ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80076f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80076f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e3      	bne.n	80076ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3314      	adds	r3, #20
 800770c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	623b      	str	r3, [r7, #32]
   return(result);
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	f023 0301 	bic.w	r3, r3, #1
 800771c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3314      	adds	r3, #20
 8007726:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800772a:	633a      	str	r2, [r7, #48]	@ 0x30
 800772c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007732:	e841 2300 	strex	r3, r2, [r1]
 8007736:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1e3      	bne.n	8007706 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	330c      	adds	r3, #12
 8007752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	60fb      	str	r3, [r7, #12]
   return(result);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0310 	bic.w	r3, r3, #16
 8007762:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	330c      	adds	r3, #12
 800776c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007770:	61fa      	str	r2, [r7, #28]
 8007772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007774:	69b9      	ldr	r1, [r7, #24]
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	617b      	str	r3, [r7, #20]
   return(result);
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e3      	bne.n	800774c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800778a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f83d 	bl	8007810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007796:	e023      	b.n	80077e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800779c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d009      	beq.n	80077b8 <HAL_UART_IRQHandler+0x4f4>
 80077a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f943 	bl	8007a3c <UART_Transmit_IT>
    return;
 80077b6:	e014      	b.n	80077e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00e      	beq.n	80077e2 <HAL_UART_IRQHandler+0x51e>
 80077c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d008      	beq.n	80077e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f983 	bl	8007adc <UART_EndTransmit_IT>
    return;
 80077d6:	e004      	b.n	80077e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80077d8:	bf00      	nop
 80077da:	e002      	b.n	80077e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80077dc:	bf00      	nop
 80077de:	e000      	b.n	80077e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80077e0:	bf00      	nop
  }
}
 80077e2:	37e8      	adds	r7, #232	@ 0xe8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	4613      	mov	r3, r2
 8007836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007838:	e03b      	b.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007840:	d037      	beq.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007842:	f7fa ffc5 	bl	80027d0 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	6a3a      	ldr	r2, [r7, #32]
 800784e:	429a      	cmp	r2, r3
 8007850:	d302      	bcc.n	8007858 <UART_WaitOnFlagUntilTimeout+0x30>
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e03a      	b.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f003 0304 	and.w	r3, r3, #4
 8007866:	2b00      	cmp	r3, #0
 8007868:	d023      	beq.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2b80      	cmp	r3, #128	@ 0x80
 800786e:	d020      	beq.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2b40      	cmp	r3, #64	@ 0x40
 8007874:	d01d      	beq.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0308 	and.w	r3, r3, #8
 8007880:	2b08      	cmp	r3, #8
 8007882:	d116      	bne.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007884:	2300      	movs	r3, #0
 8007886:	617b      	str	r3, [r7, #20]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 f857 	bl	800794e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2208      	movs	r2, #8
 80078a4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e00f      	b.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	4013      	ands	r3, r2
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	429a      	cmp	r2, r3
 80078c0:	bf0c      	ite	eq
 80078c2:	2301      	moveq	r3, #1
 80078c4:	2300      	movne	r3, #0
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	461a      	mov	r2, r3
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d0b4      	beq.n	800783a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078da:	b480      	push	{r7}
 80078dc:	b085      	sub	sp, #20
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	4613      	mov	r3, r2
 80078e6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	88fa      	ldrh	r2, [r7, #6]
 80078f2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	88fa      	ldrh	r2, [r7, #6]
 80078f8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2222      	movs	r2, #34	@ 0x22
 8007904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d007      	beq.n	8007920 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800791e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	695a      	ldr	r2, [r3, #20]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0201 	orr.w	r2, r2, #1
 800792e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68da      	ldr	r2, [r3, #12]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0220 	orr.w	r2, r2, #32
 800793e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800794e:	b480      	push	{r7}
 8007950:	b095      	sub	sp, #84	@ 0x54
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	330c      	adds	r3, #12
 800795c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800796c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	330c      	adds	r3, #12
 8007974:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007976:	643a      	str	r2, [r7, #64]	@ 0x40
 8007978:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800797c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800797e:	e841 2300 	strex	r3, r2, [r1]
 8007982:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e5      	bne.n	8007956 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3314      	adds	r3, #20
 8007990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	e853 3f00 	ldrex	r3, [r3]
 8007998:	61fb      	str	r3, [r7, #28]
   return(result);
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	f023 0301 	bic.w	r3, r3, #1
 80079a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3314      	adds	r3, #20
 80079a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079b2:	e841 2300 	strex	r3, r2, [r1]
 80079b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1e5      	bne.n	800798a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d119      	bne.n	80079fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	330c      	adds	r3, #12
 80079cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f023 0310 	bic.w	r3, r3, #16
 80079dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	330c      	adds	r3, #12
 80079e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079e6:	61ba      	str	r2, [r7, #24]
 80079e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6979      	ldr	r1, [r7, #20]
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	613b      	str	r3, [r7, #16]
   return(result);
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e5      	bne.n	80079c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2220      	movs	r2, #32
 80079fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007a08:	bf00      	nop
 8007a0a:	3754      	adds	r7, #84	@ 0x54
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7ff fee4 	bl	80077fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a34:	bf00      	nop
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b21      	cmp	r3, #33	@ 0x21
 8007a4e:	d13e      	bne.n	8007ace <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a58:	d114      	bne.n	8007a84 <UART_Transmit_IT+0x48>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d110      	bne.n	8007a84 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a1b      	ldr	r3, [r3, #32]
 8007a7c:	1c9a      	adds	r2, r3, #2
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	621a      	str	r2, [r3, #32]
 8007a82:	e008      	b.n	8007a96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	1c59      	adds	r1, r3, #1
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6211      	str	r1, [r2, #32]
 8007a8e:	781a      	ldrb	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10f      	bne.n	8007aca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ab8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ac8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	e000      	b.n	8007ad0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ace:	2302      	movs	r3, #2
  }
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007af2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f7ff fe73 	bl	80077e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08c      	sub	sp, #48	@ 0x30
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b22      	cmp	r3, #34	@ 0x22
 8007b1e:	f040 80ae 	bne.w	8007c7e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b2a:	d117      	bne.n	8007b5c <UART_Receive_IT+0x50>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d113      	bne.n	8007b5c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b34:	2300      	movs	r3, #0
 8007b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b54:	1c9a      	adds	r2, r3, #2
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b5a:	e026      	b.n	8007baa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007b62:	2300      	movs	r3, #0
 8007b64:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b6e:	d007      	beq.n	8007b80 <UART_Receive_IT+0x74>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <UART_Receive_IT+0x82>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d106      	bne.n	8007b8e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b8a:	701a      	strb	r2, [r3, #0]
 8007b8c:	e008      	b.n	8007ba0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d15d      	bne.n	8007c7a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68da      	ldr	r2, [r3, #12]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 0220 	bic.w	r2, r2, #32
 8007bcc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007bdc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695a      	ldr	r2, [r3, #20]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0201 	bic.w	r2, r2, #1
 8007bec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d135      	bne.n	8007c70 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	330c      	adds	r3, #12
 8007c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	e853 3f00 	ldrex	r3, [r3]
 8007c18:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f023 0310 	bic.w	r3, r3, #16
 8007c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	330c      	adds	r3, #12
 8007c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c2a:	623a      	str	r2, [r7, #32]
 8007c2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	69f9      	ldr	r1, [r7, #28]
 8007c30:	6a3a      	ldr	r2, [r7, #32]
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e5      	bne.n	8007c0a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0310 	and.w	r3, r3, #16
 8007c48:	2b10      	cmp	r3, #16
 8007c4a:	d10a      	bne.n	8007c62 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	60fb      	str	r3, [r7, #12]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	60fb      	str	r3, [r7, #12]
 8007c60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff fdd1 	bl	8007810 <HAL_UARTEx_RxEventCallback>
 8007c6e:	e002      	b.n	8007c76 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7f8 fcf1 	bl	8000658 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	e002      	b.n	8007c80 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e000      	b.n	8007c80 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007c7e:	2302      	movs	r3, #2
  }
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3730      	adds	r7, #48	@ 0x30
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c8c:	b0c0      	sub	sp, #256	@ 0x100
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca4:	68d9      	ldr	r1, [r3, #12]
 8007ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	ea40 0301 	orr.w	r3, r0, r1
 8007cb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	431a      	orrs	r2, r3
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007ce0:	f021 010c 	bic.w	r1, r1, #12
 8007ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007cee:	430b      	orrs	r3, r1
 8007cf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d02:	6999      	ldr	r1, [r3, #24]
 8007d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	ea40 0301 	orr.w	r3, r0, r1
 8007d0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	4b8f      	ldr	r3, [pc, #572]	@ (8007f54 <UART_SetConfig+0x2cc>)
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d005      	beq.n	8007d28 <UART_SetConfig+0xa0>
 8007d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	4b8d      	ldr	r3, [pc, #564]	@ (8007f58 <UART_SetConfig+0x2d0>)
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d104      	bne.n	8007d32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d28:	f7fd fbb0 	bl	800548c <HAL_RCC_GetPCLK2Freq>
 8007d2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007d30:	e003      	b.n	8007d3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d32:	f7fd fb97 	bl	8005464 <HAL_RCC_GetPCLK1Freq>
 8007d36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d44:	f040 810c 	bne.w	8007f60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007d56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007d5a:	4622      	mov	r2, r4
 8007d5c:	462b      	mov	r3, r5
 8007d5e:	1891      	adds	r1, r2, r2
 8007d60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007d62:	415b      	adcs	r3, r3
 8007d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	eb12 0801 	adds.w	r8, r2, r1
 8007d70:	4629      	mov	r1, r5
 8007d72:	eb43 0901 	adc.w	r9, r3, r1
 8007d76:	f04f 0200 	mov.w	r2, #0
 8007d7a:	f04f 0300 	mov.w	r3, #0
 8007d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d8a:	4690      	mov	r8, r2
 8007d8c:	4699      	mov	r9, r3
 8007d8e:	4623      	mov	r3, r4
 8007d90:	eb18 0303 	adds.w	r3, r8, r3
 8007d94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d98:	462b      	mov	r3, r5
 8007d9a:	eb49 0303 	adc.w	r3, r9, r3
 8007d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007db2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007db6:	460b      	mov	r3, r1
 8007db8:	18db      	adds	r3, r3, r3
 8007dba:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	eb42 0303 	adc.w	r3, r2, r3
 8007dc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007dc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007dcc:	f7f8 fab0 	bl	8000330 <__aeabi_uldivmod>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4b61      	ldr	r3, [pc, #388]	@ (8007f5c <UART_SetConfig+0x2d4>)
 8007dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8007dda:	095b      	lsrs	r3, r3, #5
 8007ddc:	011c      	lsls	r4, r3, #4
 8007dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007de8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007dec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007df0:	4642      	mov	r2, r8
 8007df2:	464b      	mov	r3, r9
 8007df4:	1891      	adds	r1, r2, r2
 8007df6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007df8:	415b      	adcs	r3, r3
 8007dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e00:	4641      	mov	r1, r8
 8007e02:	eb12 0a01 	adds.w	sl, r2, r1
 8007e06:	4649      	mov	r1, r9
 8007e08:	eb43 0b01 	adc.w	fp, r3, r1
 8007e0c:	f04f 0200 	mov.w	r2, #0
 8007e10:	f04f 0300 	mov.w	r3, #0
 8007e14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e20:	4692      	mov	sl, r2
 8007e22:	469b      	mov	fp, r3
 8007e24:	4643      	mov	r3, r8
 8007e26:	eb1a 0303 	adds.w	r3, sl, r3
 8007e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e2e:	464b      	mov	r3, r9
 8007e30:	eb4b 0303 	adc.w	r3, fp, r3
 8007e34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007e48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	18db      	adds	r3, r3, r3
 8007e50:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e52:	4613      	mov	r3, r2
 8007e54:	eb42 0303 	adc.w	r3, r2, r3
 8007e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007e5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007e62:	f7f8 fa65 	bl	8000330 <__aeabi_uldivmod>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8007f5c <UART_SetConfig+0x2d4>)
 8007e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8007e72:	095b      	lsrs	r3, r3, #5
 8007e74:	2264      	movs	r2, #100	@ 0x64
 8007e76:	fb02 f303 	mul.w	r3, r2, r3
 8007e7a:	1acb      	subs	r3, r1, r3
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007e82:	4b36      	ldr	r3, [pc, #216]	@ (8007f5c <UART_SetConfig+0x2d4>)
 8007e84:	fba3 2302 	umull	r2, r3, r3, r2
 8007e88:	095b      	lsrs	r3, r3, #5
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007e90:	441c      	add	r4, r3
 8007e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007ea0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007ea4:	4642      	mov	r2, r8
 8007ea6:	464b      	mov	r3, r9
 8007ea8:	1891      	adds	r1, r2, r2
 8007eaa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007eac:	415b      	adcs	r3, r3
 8007eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007eb4:	4641      	mov	r1, r8
 8007eb6:	1851      	adds	r1, r2, r1
 8007eb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8007eba:	4649      	mov	r1, r9
 8007ebc:	414b      	adcs	r3, r1
 8007ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ec0:	f04f 0200 	mov.w	r2, #0
 8007ec4:	f04f 0300 	mov.w	r3, #0
 8007ec8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007ecc:	4659      	mov	r1, fp
 8007ece:	00cb      	lsls	r3, r1, #3
 8007ed0:	4651      	mov	r1, sl
 8007ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ed6:	4651      	mov	r1, sl
 8007ed8:	00ca      	lsls	r2, r1, #3
 8007eda:	4610      	mov	r0, r2
 8007edc:	4619      	mov	r1, r3
 8007ede:	4603      	mov	r3, r0
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	189b      	adds	r3, r3, r2
 8007ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ee8:	464b      	mov	r3, r9
 8007eea:	460a      	mov	r2, r1
 8007eec:	eb42 0303 	adc.w	r3, r2, r3
 8007ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007f04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f08:	460b      	mov	r3, r1
 8007f0a:	18db      	adds	r3, r3, r3
 8007f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f0e:	4613      	mov	r3, r2
 8007f10:	eb42 0303 	adc.w	r3, r2, r3
 8007f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007f1e:	f7f8 fa07 	bl	8000330 <__aeabi_uldivmod>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	4b0d      	ldr	r3, [pc, #52]	@ (8007f5c <UART_SetConfig+0x2d4>)
 8007f28:	fba3 1302 	umull	r1, r3, r3, r2
 8007f2c:	095b      	lsrs	r3, r3, #5
 8007f2e:	2164      	movs	r1, #100	@ 0x64
 8007f30:	fb01 f303 	mul.w	r3, r1, r3
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	00db      	lsls	r3, r3, #3
 8007f38:	3332      	adds	r3, #50	@ 0x32
 8007f3a:	4a08      	ldr	r2, [pc, #32]	@ (8007f5c <UART_SetConfig+0x2d4>)
 8007f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f40:	095b      	lsrs	r3, r3, #5
 8007f42:	f003 0207 	and.w	r2, r3, #7
 8007f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4422      	add	r2, r4
 8007f4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f50:	e106      	b.n	8008160 <UART_SetConfig+0x4d8>
 8007f52:	bf00      	nop
 8007f54:	40011000 	.word	0x40011000
 8007f58:	40011400 	.word	0x40011400
 8007f5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007f6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007f72:	4642      	mov	r2, r8
 8007f74:	464b      	mov	r3, r9
 8007f76:	1891      	adds	r1, r2, r2
 8007f78:	6239      	str	r1, [r7, #32]
 8007f7a:	415b      	adcs	r3, r3
 8007f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f82:	4641      	mov	r1, r8
 8007f84:	1854      	adds	r4, r2, r1
 8007f86:	4649      	mov	r1, r9
 8007f88:	eb43 0501 	adc.w	r5, r3, r1
 8007f8c:	f04f 0200 	mov.w	r2, #0
 8007f90:	f04f 0300 	mov.w	r3, #0
 8007f94:	00eb      	lsls	r3, r5, #3
 8007f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f9a:	00e2      	lsls	r2, r4, #3
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	461d      	mov	r5, r3
 8007fa0:	4643      	mov	r3, r8
 8007fa2:	18e3      	adds	r3, r4, r3
 8007fa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fa8:	464b      	mov	r3, r9
 8007faa:	eb45 0303 	adc.w	r3, r5, r3
 8007fae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007fce:	4629      	mov	r1, r5
 8007fd0:	008b      	lsls	r3, r1, #2
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fd8:	4621      	mov	r1, r4
 8007fda:	008a      	lsls	r2, r1, #2
 8007fdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007fe0:	f7f8 f9a6 	bl	8000330 <__aeabi_uldivmod>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4b60      	ldr	r3, [pc, #384]	@ (800816c <UART_SetConfig+0x4e4>)
 8007fea:	fba3 2302 	umull	r2, r3, r3, r2
 8007fee:	095b      	lsrs	r3, r3, #5
 8007ff0:	011c      	lsls	r4, r3, #4
 8007ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ffc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008000:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008004:	4642      	mov	r2, r8
 8008006:	464b      	mov	r3, r9
 8008008:	1891      	adds	r1, r2, r2
 800800a:	61b9      	str	r1, [r7, #24]
 800800c:	415b      	adcs	r3, r3
 800800e:	61fb      	str	r3, [r7, #28]
 8008010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008014:	4641      	mov	r1, r8
 8008016:	1851      	adds	r1, r2, r1
 8008018:	6139      	str	r1, [r7, #16]
 800801a:	4649      	mov	r1, r9
 800801c:	414b      	adcs	r3, r1
 800801e:	617b      	str	r3, [r7, #20]
 8008020:	f04f 0200 	mov.w	r2, #0
 8008024:	f04f 0300 	mov.w	r3, #0
 8008028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800802c:	4659      	mov	r1, fp
 800802e:	00cb      	lsls	r3, r1, #3
 8008030:	4651      	mov	r1, sl
 8008032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008036:	4651      	mov	r1, sl
 8008038:	00ca      	lsls	r2, r1, #3
 800803a:	4610      	mov	r0, r2
 800803c:	4619      	mov	r1, r3
 800803e:	4603      	mov	r3, r0
 8008040:	4642      	mov	r2, r8
 8008042:	189b      	adds	r3, r3, r2
 8008044:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008048:	464b      	mov	r3, r9
 800804a:	460a      	mov	r2, r1
 800804c:	eb42 0303 	adc.w	r3, r2, r3
 8008050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800805e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008060:	f04f 0200 	mov.w	r2, #0
 8008064:	f04f 0300 	mov.w	r3, #0
 8008068:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800806c:	4649      	mov	r1, r9
 800806e:	008b      	lsls	r3, r1, #2
 8008070:	4641      	mov	r1, r8
 8008072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008076:	4641      	mov	r1, r8
 8008078:	008a      	lsls	r2, r1, #2
 800807a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800807e:	f7f8 f957 	bl	8000330 <__aeabi_uldivmod>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4611      	mov	r1, r2
 8008088:	4b38      	ldr	r3, [pc, #224]	@ (800816c <UART_SetConfig+0x4e4>)
 800808a:	fba3 2301 	umull	r2, r3, r3, r1
 800808e:	095b      	lsrs	r3, r3, #5
 8008090:	2264      	movs	r2, #100	@ 0x64
 8008092:	fb02 f303 	mul.w	r3, r2, r3
 8008096:	1acb      	subs	r3, r1, r3
 8008098:	011b      	lsls	r3, r3, #4
 800809a:	3332      	adds	r3, #50	@ 0x32
 800809c:	4a33      	ldr	r2, [pc, #204]	@ (800816c <UART_SetConfig+0x4e4>)
 800809e:	fba2 2303 	umull	r2, r3, r2, r3
 80080a2:	095b      	lsrs	r3, r3, #5
 80080a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080a8:	441c      	add	r4, r3
 80080aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080ae:	2200      	movs	r2, #0
 80080b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80080b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80080b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80080b8:	4642      	mov	r2, r8
 80080ba:	464b      	mov	r3, r9
 80080bc:	1891      	adds	r1, r2, r2
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	415b      	adcs	r3, r3
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080c8:	4641      	mov	r1, r8
 80080ca:	1851      	adds	r1, r2, r1
 80080cc:	6039      	str	r1, [r7, #0]
 80080ce:	4649      	mov	r1, r9
 80080d0:	414b      	adcs	r3, r1
 80080d2:	607b      	str	r3, [r7, #4]
 80080d4:	f04f 0200 	mov.w	r2, #0
 80080d8:	f04f 0300 	mov.w	r3, #0
 80080dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080e0:	4659      	mov	r1, fp
 80080e2:	00cb      	lsls	r3, r1, #3
 80080e4:	4651      	mov	r1, sl
 80080e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080ea:	4651      	mov	r1, sl
 80080ec:	00ca      	lsls	r2, r1, #3
 80080ee:	4610      	mov	r0, r2
 80080f0:	4619      	mov	r1, r3
 80080f2:	4603      	mov	r3, r0
 80080f4:	4642      	mov	r2, r8
 80080f6:	189b      	adds	r3, r3, r2
 80080f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080fa:	464b      	mov	r3, r9
 80080fc:	460a      	mov	r2, r1
 80080fe:	eb42 0303 	adc.w	r3, r2, r3
 8008102:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	663b      	str	r3, [r7, #96]	@ 0x60
 800810e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008110:	f04f 0200 	mov.w	r2, #0
 8008114:	f04f 0300 	mov.w	r3, #0
 8008118:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800811c:	4649      	mov	r1, r9
 800811e:	008b      	lsls	r3, r1, #2
 8008120:	4641      	mov	r1, r8
 8008122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008126:	4641      	mov	r1, r8
 8008128:	008a      	lsls	r2, r1, #2
 800812a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800812e:	f7f8 f8ff 	bl	8000330 <__aeabi_uldivmod>
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	4b0d      	ldr	r3, [pc, #52]	@ (800816c <UART_SetConfig+0x4e4>)
 8008138:	fba3 1302 	umull	r1, r3, r3, r2
 800813c:	095b      	lsrs	r3, r3, #5
 800813e:	2164      	movs	r1, #100	@ 0x64
 8008140:	fb01 f303 	mul.w	r3, r1, r3
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	011b      	lsls	r3, r3, #4
 8008148:	3332      	adds	r3, #50	@ 0x32
 800814a:	4a08      	ldr	r2, [pc, #32]	@ (800816c <UART_SetConfig+0x4e4>)
 800814c:	fba2 2303 	umull	r2, r3, r2, r3
 8008150:	095b      	lsrs	r3, r3, #5
 8008152:	f003 020f 	and.w	r2, r3, #15
 8008156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4422      	add	r2, r4
 800815e:	609a      	str	r2, [r3, #8]
}
 8008160:	bf00      	nop
 8008162:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008166:	46bd      	mov	sp, r7
 8008168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800816c:	51eb851f 	.word	0x51eb851f

08008170 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d123      	bne.n	80081ca <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800818a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	6851      	ldr	r1, [r2, #4]
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	6892      	ldr	r2, [r2, #8]
 8008196:	4311      	orrs	r1, r2
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	68d2      	ldr	r2, [r2, #12]
 800819c:	4311      	orrs	r1, r2
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	6912      	ldr	r2, [r2, #16]
 80081a2:	4311      	orrs	r1, r2
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	6952      	ldr	r2, [r2, #20]
 80081a8:	4311      	orrs	r1, r2
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	6992      	ldr	r2, [r2, #24]
 80081ae:	4311      	orrs	r1, r2
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	69d2      	ldr	r2, [r2, #28]
 80081b4:	4311      	orrs	r1, r2
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	6a12      	ldr	r2, [r2, #32]
 80081ba:	4311      	orrs	r1, r2
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80081c0:	430a      	orrs	r2, r1
 80081c2:	431a      	orrs	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	e028      	b.n	800821c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	69d9      	ldr	r1, [r3, #28]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	4319      	orrs	r1, r3
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e0:	430b      	orrs	r3, r1
 80081e2:	431a      	orrs	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80081f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	6851      	ldr	r1, [r2, #4]
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	6892      	ldr	r2, [r2, #8]
 80081fc:	4311      	orrs	r1, r2
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	68d2      	ldr	r2, [r2, #12]
 8008202:	4311      	orrs	r1, r2
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	6912      	ldr	r2, [r2, #16]
 8008208:	4311      	orrs	r1, r2
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	6952      	ldr	r2, [r2, #20]
 800820e:	4311      	orrs	r1, r2
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	6992      	ldr	r2, [r2, #24]
 8008214:	430a      	orrs	r2, r1
 8008216:	431a      	orrs	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800822a:	b480      	push	{r7}
 800822c:	b085      	sub	sp, #20
 800822e:	af00      	add	r7, sp, #0
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d128      	bne.n	800828e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	1e59      	subs	r1, r3, #1
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	3b01      	subs	r3, #1
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	4319      	orrs	r1, r3
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	3b01      	subs	r3, #1
 800825a:	021b      	lsls	r3, r3, #8
 800825c:	4319      	orrs	r1, r3
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	3b01      	subs	r3, #1
 8008264:	031b      	lsls	r3, r3, #12
 8008266:	4319      	orrs	r1, r3
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	3b01      	subs	r3, #1
 800826e:	041b      	lsls	r3, r3, #16
 8008270:	4319      	orrs	r1, r3
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	3b01      	subs	r3, #1
 8008278:	051b      	lsls	r3, r3, #20
 800827a:	4319      	orrs	r1, r3
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	3b01      	subs	r3, #1
 8008282:	061b      	lsls	r3, r3, #24
 8008284:	430b      	orrs	r3, r1
 8008286:	431a      	orrs	r2, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	609a      	str	r2, [r3, #8]
 800828c:	e02f      	b.n	80082ee <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008296:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	68d2      	ldr	r2, [r2, #12]
 800829e:	3a01      	subs	r2, #1
 80082a0:	0311      	lsls	r1, r2, #12
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	6952      	ldr	r2, [r2, #20]
 80082a6:	3a01      	subs	r2, #1
 80082a8:	0512      	lsls	r2, r2, #20
 80082aa:	430a      	orrs	r2, r1
 80082ac:	431a      	orrs	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	1e59      	subs	r1, r3, #1
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	4319      	orrs	r1, r3
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	3b01      	subs	r3, #1
 80082d0:	021b      	lsls	r3, r3, #8
 80082d2:	4319      	orrs	r1, r3
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	3b01      	subs	r3, #1
 80082da:	041b      	lsls	r3, r3, #16
 80082dc:	4319      	orrs	r1, r3
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	061b      	lsls	r3, r3, #24
 80082e6:	430b      	orrs	r3, r1
 80082e8:	431a      	orrs	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	0d9b      	lsrs	r3, r3, #22
 8008312:	059b      	lsls	r3, r3, #22
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	6811      	ldr	r1, [r2, #0]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	6852      	ldr	r2, [r2, #4]
 800831c:	4311      	orrs	r1, r2
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	6892      	ldr	r2, [r2, #8]
 8008322:	3a01      	subs	r2, #1
 8008324:	0152      	lsls	r2, r2, #5
 8008326:	4311      	orrs	r1, r2
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	68d2      	ldr	r2, [r2, #12]
 800832c:	0252      	lsls	r2, r2, #9
 800832e:	430a      	orrs	r2, r1
 8008330:	431a      	orrs	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008336:	f7fa fa4b 	bl	80027d0 <HAL_GetTick>
 800833a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800833c:	e010      	b.n	8008360 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008344:	d00c      	beq.n	8008360 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d007      	beq.n	800835c <FMC_SDRAM_SendCommand+0x60>
 800834c:	f7fa fa40 	bl	80027d0 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	429a      	cmp	r2, r3
 800835a:	d201      	bcs.n	8008360 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e006      	b.n	800836e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	f003 0320 	and.w	r3, r3, #32
 8008368:	2b20      	cmp	r3, #32
 800836a:	d0e8      	beq.n	800833e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8008388:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	0052      	lsls	r2, r2, #1
 8008390:	431a      	orrs	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <__NVIC_SetPriority>:
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	6039      	str	r1, [r7, #0]
 80083ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	db0a      	blt.n	80083ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	490c      	ldr	r1, [pc, #48]	@ (80083f0 <__NVIC_SetPriority+0x4c>)
 80083be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083c2:	0112      	lsls	r2, r2, #4
 80083c4:	b2d2      	uxtb	r2, r2
 80083c6:	440b      	add	r3, r1
 80083c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80083cc:	e00a      	b.n	80083e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	4908      	ldr	r1, [pc, #32]	@ (80083f4 <__NVIC_SetPriority+0x50>)
 80083d4:	79fb      	ldrb	r3, [r7, #7]
 80083d6:	f003 030f 	and.w	r3, r3, #15
 80083da:	3b04      	subs	r3, #4
 80083dc:	0112      	lsls	r2, r2, #4
 80083de:	b2d2      	uxtb	r2, r2
 80083e0:	440b      	add	r3, r1
 80083e2:	761a      	strb	r2, [r3, #24]
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	e000e100 	.word	0xe000e100
 80083f4:	e000ed00 	.word	0xe000ed00

080083f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80083fc:	4b05      	ldr	r3, [pc, #20]	@ (8008414 <SysTick_Handler+0x1c>)
 80083fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008400:	f002 fa9c 	bl	800a93c <xTaskGetSchedulerState>
 8008404:	4603      	mov	r3, r0
 8008406:	2b01      	cmp	r3, #1
 8008408:	d001      	beq.n	800840e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800840a:	f003 f995 	bl	800b738 <xPortSysTickHandler>
  }
}
 800840e:	bf00      	nop
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	e000e010 	.word	0xe000e010

08008418 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800841c:	2100      	movs	r1, #0
 800841e:	f06f 0004 	mvn.w	r0, #4
 8008422:	f7ff ffbf 	bl	80083a4 <__NVIC_SetPriority>
#endif
}
 8008426:	bf00      	nop
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008432:	f3ef 8305 	mrs	r3, IPSR
 8008436:	603b      	str	r3, [r7, #0]
  return(result);
 8008438:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800843e:	f06f 0305 	mvn.w	r3, #5
 8008442:	607b      	str	r3, [r7, #4]
 8008444:	e00c      	b.n	8008460 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008446:	4b0a      	ldr	r3, [pc, #40]	@ (8008470 <osKernelInitialize+0x44>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d105      	bne.n	800845a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800844e:	4b08      	ldr	r3, [pc, #32]	@ (8008470 <osKernelInitialize+0x44>)
 8008450:	2201      	movs	r2, #1
 8008452:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008454:	2300      	movs	r3, #0
 8008456:	607b      	str	r3, [r7, #4]
 8008458:	e002      	b.n	8008460 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800845a:	f04f 33ff 	mov.w	r3, #4294967295
 800845e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008460:	687b      	ldr	r3, [r7, #4]
}
 8008462:	4618      	mov	r0, r3
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	20000478 	.word	0x20000478

08008474 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800847a:	f3ef 8305 	mrs	r3, IPSR
 800847e:	603b      	str	r3, [r7, #0]
  return(result);
 8008480:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008486:	f06f 0305 	mvn.w	r3, #5
 800848a:	607b      	str	r3, [r7, #4]
 800848c:	e010      	b.n	80084b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800848e:	4b0b      	ldr	r3, [pc, #44]	@ (80084bc <osKernelStart+0x48>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d109      	bne.n	80084aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008496:	f7ff ffbf 	bl	8008418 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800849a:	4b08      	ldr	r3, [pc, #32]	@ (80084bc <osKernelStart+0x48>)
 800849c:	2202      	movs	r2, #2
 800849e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80084a0:	f001 fdfe 	bl	800a0a0 <vTaskStartScheduler>
      stat = osOK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	607b      	str	r3, [r7, #4]
 80084a8:	e002      	b.n	80084b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80084aa:	f04f 33ff 	mov.w	r3, #4294967295
 80084ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80084b0:	687b      	ldr	r3, [r7, #4]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20000478 	.word	0x20000478

080084c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08e      	sub	sp, #56	@ 0x38
 80084c4:	af04      	add	r7, sp, #16
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80084cc:	2300      	movs	r3, #0
 80084ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084d0:	f3ef 8305 	mrs	r3, IPSR
 80084d4:	617b      	str	r3, [r7, #20]
  return(result);
 80084d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d17e      	bne.n	80085da <osThreadNew+0x11a>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d07b      	beq.n	80085da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80084e2:	2380      	movs	r3, #128	@ 0x80
 80084e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80084e6:	2318      	movs	r3, #24
 80084e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80084ee:	f04f 33ff 	mov.w	r3, #4294967295
 80084f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d045      	beq.n	8008586 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d002      	beq.n	8008508 <osThreadNew+0x48>
        name = attr->name;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d008      	beq.n	800852e <osThreadNew+0x6e>
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	2b38      	cmp	r3, #56	@ 0x38
 8008520:	d805      	bhi.n	800852e <osThreadNew+0x6e>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <osThreadNew+0x72>
        return (NULL);
 800852e:	2300      	movs	r3, #0
 8008530:	e054      	b.n	80085dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	089b      	lsrs	r3, r3, #2
 8008540:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00e      	beq.n	8008568 <osThreadNew+0xa8>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	2b5f      	cmp	r3, #95	@ 0x5f
 8008550:	d90a      	bls.n	8008568 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008556:	2b00      	cmp	r3, #0
 8008558:	d006      	beq.n	8008568 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <osThreadNew+0xa8>
        mem = 1;
 8008562:	2301      	movs	r3, #1
 8008564:	61bb      	str	r3, [r7, #24]
 8008566:	e010      	b.n	800858a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10c      	bne.n	800858a <osThreadNew+0xca>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d108      	bne.n	800858a <osThreadNew+0xca>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d104      	bne.n	800858a <osThreadNew+0xca>
          mem = 0;
 8008580:	2300      	movs	r3, #0
 8008582:	61bb      	str	r3, [r7, #24]
 8008584:	e001      	b.n	800858a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d110      	bne.n	80085b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008598:	9202      	str	r2, [sp, #8]
 800859a:	9301      	str	r3, [sp, #4]
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	6a3a      	ldr	r2, [r7, #32]
 80085a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f001 fb9c 	bl	8009ce4 <xTaskCreateStatic>
 80085ac:	4603      	mov	r3, r0
 80085ae:	613b      	str	r3, [r7, #16]
 80085b0:	e013      	b.n	80085da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d110      	bne.n	80085da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	f107 0310 	add.w	r3, r7, #16
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f001 fbea 	bl	8009da4 <xTaskCreate>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d001      	beq.n	80085da <osThreadNew+0x11a>
            hTask = NULL;
 80085d6:	2300      	movs	r3, #0
 80085d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80085da:	693b      	ldr	r3, [r7, #16]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3728      	adds	r7, #40	@ 0x28
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085ec:	f3ef 8305 	mrs	r3, IPSR
 80085f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80085f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <osDelay+0x1c>
    stat = osErrorISR;
 80085f8:	f06f 0305 	mvn.w	r3, #5
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	e007      	b.n	8008610 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008600:	2300      	movs	r3, #0
 8008602:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <osDelay+0x2c>
      vTaskDelay(ticks);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f001 fd12 	bl	800a034 <vTaskDelay>
    }
  }

  return (stat);
 8008610:	68fb      	ldr	r3, [r7, #12]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800861a:	b580      	push	{r7, lr}
 800861c:	b08a      	sub	sp, #40	@ 0x28
 800861e:	af02      	add	r7, sp, #8
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800862a:	f3ef 8305 	mrs	r3, IPSR
 800862e:	613b      	str	r3, [r7, #16]
  return(result);
 8008630:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008632:	2b00      	cmp	r3, #0
 8008634:	d175      	bne.n	8008722 <osSemaphoreNew+0x108>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d072      	beq.n	8008722 <osSemaphoreNew+0x108>
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	429a      	cmp	r2, r3
 8008642:	d86e      	bhi.n	8008722 <osSemaphoreNew+0x108>
    mem = -1;
 8008644:	f04f 33ff 	mov.w	r3, #4294967295
 8008648:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d015      	beq.n	800867c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d006      	beq.n	8008666 <osSemaphoreNew+0x4c>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	2b4f      	cmp	r3, #79	@ 0x4f
 800865e:	d902      	bls.n	8008666 <osSemaphoreNew+0x4c>
        mem = 1;
 8008660:	2301      	movs	r3, #1
 8008662:	61bb      	str	r3, [r7, #24]
 8008664:	e00c      	b.n	8008680 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d108      	bne.n	8008680 <osSemaphoreNew+0x66>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d104      	bne.n	8008680 <osSemaphoreNew+0x66>
          mem = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	61bb      	str	r3, [r7, #24]
 800867a:	e001      	b.n	8008680 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800867c:	2300      	movs	r3, #0
 800867e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008686:	d04c      	beq.n	8008722 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d128      	bne.n	80086e0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d10a      	bne.n	80086aa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	2203      	movs	r2, #3
 800869a:	9200      	str	r2, [sp, #0]
 800869c:	2200      	movs	r2, #0
 800869e:	2100      	movs	r1, #0
 80086a0:	2001      	movs	r0, #1
 80086a2:	f000 fb5d 	bl	8008d60 <xQueueGenericCreateStatic>
 80086a6:	61f8      	str	r0, [r7, #28]
 80086a8:	e005      	b.n	80086b6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80086aa:	2203      	movs	r2, #3
 80086ac:	2100      	movs	r1, #0
 80086ae:	2001      	movs	r0, #1
 80086b0:	f000 fbd3 	bl	8008e5a <xQueueGenericCreate>
 80086b4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d022      	beq.n	8008702 <osSemaphoreNew+0xe8>
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d01f      	beq.n	8008702 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80086c2:	2300      	movs	r3, #0
 80086c4:	2200      	movs	r2, #0
 80086c6:	2100      	movs	r1, #0
 80086c8:	69f8      	ldr	r0, [r7, #28]
 80086ca:	f000 fc93 	bl	8008ff4 <xQueueGenericSend>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d016      	beq.n	8008702 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80086d4:	69f8      	ldr	r0, [r7, #28]
 80086d6:	f001 f931 	bl	800993c <vQueueDelete>
            hSemaphore = NULL;
 80086da:	2300      	movs	r3, #0
 80086dc:	61fb      	str	r3, [r7, #28]
 80086de:	e010      	b.n	8008702 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d108      	bne.n	80086f8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	461a      	mov	r2, r3
 80086ec:	68b9      	ldr	r1, [r7, #8]
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 fc11 	bl	8008f16 <xQueueCreateCountingSemaphoreStatic>
 80086f4:	61f8      	str	r0, [r7, #28]
 80086f6:	e004      	b.n	8008702 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80086f8:	68b9      	ldr	r1, [r7, #8]
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 fc44 	bl	8008f88 <xQueueCreateCountingSemaphore>
 8008700:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00c      	beq.n	8008722 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <osSemaphoreNew+0xfc>
          name = attr->name;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	617b      	str	r3, [r7, #20]
 8008714:	e001      	b.n	800871a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008716:	2300      	movs	r3, #0
 8008718:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800871a:	6979      	ldr	r1, [r7, #20]
 800871c:	69f8      	ldr	r0, [r7, #28]
 800871e:	f001 fa59 	bl	8009bd4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008722:	69fb      	ldr	r3, [r7, #28]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3720      	adds	r7, #32
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800873a:	2300      	movs	r3, #0
 800873c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d103      	bne.n	800874c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008744:	f06f 0303 	mvn.w	r3, #3
 8008748:	617b      	str	r3, [r7, #20]
 800874a:	e039      	b.n	80087c0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800874c:	f3ef 8305 	mrs	r3, IPSR
 8008750:	60fb      	str	r3, [r7, #12]
  return(result);
 8008752:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008754:	2b00      	cmp	r3, #0
 8008756:	d022      	beq.n	800879e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800875e:	f06f 0303 	mvn.w	r3, #3
 8008762:	617b      	str	r3, [r7, #20]
 8008764:	e02c      	b.n	80087c0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008766:	2300      	movs	r3, #0
 8008768:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800876a:	f107 0308 	add.w	r3, r7, #8
 800876e:	461a      	mov	r2, r3
 8008770:	2100      	movs	r1, #0
 8008772:	6938      	ldr	r0, [r7, #16]
 8008774:	f001 f860 	bl	8009838 <xQueueReceiveFromISR>
 8008778:	4603      	mov	r3, r0
 800877a:	2b01      	cmp	r3, #1
 800877c:	d003      	beq.n	8008786 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800877e:	f06f 0302 	mvn.w	r3, #2
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	e01c      	b.n	80087c0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d019      	beq.n	80087c0 <osSemaphoreAcquire+0x94>
 800878c:	4b0f      	ldr	r3, [pc, #60]	@ (80087cc <osSemaphoreAcquire+0xa0>)
 800878e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	e010      	b.n	80087c0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6938      	ldr	r0, [r7, #16]
 80087a2:	f000 ff39 	bl	8009618 <xQueueSemaphoreTake>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d009      	beq.n	80087c0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80087b2:	f06f 0301 	mvn.w	r3, #1
 80087b6:	617b      	str	r3, [r7, #20]
 80087b8:	e002      	b.n	80087c0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80087ba:	f06f 0302 	mvn.w	r3, #2
 80087be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80087c0:	697b      	ldr	r3, [r7, #20]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80087dc:	2300      	movs	r3, #0
 80087de:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d103      	bne.n	80087ee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80087e6:	f06f 0303 	mvn.w	r3, #3
 80087ea:	617b      	str	r3, [r7, #20]
 80087ec:	e02c      	b.n	8008848 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087ee:	f3ef 8305 	mrs	r3, IPSR
 80087f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80087f4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d01a      	beq.n	8008830 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80087fa:	2300      	movs	r3, #0
 80087fc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80087fe:	f107 0308 	add.w	r3, r7, #8
 8008802:	4619      	mov	r1, r3
 8008804:	6938      	ldr	r0, [r7, #16]
 8008806:	f000 fd95 	bl	8009334 <xQueueGiveFromISR>
 800880a:	4603      	mov	r3, r0
 800880c:	2b01      	cmp	r3, #1
 800880e:	d003      	beq.n	8008818 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008810:	f06f 0302 	mvn.w	r3, #2
 8008814:	617b      	str	r3, [r7, #20]
 8008816:	e017      	b.n	8008848 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d014      	beq.n	8008848 <osSemaphoreRelease+0x78>
 800881e:	4b0d      	ldr	r3, [pc, #52]	@ (8008854 <osSemaphoreRelease+0x84>)
 8008820:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	e00b      	b.n	8008848 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008830:	2300      	movs	r3, #0
 8008832:	2200      	movs	r2, #0
 8008834:	2100      	movs	r1, #0
 8008836:	6938      	ldr	r0, [r7, #16]
 8008838:	f000 fbdc 	bl	8008ff4 <xQueueGenericSend>
 800883c:	4603      	mov	r3, r0
 800883e:	2b01      	cmp	r3, #1
 8008840:	d002      	beq.n	8008848 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008842:	f06f 0302 	mvn.w	r3, #2
 8008846:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008848:	697b      	ldr	r3, [r7, #20]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	e000ed04 	.word	0xe000ed04

08008858 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008858:	b580      	push	{r7, lr}
 800885a:	b08a      	sub	sp, #40	@ 0x28
 800885c:	af02      	add	r7, sp, #8
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008864:	2300      	movs	r3, #0
 8008866:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008868:	f3ef 8305 	mrs	r3, IPSR
 800886c:	613b      	str	r3, [r7, #16]
  return(result);
 800886e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008870:	2b00      	cmp	r3, #0
 8008872:	d15f      	bne.n	8008934 <osMessageQueueNew+0xdc>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d05c      	beq.n	8008934 <osMessageQueueNew+0xdc>
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d059      	beq.n	8008934 <osMessageQueueNew+0xdc>
    mem = -1;
 8008880:	f04f 33ff 	mov.w	r3, #4294967295
 8008884:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d029      	beq.n	80088e0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d012      	beq.n	80088ba <osMessageQueueNew+0x62>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	2b4f      	cmp	r3, #79	@ 0x4f
 800889a:	d90e      	bls.n	80088ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00a      	beq.n	80088ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	695a      	ldr	r2, [r3, #20]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	fb01 f303 	mul.w	r3, r1, r3
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d302      	bcc.n	80088ba <osMessageQueueNew+0x62>
        mem = 1;
 80088b4:	2301      	movs	r3, #1
 80088b6:	61bb      	str	r3, [r7, #24]
 80088b8:	e014      	b.n	80088e4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d110      	bne.n	80088e4 <osMessageQueueNew+0x8c>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10c      	bne.n	80088e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d108      	bne.n	80088e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d104      	bne.n	80088e4 <osMessageQueueNew+0x8c>
          mem = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	61bb      	str	r3, [r7, #24]
 80088de:	e001      	b.n	80088e4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d10b      	bne.n	8008902 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691a      	ldr	r2, [r3, #16]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	2100      	movs	r1, #0
 80088f4:	9100      	str	r1, [sp, #0]
 80088f6:	68b9      	ldr	r1, [r7, #8]
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 fa31 	bl	8008d60 <xQueueGenericCreateStatic>
 80088fe:	61f8      	str	r0, [r7, #28]
 8008900:	e008      	b.n	8008914 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d105      	bne.n	8008914 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008908:	2200      	movs	r2, #0
 800890a:	68b9      	ldr	r1, [r7, #8]
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f000 faa4 	bl	8008e5a <xQueueGenericCreate>
 8008912:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00c      	beq.n	8008934 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	617b      	str	r3, [r7, #20]
 8008926:	e001      	b.n	800892c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008928:	2300      	movs	r3, #0
 800892a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800892c:	6979      	ldr	r1, [r7, #20]
 800892e:	69f8      	ldr	r0, [r7, #28]
 8008930:	f001 f950 	bl	8009bd4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008934:	69fb      	ldr	r3, [r7, #28]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3720      	adds	r7, #32
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
	...

08008940 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008940:	b580      	push	{r7, lr}
 8008942:	b088      	sub	sp, #32
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	603b      	str	r3, [r7, #0]
 800894c:	4613      	mov	r3, r2
 800894e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008954:	2300      	movs	r3, #0
 8008956:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008958:	f3ef 8305 	mrs	r3, IPSR
 800895c:	617b      	str	r3, [r7, #20]
  return(result);
 800895e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008960:	2b00      	cmp	r3, #0
 8008962:	d028      	beq.n	80089b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <osMessageQueuePut+0x36>
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d002      	beq.n	8008976 <osMessageQueuePut+0x36>
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008976:	f06f 0303 	mvn.w	r3, #3
 800897a:	61fb      	str	r3, [r7, #28]
 800897c:	e038      	b.n	80089f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800897e:	2300      	movs	r3, #0
 8008980:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008982:	f107 0210 	add.w	r2, r7, #16
 8008986:	2300      	movs	r3, #0
 8008988:	68b9      	ldr	r1, [r7, #8]
 800898a:	69b8      	ldr	r0, [r7, #24]
 800898c:	f000 fc34 	bl	80091f8 <xQueueGenericSendFromISR>
 8008990:	4603      	mov	r3, r0
 8008992:	2b01      	cmp	r3, #1
 8008994:	d003      	beq.n	800899e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008996:	f06f 0302 	mvn.w	r3, #2
 800899a:	61fb      	str	r3, [r7, #28]
 800899c:	e028      	b.n	80089f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d025      	beq.n	80089f0 <osMessageQueuePut+0xb0>
 80089a4:	4b15      	ldr	r3, [pc, #84]	@ (80089fc <osMessageQueuePut+0xbc>)
 80089a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	e01c      	b.n	80089f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <osMessageQueuePut+0x82>
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d103      	bne.n	80089ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80089c2:	f06f 0303 	mvn.w	r3, #3
 80089c6:	61fb      	str	r3, [r7, #28]
 80089c8:	e012      	b.n	80089f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80089ca:	2300      	movs	r3, #0
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	68b9      	ldr	r1, [r7, #8]
 80089d0:	69b8      	ldr	r0, [r7, #24]
 80089d2:	f000 fb0f 	bl	8008ff4 <xQueueGenericSend>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d009      	beq.n	80089f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80089e2:	f06f 0301 	mvn.w	r3, #1
 80089e6:	61fb      	str	r3, [r7, #28]
 80089e8:	e002      	b.n	80089f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80089ea:	f06f 0302 	mvn.w	r3, #2
 80089ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80089f0:	69fb      	ldr	r3, [r7, #28]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3720      	adds	r7, #32
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	e000ed04 	.word	0xe000ed04

08008a00 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b088      	sub	sp, #32
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
 8008a0c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a16:	f3ef 8305 	mrs	r3, IPSR
 8008a1a:	617b      	str	r3, [r7, #20]
  return(result);
 8008a1c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d028      	beq.n	8008a74 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d005      	beq.n	8008a34 <osMessageQueueGet+0x34>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d002      	beq.n	8008a34 <osMessageQueueGet+0x34>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d003      	beq.n	8008a3c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008a34:	f06f 0303 	mvn.w	r3, #3
 8008a38:	61fb      	str	r3, [r7, #28]
 8008a3a:	e037      	b.n	8008aac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008a40:	f107 0310 	add.w	r3, r7, #16
 8008a44:	461a      	mov	r2, r3
 8008a46:	68b9      	ldr	r1, [r7, #8]
 8008a48:	69b8      	ldr	r0, [r7, #24]
 8008a4a:	f000 fef5 	bl	8009838 <xQueueReceiveFromISR>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d003      	beq.n	8008a5c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008a54:	f06f 0302 	mvn.w	r3, #2
 8008a58:	61fb      	str	r3, [r7, #28]
 8008a5a:	e027      	b.n	8008aac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d024      	beq.n	8008aac <osMessageQueueGet+0xac>
 8008a62:	4b15      	ldr	r3, [pc, #84]	@ (8008ab8 <osMessageQueueGet+0xb8>)
 8008a64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	e01b      	b.n	8008aac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <osMessageQueueGet+0x80>
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d103      	bne.n	8008a88 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008a80:	f06f 0303 	mvn.w	r3, #3
 8008a84:	61fb      	str	r3, [r7, #28]
 8008a86:	e011      	b.n	8008aac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	68b9      	ldr	r1, [r7, #8]
 8008a8c:	69b8      	ldr	r0, [r7, #24]
 8008a8e:	f000 fce1 	bl	8009454 <xQueueReceive>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d009      	beq.n	8008aac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d003      	beq.n	8008aa6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008a9e:	f06f 0301 	mvn.w	r3, #1
 8008aa2:	61fb      	str	r3, [r7, #28]
 8008aa4:	e002      	b.n	8008aac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008aa6:	f06f 0302 	mvn.w	r3, #2
 8008aaa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008aac:	69fb      	ldr	r3, [r7, #28]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3720      	adds	r7, #32
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	e000ed04 	.word	0xe000ed04

08008abc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4a07      	ldr	r2, [pc, #28]	@ (8008ae8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008acc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	4a06      	ldr	r2, [pc, #24]	@ (8008aec <vApplicationGetIdleTaskMemory+0x30>)
 8008ad2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2280      	movs	r2, #128	@ 0x80
 8008ad8:	601a      	str	r2, [r3, #0]
}
 8008ada:	bf00      	nop
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	2000047c 	.word	0x2000047c
 8008aec:	200004dc 	.word	0x200004dc

08008af0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4a07      	ldr	r2, [pc, #28]	@ (8008b1c <vApplicationGetTimerTaskMemory+0x2c>)
 8008b00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	4a06      	ldr	r2, [pc, #24]	@ (8008b20 <vApplicationGetTimerTaskMemory+0x30>)
 8008b06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b0e:	601a      	str	r2, [r3, #0]
}
 8008b10:	bf00      	nop
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	200006dc 	.word	0x200006dc
 8008b20:	2000073c 	.word	0x2000073c

08008b24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f103 0208 	add.w	r2, r3, #8
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f103 0208 	add.w	r2, r3, #8
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f103 0208 	add.w	r2, r3, #8
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b72:	bf00      	nop
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b085      	sub	sp, #20
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	689a      	ldr	r2, [r3, #8]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	601a      	str	r2, [r3, #0]
}
 8008bba:	bf00      	nop
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b085      	sub	sp, #20
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bdc:	d103      	bne.n	8008be6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	e00c      	b.n	8008c00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	3308      	adds	r3, #8
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	e002      	b.n	8008bf4 <vListInsert+0x2e>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d2f6      	bcs.n	8008bee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	601a      	str	r2, [r3, #0]
}
 8008c2c:	bf00      	nop
 8008c2e:	3714      	adds	r7, #20
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	6892      	ldr	r2, [r2, #8]
 8008c4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	6852      	ldr	r2, [r2, #4]
 8008c58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d103      	bne.n	8008c6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	1e5a      	subs	r2, r3, #1
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10b      	bne.n	8008cb8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008cb2:	bf00      	nop
 8008cb4:	bf00      	nop
 8008cb6:	e7fd      	b.n	8008cb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008cb8:	f002 fcae 	bl	800b618 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc4:	68f9      	ldr	r1, [r7, #12]
 8008cc6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008cc8:	fb01 f303 	mul.w	r3, r1, r3
 8008ccc:	441a      	add	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	68f9      	ldr	r1, [r7, #12]
 8008cec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008cee:	fb01 f303 	mul.w	r3, r1, r3
 8008cf2:	441a      	add	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	22ff      	movs	r2, #255	@ 0xff
 8008cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	22ff      	movs	r2, #255	@ 0xff
 8008d04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d114      	bne.n	8008d38 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d01a      	beq.n	8008d4c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3310      	adds	r3, #16
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f001 fc4e 	bl	800a5bc <xTaskRemoveFromEventList>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d012      	beq.n	8008d4c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d26:	4b0d      	ldr	r3, [pc, #52]	@ (8008d5c <xQueueGenericReset+0xd0>)
 8008d28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	e009      	b.n	8008d4c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3310      	adds	r3, #16
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7ff fef1 	bl	8008b24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3324      	adds	r3, #36	@ 0x24
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff feec 	bl	8008b24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d4c:	f002 fc96 	bl	800b67c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d50:	2301      	movs	r3, #1
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	e000ed04 	.word	0xe000ed04

08008d60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b08e      	sub	sp, #56	@ 0x38
 8008d64:	af02      	add	r7, sp, #8
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
 8008d6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10b      	bne.n	8008d8c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d86:	bf00      	nop
 8008d88:	bf00      	nop
 8008d8a:	e7fd      	b.n	8008d88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10b      	bne.n	8008daa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
 8008da8:	e7fd      	b.n	8008da6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <xQueueGenericCreateStatic+0x56>
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <xQueueGenericCreateStatic+0x5a>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e000      	b.n	8008dbc <xQueueGenericCreateStatic+0x5c>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10b      	bne.n	8008dd8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	623b      	str	r3, [r7, #32]
}
 8008dd2:	bf00      	nop
 8008dd4:	bf00      	nop
 8008dd6:	e7fd      	b.n	8008dd4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d102      	bne.n	8008de4 <xQueueGenericCreateStatic+0x84>
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <xQueueGenericCreateStatic+0x88>
 8008de4:	2301      	movs	r3, #1
 8008de6:	e000      	b.n	8008dea <xQueueGenericCreateStatic+0x8a>
 8008de8:	2300      	movs	r3, #0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10b      	bne.n	8008e06 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	61fb      	str	r3, [r7, #28]
}
 8008e00:	bf00      	nop
 8008e02:	bf00      	nop
 8008e04:	e7fd      	b.n	8008e02 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e06:	2350      	movs	r3, #80	@ 0x50
 8008e08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2b50      	cmp	r3, #80	@ 0x50
 8008e0e:	d00b      	beq.n	8008e28 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	61bb      	str	r3, [r7, #24]
}
 8008e22:	bf00      	nop
 8008e24:	bf00      	nop
 8008e26:	e7fd      	b.n	8008e24 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00d      	beq.n	8008e50 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	4613      	mov	r3, r2
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	68b9      	ldr	r1, [r7, #8]
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 f840 	bl	8008ed0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3730      	adds	r7, #48	@ 0x30
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b08a      	sub	sp, #40	@ 0x28
 8008e5e:	af02      	add	r7, sp, #8
 8008e60:	60f8      	str	r0, [r7, #12]
 8008e62:	60b9      	str	r1, [r7, #8]
 8008e64:	4613      	mov	r3, r2
 8008e66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10b      	bne.n	8008e86 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	613b      	str	r3, [r7, #16]
}
 8008e80:	bf00      	nop
 8008e82:	bf00      	nop
 8008e84:	e7fd      	b.n	8008e82 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	fb02 f303 	mul.w	r3, r2, r3
 8008e8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	3350      	adds	r3, #80	@ 0x50
 8008e94:	4618      	mov	r0, r3
 8008e96:	f002 fce1 	bl	800b85c <pvPortMalloc>
 8008e9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d011      	beq.n	8008ec6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	3350      	adds	r3, #80	@ 0x50
 8008eaa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008eb4:	79fa      	ldrb	r2, [r7, #7]
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	697a      	ldr	r2, [r7, #20]
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 f805 	bl	8008ed0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ec6:	69bb      	ldr	r3, [r7, #24]
	}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3720      	adds	r7, #32
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
 8008edc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d103      	bne.n	8008eec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	601a      	str	r2, [r3, #0]
 8008eea:	e002      	b.n	8008ef2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008efe:	2101      	movs	r1, #1
 8008f00:	69b8      	ldr	r0, [r7, #24]
 8008f02:	f7ff fec3 	bl	8008c8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	78fa      	ldrb	r2, [r7, #3]
 8008f0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f0e:	bf00      	nop
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b08a      	sub	sp, #40	@ 0x28
 8008f1a:	af02      	add	r7, sp, #8
 8008f1c:	60f8      	str	r0, [r7, #12]
 8008f1e:	60b9      	str	r1, [r7, #8]
 8008f20:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10b      	bne.n	8008f40 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8008f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	61bb      	str	r3, [r7, #24]
}
 8008f3a:	bf00      	nop
 8008f3c:	bf00      	nop
 8008f3e:	e7fd      	b.n	8008f3c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d90b      	bls.n	8008f60 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8008f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f4c:	f383 8811 	msr	BASEPRI, r3
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	617b      	str	r3, [r7, #20]
}
 8008f5a:	bf00      	nop
 8008f5c:	bf00      	nop
 8008f5e:	e7fd      	b.n	8008f5c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008f60:	2302      	movs	r3, #2
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	2100      	movs	r1, #0
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7ff fef8 	bl	8008d60 <xQueueGenericCreateStatic>
 8008f70:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008f7e:	69fb      	ldr	r3, [r7, #28]
	}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3720      	adds	r7, #32
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10b      	bne.n	8008fb0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	613b      	str	r3, [r7, #16]
}
 8008faa:	bf00      	nop
 8008fac:	bf00      	nop
 8008fae:	e7fd      	b.n	8008fac <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d90b      	bls.n	8008fd0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	60fb      	str	r3, [r7, #12]
}
 8008fca:	bf00      	nop
 8008fcc:	bf00      	nop
 8008fce:	e7fd      	b.n	8008fcc <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff ff40 	bl	8008e5a <xQueueGenericCreate>
 8008fda:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d002      	beq.n	8008fe8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008fe8:	697b      	ldr	r3, [r7, #20]
	}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b08e      	sub	sp, #56	@ 0x38
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
 8009000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009002:	2300      	movs	r3, #0
 8009004:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800900a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10b      	bne.n	8009028 <xQueueGenericSend+0x34>
	__asm volatile
 8009010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009022:	bf00      	nop
 8009024:	bf00      	nop
 8009026:	e7fd      	b.n	8009024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d103      	bne.n	8009036 <xQueueGenericSend+0x42>
 800902e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <xQueueGenericSend+0x46>
 8009036:	2301      	movs	r3, #1
 8009038:	e000      	b.n	800903c <xQueueGenericSend+0x48>
 800903a:	2300      	movs	r3, #0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10b      	bne.n	8009058 <xQueueGenericSend+0x64>
	__asm volatile
 8009040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009052:	bf00      	nop
 8009054:	bf00      	nop
 8009056:	e7fd      	b.n	8009054 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	2b02      	cmp	r3, #2
 800905c:	d103      	bne.n	8009066 <xQueueGenericSend+0x72>
 800905e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009062:	2b01      	cmp	r3, #1
 8009064:	d101      	bne.n	800906a <xQueueGenericSend+0x76>
 8009066:	2301      	movs	r3, #1
 8009068:	e000      	b.n	800906c <xQueueGenericSend+0x78>
 800906a:	2300      	movs	r3, #0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10b      	bne.n	8009088 <xQueueGenericSend+0x94>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	623b      	str	r3, [r7, #32]
}
 8009082:	bf00      	nop
 8009084:	bf00      	nop
 8009086:	e7fd      	b.n	8009084 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009088:	f001 fc58 	bl	800a93c <xTaskGetSchedulerState>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d102      	bne.n	8009098 <xQueueGenericSend+0xa4>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d101      	bne.n	800909c <xQueueGenericSend+0xa8>
 8009098:	2301      	movs	r3, #1
 800909a:	e000      	b.n	800909e <xQueueGenericSend+0xaa>
 800909c:	2300      	movs	r3, #0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10b      	bne.n	80090ba <xQueueGenericSend+0xc6>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	61fb      	str	r3, [r7, #28]
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop
 80090b8:	e7fd      	b.n	80090b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090ba:	f002 faad 	bl	800b618 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d302      	bcc.n	80090d0 <xQueueGenericSend+0xdc>
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d129      	bne.n	8009124 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	68b9      	ldr	r1, [r7, #8]
 80090d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090d6:	f000 fc6d 	bl	80099b4 <prvCopyDataToQueue>
 80090da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d010      	beq.n	8009106 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e6:	3324      	adds	r3, #36	@ 0x24
 80090e8:	4618      	mov	r0, r3
 80090ea:	f001 fa67 	bl	800a5bc <xTaskRemoveFromEventList>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d013      	beq.n	800911c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090f4:	4b3f      	ldr	r3, [pc, #252]	@ (80091f4 <xQueueGenericSend+0x200>)
 80090f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	e00a      	b.n	800911c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009108:	2b00      	cmp	r3, #0
 800910a:	d007      	beq.n	800911c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800910c:	4b39      	ldr	r3, [pc, #228]	@ (80091f4 <xQueueGenericSend+0x200>)
 800910e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800911c:	f002 faae 	bl	800b67c <vPortExitCritical>
				return pdPASS;
 8009120:	2301      	movs	r3, #1
 8009122:	e063      	b.n	80091ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d103      	bne.n	8009132 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800912a:	f002 faa7 	bl	800b67c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800912e:	2300      	movs	r3, #0
 8009130:	e05c      	b.n	80091ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009134:	2b00      	cmp	r3, #0
 8009136:	d106      	bne.n	8009146 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009138:	f107 0314 	add.w	r3, r7, #20
 800913c:	4618      	mov	r0, r3
 800913e:	f001 faa1 	bl	800a684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009142:	2301      	movs	r3, #1
 8009144:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009146:	f002 fa99 	bl	800b67c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800914a:	f001 f811 	bl	800a170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800914e:	f002 fa63 	bl	800b618 <vPortEnterCritical>
 8009152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009158:	b25b      	sxtb	r3, r3
 800915a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915e:	d103      	bne.n	8009168 <xQueueGenericSend+0x174>
 8009160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800916e:	b25b      	sxtb	r3, r3
 8009170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009174:	d103      	bne.n	800917e <xQueueGenericSend+0x18a>
 8009176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009178:	2200      	movs	r2, #0
 800917a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800917e:	f002 fa7d 	bl	800b67c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009182:	1d3a      	adds	r2, r7, #4
 8009184:	f107 0314 	add.w	r3, r7, #20
 8009188:	4611      	mov	r1, r2
 800918a:	4618      	mov	r0, r3
 800918c:	f001 fa90 	bl	800a6b0 <xTaskCheckForTimeOut>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d124      	bne.n	80091e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009196:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009198:	f000 fd04 	bl	8009ba4 <prvIsQueueFull>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d018      	beq.n	80091d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80091a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a4:	3310      	adds	r3, #16
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	4611      	mov	r1, r2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f001 f9b4 	bl	800a518 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091b2:	f000 fc8f 	bl	8009ad4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091b6:	f000 ffe9 	bl	800a18c <xTaskResumeAll>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f47f af7c 	bne.w	80090ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80091c2:	4b0c      	ldr	r3, [pc, #48]	@ (80091f4 <xQueueGenericSend+0x200>)
 80091c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	e772      	b.n	80090ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091d6:	f000 fc7d 	bl	8009ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091da:	f000 ffd7 	bl	800a18c <xTaskResumeAll>
 80091de:	e76c      	b.n	80090ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091e2:	f000 fc77 	bl	8009ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091e6:	f000 ffd1 	bl	800a18c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3738      	adds	r7, #56	@ 0x38
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	e000ed04 	.word	0xe000ed04

080091f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b090      	sub	sp, #64	@ 0x40
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
 8009204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800920a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10b      	bne.n	8009228 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009222:	bf00      	nop
 8009224:	bf00      	nop
 8009226:	e7fd      	b.n	8009224 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d103      	bne.n	8009236 <xQueueGenericSendFromISR+0x3e>
 800922e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009232:	2b00      	cmp	r3, #0
 8009234:	d101      	bne.n	800923a <xQueueGenericSendFromISR+0x42>
 8009236:	2301      	movs	r3, #1
 8009238:	e000      	b.n	800923c <xQueueGenericSendFromISR+0x44>
 800923a:	2300      	movs	r3, #0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10b      	bne.n	8009258 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009252:	bf00      	nop
 8009254:	bf00      	nop
 8009256:	e7fd      	b.n	8009254 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	2b02      	cmp	r3, #2
 800925c:	d103      	bne.n	8009266 <xQueueGenericSendFromISR+0x6e>
 800925e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009262:	2b01      	cmp	r3, #1
 8009264:	d101      	bne.n	800926a <xQueueGenericSendFromISR+0x72>
 8009266:	2301      	movs	r3, #1
 8009268:	e000      	b.n	800926c <xQueueGenericSendFromISR+0x74>
 800926a:	2300      	movs	r3, #0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10b      	bne.n	8009288 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	623b      	str	r3, [r7, #32]
}
 8009282:	bf00      	nop
 8009284:	bf00      	nop
 8009286:	e7fd      	b.n	8009284 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009288:	f002 faa6 	bl	800b7d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800928c:	f3ef 8211 	mrs	r2, BASEPRI
 8009290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	61fa      	str	r2, [r7, #28]
 80092a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80092a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d302      	bcc.n	80092ba <xQueueGenericSendFromISR+0xc2>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d12f      	bne.n	800931a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	68b9      	ldr	r1, [r7, #8]
 80092ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80092d0:	f000 fb70 	bl	80099b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80092d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092dc:	d112      	bne.n	8009304 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d016      	beq.n	8009314 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e8:	3324      	adds	r3, #36	@ 0x24
 80092ea:	4618      	mov	r0, r3
 80092ec:	f001 f966 	bl	800a5bc <xTaskRemoveFromEventList>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00e      	beq.n	8009314 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00b      	beq.n	8009314 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	e007      	b.n	8009314 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009304:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009308:	3301      	adds	r3, #1
 800930a:	b2db      	uxtb	r3, r3
 800930c:	b25a      	sxtb	r2, r3
 800930e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009314:	2301      	movs	r3, #1
 8009316:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009318:	e001      	b.n	800931e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800931a:	2300      	movs	r3, #0
 800931c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800931e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009320:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009328:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800932a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800932c:	4618      	mov	r0, r3
 800932e:	3740      	adds	r7, #64	@ 0x40
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b08e      	sub	sp, #56	@ 0x38
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10b      	bne.n	8009360 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	623b      	str	r3, [r7, #32]
}
 800935a:	bf00      	nop
 800935c:	bf00      	nop
 800935e:	e7fd      	b.n	800935c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00b      	beq.n	8009380 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	61fb      	str	r3, [r7, #28]
}
 800937a:	bf00      	nop
 800937c:	bf00      	nop
 800937e:	e7fd      	b.n	800937c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d103      	bne.n	8009390 <xQueueGiveFromISR+0x5c>
 8009388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d101      	bne.n	8009394 <xQueueGiveFromISR+0x60>
 8009390:	2301      	movs	r3, #1
 8009392:	e000      	b.n	8009396 <xQueueGiveFromISR+0x62>
 8009394:	2300      	movs	r3, #0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10b      	bne.n	80093b2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	61bb      	str	r3, [r7, #24]
}
 80093ac:	bf00      	nop
 80093ae:	bf00      	nop
 80093b0:	e7fd      	b.n	80093ae <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093b2:	f002 fa11 	bl	800b7d8 <vPortValidateInterruptPriority>
	__asm volatile
 80093b6:	f3ef 8211 	mrs	r2, BASEPRI
 80093ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	617a      	str	r2, [r7, #20]
 80093cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80093ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093d6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80093d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093de:	429a      	cmp	r2, r3
 80093e0:	d22b      	bcs.n	800943a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80093ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80093f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80093f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fc:	d112      	bne.n	8009424 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009402:	2b00      	cmp	r3, #0
 8009404:	d016      	beq.n	8009434 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009408:	3324      	adds	r3, #36	@ 0x24
 800940a:	4618      	mov	r0, r3
 800940c:	f001 f8d6 	bl	800a5bc <xTaskRemoveFromEventList>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00e      	beq.n	8009434 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00b      	beq.n	8009434 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	2201      	movs	r2, #1
 8009420:	601a      	str	r2, [r3, #0]
 8009422:	e007      	b.n	8009434 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009428:	3301      	adds	r3, #1
 800942a:	b2db      	uxtb	r3, r3
 800942c:	b25a      	sxtb	r2, r3
 800942e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009434:	2301      	movs	r3, #1
 8009436:	637b      	str	r3, [r7, #52]	@ 0x34
 8009438:	e001      	b.n	800943e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800943a:	2300      	movs	r3, #0
 800943c:	637b      	str	r3, [r7, #52]	@ 0x34
 800943e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009440:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f383 8811 	msr	BASEPRI, r3
}
 8009448:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800944a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800944c:	4618      	mov	r0, r3
 800944e:	3738      	adds	r7, #56	@ 0x38
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b08c      	sub	sp, #48	@ 0x30
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009460:	2300      	movs	r3, #0
 8009462:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10b      	bne.n	8009486 <xQueueReceive+0x32>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	623b      	str	r3, [r7, #32]
}
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	e7fd      	b.n	8009482 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d103      	bne.n	8009494 <xQueueReceive+0x40>
 800948c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <xQueueReceive+0x44>
 8009494:	2301      	movs	r3, #1
 8009496:	e000      	b.n	800949a <xQueueReceive+0x46>
 8009498:	2300      	movs	r3, #0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10b      	bne.n	80094b6 <xQueueReceive+0x62>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	61fb      	str	r3, [r7, #28]
}
 80094b0:	bf00      	nop
 80094b2:	bf00      	nop
 80094b4:	e7fd      	b.n	80094b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094b6:	f001 fa41 	bl	800a93c <xTaskGetSchedulerState>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d102      	bne.n	80094c6 <xQueueReceive+0x72>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <xQueueReceive+0x76>
 80094c6:	2301      	movs	r3, #1
 80094c8:	e000      	b.n	80094cc <xQueueReceive+0x78>
 80094ca:	2300      	movs	r3, #0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10b      	bne.n	80094e8 <xQueueReceive+0x94>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	61bb      	str	r3, [r7, #24]
}
 80094e2:	bf00      	nop
 80094e4:	bf00      	nop
 80094e6:	e7fd      	b.n	80094e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094e8:	f002 f896 	bl	800b618 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d01f      	beq.n	8009538 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80094f8:	68b9      	ldr	r1, [r7, #8]
 80094fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094fc:	f000 fac4 	bl	8009a88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009502:	1e5a      	subs	r2, r3, #1
 8009504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009506:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00f      	beq.n	8009530 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009512:	3310      	adds	r3, #16
 8009514:	4618      	mov	r0, r3
 8009516:	f001 f851 	bl	800a5bc <xTaskRemoveFromEventList>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d007      	beq.n	8009530 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009520:	4b3c      	ldr	r3, [pc, #240]	@ (8009614 <xQueueReceive+0x1c0>)
 8009522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009526:	601a      	str	r2, [r3, #0]
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009530:	f002 f8a4 	bl	800b67c <vPortExitCritical>
				return pdPASS;
 8009534:	2301      	movs	r3, #1
 8009536:	e069      	b.n	800960c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d103      	bne.n	8009546 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800953e:	f002 f89d 	bl	800b67c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009542:	2300      	movs	r3, #0
 8009544:	e062      	b.n	800960c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009548:	2b00      	cmp	r3, #0
 800954a:	d106      	bne.n	800955a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800954c:	f107 0310 	add.w	r3, r7, #16
 8009550:	4618      	mov	r0, r3
 8009552:	f001 f897 	bl	800a684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009556:	2301      	movs	r3, #1
 8009558:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800955a:	f002 f88f 	bl	800b67c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800955e:	f000 fe07 	bl	800a170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009562:	f002 f859 	bl	800b618 <vPortEnterCritical>
 8009566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800956c:	b25b      	sxtb	r3, r3
 800956e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009572:	d103      	bne.n	800957c <xQueueReceive+0x128>
 8009574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800957c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009582:	b25b      	sxtb	r3, r3
 8009584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009588:	d103      	bne.n	8009592 <xQueueReceive+0x13e>
 800958a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009592:	f002 f873 	bl	800b67c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009596:	1d3a      	adds	r2, r7, #4
 8009598:	f107 0310 	add.w	r3, r7, #16
 800959c:	4611      	mov	r1, r2
 800959e:	4618      	mov	r0, r3
 80095a0:	f001 f886 	bl	800a6b0 <xTaskCheckForTimeOut>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d123      	bne.n	80095f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095ac:	f000 fae4 	bl	8009b78 <prvIsQueueEmpty>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d017      	beq.n	80095e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80095b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b8:	3324      	adds	r3, #36	@ 0x24
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	4611      	mov	r1, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 ffaa 	bl	800a518 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80095c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095c6:	f000 fa85 	bl	8009ad4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80095ca:	f000 fddf 	bl	800a18c <xTaskResumeAll>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d189      	bne.n	80094e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80095d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009614 <xQueueReceive+0x1c0>)
 80095d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	e780      	b.n	80094e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80095e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095e8:	f000 fa74 	bl	8009ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095ec:	f000 fdce 	bl	800a18c <xTaskResumeAll>
 80095f0:	e77a      	b.n	80094e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80095f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095f4:	f000 fa6e 	bl	8009ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095f8:	f000 fdc8 	bl	800a18c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095fe:	f000 fabb 	bl	8009b78 <prvIsQueueEmpty>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	f43f af6f 	beq.w	80094e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800960a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800960c:	4618      	mov	r0, r3
 800960e:	3730      	adds	r7, #48	@ 0x30
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	e000ed04 	.word	0xe000ed04

08009618 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b08e      	sub	sp, #56	@ 0x38
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009622:	2300      	movs	r3, #0
 8009624:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800962a:	2300      	movs	r3, #0
 800962c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800962e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10b      	bne.n	800964c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009638:	f383 8811 	msr	BASEPRI, r3
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	623b      	str	r3, [r7, #32]
}
 8009646:	bf00      	nop
 8009648:	bf00      	nop
 800964a:	e7fd      	b.n	8009648 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800964c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00b      	beq.n	800966c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	61fb      	str	r3, [r7, #28]
}
 8009666:	bf00      	nop
 8009668:	bf00      	nop
 800966a:	e7fd      	b.n	8009668 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800966c:	f001 f966 	bl	800a93c <xTaskGetSchedulerState>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d102      	bne.n	800967c <xQueueSemaphoreTake+0x64>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <xQueueSemaphoreTake+0x68>
 800967c:	2301      	movs	r3, #1
 800967e:	e000      	b.n	8009682 <xQueueSemaphoreTake+0x6a>
 8009680:	2300      	movs	r3, #0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10b      	bne.n	800969e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	61bb      	str	r3, [r7, #24]
}
 8009698:	bf00      	nop
 800969a:	bf00      	nop
 800969c:	e7fd      	b.n	800969a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800969e:	f001 ffbb 	bl	800b618 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80096a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80096a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d024      	beq.n	80096f8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80096ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b0:	1e5a      	subs	r2, r3, #1
 80096b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d104      	bne.n	80096c8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80096be:	f001 fab7 	bl	800ac30 <pvTaskIncrementMutexHeldCount>
 80096c2:	4602      	mov	r2, r0
 80096c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00f      	beq.n	80096f0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d2:	3310      	adds	r3, #16
 80096d4:	4618      	mov	r0, r3
 80096d6:	f000 ff71 	bl	800a5bc <xTaskRemoveFromEventList>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d007      	beq.n	80096f0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80096e0:	4b54      	ldr	r3, [pc, #336]	@ (8009834 <xQueueSemaphoreTake+0x21c>)
 80096e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096e6:	601a      	str	r2, [r3, #0]
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80096f0:	f001 ffc4 	bl	800b67c <vPortExitCritical>
				return pdPASS;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e098      	b.n	800982a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d112      	bne.n	8009724 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80096fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00b      	beq.n	800971c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	617b      	str	r3, [r7, #20]
}
 8009716:	bf00      	nop
 8009718:	bf00      	nop
 800971a:	e7fd      	b.n	8009718 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800971c:	f001 ffae 	bl	800b67c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009720:	2300      	movs	r3, #0
 8009722:	e082      	b.n	800982a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009726:	2b00      	cmp	r3, #0
 8009728:	d106      	bne.n	8009738 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800972a:	f107 030c 	add.w	r3, r7, #12
 800972e:	4618      	mov	r0, r3
 8009730:	f000 ffa8 	bl	800a684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009734:	2301      	movs	r3, #1
 8009736:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009738:	f001 ffa0 	bl	800b67c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800973c:	f000 fd18 	bl	800a170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009740:	f001 ff6a 	bl	800b618 <vPortEnterCritical>
 8009744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009746:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800974a:	b25b      	sxtb	r3, r3
 800974c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009750:	d103      	bne.n	800975a <xQueueSemaphoreTake+0x142>
 8009752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800975a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009760:	b25b      	sxtb	r3, r3
 8009762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009766:	d103      	bne.n	8009770 <xQueueSemaphoreTake+0x158>
 8009768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976a:	2200      	movs	r2, #0
 800976c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009770:	f001 ff84 	bl	800b67c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009774:	463a      	mov	r2, r7
 8009776:	f107 030c 	add.w	r3, r7, #12
 800977a:	4611      	mov	r1, r2
 800977c:	4618      	mov	r0, r3
 800977e:	f000 ff97 	bl	800a6b0 <xTaskCheckForTimeOut>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d132      	bne.n	80097ee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009788:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800978a:	f000 f9f5 	bl	8009b78 <prvIsQueueEmpty>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d026      	beq.n	80097e2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d109      	bne.n	80097b0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800979c:	f001 ff3c 	bl	800b618 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f001 f8e7 	bl	800a978 <xTaskPriorityInherit>
 80097aa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80097ac:	f001 ff66 	bl	800b67c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80097b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b2:	3324      	adds	r3, #36	@ 0x24
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	4611      	mov	r1, r2
 80097b8:	4618      	mov	r0, r3
 80097ba:	f000 fead 	bl	800a518 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097c0:	f000 f988 	bl	8009ad4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097c4:	f000 fce2 	bl	800a18c <xTaskResumeAll>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f47f af67 	bne.w	800969e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80097d0:	4b18      	ldr	r3, [pc, #96]	@ (8009834 <xQueueSemaphoreTake+0x21c>)
 80097d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	e75d      	b.n	800969e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80097e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097e4:	f000 f976 	bl	8009ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097e8:	f000 fcd0 	bl	800a18c <xTaskResumeAll>
 80097ec:	e757      	b.n	800969e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80097ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097f0:	f000 f970 	bl	8009ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097f4:	f000 fcca 	bl	800a18c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097fa:	f000 f9bd 	bl	8009b78 <prvIsQueueEmpty>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	f43f af4c 	beq.w	800969e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00d      	beq.n	8009828 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800980c:	f001 ff04 	bl	800b618 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009810:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009812:	f000 f8b7 	bl	8009984 <prvGetDisinheritPriorityAfterTimeout>
 8009816:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800981e:	4618      	mov	r0, r3
 8009820:	f001 f982 	bl	800ab28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009824:	f001 ff2a 	bl	800b67c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009828:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800982a:	4618      	mov	r0, r3
 800982c:	3738      	adds	r7, #56	@ 0x38
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	e000ed04 	.word	0xe000ed04

08009838 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b08e      	sub	sp, #56	@ 0x38
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984a:	2b00      	cmp	r3, #0
 800984c:	d10b      	bne.n	8009866 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800984e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	623b      	str	r3, [r7, #32]
}
 8009860:	bf00      	nop
 8009862:	bf00      	nop
 8009864:	e7fd      	b.n	8009862 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d103      	bne.n	8009874 <xQueueReceiveFromISR+0x3c>
 800986c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <xQueueReceiveFromISR+0x40>
 8009874:	2301      	movs	r3, #1
 8009876:	e000      	b.n	800987a <xQueueReceiveFromISR+0x42>
 8009878:	2300      	movs	r3, #0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10b      	bne.n	8009896 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	61fb      	str	r3, [r7, #28]
}
 8009890:	bf00      	nop
 8009892:	bf00      	nop
 8009894:	e7fd      	b.n	8009892 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009896:	f001 ff9f 	bl	800b7d8 <vPortValidateInterruptPriority>
	__asm volatile
 800989a:	f3ef 8211 	mrs	r2, BASEPRI
 800989e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	61ba      	str	r2, [r7, #24]
 80098b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80098b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d02f      	beq.n	8009922 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80098c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098cc:	68b9      	ldr	r1, [r7, #8]
 80098ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80098d0:	f000 f8da 	bl	8009a88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d6:	1e5a      	subs	r2, r3, #1
 80098d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80098dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80098e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e4:	d112      	bne.n	800990c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d016      	beq.n	800991c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f0:	3310      	adds	r3, #16
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fe62 	bl	800a5bc <xTaskRemoveFromEventList>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00e      	beq.n	800991c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00b      	beq.n	800991c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	e007      	b.n	800991c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800990c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009910:	3301      	adds	r3, #1
 8009912:	b2db      	uxtb	r3, r3
 8009914:	b25a      	sxtb	r2, r3
 8009916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800991c:	2301      	movs	r3, #1
 800991e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009920:	e001      	b.n	8009926 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009922:	2300      	movs	r3, #0
 8009924:	637b      	str	r3, [r7, #52]	@ 0x34
 8009926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009928:	613b      	str	r3, [r7, #16]
	__asm volatile
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f383 8811 	msr	BASEPRI, r3
}
 8009930:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009934:	4618      	mov	r0, r3
 8009936:	3738      	adds	r7, #56	@ 0x38
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10b      	bne.n	8009966 <vQueueDelete+0x2a>
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	60bb      	str	r3, [r7, #8]
}
 8009960:	bf00      	nop
 8009962:	bf00      	nop
 8009964:	e7fd      	b.n	8009962 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 f95e 	bl	8009c28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009972:	2b00      	cmp	r3, #0
 8009974:	d102      	bne.n	800997c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f002 f83e 	bl	800b9f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800997c:	bf00      	nop
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009990:	2b00      	cmp	r3, #0
 8009992:	d006      	beq.n	80099a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	e001      	b.n	80099a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80099a6:	68fb      	ldr	r3, [r7, #12]
	}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099c0:	2300      	movs	r3, #0
 80099c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10d      	bne.n	80099ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d14d      	bne.n	8009a76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	4618      	mov	r0, r3
 80099e0:	f001 f832 	bl	800aa48 <xTaskPriorityDisinherit>
 80099e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	609a      	str	r2, [r3, #8]
 80099ec:	e043      	b.n	8009a76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d119      	bne.n	8009a28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6858      	ldr	r0, [r3, #4]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099fc:	461a      	mov	r2, r3
 80099fe:	68b9      	ldr	r1, [r7, #8]
 8009a00:	f021 ffbd 	bl	802b97e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	685a      	ldr	r2, [r3, #4]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a0c:	441a      	add	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d32b      	bcc.n	8009a76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	605a      	str	r2, [r3, #4]
 8009a26:	e026      	b.n	8009a76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	68d8      	ldr	r0, [r3, #12]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a30:	461a      	mov	r2, r3
 8009a32:	68b9      	ldr	r1, [r7, #8]
 8009a34:	f021 ffa3 	bl	802b97e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a40:	425b      	negs	r3, r3
 8009a42:	441a      	add	r2, r3
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	68da      	ldr	r2, [r3, #12]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d207      	bcs.n	8009a64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a5c:	425b      	negs	r3, r3
 8009a5e:	441a      	add	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d105      	bne.n	8009a76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	3b01      	subs	r3, #1
 8009a74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	1c5a      	adds	r2, r3, #1
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009a7e:	697b      	ldr	r3, [r7, #20]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d018      	beq.n	8009acc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68da      	ldr	r2, [r3, #12]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa2:	441a      	add	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68da      	ldr	r2, [r3, #12]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d303      	bcc.n	8009abc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68d9      	ldr	r1, [r3, #12]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	6838      	ldr	r0, [r7, #0]
 8009ac8:	f021 ff59 	bl	802b97e <memcpy>
	}
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009adc:	f001 fd9c 	bl	800b618 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ae6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ae8:	e011      	b.n	8009b0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d012      	beq.n	8009b18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	3324      	adds	r3, #36	@ 0x24
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 fd60 	bl	800a5bc <xTaskRemoveFromEventList>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b02:	f000 fe39 	bl	800a778 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	dce9      	bgt.n	8009aea <prvUnlockQueue+0x16>
 8009b16:	e000      	b.n	8009b1a <prvUnlockQueue+0x46>
					break;
 8009b18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	22ff      	movs	r2, #255	@ 0xff
 8009b1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009b22:	f001 fdab 	bl	800b67c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b26:	f001 fd77 	bl	800b618 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b32:	e011      	b.n	8009b58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d012      	beq.n	8009b62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	3310      	adds	r3, #16
 8009b40:	4618      	mov	r0, r3
 8009b42:	f000 fd3b 	bl	800a5bc <xTaskRemoveFromEventList>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b4c:	f000 fe14 	bl	800a778 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
 8009b52:	3b01      	subs	r3, #1
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	dce9      	bgt.n	8009b34 <prvUnlockQueue+0x60>
 8009b60:	e000      	b.n	8009b64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	22ff      	movs	r2, #255	@ 0xff
 8009b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009b6c:	f001 fd86 	bl	800b67c <vPortExitCritical>
}
 8009b70:	bf00      	nop
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b80:	f001 fd4a 	bl	800b618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d102      	bne.n	8009b92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	e001      	b.n	8009b96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b96:	f001 fd71 	bl	800b67c <vPortExitCritical>

	return xReturn;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bac:	f001 fd34 	bl	800b618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d102      	bne.n	8009bc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	e001      	b.n	8009bc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bc6:	f001 fd59 	bl	800b67c <vPortExitCritical>

	return xReturn;
 8009bca:	68fb      	ldr	r3, [r7, #12]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bde:	2300      	movs	r3, #0
 8009be0:	60fb      	str	r3, [r7, #12]
 8009be2:	e014      	b.n	8009c0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009be4:	4a0f      	ldr	r2, [pc, #60]	@ (8009c24 <vQueueAddToRegistry+0x50>)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10b      	bne.n	8009c08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009bf0:	490c      	ldr	r1, [pc, #48]	@ (8009c24 <vQueueAddToRegistry+0x50>)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8009c24 <vQueueAddToRegistry+0x50>)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	00db      	lsls	r3, r3, #3
 8009c00:	4413      	add	r3, r2
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c06:	e006      	b.n	8009c16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	60fb      	str	r3, [r7, #12]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2b07      	cmp	r3, #7
 8009c12:	d9e7      	bls.n	8009be4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	20000b3c 	.word	0x20000b3c

08009c28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c30:	2300      	movs	r3, #0
 8009c32:	60fb      	str	r3, [r7, #12]
 8009c34:	e016      	b.n	8009c64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009c36:	4a10      	ldr	r2, [pc, #64]	@ (8009c78 <vQueueUnregisterQueue+0x50>)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	4413      	add	r3, r2
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d10b      	bne.n	8009c5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009c46:	4a0c      	ldr	r2, [pc, #48]	@ (8009c78 <vQueueUnregisterQueue+0x50>)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009c50:	4a09      	ldr	r2, [pc, #36]	@ (8009c78 <vQueueUnregisterQueue+0x50>)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	00db      	lsls	r3, r3, #3
 8009c56:	4413      	add	r3, r2
 8009c58:	2200      	movs	r2, #0
 8009c5a:	605a      	str	r2, [r3, #4]
				break;
 8009c5c:	e006      	b.n	8009c6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	3301      	adds	r3, #1
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2b07      	cmp	r3, #7
 8009c68:	d9e5      	bls.n	8009c36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009c6a:	bf00      	nop
 8009c6c:	bf00      	nop
 8009c6e:	3714      	adds	r7, #20
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	20000b3c 	.word	0x20000b3c

08009c7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c8c:	f001 fcc4 	bl	800b618 <vPortEnterCritical>
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c96:	b25b      	sxtb	r3, r3
 8009c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9c:	d103      	bne.n	8009ca6 <vQueueWaitForMessageRestricted+0x2a>
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cac:	b25b      	sxtb	r3, r3
 8009cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb2:	d103      	bne.n	8009cbc <vQueueWaitForMessageRestricted+0x40>
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cbc:	f001 fcde 	bl	800b67c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d106      	bne.n	8009cd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	3324      	adds	r3, #36	@ 0x24
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f000 fc47 	bl	800a564 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009cd6:	6978      	ldr	r0, [r7, #20]
 8009cd8:	f7ff fefc 	bl	8009ad4 <prvUnlockQueue>
	}
 8009cdc:	bf00      	nop
 8009cde:	3718      	adds	r7, #24
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b08e      	sub	sp, #56	@ 0x38
 8009ce8:	af04      	add	r7, sp, #16
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
 8009cf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10b      	bne.n	8009d10 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	623b      	str	r3, [r7, #32]
}
 8009d0a:	bf00      	nop
 8009d0c:	bf00      	nop
 8009d0e:	e7fd      	b.n	8009d0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10b      	bne.n	8009d2e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1a:	f383 8811 	msr	BASEPRI, r3
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	61fb      	str	r3, [r7, #28]
}
 8009d28:	bf00      	nop
 8009d2a:	bf00      	nop
 8009d2c:	e7fd      	b.n	8009d2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d2e:	2360      	movs	r3, #96	@ 0x60
 8009d30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	2b60      	cmp	r3, #96	@ 0x60
 8009d36:	d00b      	beq.n	8009d50 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d3c:	f383 8811 	msr	BASEPRI, r3
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	61bb      	str	r3, [r7, #24]
}
 8009d4a:	bf00      	nop
 8009d4c:	bf00      	nop
 8009d4e:	e7fd      	b.n	8009d4c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d01e      	beq.n	8009d96 <xTaskCreateStatic+0xb2>
 8009d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d01b      	beq.n	8009d96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d60:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d66:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6a:	2202      	movs	r2, #2
 8009d6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d70:	2300      	movs	r3, #0
 8009d72:	9303      	str	r3, [sp, #12]
 8009d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d76:	9302      	str	r3, [sp, #8]
 8009d78:	f107 0314 	add.w	r3, r7, #20
 8009d7c:	9301      	str	r3, [sp, #4]
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	68b9      	ldr	r1, [r7, #8]
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f000 f850 	bl	8009e2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d90:	f000 f8e0 	bl	8009f54 <prvAddNewTaskToReadyList>
 8009d94:	e001      	b.n	8009d9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009d96:	2300      	movs	r3, #0
 8009d98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d9a:	697b      	ldr	r3, [r7, #20]
	}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3728      	adds	r7, #40	@ 0x28
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b08c      	sub	sp, #48	@ 0x30
 8009da8:	af04      	add	r7, sp, #16
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	603b      	str	r3, [r7, #0]
 8009db0:	4613      	mov	r3, r2
 8009db2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009db4:	88fb      	ldrh	r3, [r7, #6]
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4618      	mov	r0, r3
 8009dba:	f001 fd4f 	bl	800b85c <pvPortMalloc>
 8009dbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00e      	beq.n	8009de4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009dc6:	2060      	movs	r0, #96	@ 0x60
 8009dc8:	f001 fd48 	bl	800b85c <pvPortMalloc>
 8009dcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d003      	beq.n	8009ddc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8009dda:	e005      	b.n	8009de8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ddc:	6978      	ldr	r0, [r7, #20]
 8009dde:	f001 fe0b 	bl	800b9f8 <vPortFree>
 8009de2:	e001      	b.n	8009de8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009de4:	2300      	movs	r3, #0
 8009de6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d017      	beq.n	8009e1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009df6:	88fa      	ldrh	r2, [r7, #6]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	9303      	str	r3, [sp, #12]
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	9302      	str	r3, [sp, #8]
 8009e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e02:	9301      	str	r3, [sp, #4]
 8009e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	68b9      	ldr	r1, [r7, #8]
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f000 f80e 	bl	8009e2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e12:	69f8      	ldr	r0, [r7, #28]
 8009e14:	f000 f89e 	bl	8009f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	61bb      	str	r3, [r7, #24]
 8009e1c:	e002      	b.n	8009e24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e24:	69bb      	ldr	r3, [r7, #24]
	}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3720      	adds	r7, #32
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b088      	sub	sp, #32
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	60f8      	str	r0, [r7, #12]
 8009e36:	60b9      	str	r1, [r7, #8]
 8009e38:	607a      	str	r2, [r7, #4]
 8009e3a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	461a      	mov	r2, r3
 8009e46:	21a5      	movs	r1, #165	@ 0xa5
 8009e48:	f021 fcc9 	bl	802b7de <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009e56:	3b01      	subs	r3, #1
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	f023 0307 	bic.w	r3, r3, #7
 8009e64:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	f003 0307 	and.w	r3, r3, #7
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00b      	beq.n	8009e88 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	617b      	str	r3, [r7, #20]
}
 8009e82:	bf00      	nop
 8009e84:	bf00      	nop
 8009e86:	e7fd      	b.n	8009e84 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d01f      	beq.n	8009ece <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e8e:	2300      	movs	r3, #0
 8009e90:	61fb      	str	r3, [r7, #28]
 8009e92:	e012      	b.n	8009eba <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	4413      	add	r3, r2
 8009e9a:	7819      	ldrb	r1, [r3, #0]
 8009e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	3334      	adds	r3, #52	@ 0x34
 8009ea4:	460a      	mov	r2, r1
 8009ea6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	4413      	add	r3, r2
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d006      	beq.n	8009ec2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	61fb      	str	r3, [r7, #28]
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	2b0f      	cmp	r3, #15
 8009ebe:	d9e9      	bls.n	8009e94 <prvInitialiseNewTask+0x66>
 8009ec0:	e000      	b.n	8009ec4 <prvInitialiseNewTask+0x96>
			{
				break;
 8009ec2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009ecc:	e003      	b.n	8009ed6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed8:	2b37      	cmp	r3, #55	@ 0x37
 8009eda:	d901      	bls.n	8009ee0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009edc:	2337      	movs	r3, #55	@ 0x37
 8009ede:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009eea:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eee:	2200      	movs	r2, #0
 8009ef0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef4:	3304      	adds	r3, #4
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe fe34 	bl	8008b64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efe:	3318      	adds	r3, #24
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fe fe2f 	bl	8008b64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f1a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1e:	2200      	movs	r2, #0
 8009f20:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f24:	2200      	movs	r2, #0
 8009f26:	659a      	str	r2, [r3, #88]	@ 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f30:	683a      	ldr	r2, [r7, #0]
 8009f32:	68f9      	ldr	r1, [r7, #12]
 8009f34:	69b8      	ldr	r0, [r7, #24]
 8009f36:	f001 fa3d 	bl	800b3b4 <pxPortInitialiseStack>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f4c:	bf00      	nop
 8009f4e:	3720      	adds	r7, #32
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f5c:	f001 fb5c 	bl	800b618 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f60:	4b2d      	ldr	r3, [pc, #180]	@ (800a018 <prvAddNewTaskToReadyList+0xc4>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3301      	adds	r3, #1
 8009f66:	4a2c      	ldr	r2, [pc, #176]	@ (800a018 <prvAddNewTaskToReadyList+0xc4>)
 8009f68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800a01c <prvAddNewTaskToReadyList+0xc8>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d109      	bne.n	8009f86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f72:	4a2a      	ldr	r2, [pc, #168]	@ (800a01c <prvAddNewTaskToReadyList+0xc8>)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f78:	4b27      	ldr	r3, [pc, #156]	@ (800a018 <prvAddNewTaskToReadyList+0xc4>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d110      	bne.n	8009fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f80:	f000 fc1e 	bl	800a7c0 <prvInitialiseTaskLists>
 8009f84:	e00d      	b.n	8009fa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f86:	4b26      	ldr	r3, [pc, #152]	@ (800a020 <prvAddNewTaskToReadyList+0xcc>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d109      	bne.n	8009fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f8e:	4b23      	ldr	r3, [pc, #140]	@ (800a01c <prvAddNewTaskToReadyList+0xc8>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d802      	bhi.n	8009fa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800a01c <prvAddNewTaskToReadyList+0xc8>)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009fa2:	4b20      	ldr	r3, [pc, #128]	@ (800a024 <prvAddNewTaskToReadyList+0xd0>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	4a1e      	ldr	r2, [pc, #120]	@ (800a024 <prvAddNewTaskToReadyList+0xd0>)
 8009faa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009fac:	4b1d      	ldr	r3, [pc, #116]	@ (800a024 <prvAddNewTaskToReadyList+0xd0>)
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fb8:	4b1b      	ldr	r3, [pc, #108]	@ (800a028 <prvAddNewTaskToReadyList+0xd4>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d903      	bls.n	8009fc8 <prvAddNewTaskToReadyList+0x74>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc4:	4a18      	ldr	r2, [pc, #96]	@ (800a028 <prvAddNewTaskToReadyList+0xd4>)
 8009fc6:	6013      	str	r3, [r2, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fcc:	4613      	mov	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	4413      	add	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4a15      	ldr	r2, [pc, #84]	@ (800a02c <prvAddNewTaskToReadyList+0xd8>)
 8009fd6:	441a      	add	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	3304      	adds	r3, #4
 8009fdc:	4619      	mov	r1, r3
 8009fde:	4610      	mov	r0, r2
 8009fe0:	f7fe fdcd 	bl	8008b7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fe4:	f001 fb4a 	bl	800b67c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fe8:	4b0d      	ldr	r3, [pc, #52]	@ (800a020 <prvAddNewTaskToReadyList+0xcc>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00e      	beq.n	800a00e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800a01c <prvAddNewTaskToReadyList+0xc8>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d207      	bcs.n	800a00e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ffe:	4b0c      	ldr	r3, [pc, #48]	@ (800a030 <prvAddNewTaskToReadyList+0xdc>)
 800a000:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a004:	601a      	str	r2, [r3, #0]
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a00e:	bf00      	nop
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	20001050 	.word	0x20001050
 800a01c:	20000b7c 	.word	0x20000b7c
 800a020:	2000105c 	.word	0x2000105c
 800a024:	2000106c 	.word	0x2000106c
 800a028:	20001058 	.word	0x20001058
 800a02c:	20000b80 	.word	0x20000b80
 800a030:	e000ed04 	.word	0xe000ed04

0800a034 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a03c:	2300      	movs	r3, #0
 800a03e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d018      	beq.n	800a078 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a046:	4b14      	ldr	r3, [pc, #80]	@ (800a098 <vTaskDelay+0x64>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00b      	beq.n	800a066 <vTaskDelay+0x32>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	60bb      	str	r3, [r7, #8]
}
 800a060:	bf00      	nop
 800a062:	bf00      	nop
 800a064:	e7fd      	b.n	800a062 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a066:	f000 f883 	bl	800a170 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a06a:	2100      	movs	r1, #0
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fdf3 	bl	800ac58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a072:	f000 f88b 	bl	800a18c <xTaskResumeAll>
 800a076:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d107      	bne.n	800a08e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a07e:	4b07      	ldr	r3, [pc, #28]	@ (800a09c <vTaskDelay+0x68>)
 800a080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a084:	601a      	str	r2, [r3, #0]
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a08e:	bf00      	nop
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	20001078 	.word	0x20001078
 800a09c:	e000ed04 	.word	0xe000ed04

0800a0a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b08a      	sub	sp, #40	@ 0x28
 800a0a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a0ae:	463a      	mov	r2, r7
 800a0b0:	1d39      	adds	r1, r7, #4
 800a0b2:	f107 0308 	add.w	r3, r7, #8
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fe fd00 	bl	8008abc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	9202      	str	r2, [sp, #8]
 800a0c4:	9301      	str	r3, [sp, #4]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	460a      	mov	r2, r1
 800a0ce:	4922      	ldr	r1, [pc, #136]	@ (800a158 <vTaskStartScheduler+0xb8>)
 800a0d0:	4822      	ldr	r0, [pc, #136]	@ (800a15c <vTaskStartScheduler+0xbc>)
 800a0d2:	f7ff fe07 	bl	8009ce4 <xTaskCreateStatic>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	4a21      	ldr	r2, [pc, #132]	@ (800a160 <vTaskStartScheduler+0xc0>)
 800a0da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0dc:	4b20      	ldr	r3, [pc, #128]	@ (800a160 <vTaskStartScheduler+0xc0>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d002      	beq.n	800a0ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	617b      	str	r3, [r7, #20]
 800a0e8:	e001      	b.n	800a0ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d102      	bne.n	800a0fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0f4:	f000 fe04 	bl	800ad00 <xTimerCreateTimerTask>
 800a0f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d116      	bne.n	800a12e <vTaskStartScheduler+0x8e>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	613b      	str	r3, [r7, #16]
}
 800a112:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a114:	4b13      	ldr	r3, [pc, #76]	@ (800a164 <vTaskStartScheduler+0xc4>)
 800a116:	f04f 32ff 	mov.w	r2, #4294967295
 800a11a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a11c:	4b12      	ldr	r3, [pc, #72]	@ (800a168 <vTaskStartScheduler+0xc8>)
 800a11e:	2201      	movs	r2, #1
 800a120:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a122:	4b12      	ldr	r3, [pc, #72]	@ (800a16c <vTaskStartScheduler+0xcc>)
 800a124:	2200      	movs	r2, #0
 800a126:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a128:	f001 f9d2 	bl	800b4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a12c:	e00f      	b.n	800a14e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a134:	d10b      	bne.n	800a14e <vTaskStartScheduler+0xae>
	__asm volatile
 800a136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	60fb      	str	r3, [r7, #12]
}
 800a148:	bf00      	nop
 800a14a:	bf00      	nop
 800a14c:	e7fd      	b.n	800a14a <vTaskStartScheduler+0xaa>
}
 800a14e:	bf00      	nop
 800a150:	3718      	adds	r7, #24
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	0802c7b0 	.word	0x0802c7b0
 800a15c:	0800a791 	.word	0x0800a791
 800a160:	20001074 	.word	0x20001074
 800a164:	20001070 	.word	0x20001070
 800a168:	2000105c 	.word	0x2000105c
 800a16c:	20001054 	.word	0x20001054

0800a170 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a170:	b480      	push	{r7}
 800a172:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a174:	4b04      	ldr	r3, [pc, #16]	@ (800a188 <vTaskSuspendAll+0x18>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	3301      	adds	r3, #1
 800a17a:	4a03      	ldr	r2, [pc, #12]	@ (800a188 <vTaskSuspendAll+0x18>)
 800a17c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a17e:	bf00      	nop
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr
 800a188:	20001078 	.word	0x20001078

0800a18c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a192:	2300      	movs	r3, #0
 800a194:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a196:	2300      	movs	r3, #0
 800a198:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a19a:	4b42      	ldr	r3, [pc, #264]	@ (800a2a4 <xTaskResumeAll+0x118>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10b      	bne.n	800a1ba <xTaskResumeAll+0x2e>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	603b      	str	r3, [r7, #0]
}
 800a1b4:	bf00      	nop
 800a1b6:	bf00      	nop
 800a1b8:	e7fd      	b.n	800a1b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a1ba:	f001 fa2d 	bl	800b618 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1be:	4b39      	ldr	r3, [pc, #228]	@ (800a2a4 <xTaskResumeAll+0x118>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	4a37      	ldr	r2, [pc, #220]	@ (800a2a4 <xTaskResumeAll+0x118>)
 800a1c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1c8:	4b36      	ldr	r3, [pc, #216]	@ (800a2a4 <xTaskResumeAll+0x118>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d162      	bne.n	800a296 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1d0:	4b35      	ldr	r3, [pc, #212]	@ (800a2a8 <xTaskResumeAll+0x11c>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d05e      	beq.n	800a296 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1d8:	e02f      	b.n	800a23a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1da:	4b34      	ldr	r3, [pc, #208]	@ (800a2ac <xTaskResumeAll+0x120>)
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	3318      	adds	r3, #24
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fe fd26 	bl	8008c38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	3304      	adds	r3, #4
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fe fd21 	bl	8008c38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1fa:	4b2d      	ldr	r3, [pc, #180]	@ (800a2b0 <xTaskResumeAll+0x124>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d903      	bls.n	800a20a <xTaskResumeAll+0x7e>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a206:	4a2a      	ldr	r2, [pc, #168]	@ (800a2b0 <xTaskResumeAll+0x124>)
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a20e:	4613      	mov	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4413      	add	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4a27      	ldr	r2, [pc, #156]	@ (800a2b4 <xTaskResumeAll+0x128>)
 800a218:	441a      	add	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	3304      	adds	r3, #4
 800a21e:	4619      	mov	r1, r3
 800a220:	4610      	mov	r0, r2
 800a222:	f7fe fcac 	bl	8008b7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a22a:	4b23      	ldr	r3, [pc, #140]	@ (800a2b8 <xTaskResumeAll+0x12c>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a230:	429a      	cmp	r2, r3
 800a232:	d302      	bcc.n	800a23a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a234:	4b21      	ldr	r3, [pc, #132]	@ (800a2bc <xTaskResumeAll+0x130>)
 800a236:	2201      	movs	r2, #1
 800a238:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a23a:	4b1c      	ldr	r3, [pc, #112]	@ (800a2ac <xTaskResumeAll+0x120>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1cb      	bne.n	800a1da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a248:	f000 fb58 	bl	800a8fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a24c:	4b1c      	ldr	r3, [pc, #112]	@ (800a2c0 <xTaskResumeAll+0x134>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d010      	beq.n	800a27a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a258:	f000 f846 	bl	800a2e8 <xTaskIncrementTick>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d002      	beq.n	800a268 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a262:	4b16      	ldr	r3, [pc, #88]	@ (800a2bc <xTaskResumeAll+0x130>)
 800a264:	2201      	movs	r2, #1
 800a266:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1f1      	bne.n	800a258 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a274:	4b12      	ldr	r3, [pc, #72]	@ (800a2c0 <xTaskResumeAll+0x134>)
 800a276:	2200      	movs	r2, #0
 800a278:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a27a:	4b10      	ldr	r3, [pc, #64]	@ (800a2bc <xTaskResumeAll+0x130>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d009      	beq.n	800a296 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a282:	2301      	movs	r3, #1
 800a284:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a286:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c4 <xTaskResumeAll+0x138>)
 800a288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a296:	f001 f9f1 	bl	800b67c <vPortExitCritical>

	return xAlreadyYielded;
 800a29a:	68bb      	ldr	r3, [r7, #8]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	20001078 	.word	0x20001078
 800a2a8:	20001050 	.word	0x20001050
 800a2ac:	20001010 	.word	0x20001010
 800a2b0:	20001058 	.word	0x20001058
 800a2b4:	20000b80 	.word	0x20000b80
 800a2b8:	20000b7c 	.word	0x20000b7c
 800a2bc:	20001064 	.word	0x20001064
 800a2c0:	20001060 	.word	0x20001060
 800a2c4:	e000ed04 	.word	0xe000ed04

0800a2c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2ce:	4b05      	ldr	r3, [pc, #20]	@ (800a2e4 <xTaskGetTickCount+0x1c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2d4:	687b      	ldr	r3, [r7, #4]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	20001054 	.word	0x20001054

0800a2e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2f2:	4b4f      	ldr	r3, [pc, #316]	@ (800a430 <xTaskIncrementTick+0x148>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f040 8090 	bne.w	800a41c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2fc:	4b4d      	ldr	r3, [pc, #308]	@ (800a434 <xTaskIncrementTick+0x14c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3301      	adds	r3, #1
 800a302:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a304:	4a4b      	ldr	r2, [pc, #300]	@ (800a434 <xTaskIncrementTick+0x14c>)
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d121      	bne.n	800a354 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a310:	4b49      	ldr	r3, [pc, #292]	@ (800a438 <xTaskIncrementTick+0x150>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00b      	beq.n	800a332 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a31a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31e:	f383 8811 	msr	BASEPRI, r3
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	603b      	str	r3, [r7, #0]
}
 800a32c:	bf00      	nop
 800a32e:	bf00      	nop
 800a330:	e7fd      	b.n	800a32e <xTaskIncrementTick+0x46>
 800a332:	4b41      	ldr	r3, [pc, #260]	@ (800a438 <xTaskIncrementTick+0x150>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	60fb      	str	r3, [r7, #12]
 800a338:	4b40      	ldr	r3, [pc, #256]	@ (800a43c <xTaskIncrementTick+0x154>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a3e      	ldr	r2, [pc, #248]	@ (800a438 <xTaskIncrementTick+0x150>)
 800a33e:	6013      	str	r3, [r2, #0]
 800a340:	4a3e      	ldr	r2, [pc, #248]	@ (800a43c <xTaskIncrementTick+0x154>)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6013      	str	r3, [r2, #0]
 800a346:	4b3e      	ldr	r3, [pc, #248]	@ (800a440 <xTaskIncrementTick+0x158>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3301      	adds	r3, #1
 800a34c:	4a3c      	ldr	r2, [pc, #240]	@ (800a440 <xTaskIncrementTick+0x158>)
 800a34e:	6013      	str	r3, [r2, #0]
 800a350:	f000 fad4 	bl	800a8fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a354:	4b3b      	ldr	r3, [pc, #236]	@ (800a444 <xTaskIncrementTick+0x15c>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d349      	bcc.n	800a3f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a35e:	4b36      	ldr	r3, [pc, #216]	@ (800a438 <xTaskIncrementTick+0x150>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d104      	bne.n	800a372 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a368:	4b36      	ldr	r3, [pc, #216]	@ (800a444 <xTaskIncrementTick+0x15c>)
 800a36a:	f04f 32ff 	mov.w	r2, #4294967295
 800a36e:	601a      	str	r2, [r3, #0]
					break;
 800a370:	e03f      	b.n	800a3f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a372:	4b31      	ldr	r3, [pc, #196]	@ (800a438 <xTaskIncrementTick+0x150>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	429a      	cmp	r2, r3
 800a388:	d203      	bcs.n	800a392 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a38a:	4a2e      	ldr	r2, [pc, #184]	@ (800a444 <xTaskIncrementTick+0x15c>)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a390:	e02f      	b.n	800a3f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	3304      	adds	r3, #4
 800a396:	4618      	mov	r0, r3
 800a398:	f7fe fc4e 	bl	8008c38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d004      	beq.n	800a3ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	3318      	adds	r3, #24
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fe fc45 	bl	8008c38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b2:	4b25      	ldr	r3, [pc, #148]	@ (800a448 <xTaskIncrementTick+0x160>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d903      	bls.n	800a3c2 <xTaskIncrementTick+0xda>
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3be:	4a22      	ldr	r2, [pc, #136]	@ (800a448 <xTaskIncrementTick+0x160>)
 800a3c0:	6013      	str	r3, [r2, #0]
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	4413      	add	r3, r2
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	4a1f      	ldr	r2, [pc, #124]	@ (800a44c <xTaskIncrementTick+0x164>)
 800a3d0:	441a      	add	r2, r3
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	4610      	mov	r0, r2
 800a3da:	f7fe fbd0 	bl	8008b7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a450 <xTaskIncrementTick+0x168>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d3b8      	bcc.n	800a35e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3f0:	e7b5      	b.n	800a35e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3f2:	4b17      	ldr	r3, [pc, #92]	@ (800a450 <xTaskIncrementTick+0x168>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3f8:	4914      	ldr	r1, [pc, #80]	@ (800a44c <xTaskIncrementTick+0x164>)
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4413      	add	r3, r2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	440b      	add	r3, r1
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b01      	cmp	r3, #1
 800a408:	d901      	bls.n	800a40e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a40a:	2301      	movs	r3, #1
 800a40c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a40e:	4b11      	ldr	r3, [pc, #68]	@ (800a454 <xTaskIncrementTick+0x16c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d007      	beq.n	800a426 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a416:	2301      	movs	r3, #1
 800a418:	617b      	str	r3, [r7, #20]
 800a41a:	e004      	b.n	800a426 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a41c:	4b0e      	ldr	r3, [pc, #56]	@ (800a458 <xTaskIncrementTick+0x170>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	3301      	adds	r3, #1
 800a422:	4a0d      	ldr	r2, [pc, #52]	@ (800a458 <xTaskIncrementTick+0x170>)
 800a424:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a426:	697b      	ldr	r3, [r7, #20]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3718      	adds	r7, #24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	20001078 	.word	0x20001078
 800a434:	20001054 	.word	0x20001054
 800a438:	20001008 	.word	0x20001008
 800a43c:	2000100c 	.word	0x2000100c
 800a440:	20001068 	.word	0x20001068
 800a444:	20001070 	.word	0x20001070
 800a448:	20001058 	.word	0x20001058
 800a44c:	20000b80 	.word	0x20000b80
 800a450:	20000b7c 	.word	0x20000b7c
 800a454:	20001064 	.word	0x20001064
 800a458:	20001060 	.word	0x20001060

0800a45c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a462:	4b28      	ldr	r3, [pc, #160]	@ (800a504 <vTaskSwitchContext+0xa8>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a46a:	4b27      	ldr	r3, [pc, #156]	@ (800a508 <vTaskSwitchContext+0xac>)
 800a46c:	2201      	movs	r2, #1
 800a46e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a470:	e042      	b.n	800a4f8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a472:	4b25      	ldr	r3, [pc, #148]	@ (800a508 <vTaskSwitchContext+0xac>)
 800a474:	2200      	movs	r2, #0
 800a476:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a478:	4b24      	ldr	r3, [pc, #144]	@ (800a50c <vTaskSwitchContext+0xb0>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	e011      	b.n	800a4a4 <vTaskSwitchContext+0x48>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10b      	bne.n	800a49e <vTaskSwitchContext+0x42>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	607b      	str	r3, [r7, #4]
}
 800a498:	bf00      	nop
 800a49a:	bf00      	nop
 800a49c:	e7fd      	b.n	800a49a <vTaskSwitchContext+0x3e>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	491a      	ldr	r1, [pc, #104]	@ (800a510 <vTaskSwitchContext+0xb4>)
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4413      	add	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	440b      	add	r3, r1
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d0e3      	beq.n	800a480 <vTaskSwitchContext+0x24>
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4a13      	ldr	r2, [pc, #76]	@ (800a510 <vTaskSwitchContext+0xb4>)
 800a4c4:	4413      	add	r3, r2
 800a4c6:	60bb      	str	r3, [r7, #8]
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	605a      	str	r2, [r3, #4]
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	685a      	ldr	r2, [r3, #4]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	3308      	adds	r3, #8
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d104      	bne.n	800a4e8 <vTaskSwitchContext+0x8c>
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	685a      	ldr	r2, [r3, #4]
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	605a      	str	r2, [r3, #4]
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	4a09      	ldr	r2, [pc, #36]	@ (800a514 <vTaskSwitchContext+0xb8>)
 800a4f0:	6013      	str	r3, [r2, #0]
 800a4f2:	4a06      	ldr	r2, [pc, #24]	@ (800a50c <vTaskSwitchContext+0xb0>)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6013      	str	r3, [r2, #0]
}
 800a4f8:	bf00      	nop
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	20001078 	.word	0x20001078
 800a508:	20001064 	.word	0x20001064
 800a50c:	20001058 	.word	0x20001058
 800a510:	20000b80 	.word	0x20000b80
 800a514:	20000b7c 	.word	0x20000b7c

0800a518 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10b      	bne.n	800a540 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52c:	f383 8811 	msr	BASEPRI, r3
 800a530:	f3bf 8f6f 	isb	sy
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	60fb      	str	r3, [r7, #12]
}
 800a53a:	bf00      	nop
 800a53c:	bf00      	nop
 800a53e:	e7fd      	b.n	800a53c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a540:	4b07      	ldr	r3, [pc, #28]	@ (800a560 <vTaskPlaceOnEventList+0x48>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	3318      	adds	r3, #24
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7fe fb3c 	bl	8008bc6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a54e:	2101      	movs	r1, #1
 800a550:	6838      	ldr	r0, [r7, #0]
 800a552:	f000 fb81 	bl	800ac58 <prvAddCurrentTaskToDelayedList>
}
 800a556:	bf00      	nop
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	20000b7c 	.word	0x20000b7c

0800a564 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d10b      	bne.n	800a58e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a57a:	f383 8811 	msr	BASEPRI, r3
 800a57e:	f3bf 8f6f 	isb	sy
 800a582:	f3bf 8f4f 	dsb	sy
 800a586:	617b      	str	r3, [r7, #20]
}
 800a588:	bf00      	nop
 800a58a:	bf00      	nop
 800a58c:	e7fd      	b.n	800a58a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a58e:	4b0a      	ldr	r3, [pc, #40]	@ (800a5b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3318      	adds	r3, #24
 800a594:	4619      	mov	r1, r3
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f7fe faf1 	bl	8008b7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d002      	beq.n	800a5a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a5a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a5a8:	6879      	ldr	r1, [r7, #4]
 800a5aa:	68b8      	ldr	r0, [r7, #8]
 800a5ac:	f000 fb54 	bl	800ac58 <prvAddCurrentTaskToDelayedList>
	}
 800a5b0:	bf00      	nop
 800a5b2:	3718      	adds	r7, #24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	20000b7c 	.word	0x20000b7c

0800a5bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10b      	bne.n	800a5ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	60fb      	str	r3, [r7, #12]
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop
 800a5e8:	e7fd      	b.n	800a5e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	3318      	adds	r3, #24
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fe fb22 	bl	8008c38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5f4:	4b1d      	ldr	r3, [pc, #116]	@ (800a66c <xTaskRemoveFromEventList+0xb0>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d11d      	bne.n	800a638 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	3304      	adds	r3, #4
 800a600:	4618      	mov	r0, r3
 800a602:	f7fe fb19 	bl	8008c38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a60a:	4b19      	ldr	r3, [pc, #100]	@ (800a670 <xTaskRemoveFromEventList+0xb4>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d903      	bls.n	800a61a <xTaskRemoveFromEventList+0x5e>
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a616:	4a16      	ldr	r2, [pc, #88]	@ (800a670 <xTaskRemoveFromEventList+0xb4>)
 800a618:	6013      	str	r3, [r2, #0]
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a61e:	4613      	mov	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4413      	add	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4a13      	ldr	r2, [pc, #76]	@ (800a674 <xTaskRemoveFromEventList+0xb8>)
 800a628:	441a      	add	r2, r3
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	3304      	adds	r3, #4
 800a62e:	4619      	mov	r1, r3
 800a630:	4610      	mov	r0, r2
 800a632:	f7fe faa4 	bl	8008b7e <vListInsertEnd>
 800a636:	e005      	b.n	800a644 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	3318      	adds	r3, #24
 800a63c:	4619      	mov	r1, r3
 800a63e:	480e      	ldr	r0, [pc, #56]	@ (800a678 <xTaskRemoveFromEventList+0xbc>)
 800a640:	f7fe fa9d 	bl	8008b7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a648:	4b0c      	ldr	r3, [pc, #48]	@ (800a67c <xTaskRemoveFromEventList+0xc0>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a64e:	429a      	cmp	r2, r3
 800a650:	d905      	bls.n	800a65e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a652:	2301      	movs	r3, #1
 800a654:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a656:	4b0a      	ldr	r3, [pc, #40]	@ (800a680 <xTaskRemoveFromEventList+0xc4>)
 800a658:	2201      	movs	r2, #1
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	e001      	b.n	800a662 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a65e:	2300      	movs	r3, #0
 800a660:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a662:	697b      	ldr	r3, [r7, #20]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3718      	adds	r7, #24
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	20001078 	.word	0x20001078
 800a670:	20001058 	.word	0x20001058
 800a674:	20000b80 	.word	0x20000b80
 800a678:	20001010 	.word	0x20001010
 800a67c:	20000b7c 	.word	0x20000b7c
 800a680:	20001064 	.word	0x20001064

0800a684 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a68c:	4b06      	ldr	r3, [pc, #24]	@ (800a6a8 <vTaskInternalSetTimeOutState+0x24>)
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a694:	4b05      	ldr	r3, [pc, #20]	@ (800a6ac <vTaskInternalSetTimeOutState+0x28>)
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	605a      	str	r2, [r3, #4]
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr
 800a6a8:	20001068 	.word	0x20001068
 800a6ac:	20001054 	.word	0x20001054

0800a6b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b088      	sub	sp, #32
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d10b      	bne.n	800a6d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	613b      	str	r3, [r7, #16]
}
 800a6d2:	bf00      	nop
 800a6d4:	bf00      	nop
 800a6d6:	e7fd      	b.n	800a6d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10b      	bne.n	800a6f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	60fb      	str	r3, [r7, #12]
}
 800a6f0:	bf00      	nop
 800a6f2:	bf00      	nop
 800a6f4:	e7fd      	b.n	800a6f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a6f6:	f000 ff8f 	bl	800b618 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a6fa:	4b1d      	ldr	r3, [pc, #116]	@ (800a770 <xTaskCheckForTimeOut+0xc0>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	69ba      	ldr	r2, [r7, #24]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a712:	d102      	bne.n	800a71a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a714:	2300      	movs	r3, #0
 800a716:	61fb      	str	r3, [r7, #28]
 800a718:	e023      	b.n	800a762 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	4b15      	ldr	r3, [pc, #84]	@ (800a774 <xTaskCheckForTimeOut+0xc4>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	429a      	cmp	r2, r3
 800a724:	d007      	beq.n	800a736 <xTaskCheckForTimeOut+0x86>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	69ba      	ldr	r2, [r7, #24]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d302      	bcc.n	800a736 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a730:	2301      	movs	r3, #1
 800a732:	61fb      	str	r3, [r7, #28]
 800a734:	e015      	b.n	800a762 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d20b      	bcs.n	800a758 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	1ad2      	subs	r2, r2, r3
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f7ff ff99 	bl	800a684 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a752:	2300      	movs	r3, #0
 800a754:	61fb      	str	r3, [r7, #28]
 800a756:	e004      	b.n	800a762 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	2200      	movs	r2, #0
 800a75c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a75e:	2301      	movs	r3, #1
 800a760:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a762:	f000 ff8b 	bl	800b67c <vPortExitCritical>

	return xReturn;
 800a766:	69fb      	ldr	r3, [r7, #28]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3720      	adds	r7, #32
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	20001054 	.word	0x20001054
 800a774:	20001068 	.word	0x20001068

0800a778 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a778:	b480      	push	{r7}
 800a77a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a77c:	4b03      	ldr	r3, [pc, #12]	@ (800a78c <vTaskMissedYield+0x14>)
 800a77e:	2201      	movs	r2, #1
 800a780:	601a      	str	r2, [r3, #0]
}
 800a782:	bf00      	nop
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	20001064 	.word	0x20001064

0800a790 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a798:	f000 f852 	bl	800a840 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a79c:	4b06      	ldr	r3, [pc, #24]	@ (800a7b8 <prvIdleTask+0x28>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d9f9      	bls.n	800a798 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a7a4:	4b05      	ldr	r3, [pc, #20]	@ (800a7bc <prvIdleTask+0x2c>)
 800a7a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7aa:	601a      	str	r2, [r3, #0]
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a7b4:	e7f0      	b.n	800a798 <prvIdleTask+0x8>
 800a7b6:	bf00      	nop
 800a7b8:	20000b80 	.word	0x20000b80
 800a7bc:	e000ed04 	.word	0xe000ed04

0800a7c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	607b      	str	r3, [r7, #4]
 800a7ca:	e00c      	b.n	800a7e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	4a12      	ldr	r2, [pc, #72]	@ (800a820 <prvInitialiseTaskLists+0x60>)
 800a7d8:	4413      	add	r3, r2
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fe f9a2 	bl	8008b24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	607b      	str	r3, [r7, #4]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2b37      	cmp	r3, #55	@ 0x37
 800a7ea:	d9ef      	bls.n	800a7cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7ec:	480d      	ldr	r0, [pc, #52]	@ (800a824 <prvInitialiseTaskLists+0x64>)
 800a7ee:	f7fe f999 	bl	8008b24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7f2:	480d      	ldr	r0, [pc, #52]	@ (800a828 <prvInitialiseTaskLists+0x68>)
 800a7f4:	f7fe f996 	bl	8008b24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a7f8:	480c      	ldr	r0, [pc, #48]	@ (800a82c <prvInitialiseTaskLists+0x6c>)
 800a7fa:	f7fe f993 	bl	8008b24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7fe:	480c      	ldr	r0, [pc, #48]	@ (800a830 <prvInitialiseTaskLists+0x70>)
 800a800:	f7fe f990 	bl	8008b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a804:	480b      	ldr	r0, [pc, #44]	@ (800a834 <prvInitialiseTaskLists+0x74>)
 800a806:	f7fe f98d 	bl	8008b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a80a:	4b0b      	ldr	r3, [pc, #44]	@ (800a838 <prvInitialiseTaskLists+0x78>)
 800a80c:	4a05      	ldr	r2, [pc, #20]	@ (800a824 <prvInitialiseTaskLists+0x64>)
 800a80e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a810:	4b0a      	ldr	r3, [pc, #40]	@ (800a83c <prvInitialiseTaskLists+0x7c>)
 800a812:	4a05      	ldr	r2, [pc, #20]	@ (800a828 <prvInitialiseTaskLists+0x68>)
 800a814:	601a      	str	r2, [r3, #0]
}
 800a816:	bf00      	nop
 800a818:	3708      	adds	r7, #8
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	20000b80 	.word	0x20000b80
 800a824:	20000fe0 	.word	0x20000fe0
 800a828:	20000ff4 	.word	0x20000ff4
 800a82c:	20001010 	.word	0x20001010
 800a830:	20001024 	.word	0x20001024
 800a834:	2000103c 	.word	0x2000103c
 800a838:	20001008 	.word	0x20001008
 800a83c:	2000100c 	.word	0x2000100c

0800a840 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a846:	e019      	b.n	800a87c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a848:	f000 fee6 	bl	800b618 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a84c:	4b10      	ldr	r3, [pc, #64]	@ (800a890 <prvCheckTasksWaitingTermination+0x50>)
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	3304      	adds	r3, #4
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fe f9ed 	bl	8008c38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a85e:	4b0d      	ldr	r3, [pc, #52]	@ (800a894 <prvCheckTasksWaitingTermination+0x54>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	3b01      	subs	r3, #1
 800a864:	4a0b      	ldr	r2, [pc, #44]	@ (800a894 <prvCheckTasksWaitingTermination+0x54>)
 800a866:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a868:	4b0b      	ldr	r3, [pc, #44]	@ (800a898 <prvCheckTasksWaitingTermination+0x58>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	4a0a      	ldr	r2, [pc, #40]	@ (800a898 <prvCheckTasksWaitingTermination+0x58>)
 800a870:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a872:	f000 ff03 	bl	800b67c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 f810 	bl	800a89c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a87c:	4b06      	ldr	r3, [pc, #24]	@ (800a898 <prvCheckTasksWaitingTermination+0x58>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1e1      	bne.n	800a848 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a884:	bf00      	nop
 800a886:	bf00      	nop
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	20001024 	.word	0x20001024
 800a894:	20001050 	.word	0x20001050
 800a898:	20001038 	.word	0x20001038

0800a89c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d108      	bne.n	800a8c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f001 f8a0 	bl	800b9f8 <vPortFree>
				vPortFree( pxTCB );
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f001 f89d 	bl	800b9f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a8be:	e019      	b.n	800a8f4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d103      	bne.n	800a8d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f001 f894 	bl	800b9f8 <vPortFree>
	}
 800a8d0:	e010      	b.n	800a8f4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d00b      	beq.n	800a8f4 <prvDeleteTCB+0x58>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	60fb      	str	r3, [r7, #12]
}
 800a8ee:	bf00      	nop
 800a8f0:	bf00      	nop
 800a8f2:	e7fd      	b.n	800a8f0 <prvDeleteTCB+0x54>
	}
 800a8f4:	bf00      	nop
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a902:	4b0c      	ldr	r3, [pc, #48]	@ (800a934 <prvResetNextTaskUnblockTime+0x38>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d104      	bne.n	800a916 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a90c:	4b0a      	ldr	r3, [pc, #40]	@ (800a938 <prvResetNextTaskUnblockTime+0x3c>)
 800a90e:	f04f 32ff 	mov.w	r2, #4294967295
 800a912:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a914:	e008      	b.n	800a928 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a916:	4b07      	ldr	r3, [pc, #28]	@ (800a934 <prvResetNextTaskUnblockTime+0x38>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	4a04      	ldr	r2, [pc, #16]	@ (800a938 <prvResetNextTaskUnblockTime+0x3c>)
 800a926:	6013      	str	r3, [r2, #0]
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	20001008 	.word	0x20001008
 800a938:	20001070 	.word	0x20001070

0800a93c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a942:	4b0b      	ldr	r3, [pc, #44]	@ (800a970 <xTaskGetSchedulerState+0x34>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d102      	bne.n	800a950 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a94a:	2301      	movs	r3, #1
 800a94c:	607b      	str	r3, [r7, #4]
 800a94e:	e008      	b.n	800a962 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a950:	4b08      	ldr	r3, [pc, #32]	@ (800a974 <xTaskGetSchedulerState+0x38>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d102      	bne.n	800a95e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a958:	2302      	movs	r3, #2
 800a95a:	607b      	str	r3, [r7, #4]
 800a95c:	e001      	b.n	800a962 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a95e:	2300      	movs	r3, #0
 800a960:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a962:	687b      	ldr	r3, [r7, #4]
	}
 800a964:	4618      	mov	r0, r3
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	2000105c 	.word	0x2000105c
 800a974:	20001078 	.word	0x20001078

0800a978 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a984:	2300      	movs	r3, #0
 800a986:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d051      	beq.n	800aa32 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a992:	4b2a      	ldr	r3, [pc, #168]	@ (800aa3c <xTaskPriorityInherit+0xc4>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a998:	429a      	cmp	r2, r3
 800a99a:	d241      	bcs.n	800aa20 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	699b      	ldr	r3, [r3, #24]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	db06      	blt.n	800a9b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9a4:	4b25      	ldr	r3, [pc, #148]	@ (800aa3c <xTaskPriorityInherit+0xc4>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	6959      	ldr	r1, [r3, #20]
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	4413      	add	r3, r2
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	4a1f      	ldr	r2, [pc, #124]	@ (800aa40 <xTaskPriorityInherit+0xc8>)
 800a9c4:	4413      	add	r3, r2
 800a9c6:	4299      	cmp	r1, r3
 800a9c8:	d122      	bne.n	800aa10 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7fe f932 	bl	8008c38 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a9d4:	4b19      	ldr	r3, [pc, #100]	@ (800aa3c <xTaskPriorityInherit+0xc4>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9e2:	4b18      	ldr	r3, [pc, #96]	@ (800aa44 <xTaskPriorityInherit+0xcc>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d903      	bls.n	800a9f2 <xTaskPriorityInherit+0x7a>
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ee:	4a15      	ldr	r2, [pc, #84]	@ (800aa44 <xTaskPriorityInherit+0xcc>)
 800a9f0:	6013      	str	r3, [r2, #0]
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	4413      	add	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4a10      	ldr	r2, [pc, #64]	@ (800aa40 <xTaskPriorityInherit+0xc8>)
 800aa00:	441a      	add	r2, r3
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	3304      	adds	r3, #4
 800aa06:	4619      	mov	r1, r3
 800aa08:	4610      	mov	r0, r2
 800aa0a:	f7fe f8b8 	bl	8008b7e <vListInsertEnd>
 800aa0e:	e004      	b.n	800aa1a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa10:	4b0a      	ldr	r3, [pc, #40]	@ (800aa3c <xTaskPriorityInherit+0xc4>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	60fb      	str	r3, [r7, #12]
 800aa1e:	e008      	b.n	800aa32 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa24:	4b05      	ldr	r3, [pc, #20]	@ (800aa3c <xTaskPriorityInherit+0xc4>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d201      	bcs.n	800aa32 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa32:	68fb      	ldr	r3, [r7, #12]
	}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	20000b7c 	.word	0x20000b7c
 800aa40:	20000b80 	.word	0x20000b80
 800aa44:	20001058 	.word	0x20001058

0800aa48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa54:	2300      	movs	r3, #0
 800aa56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d058      	beq.n	800ab10 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa5e:	4b2f      	ldr	r3, [pc, #188]	@ (800ab1c <xTaskPriorityDisinherit+0xd4>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d00b      	beq.n	800aa80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800aa68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	60fb      	str	r3, [r7, #12]
}
 800aa7a:	bf00      	nop
 800aa7c:	bf00      	nop
 800aa7e:	e7fd      	b.n	800aa7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10b      	bne.n	800aaa0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	60bb      	str	r3, [r7, #8]
}
 800aa9a:	bf00      	nop
 800aa9c:	bf00      	nop
 800aa9e:	e7fd      	b.n	800aa9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaa4:	1e5a      	subs	r2, r3, #1
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d02c      	beq.n	800ab10 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d128      	bne.n	800ab10 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	3304      	adds	r3, #4
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe f8b8 	bl	8008c38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae0:	4b0f      	ldr	r3, [pc, #60]	@ (800ab20 <xTaskPriorityDisinherit+0xd8>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d903      	bls.n	800aaf0 <xTaskPriorityDisinherit+0xa8>
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaec:	4a0c      	ldr	r2, [pc, #48]	@ (800ab20 <xTaskPriorityDisinherit+0xd8>)
 800aaee:	6013      	str	r3, [r2, #0]
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4413      	add	r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4a09      	ldr	r2, [pc, #36]	@ (800ab24 <xTaskPriorityDisinherit+0xdc>)
 800aafe:	441a      	add	r2, r3
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	3304      	adds	r3, #4
 800ab04:	4619      	mov	r1, r3
 800ab06:	4610      	mov	r0, r2
 800ab08:	f7fe f839 	bl	8008b7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab10:	697b      	ldr	r3, [r7, #20]
	}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20000b7c 	.word	0x20000b7c
 800ab20:	20001058 	.word	0x20001058
 800ab24:	20000b80 	.word	0x20000b80

0800ab28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b088      	sub	sp, #32
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ab36:	2301      	movs	r3, #1
 800ab38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d06c      	beq.n	800ac1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10b      	bne.n	800ab60 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	60fb      	str	r3, [r7, #12]
}
 800ab5a:	bf00      	nop
 800ab5c:	bf00      	nop
 800ab5e:	e7fd      	b.n	800ab5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab64:	683a      	ldr	r2, [r7, #0]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d902      	bls.n	800ab70 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	61fb      	str	r3, [r7, #28]
 800ab6e:	e002      	b.n	800ab76 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab74:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab7a:	69fa      	ldr	r2, [r7, #28]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d04c      	beq.n	800ac1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab84:	697a      	ldr	r2, [r7, #20]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d147      	bne.n	800ac1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ab8a:	4b26      	ldr	r3, [pc, #152]	@ (800ac24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	69ba      	ldr	r2, [r7, #24]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d10b      	bne.n	800abac <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ab94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab98:	f383 8811 	msr	BASEPRI, r3
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	60bb      	str	r3, [r7, #8]
}
 800aba6:	bf00      	nop
 800aba8:	bf00      	nop
 800abaa:	e7fd      	b.n	800aba8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	69fa      	ldr	r2, [r7, #28]
 800abb6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	699b      	ldr	r3, [r3, #24]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	db04      	blt.n	800abca <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	6959      	ldr	r1, [r3, #20]
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	4613      	mov	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	4a13      	ldr	r2, [pc, #76]	@ (800ac28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800abda:	4413      	add	r3, r2
 800abdc:	4299      	cmp	r1, r3
 800abde:	d11c      	bne.n	800ac1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	3304      	adds	r3, #4
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7fe f827 	bl	8008c38 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abee:	4b0f      	ldr	r3, [pc, #60]	@ (800ac2c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d903      	bls.n	800abfe <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abfa:	4a0c      	ldr	r2, [pc, #48]	@ (800ac2c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800abfc:	6013      	str	r3, [r2, #0]
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac02:	4613      	mov	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4a07      	ldr	r2, [pc, #28]	@ (800ac28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ac0c:	441a      	add	r2, r3
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	3304      	adds	r3, #4
 800ac12:	4619      	mov	r1, r3
 800ac14:	4610      	mov	r0, r2
 800ac16:	f7fd ffb2 	bl	8008b7e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac1a:	bf00      	nop
 800ac1c:	3720      	adds	r7, #32
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	20000b7c 	.word	0x20000b7c
 800ac28:	20000b80 	.word	0x20000b80
 800ac2c:	20001058 	.word	0x20001058

0800ac30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ac30:	b480      	push	{r7}
 800ac32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ac34:	4b07      	ldr	r3, [pc, #28]	@ (800ac54 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d004      	beq.n	800ac46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ac3c:	4b05      	ldr	r3, [pc, #20]	@ (800ac54 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac42:	3201      	adds	r2, #1
 800ac44:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ac46:	4b03      	ldr	r3, [pc, #12]	@ (800ac54 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac48:	681b      	ldr	r3, [r3, #0]
	}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	20000b7c 	.word	0x20000b7c

0800ac58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac62:	4b21      	ldr	r3, [pc, #132]	@ (800ace8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac68:	4b20      	ldr	r3, [pc, #128]	@ (800acec <prvAddCurrentTaskToDelayedList+0x94>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fd ffe2 	bl	8008c38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7a:	d10a      	bne.n	800ac92 <prvAddCurrentTaskToDelayedList+0x3a>
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d007      	beq.n	800ac92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac82:	4b1a      	ldr	r3, [pc, #104]	@ (800acec <prvAddCurrentTaskToDelayedList+0x94>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3304      	adds	r3, #4
 800ac88:	4619      	mov	r1, r3
 800ac8a:	4819      	ldr	r0, [pc, #100]	@ (800acf0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ac8c:	f7fd ff77 	bl	8008b7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac90:	e026      	b.n	800ace0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4413      	add	r3, r2
 800ac98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac9a:	4b14      	ldr	r3, [pc, #80]	@ (800acec <prvAddCurrentTaskToDelayedList+0x94>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68ba      	ldr	r2, [r7, #8]
 800aca0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d209      	bcs.n	800acbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acaa:	4b12      	ldr	r3, [pc, #72]	@ (800acf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	4b0f      	ldr	r3, [pc, #60]	@ (800acec <prvAddCurrentTaskToDelayedList+0x94>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	3304      	adds	r3, #4
 800acb4:	4619      	mov	r1, r3
 800acb6:	4610      	mov	r0, r2
 800acb8:	f7fd ff85 	bl	8008bc6 <vListInsert>
}
 800acbc:	e010      	b.n	800ace0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acbe:	4b0e      	ldr	r3, [pc, #56]	@ (800acf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	4b0a      	ldr	r3, [pc, #40]	@ (800acec <prvAddCurrentTaskToDelayedList+0x94>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3304      	adds	r3, #4
 800acc8:	4619      	mov	r1, r3
 800acca:	4610      	mov	r0, r2
 800accc:	f7fd ff7b 	bl	8008bc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800acd0:	4b0a      	ldr	r3, [pc, #40]	@ (800acfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d202      	bcs.n	800ace0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800acda:	4a08      	ldr	r2, [pc, #32]	@ (800acfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	6013      	str	r3, [r2, #0]
}
 800ace0:	bf00      	nop
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	20001054 	.word	0x20001054
 800acec:	20000b7c 	.word	0x20000b7c
 800acf0:	2000103c 	.word	0x2000103c
 800acf4:	2000100c 	.word	0x2000100c
 800acf8:	20001008 	.word	0x20001008
 800acfc:	20001070 	.word	0x20001070

0800ad00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b08a      	sub	sp, #40	@ 0x28
 800ad04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad0a:	f000 fb13 	bl	800b334 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ad0e:	4b1d      	ldr	r3, [pc, #116]	@ (800ad84 <xTimerCreateTimerTask+0x84>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d021      	beq.n	800ad5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad16:	2300      	movs	r3, #0
 800ad18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad1e:	1d3a      	adds	r2, r7, #4
 800ad20:	f107 0108 	add.w	r1, r7, #8
 800ad24:	f107 030c 	add.w	r3, r7, #12
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7fd fee1 	bl	8008af0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad2e:	6879      	ldr	r1, [r7, #4]
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	9202      	str	r2, [sp, #8]
 800ad36:	9301      	str	r3, [sp, #4]
 800ad38:	2302      	movs	r3, #2
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	460a      	mov	r2, r1
 800ad40:	4911      	ldr	r1, [pc, #68]	@ (800ad88 <xTimerCreateTimerTask+0x88>)
 800ad42:	4812      	ldr	r0, [pc, #72]	@ (800ad8c <xTimerCreateTimerTask+0x8c>)
 800ad44:	f7fe ffce 	bl	8009ce4 <xTaskCreateStatic>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	4a11      	ldr	r2, [pc, #68]	@ (800ad90 <xTimerCreateTimerTask+0x90>)
 800ad4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad4e:	4b10      	ldr	r3, [pc, #64]	@ (800ad90 <xTimerCreateTimerTask+0x90>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad56:	2301      	movs	r3, #1
 800ad58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10b      	bne.n	800ad78 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ad60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	613b      	str	r3, [r7, #16]
}
 800ad72:	bf00      	nop
 800ad74:	bf00      	nop
 800ad76:	e7fd      	b.n	800ad74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ad78:	697b      	ldr	r3, [r7, #20]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3718      	adds	r7, #24
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	200010ac 	.word	0x200010ac
 800ad88:	0802c7b8 	.word	0x0802c7b8
 800ad8c:	0800aecd 	.word	0x0800aecd
 800ad90:	200010b0 	.word	0x200010b0

0800ad94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b08a      	sub	sp, #40	@ 0x28
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	607a      	str	r2, [r7, #4]
 800ada0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ada2:	2300      	movs	r3, #0
 800ada4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10b      	bne.n	800adc4 <xTimerGenericCommand+0x30>
	__asm volatile
 800adac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb0:	f383 8811 	msr	BASEPRI, r3
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	623b      	str	r3, [r7, #32]
}
 800adbe:	bf00      	nop
 800adc0:	bf00      	nop
 800adc2:	e7fd      	b.n	800adc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800adc4:	4b19      	ldr	r3, [pc, #100]	@ (800ae2c <xTimerGenericCommand+0x98>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d02a      	beq.n	800ae22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2b05      	cmp	r3, #5
 800addc:	dc18      	bgt.n	800ae10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800adde:	f7ff fdad 	bl	800a93c <xTaskGetSchedulerState>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d109      	bne.n	800adfc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ade8:	4b10      	ldr	r3, [pc, #64]	@ (800ae2c <xTimerGenericCommand+0x98>)
 800adea:	6818      	ldr	r0, [r3, #0]
 800adec:	f107 0110 	add.w	r1, r7, #16
 800adf0:	2300      	movs	r3, #0
 800adf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adf4:	f7fe f8fe 	bl	8008ff4 <xQueueGenericSend>
 800adf8:	6278      	str	r0, [r7, #36]	@ 0x24
 800adfa:	e012      	b.n	800ae22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800adfc:	4b0b      	ldr	r3, [pc, #44]	@ (800ae2c <xTimerGenericCommand+0x98>)
 800adfe:	6818      	ldr	r0, [r3, #0]
 800ae00:	f107 0110 	add.w	r1, r7, #16
 800ae04:	2300      	movs	r3, #0
 800ae06:	2200      	movs	r2, #0
 800ae08:	f7fe f8f4 	bl	8008ff4 <xQueueGenericSend>
 800ae0c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ae0e:	e008      	b.n	800ae22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae10:	4b06      	ldr	r3, [pc, #24]	@ (800ae2c <xTimerGenericCommand+0x98>)
 800ae12:	6818      	ldr	r0, [r3, #0]
 800ae14:	f107 0110 	add.w	r1, r7, #16
 800ae18:	2300      	movs	r3, #0
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	f7fe f9ec 	bl	80091f8 <xQueueGenericSendFromISR>
 800ae20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3728      	adds	r7, #40	@ 0x28
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	200010ac 	.word	0x200010ac

0800ae30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b088      	sub	sp, #32
 800ae34:	af02      	add	r7, sp, #8
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae3a:	4b23      	ldr	r3, [pc, #140]	@ (800aec8 <prvProcessExpiredTimer+0x98>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	3304      	adds	r3, #4
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7fd fef5 	bl	8008c38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae54:	f003 0304 	and.w	r3, r3, #4
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d023      	beq.n	800aea4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	699a      	ldr	r2, [r3, #24]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	18d1      	adds	r1, r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	6978      	ldr	r0, [r7, #20]
 800ae6a:	f000 f8d5 	bl	800b018 <prvInsertTimerInActiveList>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d020      	beq.n	800aeb6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae74:	2300      	movs	r3, #0
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	2300      	movs	r3, #0
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	6978      	ldr	r0, [r7, #20]
 800ae80:	f7ff ff88 	bl	800ad94 <xTimerGenericCommand>
 800ae84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d114      	bne.n	800aeb6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	60fb      	str	r3, [r7, #12]
}
 800ae9e:	bf00      	nop
 800aea0:	bf00      	nop
 800aea2:	e7fd      	b.n	800aea0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aeaa:	f023 0301 	bic.w	r3, r3, #1
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	6978      	ldr	r0, [r7, #20]
 800aebc:	4798      	blx	r3
}
 800aebe:	bf00      	nop
 800aec0:	3718      	adds	r7, #24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	200010a4 	.word	0x200010a4

0800aecc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aed4:	f107 0308 	add.w	r3, r7, #8
 800aed8:	4618      	mov	r0, r3
 800aeda:	f000 f859 	bl	800af90 <prvGetNextExpireTime>
 800aede:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	4619      	mov	r1, r3
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f000 f805 	bl	800aef4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aeea:	f000 f8d7 	bl	800b09c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aeee:	bf00      	nop
 800aef0:	e7f0      	b.n	800aed4 <prvTimerTask+0x8>
	...

0800aef4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aefe:	f7ff f937 	bl	800a170 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af02:	f107 0308 	add.w	r3, r7, #8
 800af06:	4618      	mov	r0, r3
 800af08:	f000 f866 	bl	800afd8 <prvSampleTimeNow>
 800af0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d130      	bne.n	800af76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d10a      	bne.n	800af30 <prvProcessTimerOrBlockTask+0x3c>
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d806      	bhi.n	800af30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af22:	f7ff f933 	bl	800a18c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af26:	68f9      	ldr	r1, [r7, #12]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7ff ff81 	bl	800ae30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af2e:	e024      	b.n	800af7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d008      	beq.n	800af48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af36:	4b13      	ldr	r3, [pc, #76]	@ (800af84 <prvProcessTimerOrBlockTask+0x90>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <prvProcessTimerOrBlockTask+0x50>
 800af40:	2301      	movs	r3, #1
 800af42:	e000      	b.n	800af46 <prvProcessTimerOrBlockTask+0x52>
 800af44:	2300      	movs	r3, #0
 800af46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af48:	4b0f      	ldr	r3, [pc, #60]	@ (800af88 <prvProcessTimerOrBlockTask+0x94>)
 800af4a:	6818      	ldr	r0, [r3, #0]
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	4619      	mov	r1, r3
 800af56:	f7fe fe91 	bl	8009c7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af5a:	f7ff f917 	bl	800a18c <xTaskResumeAll>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10a      	bne.n	800af7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af64:	4b09      	ldr	r3, [pc, #36]	@ (800af8c <prvProcessTimerOrBlockTask+0x98>)
 800af66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af6a:	601a      	str	r2, [r3, #0]
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	f3bf 8f6f 	isb	sy
}
 800af74:	e001      	b.n	800af7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af76:	f7ff f909 	bl	800a18c <xTaskResumeAll>
}
 800af7a:	bf00      	nop
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	200010a8 	.word	0x200010a8
 800af88:	200010ac 	.word	0x200010ac
 800af8c:	e000ed04 	.word	0xe000ed04

0800af90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af98:	4b0e      	ldr	r3, [pc, #56]	@ (800afd4 <prvGetNextExpireTime+0x44>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d101      	bne.n	800afa6 <prvGetNextExpireTime+0x16>
 800afa2:	2201      	movs	r2, #1
 800afa4:	e000      	b.n	800afa8 <prvGetNextExpireTime+0x18>
 800afa6:	2200      	movs	r2, #0
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d105      	bne.n	800afc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afb4:	4b07      	ldr	r3, [pc, #28]	@ (800afd4 <prvGetNextExpireTime+0x44>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	60fb      	str	r3, [r7, #12]
 800afbe:	e001      	b.n	800afc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800afc0:	2300      	movs	r3, #0
 800afc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800afc4:	68fb      	ldr	r3, [r7, #12]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3714      	adds	r7, #20
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	200010a4 	.word	0x200010a4

0800afd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800afe0:	f7ff f972 	bl	800a2c8 <xTaskGetTickCount>
 800afe4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800afe6:	4b0b      	ldr	r3, [pc, #44]	@ (800b014 <prvSampleTimeNow+0x3c>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	429a      	cmp	r2, r3
 800afee:	d205      	bcs.n	800affc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aff0:	f000 f93a 	bl	800b268 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	601a      	str	r2, [r3, #0]
 800affa:	e002      	b.n	800b002 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b002:	4a04      	ldr	r2, [pc, #16]	@ (800b014 <prvSampleTimeNow+0x3c>)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b008:	68fb      	ldr	r3, [r7, #12]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	200010b4 	.word	0x200010b4

0800b018 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b086      	sub	sp, #24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
 800b024:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b026:	2300      	movs	r3, #0
 800b028:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	68ba      	ldr	r2, [r7, #8]
 800b02e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d812      	bhi.n	800b064 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	1ad2      	subs	r2, r2, r3
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d302      	bcc.n	800b052 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b04c:	2301      	movs	r3, #1
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	e01b      	b.n	800b08a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b052:	4b10      	ldr	r3, [pc, #64]	@ (800b094 <prvInsertTimerInActiveList+0x7c>)
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	3304      	adds	r3, #4
 800b05a:	4619      	mov	r1, r3
 800b05c:	4610      	mov	r0, r2
 800b05e:	f7fd fdb2 	bl	8008bc6 <vListInsert>
 800b062:	e012      	b.n	800b08a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d206      	bcs.n	800b07a <prvInsertTimerInActiveList+0x62>
 800b06c:	68ba      	ldr	r2, [r7, #8]
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	429a      	cmp	r2, r3
 800b072:	d302      	bcc.n	800b07a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b074:	2301      	movs	r3, #1
 800b076:	617b      	str	r3, [r7, #20]
 800b078:	e007      	b.n	800b08a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b07a:	4b07      	ldr	r3, [pc, #28]	@ (800b098 <prvInsertTimerInActiveList+0x80>)
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3304      	adds	r3, #4
 800b082:	4619      	mov	r1, r3
 800b084:	4610      	mov	r0, r2
 800b086:	f7fd fd9e 	bl	8008bc6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b08a:	697b      	ldr	r3, [r7, #20]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3718      	adds	r7, #24
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	200010a8 	.word	0x200010a8
 800b098:	200010a4 	.word	0x200010a4

0800b09c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b08e      	sub	sp, #56	@ 0x38
 800b0a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0a2:	e0ce      	b.n	800b242 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	da19      	bge.n	800b0de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b0aa:	1d3b      	adds	r3, r7, #4
 800b0ac:	3304      	adds	r3, #4
 800b0ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d10b      	bne.n	800b0ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	61fb      	str	r3, [r7, #28]
}
 800b0c8:	bf00      	nop
 800b0ca:	bf00      	nop
 800b0cc:	e7fd      	b.n	800b0ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0d4:	6850      	ldr	r0, [r2, #4]
 800b0d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0d8:	6892      	ldr	r2, [r2, #8]
 800b0da:	4611      	mov	r1, r2
 800b0dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f2c0 80ae 	blt.w	800b242 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d004      	beq.n	800b0fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fd fd9e 	bl	8008c38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0fc:	463b      	mov	r3, r7
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff ff6a 	bl	800afd8 <prvSampleTimeNow>
 800b104:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b09      	cmp	r3, #9
 800b10a:	f200 8097 	bhi.w	800b23c <prvProcessReceivedCommands+0x1a0>
 800b10e:	a201      	add	r2, pc, #4	@ (adr r2, 800b114 <prvProcessReceivedCommands+0x78>)
 800b110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b114:	0800b13d 	.word	0x0800b13d
 800b118:	0800b13d 	.word	0x0800b13d
 800b11c:	0800b13d 	.word	0x0800b13d
 800b120:	0800b1b3 	.word	0x0800b1b3
 800b124:	0800b1c7 	.word	0x0800b1c7
 800b128:	0800b213 	.word	0x0800b213
 800b12c:	0800b13d 	.word	0x0800b13d
 800b130:	0800b13d 	.word	0x0800b13d
 800b134:	0800b1b3 	.word	0x0800b1b3
 800b138:	0800b1c7 	.word	0x0800b1c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b13e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b142:	f043 0301 	orr.w	r3, r3, #1
 800b146:	b2da      	uxtb	r2, r3
 800b148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b14e:	68ba      	ldr	r2, [r7, #8]
 800b150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	18d1      	adds	r1, r2, r3
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b15a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b15c:	f7ff ff5c 	bl	800b018 <prvInsertTimerInActiveList>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d06c      	beq.n	800b240 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b16c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b170:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b174:	f003 0304 	and.w	r3, r3, #4
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d061      	beq.n	800b240 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b180:	699b      	ldr	r3, [r3, #24]
 800b182:	441a      	add	r2, r3
 800b184:	2300      	movs	r3, #0
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	2300      	movs	r3, #0
 800b18a:	2100      	movs	r1, #0
 800b18c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b18e:	f7ff fe01 	bl	800ad94 <xTimerGenericCommand>
 800b192:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b194:	6a3b      	ldr	r3, [r7, #32]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d152      	bne.n	800b240 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b19a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b19e:	f383 8811 	msr	BASEPRI, r3
 800b1a2:	f3bf 8f6f 	isb	sy
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	61bb      	str	r3, [r7, #24]
}
 800b1ac:	bf00      	nop
 800b1ae:	bf00      	nop
 800b1b0:	e7fd      	b.n	800b1ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1b8:	f023 0301 	bic.w	r3, r3, #1
 800b1bc:	b2da      	uxtb	r2, r3
 800b1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b1c4:	e03d      	b.n	800b242 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1cc:	f043 0301 	orr.w	r3, r3, #1
 800b1d0:	b2da      	uxtb	r2, r3
 800b1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10b      	bne.n	800b1fe <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ea:	f383 8811 	msr	BASEPRI, r3
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	617b      	str	r3, [r7, #20]
}
 800b1f8:	bf00      	nop
 800b1fa:	bf00      	nop
 800b1fc:	e7fd      	b.n	800b1fa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b200:	699a      	ldr	r2, [r3, #24]
 800b202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b204:	18d1      	adds	r1, r2, r3
 800b206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b20a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b20c:	f7ff ff04 	bl	800b018 <prvInsertTimerInActiveList>
					break;
 800b210:	e017      	b.n	800b242 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b218:	f003 0302 	and.w	r3, r3, #2
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d103      	bne.n	800b228 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b222:	f000 fbe9 	bl	800b9f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b226:	e00c      	b.n	800b242 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b22e:	f023 0301 	bic.w	r3, r3, #1
 800b232:	b2da      	uxtb	r2, r3
 800b234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b236:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b23a:	e002      	b.n	800b242 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b23c:	bf00      	nop
 800b23e:	e000      	b.n	800b242 <prvProcessReceivedCommands+0x1a6>
					break;
 800b240:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b242:	4b08      	ldr	r3, [pc, #32]	@ (800b264 <prvProcessReceivedCommands+0x1c8>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	1d39      	adds	r1, r7, #4
 800b248:	2200      	movs	r2, #0
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7fe f902 	bl	8009454 <xQueueReceive>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	f47f af26 	bne.w	800b0a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b258:	bf00      	nop
 800b25a:	bf00      	nop
 800b25c:	3730      	adds	r7, #48	@ 0x30
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	200010ac 	.word	0x200010ac

0800b268 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b088      	sub	sp, #32
 800b26c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b26e:	e049      	b.n	800b304 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b270:	4b2e      	ldr	r3, [pc, #184]	@ (800b32c <prvSwitchTimerLists+0xc4>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b27a:	4b2c      	ldr	r3, [pc, #176]	@ (800b32c <prvSwitchTimerLists+0xc4>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	3304      	adds	r3, #4
 800b288:	4618      	mov	r0, r3
 800b28a:	f7fd fcd5 	bl	8008c38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	6a1b      	ldr	r3, [r3, #32]
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b29c:	f003 0304 	and.w	r3, r3, #4
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d02f      	beq.n	800b304 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	693a      	ldr	r2, [r7, #16]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d90e      	bls.n	800b2d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2c2:	4b1a      	ldr	r3, [pc, #104]	@ (800b32c <prvSwitchTimerLists+0xc4>)
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	4610      	mov	r0, r2
 800b2ce:	f7fd fc7a 	bl	8008bc6 <vListInsert>
 800b2d2:	e017      	b.n	800b304 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	2300      	movs	r3, #0
 800b2da:	693a      	ldr	r2, [r7, #16]
 800b2dc:	2100      	movs	r1, #0
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f7ff fd58 	bl	800ad94 <xTimerGenericCommand>
 800b2e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10b      	bne.n	800b304 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f0:	f383 8811 	msr	BASEPRI, r3
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	603b      	str	r3, [r7, #0]
}
 800b2fe:	bf00      	nop
 800b300:	bf00      	nop
 800b302:	e7fd      	b.n	800b300 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b304:	4b09      	ldr	r3, [pc, #36]	@ (800b32c <prvSwitchTimerLists+0xc4>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1b0      	bne.n	800b270 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b30e:	4b07      	ldr	r3, [pc, #28]	@ (800b32c <prvSwitchTimerLists+0xc4>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b314:	4b06      	ldr	r3, [pc, #24]	@ (800b330 <prvSwitchTimerLists+0xc8>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a04      	ldr	r2, [pc, #16]	@ (800b32c <prvSwitchTimerLists+0xc4>)
 800b31a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b31c:	4a04      	ldr	r2, [pc, #16]	@ (800b330 <prvSwitchTimerLists+0xc8>)
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	6013      	str	r3, [r2, #0]
}
 800b322:	bf00      	nop
 800b324:	3718      	adds	r7, #24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	200010a4 	.word	0x200010a4
 800b330:	200010a8 	.word	0x200010a8

0800b334 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b33a:	f000 f96d 	bl	800b618 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b33e:	4b15      	ldr	r3, [pc, #84]	@ (800b394 <prvCheckForValidListAndQueue+0x60>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d120      	bne.n	800b388 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b346:	4814      	ldr	r0, [pc, #80]	@ (800b398 <prvCheckForValidListAndQueue+0x64>)
 800b348:	f7fd fbec 	bl	8008b24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b34c:	4813      	ldr	r0, [pc, #76]	@ (800b39c <prvCheckForValidListAndQueue+0x68>)
 800b34e:	f7fd fbe9 	bl	8008b24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b352:	4b13      	ldr	r3, [pc, #76]	@ (800b3a0 <prvCheckForValidListAndQueue+0x6c>)
 800b354:	4a10      	ldr	r2, [pc, #64]	@ (800b398 <prvCheckForValidListAndQueue+0x64>)
 800b356:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b358:	4b12      	ldr	r3, [pc, #72]	@ (800b3a4 <prvCheckForValidListAndQueue+0x70>)
 800b35a:	4a10      	ldr	r2, [pc, #64]	@ (800b39c <prvCheckForValidListAndQueue+0x68>)
 800b35c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b35e:	2300      	movs	r3, #0
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	4b11      	ldr	r3, [pc, #68]	@ (800b3a8 <prvCheckForValidListAndQueue+0x74>)
 800b364:	4a11      	ldr	r2, [pc, #68]	@ (800b3ac <prvCheckForValidListAndQueue+0x78>)
 800b366:	2110      	movs	r1, #16
 800b368:	200a      	movs	r0, #10
 800b36a:	f7fd fcf9 	bl	8008d60 <xQueueGenericCreateStatic>
 800b36e:	4603      	mov	r3, r0
 800b370:	4a08      	ldr	r2, [pc, #32]	@ (800b394 <prvCheckForValidListAndQueue+0x60>)
 800b372:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b374:	4b07      	ldr	r3, [pc, #28]	@ (800b394 <prvCheckForValidListAndQueue+0x60>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d005      	beq.n	800b388 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b37c:	4b05      	ldr	r3, [pc, #20]	@ (800b394 <prvCheckForValidListAndQueue+0x60>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	490b      	ldr	r1, [pc, #44]	@ (800b3b0 <prvCheckForValidListAndQueue+0x7c>)
 800b382:	4618      	mov	r0, r3
 800b384:	f7fe fc26 	bl	8009bd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b388:	f000 f978 	bl	800b67c <vPortExitCritical>
}
 800b38c:	bf00      	nop
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	200010ac 	.word	0x200010ac
 800b398:	2000107c 	.word	0x2000107c
 800b39c:	20001090 	.word	0x20001090
 800b3a0:	200010a4 	.word	0x200010a4
 800b3a4:	200010a8 	.word	0x200010a8
 800b3a8:	20001158 	.word	0x20001158
 800b3ac:	200010b8 	.word	0x200010b8
 800b3b0:	0802c7c0 	.word	0x0802c7c0

0800b3b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	3b04      	subs	r3, #4
 800b3c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b3cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	3b04      	subs	r3, #4
 800b3d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	f023 0201 	bic.w	r2, r3, #1
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	3b04      	subs	r3, #4
 800b3e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3e4:	4a0c      	ldr	r2, [pc, #48]	@ (800b418 <pxPortInitialiseStack+0x64>)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	3b14      	subs	r3, #20
 800b3ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3b04      	subs	r3, #4
 800b3fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f06f 0202 	mvn.w	r2, #2
 800b402:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	3b20      	subs	r3, #32
 800b408:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b40a:	68fb      	ldr	r3, [r7, #12]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3714      	adds	r7, #20
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	0800b41d 	.word	0x0800b41d

0800b41c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b422:	2300      	movs	r3, #0
 800b424:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b426:	4b13      	ldr	r3, [pc, #76]	@ (800b474 <prvTaskExitError+0x58>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b42e:	d00b      	beq.n	800b448 <prvTaskExitError+0x2c>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	60fb      	str	r3, [r7, #12]
}
 800b442:	bf00      	nop
 800b444:	bf00      	nop
 800b446:	e7fd      	b.n	800b444 <prvTaskExitError+0x28>
	__asm volatile
 800b448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b44c:	f383 8811 	msr	BASEPRI, r3
 800b450:	f3bf 8f6f 	isb	sy
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	60bb      	str	r3, [r7, #8]
}
 800b45a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b45c:	bf00      	nop
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d0fc      	beq.n	800b45e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b464:	bf00      	nop
 800b466:	bf00      	nop
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	20000078 	.word	0x20000078
	...

0800b480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b480:	4b07      	ldr	r3, [pc, #28]	@ (800b4a0 <pxCurrentTCBConst2>)
 800b482:	6819      	ldr	r1, [r3, #0]
 800b484:	6808      	ldr	r0, [r1, #0]
 800b486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48a:	f380 8809 	msr	PSP, r0
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f04f 0000 	mov.w	r0, #0
 800b496:	f380 8811 	msr	BASEPRI, r0
 800b49a:	4770      	bx	lr
 800b49c:	f3af 8000 	nop.w

0800b4a0 <pxCurrentTCBConst2>:
 800b4a0:	20000b7c 	.word	0x20000b7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4a4:	bf00      	nop
 800b4a6:	bf00      	nop

0800b4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b4a8:	4808      	ldr	r0, [pc, #32]	@ (800b4cc <prvPortStartFirstTask+0x24>)
 800b4aa:	6800      	ldr	r0, [r0, #0]
 800b4ac:	6800      	ldr	r0, [r0, #0]
 800b4ae:	f380 8808 	msr	MSP, r0
 800b4b2:	f04f 0000 	mov.w	r0, #0
 800b4b6:	f380 8814 	msr	CONTROL, r0
 800b4ba:	b662      	cpsie	i
 800b4bc:	b661      	cpsie	f
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	df00      	svc	0
 800b4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b4ca:	bf00      	nop
 800b4cc:	e000ed08 	.word	0xe000ed08

0800b4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4d6:	4b47      	ldr	r3, [pc, #284]	@ (800b5f4 <xPortStartScheduler+0x124>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a47      	ldr	r2, [pc, #284]	@ (800b5f8 <xPortStartScheduler+0x128>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d10b      	bne.n	800b4f8 <xPortStartScheduler+0x28>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	613b      	str	r3, [r7, #16]
}
 800b4f2:	bf00      	nop
 800b4f4:	bf00      	nop
 800b4f6:	e7fd      	b.n	800b4f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b4f8:	4b3e      	ldr	r3, [pc, #248]	@ (800b5f4 <xPortStartScheduler+0x124>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a3f      	ldr	r2, [pc, #252]	@ (800b5fc <xPortStartScheduler+0x12c>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d10b      	bne.n	800b51a <xPortStartScheduler+0x4a>
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	60fb      	str	r3, [r7, #12]
}
 800b514:	bf00      	nop
 800b516:	bf00      	nop
 800b518:	e7fd      	b.n	800b516 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b51a:	4b39      	ldr	r3, [pc, #228]	@ (800b600 <xPortStartScheduler+0x130>)
 800b51c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	b2db      	uxtb	r3, r3
 800b524:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	22ff      	movs	r2, #255	@ 0xff
 800b52a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	b2db      	uxtb	r3, r3
 800b532:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b534:	78fb      	ldrb	r3, [r7, #3]
 800b536:	b2db      	uxtb	r3, r3
 800b538:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b53c:	b2da      	uxtb	r2, r3
 800b53e:	4b31      	ldr	r3, [pc, #196]	@ (800b604 <xPortStartScheduler+0x134>)
 800b540:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b542:	4b31      	ldr	r3, [pc, #196]	@ (800b608 <xPortStartScheduler+0x138>)
 800b544:	2207      	movs	r2, #7
 800b546:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b548:	e009      	b.n	800b55e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b54a:	4b2f      	ldr	r3, [pc, #188]	@ (800b608 <xPortStartScheduler+0x138>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3b01      	subs	r3, #1
 800b550:	4a2d      	ldr	r2, [pc, #180]	@ (800b608 <xPortStartScheduler+0x138>)
 800b552:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b554:	78fb      	ldrb	r3, [r7, #3]
 800b556:	b2db      	uxtb	r3, r3
 800b558:	005b      	lsls	r3, r3, #1
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b55e:	78fb      	ldrb	r3, [r7, #3]
 800b560:	b2db      	uxtb	r3, r3
 800b562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b566:	2b80      	cmp	r3, #128	@ 0x80
 800b568:	d0ef      	beq.n	800b54a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b56a:	4b27      	ldr	r3, [pc, #156]	@ (800b608 <xPortStartScheduler+0x138>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f1c3 0307 	rsb	r3, r3, #7
 800b572:	2b04      	cmp	r3, #4
 800b574:	d00b      	beq.n	800b58e <xPortStartScheduler+0xbe>
	__asm volatile
 800b576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	60bb      	str	r3, [r7, #8]
}
 800b588:	bf00      	nop
 800b58a:	bf00      	nop
 800b58c:	e7fd      	b.n	800b58a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b58e:	4b1e      	ldr	r3, [pc, #120]	@ (800b608 <xPortStartScheduler+0x138>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	021b      	lsls	r3, r3, #8
 800b594:	4a1c      	ldr	r2, [pc, #112]	@ (800b608 <xPortStartScheduler+0x138>)
 800b596:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b598:	4b1b      	ldr	r3, [pc, #108]	@ (800b608 <xPortStartScheduler+0x138>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b5a0:	4a19      	ldr	r2, [pc, #100]	@ (800b608 <xPortStartScheduler+0x138>)
 800b5a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5ac:	4b17      	ldr	r3, [pc, #92]	@ (800b60c <xPortStartScheduler+0x13c>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a16      	ldr	r2, [pc, #88]	@ (800b60c <xPortStartScheduler+0x13c>)
 800b5b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b5b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5b8:	4b14      	ldr	r3, [pc, #80]	@ (800b60c <xPortStartScheduler+0x13c>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a13      	ldr	r2, [pc, #76]	@ (800b60c <xPortStartScheduler+0x13c>)
 800b5be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b5c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b5c4:	f000 f8da 	bl	800b77c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b5c8:	4b11      	ldr	r3, [pc, #68]	@ (800b610 <xPortStartScheduler+0x140>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b5ce:	f000 f8f9 	bl	800b7c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b5d2:	4b10      	ldr	r3, [pc, #64]	@ (800b614 <xPortStartScheduler+0x144>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4a0f      	ldr	r2, [pc, #60]	@ (800b614 <xPortStartScheduler+0x144>)
 800b5d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b5dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b5de:	f7ff ff63 	bl	800b4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b5e2:	f7fe ff3b 	bl	800a45c <vTaskSwitchContext>
	prvTaskExitError();
 800b5e6:	f7ff ff19 	bl	800b41c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3718      	adds	r7, #24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	e000ed00 	.word	0xe000ed00
 800b5f8:	410fc271 	.word	0x410fc271
 800b5fc:	410fc270 	.word	0x410fc270
 800b600:	e000e400 	.word	0xe000e400
 800b604:	200011a8 	.word	0x200011a8
 800b608:	200011ac 	.word	0x200011ac
 800b60c:	e000ed20 	.word	0xe000ed20
 800b610:	20000078 	.word	0x20000078
 800b614:	e000ef34 	.word	0xe000ef34

0800b618 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	607b      	str	r3, [r7, #4]
}
 800b630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b632:	4b10      	ldr	r3, [pc, #64]	@ (800b674 <vPortEnterCritical+0x5c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	3301      	adds	r3, #1
 800b638:	4a0e      	ldr	r2, [pc, #56]	@ (800b674 <vPortEnterCritical+0x5c>)
 800b63a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b63c:	4b0d      	ldr	r3, [pc, #52]	@ (800b674 <vPortEnterCritical+0x5c>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d110      	bne.n	800b666 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b644:	4b0c      	ldr	r3, [pc, #48]	@ (800b678 <vPortEnterCritical+0x60>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00b      	beq.n	800b666 <vPortEnterCritical+0x4e>
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	603b      	str	r3, [r7, #0]
}
 800b660:	bf00      	nop
 800b662:	bf00      	nop
 800b664:	e7fd      	b.n	800b662 <vPortEnterCritical+0x4a>
	}
}
 800b666:	bf00      	nop
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	20000078 	.word	0x20000078
 800b678:	e000ed04 	.word	0xe000ed04

0800b67c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b682:	4b12      	ldr	r3, [pc, #72]	@ (800b6cc <vPortExitCritical+0x50>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10b      	bne.n	800b6a2 <vPortExitCritical+0x26>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	607b      	str	r3, [r7, #4]
}
 800b69c:	bf00      	nop
 800b69e:	bf00      	nop
 800b6a0:	e7fd      	b.n	800b69e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b6cc <vPortExitCritical+0x50>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	4a08      	ldr	r2, [pc, #32]	@ (800b6cc <vPortExitCritical+0x50>)
 800b6aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6ac:	4b07      	ldr	r3, [pc, #28]	@ (800b6cc <vPortExitCritical+0x50>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d105      	bne.n	800b6c0 <vPortExitCritical+0x44>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	f383 8811 	msr	BASEPRI, r3
}
 800b6be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	20000078 	.word	0x20000078

0800b6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b6d0:	f3ef 8009 	mrs	r0, PSP
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	4b15      	ldr	r3, [pc, #84]	@ (800b730 <pxCurrentTCBConst>)
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	f01e 0f10 	tst.w	lr, #16
 800b6e0:	bf08      	it	eq
 800b6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ea:	6010      	str	r0, [r2, #0]
 800b6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b6f4:	f380 8811 	msr	BASEPRI, r0
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f7fe feac 	bl	800a45c <vTaskSwitchContext>
 800b704:	f04f 0000 	mov.w	r0, #0
 800b708:	f380 8811 	msr	BASEPRI, r0
 800b70c:	bc09      	pop	{r0, r3}
 800b70e:	6819      	ldr	r1, [r3, #0]
 800b710:	6808      	ldr	r0, [r1, #0]
 800b712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b716:	f01e 0f10 	tst.w	lr, #16
 800b71a:	bf08      	it	eq
 800b71c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b720:	f380 8809 	msr	PSP, r0
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	f3af 8000 	nop.w

0800b730 <pxCurrentTCBConst>:
 800b730:	20000b7c 	.word	0x20000b7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b734:	bf00      	nop
 800b736:	bf00      	nop

0800b738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	607b      	str	r3, [r7, #4]
}
 800b750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b752:	f7fe fdc9 	bl	800a2e8 <xTaskIncrementTick>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d003      	beq.n	800b764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b75c:	4b06      	ldr	r3, [pc, #24]	@ (800b778 <xPortSysTickHandler+0x40>)
 800b75e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	2300      	movs	r3, #0
 800b766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	f383 8811 	msr	BASEPRI, r3
}
 800b76e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b770:	bf00      	nop
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	e000ed04 	.word	0xe000ed04

0800b77c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b77c:	b480      	push	{r7}
 800b77e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b780:	4b0b      	ldr	r3, [pc, #44]	@ (800b7b0 <vPortSetupTimerInterrupt+0x34>)
 800b782:	2200      	movs	r2, #0
 800b784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b786:	4b0b      	ldr	r3, [pc, #44]	@ (800b7b4 <vPortSetupTimerInterrupt+0x38>)
 800b788:	2200      	movs	r2, #0
 800b78a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b78c:	4b0a      	ldr	r3, [pc, #40]	@ (800b7b8 <vPortSetupTimerInterrupt+0x3c>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a0a      	ldr	r2, [pc, #40]	@ (800b7bc <vPortSetupTimerInterrupt+0x40>)
 800b792:	fba2 2303 	umull	r2, r3, r2, r3
 800b796:	099b      	lsrs	r3, r3, #6
 800b798:	4a09      	ldr	r2, [pc, #36]	@ (800b7c0 <vPortSetupTimerInterrupt+0x44>)
 800b79a:	3b01      	subs	r3, #1
 800b79c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b79e:	4b04      	ldr	r3, [pc, #16]	@ (800b7b0 <vPortSetupTimerInterrupt+0x34>)
 800b7a0:	2207      	movs	r2, #7
 800b7a2:	601a      	str	r2, [r3, #0]
}
 800b7a4:	bf00      	nop
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	e000e010 	.word	0xe000e010
 800b7b4:	e000e018 	.word	0xe000e018
 800b7b8:	2000000c 	.word	0x2000000c
 800b7bc:	10624dd3 	.word	0x10624dd3
 800b7c0:	e000e014 	.word	0xe000e014

0800b7c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b7c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b7d4 <vPortEnableVFP+0x10>
 800b7c8:	6801      	ldr	r1, [r0, #0]
 800b7ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b7ce:	6001      	str	r1, [r0, #0]
 800b7d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b7d2:	bf00      	nop
 800b7d4:	e000ed88 	.word	0xe000ed88

0800b7d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b7de:	f3ef 8305 	mrs	r3, IPSR
 800b7e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2b0f      	cmp	r3, #15
 800b7e8:	d915      	bls.n	800b816 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b7ea:	4a18      	ldr	r2, [pc, #96]	@ (800b84c <vPortValidateInterruptPriority+0x74>)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b7f4:	4b16      	ldr	r3, [pc, #88]	@ (800b850 <vPortValidateInterruptPriority+0x78>)
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	7afa      	ldrb	r2, [r7, #11]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d20b      	bcs.n	800b816 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	607b      	str	r3, [r7, #4]
}
 800b810:	bf00      	nop
 800b812:	bf00      	nop
 800b814:	e7fd      	b.n	800b812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b816:	4b0f      	ldr	r3, [pc, #60]	@ (800b854 <vPortValidateInterruptPriority+0x7c>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b81e:	4b0e      	ldr	r3, [pc, #56]	@ (800b858 <vPortValidateInterruptPriority+0x80>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	429a      	cmp	r2, r3
 800b824:	d90b      	bls.n	800b83e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b82a:	f383 8811 	msr	BASEPRI, r3
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f3bf 8f4f 	dsb	sy
 800b836:	603b      	str	r3, [r7, #0]
}
 800b838:	bf00      	nop
 800b83a:	bf00      	nop
 800b83c:	e7fd      	b.n	800b83a <vPortValidateInterruptPriority+0x62>
	}
 800b83e:	bf00      	nop
 800b840:	3714      	adds	r7, #20
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	e000e3f0 	.word	0xe000e3f0
 800b850:	200011a8 	.word	0x200011a8
 800b854:	e000ed0c 	.word	0xe000ed0c
 800b858:	200011ac 	.word	0x200011ac

0800b85c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08a      	sub	sp, #40	@ 0x28
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b864:	2300      	movs	r3, #0
 800b866:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b868:	f7fe fc82 	bl	800a170 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b86c:	4b5c      	ldr	r3, [pc, #368]	@ (800b9e0 <pvPortMalloc+0x184>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d101      	bne.n	800b878 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b874:	f000 f924 	bl	800bac0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b878:	4b5a      	ldr	r3, [pc, #360]	@ (800b9e4 <pvPortMalloc+0x188>)
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	4013      	ands	r3, r2
 800b880:	2b00      	cmp	r3, #0
 800b882:	f040 8095 	bne.w	800b9b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d01e      	beq.n	800b8ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b88c:	2208      	movs	r2, #8
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4413      	add	r3, r2
 800b892:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f003 0307 	and.w	r3, r3, #7
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d015      	beq.n	800b8ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f023 0307 	bic.w	r3, r3, #7
 800b8a4:	3308      	adds	r3, #8
 800b8a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f003 0307 	and.w	r3, r3, #7
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00b      	beq.n	800b8ca <pvPortMalloc+0x6e>
	__asm volatile
 800b8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b6:	f383 8811 	msr	BASEPRI, r3
 800b8ba:	f3bf 8f6f 	isb	sy
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	617b      	str	r3, [r7, #20]
}
 800b8c4:	bf00      	nop
 800b8c6:	bf00      	nop
 800b8c8:	e7fd      	b.n	800b8c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d06f      	beq.n	800b9b0 <pvPortMalloc+0x154>
 800b8d0:	4b45      	ldr	r3, [pc, #276]	@ (800b9e8 <pvPortMalloc+0x18c>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d86a      	bhi.n	800b9b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b8da:	4b44      	ldr	r3, [pc, #272]	@ (800b9ec <pvPortMalloc+0x190>)
 800b8dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b8de:	4b43      	ldr	r3, [pc, #268]	@ (800b9ec <pvPortMalloc+0x190>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8e4:	e004      	b.n	800b8f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d903      	bls.n	800b902 <pvPortMalloc+0xa6>
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1f1      	bne.n	800b8e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b902:	4b37      	ldr	r3, [pc, #220]	@ (800b9e0 <pvPortMalloc+0x184>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b908:	429a      	cmp	r2, r3
 800b90a:	d051      	beq.n	800b9b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b90c:	6a3b      	ldr	r3, [r7, #32]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2208      	movs	r2, #8
 800b912:	4413      	add	r3, r2
 800b914:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	6a3b      	ldr	r3, [r7, #32]
 800b91c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b920:	685a      	ldr	r2, [r3, #4]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	1ad2      	subs	r2, r2, r3
 800b926:	2308      	movs	r3, #8
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d920      	bls.n	800b970 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b92e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4413      	add	r3, r2
 800b934:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	f003 0307 	and.w	r3, r3, #7
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00b      	beq.n	800b958 <pvPortMalloc+0xfc>
	__asm volatile
 800b940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	613b      	str	r3, [r7, #16]
}
 800b952:	bf00      	nop
 800b954:	bf00      	nop
 800b956:	e7fd      	b.n	800b954 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95a:	685a      	ldr	r2, [r3, #4]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	1ad2      	subs	r2, r2, r3
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b96a:	69b8      	ldr	r0, [r7, #24]
 800b96c:	f000 f90a 	bl	800bb84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b970:	4b1d      	ldr	r3, [pc, #116]	@ (800b9e8 <pvPortMalloc+0x18c>)
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	4a1b      	ldr	r2, [pc, #108]	@ (800b9e8 <pvPortMalloc+0x18c>)
 800b97c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b97e:	4b1a      	ldr	r3, [pc, #104]	@ (800b9e8 <pvPortMalloc+0x18c>)
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	4b1b      	ldr	r3, [pc, #108]	@ (800b9f0 <pvPortMalloc+0x194>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	429a      	cmp	r2, r3
 800b988:	d203      	bcs.n	800b992 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b98a:	4b17      	ldr	r3, [pc, #92]	@ (800b9e8 <pvPortMalloc+0x18c>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a18      	ldr	r2, [pc, #96]	@ (800b9f0 <pvPortMalloc+0x194>)
 800b990:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b994:	685a      	ldr	r2, [r3, #4]
 800b996:	4b13      	ldr	r3, [pc, #76]	@ (800b9e4 <pvPortMalloc+0x188>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	431a      	orrs	r2, r3
 800b99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b9a6:	4b13      	ldr	r3, [pc, #76]	@ (800b9f4 <pvPortMalloc+0x198>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	4a11      	ldr	r2, [pc, #68]	@ (800b9f4 <pvPortMalloc+0x198>)
 800b9ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9b0:	f7fe fbec 	bl	800a18c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	f003 0307 	and.w	r3, r3, #7
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00b      	beq.n	800b9d6 <pvPortMalloc+0x17a>
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	60fb      	str	r3, [r7, #12]
}
 800b9d0:	bf00      	nop
 800b9d2:	bf00      	nop
 800b9d4:	e7fd      	b.n	800b9d2 <pvPortMalloc+0x176>
	return pvReturn;
 800b9d6:	69fb      	ldr	r3, [r7, #28]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3728      	adds	r7, #40	@ 0x28
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	200111b8 	.word	0x200111b8
 800b9e4:	200111cc 	.word	0x200111cc
 800b9e8:	200111bc 	.word	0x200111bc
 800b9ec:	200111b0 	.word	0x200111b0
 800b9f0:	200111c0 	.word	0x200111c0
 800b9f4:	200111c4 	.word	0x200111c4

0800b9f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d04f      	beq.n	800baaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba0a:	2308      	movs	r3, #8
 800ba0c:	425b      	negs	r3, r3
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	4413      	add	r3, r2
 800ba12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	685a      	ldr	r2, [r3, #4]
 800ba1c:	4b25      	ldr	r3, [pc, #148]	@ (800bab4 <vPortFree+0xbc>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4013      	ands	r3, r2
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10b      	bne.n	800ba3e <vPortFree+0x46>
	__asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	60fb      	str	r3, [r7, #12]
}
 800ba38:	bf00      	nop
 800ba3a:	bf00      	nop
 800ba3c:	e7fd      	b.n	800ba3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d00b      	beq.n	800ba5e <vPortFree+0x66>
	__asm volatile
 800ba46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	60bb      	str	r3, [r7, #8]
}
 800ba58:	bf00      	nop
 800ba5a:	bf00      	nop
 800ba5c:	e7fd      	b.n	800ba5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	685a      	ldr	r2, [r3, #4]
 800ba62:	4b14      	ldr	r3, [pc, #80]	@ (800bab4 <vPortFree+0xbc>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4013      	ands	r3, r2
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d01e      	beq.n	800baaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d11a      	bne.n	800baaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	685a      	ldr	r2, [r3, #4]
 800ba78:	4b0e      	ldr	r3, [pc, #56]	@ (800bab4 <vPortFree+0xbc>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	43db      	mvns	r3, r3
 800ba7e:	401a      	ands	r2, r3
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba84:	f7fe fb74 	bl	800a170 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	4b0a      	ldr	r3, [pc, #40]	@ (800bab8 <vPortFree+0xc0>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4413      	add	r3, r2
 800ba92:	4a09      	ldr	r2, [pc, #36]	@ (800bab8 <vPortFree+0xc0>)
 800ba94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba96:	6938      	ldr	r0, [r7, #16]
 800ba98:	f000 f874 	bl	800bb84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba9c:	4b07      	ldr	r3, [pc, #28]	@ (800babc <vPortFree+0xc4>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	3301      	adds	r3, #1
 800baa2:	4a06      	ldr	r2, [pc, #24]	@ (800babc <vPortFree+0xc4>)
 800baa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800baa6:	f7fe fb71 	bl	800a18c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800baaa:	bf00      	nop
 800baac:	3718      	adds	r7, #24
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	200111cc 	.word	0x200111cc
 800bab8:	200111bc 	.word	0x200111bc
 800babc:	200111c8 	.word	0x200111c8

0800bac0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bac6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800baca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bacc:	4b27      	ldr	r3, [pc, #156]	@ (800bb6c <prvHeapInit+0xac>)
 800bace:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f003 0307 	and.w	r3, r3, #7
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00c      	beq.n	800baf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	3307      	adds	r3, #7
 800bade:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f023 0307 	bic.w	r3, r3, #7
 800bae6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	4a1f      	ldr	r2, [pc, #124]	@ (800bb6c <prvHeapInit+0xac>)
 800baf0:	4413      	add	r3, r2
 800baf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800baf8:	4a1d      	ldr	r2, [pc, #116]	@ (800bb70 <prvHeapInit+0xb0>)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bafe:	4b1c      	ldr	r3, [pc, #112]	@ (800bb70 <prvHeapInit+0xb0>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	4413      	add	r3, r2
 800bb0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb0c:	2208      	movs	r2, #8
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	1a9b      	subs	r3, r3, r2
 800bb12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f023 0307 	bic.w	r3, r3, #7
 800bb1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	4a15      	ldr	r2, [pc, #84]	@ (800bb74 <prvHeapInit+0xb4>)
 800bb20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb22:	4b14      	ldr	r3, [pc, #80]	@ (800bb74 <prvHeapInit+0xb4>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2200      	movs	r2, #0
 800bb28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb2a:	4b12      	ldr	r3, [pc, #72]	@ (800bb74 <prvHeapInit+0xb4>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	1ad2      	subs	r2, r2, r3
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb40:	4b0c      	ldr	r3, [pc, #48]	@ (800bb74 <prvHeapInit+0xb4>)
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	4a0a      	ldr	r2, [pc, #40]	@ (800bb78 <prvHeapInit+0xb8>)
 800bb4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	4a09      	ldr	r2, [pc, #36]	@ (800bb7c <prvHeapInit+0xbc>)
 800bb56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb58:	4b09      	ldr	r3, [pc, #36]	@ (800bb80 <prvHeapInit+0xc0>)
 800bb5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bb5e:	601a      	str	r2, [r3, #0]
}
 800bb60:	bf00      	nop
 800bb62:	3714      	adds	r7, #20
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr
 800bb6c:	200011b0 	.word	0x200011b0
 800bb70:	200111b0 	.word	0x200111b0
 800bb74:	200111b8 	.word	0x200111b8
 800bb78:	200111c0 	.word	0x200111c0
 800bb7c:	200111bc 	.word	0x200111bc
 800bb80:	200111cc 	.word	0x200111cc

0800bb84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb8c:	4b28      	ldr	r3, [pc, #160]	@ (800bc30 <prvInsertBlockIntoFreeList+0xac>)
 800bb8e:	60fb      	str	r3, [r7, #12]
 800bb90:	e002      	b.n	800bb98 <prvInsertBlockIntoFreeList+0x14>
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	60fb      	str	r3, [r7, #12]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d8f7      	bhi.n	800bb92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	4413      	add	r3, r2
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d108      	bne.n	800bbc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	685a      	ldr	r2, [r3, #4]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	441a      	add	r2, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	441a      	add	r2, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d118      	bne.n	800bc0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	4b15      	ldr	r3, [pc, #84]	@ (800bc34 <prvInsertBlockIntoFreeList+0xb0>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d00d      	beq.n	800bc02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	685a      	ldr	r2, [r3, #4]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	441a      	add	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	601a      	str	r2, [r3, #0]
 800bc00:	e008      	b.n	800bc14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc02:	4b0c      	ldr	r3, [pc, #48]	@ (800bc34 <prvInsertBlockIntoFreeList+0xb0>)
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	601a      	str	r2, [r3, #0]
 800bc0a:	e003      	b.n	800bc14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d002      	beq.n	800bc22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc22:	bf00      	nop
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	200111b0 	.word	0x200111b0
 800bc34:	200111b8 	.word	0x200111b8

0800bc38 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	af00      	add	r7, sp, #0
}
 800bc3c:	bf00      	nop
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr

0800bc46 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800bc4a:	f005 ff7f 	bl	8011b4c <touchgfx_components_init>
    touchgfx_init();
 800bc4e:	f005 ff4b 	bl	8011ae8 <touchgfx_init>
}
 800bc52:	bf00      	nop
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b082      	sub	sp, #8
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800bc5e:	f005 ff7d 	bl	8011b5c <touchgfx_taskEntry>
}
 800bc62:	bf00      	nop
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
	...

0800bc6c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
    {
 800bc74:	4a04      	ldr	r2, [pc, #16]	@ (800bc88 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	601a      	str	r2, [r3, #0]
    }
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	0802d74c 	.word	0x0802d74c

0800bc8c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
    }
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7ff ffe9 	bl	800bc6c <_ZN8touchgfx12FontProviderD1Ev>
 800bc9a:	2104      	movs	r1, #4
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f01e fc30 	bl	802a502 <_ZdlPvj>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4618      	mov	r0, r3
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800bcb8:	887b      	ldrh	r3, [r7, #2]
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	d010      	beq.n	800bce0 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800bcbe:	2b02      	cmp	r3, #2
 800bcc0:	dc13      	bgt.n	800bcea <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d002      	beq.n	800bccc <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d005      	beq.n	800bcd6 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800bcca:	e00e      	b.n	800bcea <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800bccc:	f003 fe96 	bl	800f9fc <_ZN17TypedTextDatabase8getFontsEv>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	e00a      	b.n	800bcec <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800bcd6:	f003 fe91 	bl	800f9fc <_ZN17TypedTextDatabase8getFontsEv>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	e005      	b.n	800bcec <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800bce0:	f003 fe8c 	bl	800f9fc <_ZN17TypedTextDatabase8getFontsEv>
 800bce4:	4603      	mov	r3, r0
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	e000      	b.n	800bcec <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800bcea:	2300      	movs	r3, #0
    }
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	4a05      	ldr	r2, [pc, #20]	@ (800bd14 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	601a      	str	r2, [r3, #0]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7ff ffb1 	bl	800bc6c <_ZN8touchgfx12FontProviderD1Ev>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	0802d738 	.word	0x0802d738

0800bd18 <_ZN23ApplicationFontProviderD0Ev>:
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f7ff ffe7 	bl	800bcf4 <_ZN23ApplicationFontProviderD1Ev>
 800bd26:	2104      	movs	r1, #4
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f01e fbea 	bl	802a502 <_ZdlPvj>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4618      	mov	r0, r3
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
    {
 800bd40:	4a04      	ldr	r2, [pc, #16]	@ (800bd54 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	601a      	str	r2, [r3, #0]
    }
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	370c      	adds	r7, #12
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr
 800bd54:	0802dc24 	.word	0x0802dc24

0800bd58 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
    }
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f7ff ffe9 	bl	800bd38 <_ZN8touchgfx4FontD1Ev>
 800bd66:	2114      	movs	r1, #20
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f01e fbca 	bl	802a502 <_ZdlPvj>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4618      	mov	r0, r3
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800bd78:	b590      	push	{r4, r7, lr}
 800bd7a:	b087      	sub	sp, #28
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	460b      	mov	r3, r1
 800bd82:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800bd84:	887b      	ldrh	r3, [r7, #2]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d101      	bne.n	800bd8e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	e010      	b.n	800bdb0 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	3308      	adds	r3, #8
 800bd9c:	681c      	ldr	r4, [r3, #0]
 800bd9e:	f107 030f 	add.w	r3, r7, #15
 800bda2:	f107 0210 	add.w	r2, r7, #16
 800bda6:	8879      	ldrh	r1, [r7, #2]
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	47a0      	blx	r4
 800bdac:	6178      	str	r0, [r7, #20]
        return glyph;
 800bdae:	697b      	ldr	r3, [r7, #20]
    }
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	371c      	adds	r7, #28
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd90      	pop	{r4, r7, pc}

0800bdb8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	89db      	ldrh	r3, [r3, #14]
    }
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	8a1b      	ldrh	r3, [r3, #16]
    }
 800bddc:	4618      	mov	r0, r3
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	88db      	ldrh	r3, [r3, #6]
    }
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	889b      	ldrh	r3, [r3, #4]
    }
 800be0c:	4618      	mov	r0, r3
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	7a9b      	ldrb	r3, [r3, #10]
 800be24:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800be28:	b2db      	uxtb	r3, r3
    }
 800be2a:	4618      	mov	r0, r3
 800be2c:	370c      	adds	r7, #12
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800be36:	b480      	push	{r7}
 800be38:	b083      	sub	sp, #12
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	7a9b      	ldrb	r3, [r3, #10]
 800be42:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800be46:	b2db      	uxtb	r3, r3
    }
 800be48:	4618      	mov	r0, r3
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
    {
        return false;
 800be5c:	2300      	movs	r3, #0
    }
 800be5e:	4618      	mov	r0, r3
 800be60:	370c      	adds	r7, #12
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr

0800be6a <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800be6a:	b480      	push	{r7}
 800be6c:	b083      	sub	sp, #12
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800be72:	f04f 0300 	mov.w	r3, #0
 800be76:	ee07 3a90 	vmov	s15, r3
    }
 800be7a:	eeb0 0a67 	vmov.f32	s0, s15
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	4a05      	ldr	r2, [pc, #20]	@ (800bea8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	601a      	str	r2, [r3, #0]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4618      	mov	r0, r3
 800be9a:	f7ff ff4d 	bl	800bd38 <_ZN8touchgfx4FontD1Ev>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4618      	mov	r0, r3
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	0802ea58 	.word	0x0802ea58

0800beac <_ZN8touchgfx9ConstFontD0Ev>:
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7ff ffe7 	bl	800be88 <_ZN8touchgfx9ConstFontD1Ev>
 800beba:	211c      	movs	r1, #28
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f01e fb20 	bl	802a502 <_ZdlPvj>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4618      	mov	r0, r3
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	4a05      	ldr	r2, [pc, #20]	@ (800beec <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4618      	mov	r0, r3
 800bede:	f7ff ffd3 	bl	800be88 <_ZN8touchgfx9ConstFontD1Ev>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4618      	mov	r0, r3
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	0802d770 	.word	0x0802d770

0800bef0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f7ff ffe7 	bl	800becc <_ZN8touchgfx13GeneratedFontD1Ev>
 800befe:	212c      	movs	r1, #44	@ 0x2c
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f01e fafe 	bl	802a502 <_ZdlPvj>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3708      	adds	r7, #8
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
    {
 800bf18:	4a04      	ldr	r2, [pc, #16]	@ (800bf2c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	601a      	str	r2, [r3, #0]
    }
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4618      	mov	r0, r3
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr
 800bf2c:	0802d760 	.word	0x0802d760

0800bf30 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
    }
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7ff ffe9 	bl	800bf10 <_ZN8touchgfx9TypedTextD1Ev>
 800bf3e:	2108      	movs	r1, #8
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f01e fade 	bl	802a502 <_ZdlPvj>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800bf74:	4618      	mov	r0, r3
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b08e      	sub	sp, #56	@ 0x38
 800bf84:	af0a      	add	r7, sp, #40	@ 0x28
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	460b      	mov	r3, r1
 800bf90:	80fb      	strh	r3, [r7, #6]
 800bf92:	4613      	mov	r3, r2
 800bf94:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	88b9      	ldrh	r1, [r7, #4]
 800bf9a:	88fa      	ldrh	r2, [r7, #6]
 800bf9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800bfa0:	9308      	str	r3, [sp, #32]
 800bfa2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bfa4:	9307      	str	r3, [sp, #28]
 800bfa6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800bfaa:	9306      	str	r3, [sp, #24]
 800bfac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bfb0:	9305      	str	r3, [sp, #20]
 800bfb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bfb6:	9304      	str	r3, [sp, #16]
 800bfb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bfbc:	9303      	str	r3, [sp, #12]
 800bfbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bfc2:	9302      	str	r3, [sp, #8]
 800bfc4:	7f3b      	ldrb	r3, [r7, #28]
 800bfc6:	9301      	str	r3, [sp, #4]
 800bfc8:	8b3b      	ldrh	r3, [r7, #24]
 800bfca:	9300      	str	r3, [sp, #0]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	68b9      	ldr	r1, [r7, #8]
 800bfd0:	f00e f990 	bl	801a2f4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800bfd4:	4a09      	ldr	r2, [pc, #36]	@ (800bffc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bfde:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bfe4:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfea:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bff0:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	4618      	mov	r0, r3
 800bff6:	3710      	adds	r7, #16
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	0802d770 	.word	0x0802d770

0800c000 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	69db      	ldr	r3, [r3, #28]
 800c00e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	889b      	ldrh	r3, [r3, #4]
 800c014:	0adb      	lsrs	r3, r3, #11
 800c016:	b29b      	uxth	r3, r3
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	4413      	add	r3, r2
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4413      	add	r3, r2
}
 800c026:	4618      	mov	r0, r3
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800c032:	b480      	push	{r7}
 800c034:	b089      	sub	sp, #36	@ 0x24
 800c036:	af00      	add	r7, sp, #0
 800c038:	60f8      	str	r0, [r7, #12]
 800c03a:	460b      	mov	r3, r1
 800c03c:	607a      	str	r2, [r7, #4]
 800c03e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d003      	beq.n	800c04e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	7b1b      	ldrb	r3, [r3, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d101      	bne.n	800c052 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800c04e:	2300      	movs	r3, #0
 800c050:	e031      	b.n	800c0b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6a1a      	ldr	r2, [r3, #32]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	7b5b      	ldrb	r3, [r3, #13]
 800c05e:	021b      	lsls	r3, r3, #8
 800c060:	b21b      	sxth	r3, r3
 800c062:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c066:	b219      	sxth	r1, r3
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	7adb      	ldrb	r3, [r3, #11]
 800c06c:	b21b      	sxth	r3, r3
 800c06e:	430b      	orrs	r3, r1
 800c070:	b21b      	sxth	r3, r3
 800c072:	b29b      	uxth	r3, r3
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	4413      	add	r3, r2
 800c078:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	7b1b      	ldrb	r3, [r3, #12]
 800c07e:	837b      	strh	r3, [r7, #26]
 800c080:	e013      	b.n	800c0aa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	881b      	ldrh	r3, [r3, #0]
 800c086:	897a      	ldrh	r2, [r7, #10]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d103      	bne.n	800c094 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800c092:	e010      	b.n	800c0b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	881b      	ldrh	r3, [r3, #0]
 800c098:	897a      	ldrh	r2, [r7, #10]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d309      	bcc.n	800c0b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800c09e:	8b7b      	ldrh	r3, [r7, #26]
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	837b      	strh	r3, [r7, #26]
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	3304      	adds	r3, #4
 800c0a8:	61fb      	str	r3, [r7, #28]
 800c0aa:	8b7b      	ldrh	r3, [r7, #26]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1e8      	bne.n	800c082 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 800c0b0:	e000      	b.n	800c0b4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 800c0b2:	bf00      	nop
        }
    }
    return 0;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3724      	adds	r7, #36	@ 0x24
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
	...

0800c0c4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	4801      	ldr	r0, [pc, #4]	@ (800c0d0 <__tcf_0+0xc>)
 800c0ca:	f7ff feff 	bl	800becc <_ZN8touchgfx13GeneratedFontD1Ev>
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	200111d0 	.word	0x200111d0

0800c0d4 <_Z23getFont_verdana_10_4bppv>:
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b08e      	sub	sp, #56	@ 0x38
 800c0d8:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800c0da:	4b21      	ldr	r3, [pc, #132]	@ (800c160 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f3bf 8f5b 	dmb	ish
 800c0e2:	f003 0301 	and.w	r3, r3, #1
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	bf0c      	ite	eq
 800c0ea:	2301      	moveq	r3, #1
 800c0ec:	2300      	movne	r3, #0
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d030      	beq.n	800c156 <_Z23getFont_verdana_10_4bppv+0x82>
 800c0f4:	481a      	ldr	r0, [pc, #104]	@ (800c160 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800c0f6:	f01e fa06 	bl	802a506 <__cxa_guard_acquire>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	bf14      	ite	ne
 800c100:	2301      	movne	r3, #1
 800c102:	2300      	moveq	r3, #0
 800c104:	b2db      	uxtb	r3, r3
 800c106:	2b00      	cmp	r3, #0
 800c108:	d025      	beq.n	800c156 <_Z23getFont_verdana_10_4bppv+0x82>
 800c10a:	2300      	movs	r3, #0
 800c10c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c10e:	2300      	movs	r3, #0
 800c110:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c112:	2300      	movs	r3, #0
 800c114:	930a      	str	r3, [sp, #40]	@ 0x28
 800c116:	233f      	movs	r3, #63	@ 0x3f
 800c118:	9309      	str	r3, [sp, #36]	@ 0x24
 800c11a:	4b12      	ldr	r3, [pc, #72]	@ (800c164 <_Z23getFont_verdana_10_4bppv+0x90>)
 800c11c:	9308      	str	r3, [sp, #32]
 800c11e:	4b12      	ldr	r3, [pc, #72]	@ (800c168 <_Z23getFont_verdana_10_4bppv+0x94>)
 800c120:	9307      	str	r3, [sp, #28]
 800c122:	2300      	movs	r3, #0
 800c124:	9306      	str	r3, [sp, #24]
 800c126:	2300      	movs	r3, #0
 800c128:	9305      	str	r3, [sp, #20]
 800c12a:	2301      	movs	r3, #1
 800c12c:	9304      	str	r3, [sp, #16]
 800c12e:	2304      	movs	r3, #4
 800c130:	9303      	str	r3, [sp, #12]
 800c132:	2300      	movs	r3, #0
 800c134:	9302      	str	r3, [sp, #8]
 800c136:	2300      	movs	r3, #0
 800c138:	9301      	str	r3, [sp, #4]
 800c13a:	230a      	movs	r3, #10
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	230a      	movs	r3, #10
 800c140:	2201      	movs	r2, #1
 800c142:	490a      	ldr	r1, [pc, #40]	@ (800c16c <_Z23getFont_verdana_10_4bppv+0x98>)
 800c144:	480a      	ldr	r0, [pc, #40]	@ (800c170 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800c146:	f7ff ff1b 	bl	800bf80 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800c14a:	480a      	ldr	r0, [pc, #40]	@ (800c174 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800c14c:	f01f f93e 	bl	802b3cc <atexit>
 800c150:	4803      	ldr	r0, [pc, #12]	@ (800c160 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800c152:	f01e f9e4 	bl	802a51e <__cxa_guard_release>
    return verdana_10_4bpp;
 800c156:	4b06      	ldr	r3, [pc, #24]	@ (800c170 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800c158:	4618      	mov	r0, r3
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	200111fc 	.word	0x200111fc
 800c164:	080313f8 	.word	0x080313f8
 800c168:	080315a4 	.word	0x080315a4
 800c16c:	08030ea4 	.word	0x08030ea4
 800c170:	200111d0 	.word	0x200111d0
 800c174:	0800c0c5 	.word	0x0800c0c5

0800c178 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800c178:	b580      	push	{r7, lr}
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	4801      	ldr	r0, [pc, #4]	@ (800c184 <__tcf_0+0xc>)
 800c17e:	f7ff fea5 	bl	800becc <_ZN8touchgfx13GeneratedFontD1Ev>
 800c182:	bd80      	pop	{r7, pc}
 800c184:	20011200 	.word	0x20011200

0800c188 <_Z23getFont_verdana_20_4bppv>:
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b08e      	sub	sp, #56	@ 0x38
 800c18c:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800c18e:	4b21      	ldr	r3, [pc, #132]	@ (800c214 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f3bf 8f5b 	dmb	ish
 800c196:	f003 0301 	and.w	r3, r3, #1
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	bf0c      	ite	eq
 800c19e:	2301      	moveq	r3, #1
 800c1a0:	2300      	movne	r3, #0
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d030      	beq.n	800c20a <_Z23getFont_verdana_20_4bppv+0x82>
 800c1a8:	481a      	ldr	r0, [pc, #104]	@ (800c214 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800c1aa:	f01e f9ac 	bl	802a506 <__cxa_guard_acquire>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	bf14      	ite	ne
 800c1b4:	2301      	movne	r3, #1
 800c1b6:	2300      	moveq	r3, #0
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d025      	beq.n	800c20a <_Z23getFont_verdana_20_4bppv+0x82>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	930c      	str	r3, [sp, #48]	@ 0x30
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1ca:	233f      	movs	r3, #63	@ 0x3f
 800c1cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1ce:	4b12      	ldr	r3, [pc, #72]	@ (800c218 <_Z23getFont_verdana_20_4bppv+0x90>)
 800c1d0:	9308      	str	r3, [sp, #32]
 800c1d2:	4b12      	ldr	r3, [pc, #72]	@ (800c21c <_Z23getFont_verdana_20_4bppv+0x94>)
 800c1d4:	9307      	str	r3, [sp, #28]
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	9306      	str	r3, [sp, #24]
 800c1da:	2301      	movs	r3, #1
 800c1dc:	9305      	str	r3, [sp, #20]
 800c1de:	2301      	movs	r3, #1
 800c1e0:	9304      	str	r3, [sp, #16]
 800c1e2:	2304      	movs	r3, #4
 800c1e4:	9303      	str	r3, [sp, #12]
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	9302      	str	r3, [sp, #8]
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	9301      	str	r3, [sp, #4]
 800c1ee:	2314      	movs	r3, #20
 800c1f0:	9300      	str	r3, [sp, #0]
 800c1f2:	2318      	movs	r3, #24
 800c1f4:	225f      	movs	r2, #95	@ 0x5f
 800c1f6:	490a      	ldr	r1, [pc, #40]	@ (800c220 <_Z23getFont_verdana_20_4bppv+0x98>)
 800c1f8:	480a      	ldr	r0, [pc, #40]	@ (800c224 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800c1fa:	f7ff fec1 	bl	800bf80 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800c1fe:	480a      	ldr	r0, [pc, #40]	@ (800c228 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800c200:	f01f f8e4 	bl	802b3cc <atexit>
 800c204:	4803      	ldr	r0, [pc, #12]	@ (800c214 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800c206:	f01e f98a 	bl	802a51e <__cxa_guard_release>
    return verdana_20_4bpp;
 800c20a:	4b06      	ldr	r3, [pc, #24]	@ (800c224 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	2001122c 	.word	0x2001122c
 800c218:	080313fc 	.word	0x080313fc
 800c21c:	080315a8 	.word	0x080315a8
 800c220:	08030eb4 	.word	0x08030eb4
 800c224:	20011200 	.word	0x20011200
 800c228:	0800c179 	.word	0x0800c179

0800c22c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800c22c:	b580      	push	{r7, lr}
 800c22e:	af00      	add	r7, sp, #0
 800c230:	4801      	ldr	r0, [pc, #4]	@ (800c238 <__tcf_0+0xc>)
 800c232:	f7ff fe4b 	bl	800becc <_ZN8touchgfx13GeneratedFontD1Ev>
 800c236:	bd80      	pop	{r7, pc}
 800c238:	20011230 	.word	0x20011230

0800c23c <_Z23getFont_verdana_40_4bppv>:
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b08e      	sub	sp, #56	@ 0x38
 800c240:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800c242:	4b21      	ldr	r3, [pc, #132]	@ (800c2c8 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f3bf 8f5b 	dmb	ish
 800c24a:	f003 0301 	and.w	r3, r3, #1
 800c24e:	2b00      	cmp	r3, #0
 800c250:	bf0c      	ite	eq
 800c252:	2301      	moveq	r3, #1
 800c254:	2300      	movne	r3, #0
 800c256:	b2db      	uxtb	r3, r3
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d030      	beq.n	800c2be <_Z23getFont_verdana_40_4bppv+0x82>
 800c25c:	481a      	ldr	r0, [pc, #104]	@ (800c2c8 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800c25e:	f01e f952 	bl	802a506 <__cxa_guard_acquire>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	bf14      	ite	ne
 800c268:	2301      	movne	r3, #1
 800c26a:	2300      	moveq	r3, #0
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d025      	beq.n	800c2be <_Z23getFont_verdana_40_4bppv+0x82>
 800c272:	2300      	movs	r3, #0
 800c274:	930c      	str	r3, [sp, #48]	@ 0x30
 800c276:	2300      	movs	r3, #0
 800c278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c27a:	2300      	movs	r3, #0
 800c27c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c27e:	233f      	movs	r3, #63	@ 0x3f
 800c280:	9309      	str	r3, [sp, #36]	@ 0x24
 800c282:	4b12      	ldr	r3, [pc, #72]	@ (800c2cc <_Z23getFont_verdana_40_4bppv+0x90>)
 800c284:	9308      	str	r3, [sp, #32]
 800c286:	4b12      	ldr	r3, [pc, #72]	@ (800c2d0 <_Z23getFont_verdana_40_4bppv+0x94>)
 800c288:	9307      	str	r3, [sp, #28]
 800c28a:	2300      	movs	r3, #0
 800c28c:	9306      	str	r3, [sp, #24]
 800c28e:	2300      	movs	r3, #0
 800c290:	9305      	str	r3, [sp, #20]
 800c292:	2301      	movs	r3, #1
 800c294:	9304      	str	r3, [sp, #16]
 800c296:	2304      	movs	r3, #4
 800c298:	9303      	str	r3, [sp, #12]
 800c29a:	2300      	movs	r3, #0
 800c29c:	9302      	str	r3, [sp, #8]
 800c29e:	2300      	movs	r3, #0
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	2328      	movs	r3, #40	@ 0x28
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	2328      	movs	r3, #40	@ 0x28
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	490a      	ldr	r1, [pc, #40]	@ (800c2d4 <_Z23getFont_verdana_40_4bppv+0x98>)
 800c2ac:	480a      	ldr	r0, [pc, #40]	@ (800c2d8 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800c2ae:	f7ff fe67 	bl	800bf80 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800c2b2:	480a      	ldr	r0, [pc, #40]	@ (800c2dc <_Z23getFont_verdana_40_4bppv+0xa0>)
 800c2b4:	f01f f88a 	bl	802b3cc <atexit>
 800c2b8:	4803      	ldr	r0, [pc, #12]	@ (800c2c8 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800c2ba:	f01e f930 	bl	802a51e <__cxa_guard_release>
    return verdana_40_4bpp;
 800c2be:	4b06      	ldr	r3, [pc, #24]	@ (800c2d8 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	2001125c 	.word	0x2001125c
 800c2cc:	080315a0 	.word	0x080315a0
 800c2d0:	080315ac 	.word	0x080315ac
 800c2d4:	080313e8 	.word	0x080313e8
 800c2d8:	20011230 	.word	0x20011230
 800c2dc:	0800c22d 	.word	0x0800c22d

0800c2e0 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	607a      	str	r2, [r7, #4]
 800c2ec:	603b      	str	r3, [r7, #0]
    pointArray = 0;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	601a      	str	r2, [r3, #0]
    pointArraySize = 0;
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	601a      	str	r2, [r3, #0]
    commandArray = 0;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	601a      	str	r2, [r3, #0]
    commandArraySize = 0;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]
}
 800c306:	bf00      	nop
 800c308:	3714      	adds	r7, #20
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr

0800c312 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c312:	b480      	push	{r7}
 800c314:	b083      	sub	sp, #12
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	6039      	str	r1, [r7, #0]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	4618      	mov	r0, r3
 800c320:	370c      	adds	r7, #12
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
	...

0800c32c <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
    {
 800c334:	4a04      	ldr	r2, [pc, #16]	@ (800c348 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	601a      	str	r2, [r3, #0]
    }
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4618      	mov	r0, r3
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr
 800c348:	0802e9dc 	.word	0x0802e9dc

0800c34c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
    }
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f7ff ffe9 	bl	800c32c <_ZN8touchgfx8DrawableD1Ev>
 800c35a:	2128      	movs	r1, #40	@ 0x28
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f01e f8d0 	bl	802a502 <_ZdlPvj>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	4618      	mov	r0, r3
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d005      	beq.n	800c38a <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	3314      	adds	r3, #20
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	4798      	blx	r3
        }
    }
 800c38a:	bf00      	nop
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <_ZN8touchgfx8Drawable14getNextSiblingEv>:
     * Gets the next sibling node. This will be the next Drawable that has been added to the
     * same Container as this Drawable.
     *
     * @return The next sibling. If there are no more siblings, the return value is 0.
     */
    Drawable* getNextSibling()
 800c392:	b480      	push	{r7}
 800c394:	b083      	sub	sp, #12
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
    {
        return nextSibling;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	699b      	ldr	r3, [r3, #24]
    }
 800c39e:	4618      	mov	r0, r3
 800c3a0:	370c      	adds	r7, #12
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr

0800c3aa <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800c3aa:	b480      	push	{r7}
 800c3ac:	b083      	sub	sp, #12
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800c3b2:	2300      	movs	r3, #0
    }
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	4608      	mov	r0, r1
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	817b      	strh	r3, [r7, #10]
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	813b      	strh	r3, [r7, #8]
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800c3da:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800c3de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f000 f837 	bl	800c458 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800c3ea:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800c3ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f000 f88b 	bl	800c510 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800c3fa:	bf00      	nop
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800c402:	b480      	push	{r7}
 800c404:	b083      	sub	sp, #12
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800c410:	4618      	mov	r0, r3
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	460b      	mov	r3, r1
 800c426:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	887a      	ldrh	r2, [r7, #2]
 800c42c:	809a      	strh	r2, [r3, #4]
    }
 800c42e:	bf00      	nop
 800c430:	370c      	adds	r7, #12
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr

0800c43a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800c43a:	b480      	push	{r7}
 800c43c:	b083      	sub	sp, #12
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	460b      	mov	r3, r1
 800c444:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	887a      	ldrh	r2, [r7, #2]
 800c44a:	80da      	strh	r2, [r3, #6]
    }
 800c44c:	bf00      	nop
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	460b      	mov	r3, r1
 800c462:	807b      	strh	r3, [r7, #2]
 800c464:	4613      	mov	r3, r2
 800c466:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	3330      	adds	r3, #48	@ 0x30
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c474:	4611      	mov	r1, r2
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	4798      	blx	r3
        setY(y);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3334      	adds	r3, #52	@ 0x34
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c486:	4611      	mov	r1, r2
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	4798      	blx	r3
    }
 800c48c:	bf00      	nop
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	460b      	mov	r3, r1
 800c49e:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	887a      	ldrh	r2, [r7, #2]
 800c4a4:	811a      	strh	r2, [r3, #8]
    }
 800c4a6:	bf00      	nop
 800c4a8:	370c      	adds	r7, #12
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr

0800c4b2 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800c4b2:	b480      	push	{r7}
 800c4b4:	b083      	sub	sp, #12
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	887a      	ldrh	r2, [r7, #2]
 800c4c2:	815a      	strh	r2, [r3, #10]
    }
 800c4c4:	bf00      	nop
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
    {
    }
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c4ee:	bf00      	nop
 800c4f0:	370c      	adds	r7, #12
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800c4fa:	b480      	push	{r7}
 800c4fc:	b083      	sub	sp, #12
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	460b      	mov	r3, r1
 800c51a:	807b      	strh	r3, [r7, #2]
 800c51c:	4613      	mov	r3, r2
 800c51e:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	3338      	adds	r3, #56	@ 0x38
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c52c:	4611      	mov	r1, r2
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	4798      	blx	r3
        setHeight(height);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	333c      	adds	r3, #60	@ 0x3c
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c53e:	4611      	mov	r1, r2
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	4798      	blx	r3
    }
 800c544:	bf00      	nop
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c556:	bf00      	nop
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr

0800c562 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800c562:	b480      	push	{r7}
 800c564:	b083      	sub	sp, #12
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
    {
    }
 800c56a:	bf00      	nop
 800c56c:	370c      	adds	r7, #12
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr

0800c576 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800c576:	b480      	push	{r7}
 800c578:	b083      	sub	sp, #12
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 800c584:	4618      	mov	r0, r3
 800c586:	370c      	adds	r7, #12
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 800c59e:	4618      	mov	r0, r3
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b082      	sub	sp, #8
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	807b      	strh	r3, [r7, #2]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	3354      	adds	r3, #84	@ 0x54
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	8879      	ldrh	r1, [r7, #2]
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800c5ca:	b292      	uxth	r2, r2
 800c5cc:	1a8a      	subs	r2, r1, r2
 800c5ce:	b292      	uxth	r2, r2
 800c5d0:	b210      	sxth	r0, r2
 800c5d2:	8839      	ldrh	r1, [r7, #0]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c5da:	b292      	uxth	r2, r2
 800c5dc:	1a8a      	subs	r2, r1, r2
 800c5de:	b292      	uxth	r2, r2
 800c5e0:	b212      	sxth	r2, r2
 800c5e2:	4601      	mov	r1, r0
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	4798      	blx	r3
    }
 800c5e8:	bf00      	nop
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c5fe:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c606:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c60e:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 800c610:	bf00      	nop
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	f7ff ffe1 	bl	800c5f0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	601a      	str	r2, [r3, #0]
    }
 800c63c:	bf00      	nop
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c64e:	bf00      	nop
 800c650:	370c      	adds	r7, #12
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr

0800c65a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800c65a:	b480      	push	{r7}
 800c65c:	b083      	sub	sp, #12
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
 800c662:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c664:	bf00      	nop
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c67a:	bf00      	nop
 800c67c:	370c      	adds	r7, #12
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr

0800c686 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800c686:	b480      	push	{r7}
 800c688:	b083      	sub	sp, #12
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
 800c68e:	460b      	mov	r3, r1
 800c690:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800c692:	bf00      	nop
 800c694:	370c      	adds	r7, #12
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800c69e:	b480      	push	{r7}
 800c6a0:	b083      	sub	sp, #12
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
    {
    }
 800c6a6:	bf00      	nop
 800c6a8:	370c      	adds	r7, #12
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr

0800c6b2 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800c6b2:	b480      	push	{r7}
 800c6b4:	b083      	sub	sp, #12
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
    {
    }
 800c6ba:	bf00      	nop
 800c6bc:	370c      	adds	r7, #12
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr
	...

0800c6c8 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800c6c8:	b480      	push	{r7}
 800c6ca:	b083      	sub	sp, #12
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
    {
 800c6d0:	4a04      	ldr	r2, [pc, #16]	@ (800c6e4 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	601a      	str	r2, [r3, #0]
    }
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4618      	mov	r0, r3
 800c6da:	370c      	adds	r7, #12
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr
 800c6e4:	0802d9a8 	.word	0x0802d9a8

0800c6e8 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
    }
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7ff ffe9 	bl	800c6c8 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c6f6:	2104      	movs	r1, #4
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f01d ff02 	bl	802a502 <_ZdlPvj>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4618      	mov	r0, r3
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	607b      	str	r3, [r7, #4]
 800c712:	460b      	mov	r3, r1
 800c714:	817b      	strh	r3, [r7, #10]
 800c716:	4613      	mov	r3, r2
 800c718:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7ff ff2a 	bl	800c576 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d008      	beq.n	800c73a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7ff ff30 	bl	800c590 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d001      	beq.n	800c73a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800c736:	2301      	movs	r3, #1
 800c738:	e000      	b.n	800c73c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800c73a:	2300      	movs	r3, #0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	601a      	str	r2, [r3, #0]
        }
    }
 800c746:	bf00      	nop
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800c74e:	b480      	push	{r7}
 800c750:	b083      	sub	sp, #12
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
    {
    }
 800c756:	bf00      	nop
 800c758:	370c      	adds	r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr

0800c762 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800c762:	b480      	push	{r7}
 800c764:	b083      	sub	sp, #12
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
 800c76a:	460b      	mov	r3, r1
 800c76c:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800c76e:	bf00      	nop
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800c77a:	b480      	push	{r7}
 800c77c:	b083      	sub	sp, #12
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
 800c782:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800c78c:	6810      	ldr	r0, [r2, #0]
 800c78e:	6851      	ldr	r1, [r2, #4]
 800c790:	c303      	stmia	r3!, {r0, r1}
    }
 800c792:	bf00      	nop
 800c794:	370c      	adds	r7, #12
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr

0800c79e <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800c79e:	b580      	push	{r7, lr}
 800c7a0:	b082      	sub	sp, #8
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f00c f987 	bl	8018abe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800c7b0:	bf00      	nop
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
    {
 800c7c0:	4a04      	ldr	r2, [pc, #16]	@ (800c7d4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	601a      	str	r2, [r3, #0]
    }
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	370c      	adds	r7, #12
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr
 800c7d4:	0802d928 	.word	0x0802d928

0800c7d8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
    }
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f7ff ffe9 	bl	800c7b8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800c7e6:	2104      	movs	r1, #4
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f01d fe8a 	bl	802a502 <_ZdlPvj>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800c7f8:	b480      	push	{r7}
 800c7fa:	af00      	add	r7, sp, #0
    {
        return instance;
 800c7fc:	4b03      	ldr	r3, [pc, #12]	@ (800c80c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
    }
 800c800:	4618      	mov	r0, r3
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	200126e0 	.word	0x200126e0

0800c810 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800c810:	b480      	push	{r7}
 800c812:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800c814:	4b0b      	ldr	r3, [pc, #44]	@ (800c844 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d008      	beq.n	800c832 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800c820:	4b08      	ldr	r3, [pc, #32]	@ (800c844 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c826:	2b00      	cmp	r3, #0
 800c828:	d003      	beq.n	800c832 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800c82a:	4b06      	ldr	r3, [pc, #24]	@ (800c844 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c830:	e002      	b.n	800c838 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800c832:	4b04      	ldr	r3, [pc, #16]	@ (800c844 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	689b      	ldr	r3, [r3, #8]
    }
 800c838:	4618      	mov	r0, r3
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	200126e0 	.word	0x200126e0

0800c848 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800c850:	4a07      	ldr	r2, [pc, #28]	@ (800c870 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	601a      	str	r2, [r3, #0]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	605a      	str	r2, [r3, #4]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	721a      	strb	r2, [r3, #8]
    {
    }
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4618      	mov	r0, r3
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr
 800c870:	0802d904 	.word	0x0802d904

0800c874 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
    {
 800c87c:	4a04      	ldr	r2, [pc, #16]	@ (800c890 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	601a      	str	r2, [r3, #0]
    }
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4618      	mov	r0, r3
 800c886:	370c      	adds	r7, #12
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr
 800c890:	0802d904 	.word	0x0802d904

0800c894 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
    }
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f7ff ffe9 	bl	800c874 <_ZN8touchgfx10TransitionD1Ev>
 800c8a2:	210c      	movs	r1, #12
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f01d fe2c 	bl	802a502 <_ZdlPvj>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3708      	adds	r7, #8
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
    {
    }
 800c8bc:	bf00      	nop
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
    {
    }
 800c8d0:	bf00      	nop
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
    {
    }
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800c8f8:	f00c f8bc 	bl	8018a74 <_ZN8touchgfx11Application11getInstanceEv>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	323c      	adds	r2, #60	@ 0x3c
 800c902:	6812      	ldr	r2, [r2, #0]
 800c904:	4618      	mov	r0, r3
 800c906:	4790      	blx	r2
    }
 800c908:	bf00      	nop
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	683a      	ldr	r2, [r7, #0]
 800c91e:	605a      	str	r2, [r3, #4]
    }
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	4a05      	ldr	r2, [pc, #20]	@ (800c94c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	601a      	str	r2, [r3, #0]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7ff fec3 	bl	800c6c8 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4618      	mov	r0, r3
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	0802e988 	.word	0x0802e988

0800c950 <_ZN8touchgfx11ApplicationD0Ev>:
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f7ff ffe7 	bl	800c92c <_ZN8touchgfx11ApplicationD1Ev>
 800c95e:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f01d fdcd 	bl	802a502 <_ZdlPvj>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4618      	mov	r0, r3
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
	...

0800c974 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	4618      	mov	r0, r3
 800c980:	f00c f93a 	bl	8018bf8 <_ZN8touchgfx11ApplicationC1Ev>
 800c984:	4a09      	ldr	r2, [pc, #36]	@ (800c9ac <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a04      	ldr	r2, [pc, #16]	@ (800c9b0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800c99e:	6013      	str	r3, [r2, #0]
    }
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3708      	adds	r7, #8
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	0802d8b0 	.word	0x0802d8b0
 800c9b0:	20012734 	.word	0x20012734

0800c9b4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 f804 	bl	800c9ca <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800c9c2:	bf00      	nop
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b082      	sub	sp, #8
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00f      	beq.n	800c9fc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	330c      	adds	r3, #12
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4610      	mov	r0, r2
 800c9f0:	4798      	blx	r3
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e000      	b.n	800c9fe <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00e      	beq.n	800ca20 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	3308      	adds	r3, #8
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4610      	mov	r0, r2
 800ca16:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800ca20:	bf00      	nop
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	683a      	ldr	r2, [r7, #0]
 800ca36:	601a      	str	r2, [r3, #0]
    }
 800ca38:	bf00      	nop
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	4a05      	ldr	r2, [pc, #20]	@ (800ca64 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	601a      	str	r2, [r3, #0]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7ff ff69 	bl	800c92c <_ZN8touchgfx11ApplicationD1Ev>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	0802d8b0 	.word	0x0802d8b0

0800ca68 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff ffe7 	bl	800ca44 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ca76:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f01d fd41 	bl	802a502 <_ZdlPvj>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4618      	mov	r0, r3
 800ca84:	3708      	adds	r7, #8
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
	...

0800ca8c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	4a08      	ldr	r2, [pc, #32]	@ (800cab8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	601a      	str	r2, [r3, #0]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 ff1d 	bl	800d8e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7ff ffcb 	bl	800ca44 <_ZN8touchgfx14MVPApplicationD1Ev>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4618      	mov	r0, r3
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	0802d844 	.word	0x0802d844

0800cabc <_ZN23FrontendApplicationBaseD0Ev>:
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f7ff ffe1 	bl	800ca8c <_ZN23FrontendApplicationBaseD1Ev>
 800caca:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f01d fd17 	bl	802a502 <_ZdlPvj>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4618      	mov	r0, r3
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800cade:	b580      	push	{r7, lr}
 800cae0:	b082      	sub	sp, #8
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 f8a4 	bl	800cc34 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800caec:	bf00      	nop
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2201      	movs	r2, #1
 800cb00:	721a      	strb	r2, [r3, #8]
    }
 800cb02:	bf00      	nop
 800cb04:	370c      	adds	r7, #12
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr

0800cb0e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800cb0e:	b480      	push	{r7}
 800cb10:	b083      	sub	sp, #12
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
 800cb16:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	683a      	ldr	r2, [r7, #0]
 800cb1c:	605a      	str	r2, [r3, #4]
    }
 800cb1e:	bf00      	nop
 800cb20:	370c      	adds	r7, #12
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
	...

0800cb2c <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	4a05      	ldr	r2, [pc, #20]	@ (800cb4c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	601a      	str	r2, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f7ff fbf5 	bl	800c32c <_ZN8touchgfx8DrawableD1Ev>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4618      	mov	r0, r3
 800cb46:	3708      	adds	r7, #8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	0802d940 	.word	0x0802d940

0800cb50 <_ZN8touchgfx6WidgetD0Ev>:
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7ff ffe7 	bl	800cb2c <_ZN8touchgfx6WidgetD1Ev>
 800cb5e:	2128      	movs	r1, #40	@ 0x28
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f01d fcce 	bl	802a502 <_ZdlPvj>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7ff fef8 	bl	800c974 <_ZN8touchgfx14MVPApplicationC1Ev>
 800cb84:	4a16      	ldr	r2, [pc, #88]	@ (800cbe0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 f931 	bl	800cdf8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	68ba      	ldr	r2, [r7, #8]
 800cba2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800cba6:	f7ff fe27 	bl	800c7f8 <_ZN8touchgfx3HAL11getInstanceEv>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	3208      	adds	r2, #8
 800cbb0:	6812      	ldr	r2, [r2, #0]
 800cbb2:	2101      	movs	r1, #1
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800cbb8:	2000      	movs	r0, #0
 800cbba:	f002 fea7 	bl	800f90c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800cbbe:	f7ff fe27 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f015 fbde 	bl	8022386 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800cbca:	f7ff fe21 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f015 fc53 	bl	802247c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
}
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3710      	adds	r7, #16
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	0802d844 	.word	0x0802d844

0800cbe4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	370c      	adds	r7, #12
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr

0800cbfc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	4611      	mov	r1, r2
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7ff ffe9 	bl	800cbe4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	685a      	ldr	r2, [r3, #4]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	605a      	str	r2, [r3, #4]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	683a      	ldr	r2, [r7, #0]
 800cc1e:	3308      	adds	r3, #8
 800cc20:	3208      	adds	r2, #8
 800cc22:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc26:	e883 0003 	stmia.w	r3, {r0, r1}
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800cc34:	b590      	push	{r4, r7, lr}
 800cc36:	b089      	sub	sp, #36	@ 0x24
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800cc42:	4b10      	ldr	r3, [pc, #64]	@ (800cc84 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800cc44:	61bb      	str	r3, [r7, #24]
 800cc46:	2300      	movs	r3, #0
 800cc48:	61fb      	str	r3, [r7, #28]
 800cc4a:	f107 0008 	add.w	r0, r7, #8
 800cc4e:	f107 0318 	add.w	r3, r7, #24
 800cc52:	cb0c      	ldmia	r3, {r2, r3}
 800cc54:	6879      	ldr	r1, [r7, #4]
 800cc56:	f000 f8eb 	bl	800ce30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cc5a:	f107 0308 	add.w	r3, r7, #8
 800cc5e:	4619      	mov	r1, r3
 800cc60:	4620      	mov	r0, r4
 800cc62:	f7ff ffcb 	bl	800cbfc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cc66:	f107 0308 	add.w	r3, r7, #8
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f000 fe38 	bl	800d8e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800cc7c:	bf00      	nop
 800cc7e:	3724      	adds	r7, #36	@ 0x24
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd90      	pop	{r4, r7, pc}
 800cc84:	0800cc89 	.word	0x0800cc89

0800cc88 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af02      	add	r7, sp, #8
 800cc8e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	4b04      	ldr	r3, [pc, #16]	@ (800ccb8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800cca8:	4804      	ldr	r0, [pc, #16]	@ (800ccbc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800ccaa:	f000 f8f3 	bl	800ce94 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ccae:	bf00      	nop
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	20012728 	.word	0x20012728
 800ccbc:	20012724 	.word	0x20012724

0800ccc0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWest()
{
 800ccc0:	b590      	push	{r4, r7, lr}
 800ccc2:	b089      	sub	sp, #36	@ 0x24
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800ccce:	4b10      	ldr	r3, [pc, #64]	@ (800cd10 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv+0x50>)
 800ccd0:	61bb      	str	r3, [r7, #24]
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	61fb      	str	r3, [r7, #28]
 800ccd6:	f107 0008 	add.w	r0, r7, #8
 800ccda:	f107 0318 	add.w	r3, r7, #24
 800ccde:	cb0c      	ldmia	r3, {r2, r3}
 800cce0:	6879      	ldr	r1, [r7, #4]
 800cce2:	f000 f8a5 	bl	800ce30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cce6:	f107 0308 	add.w	r3, r7, #8
 800ccea:	4619      	mov	r1, r3
 800ccec:	4620      	mov	r0, r4
 800ccee:	f7ff ff85 	bl	800cbfc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ccf2:	f107 0308 	add.w	r3, r7, #8
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f000 fdf2 	bl	800d8e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800cd08:	bf00      	nop
 800cd0a:	3724      	adds	r7, #36	@ 0x24
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd90      	pop	{r4, r7, pc}
 800cd10:	0800cd15 	.word	0x0800cd15

0800cd14 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl()
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af02      	add	r7, sp, #8
 800cd1a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800cd28:	461a      	mov	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800cd30:	9300      	str	r3, [sp, #0]
 800cd32:	4b04      	ldr	r3, [pc, #16]	@ (800cd44 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x30>)
 800cd34:	4804      	ldr	r0, [pc, #16]	@ (800cd48 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x34>)
 800cd36:	f000 f9c7 	bl	800d0c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cd3a:	bf00      	nop
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	20012728 	.word	0x20012728
 800cd48:	20012724 	.word	0x20012724

0800cd4c <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEast()
{
 800cd4c:	b590      	push	{r4, r7, lr}
 800cd4e:	b089      	sub	sp, #36	@ 0x24
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEastImpl);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800cd5a:	4b10      	ldr	r3, [pc, #64]	@ (800cd9c <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv+0x50>)
 800cd5c:	61bb      	str	r3, [r7, #24]
 800cd5e:	2300      	movs	r3, #0
 800cd60:	61fb      	str	r3, [r7, #28]
 800cd62:	f107 0008 	add.w	r0, r7, #8
 800cd66:	f107 0318 	add.w	r3, r7, #24
 800cd6a:	cb0c      	ldmia	r3, {r2, r3}
 800cd6c:	6879      	ldr	r1, [r7, #4]
 800cd6e:	f000 f85f 	bl	800ce30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cd72:	f107 0308 	add.w	r3, r7, #8
 800cd76:	4619      	mov	r1, r3
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f7ff ff3f 	bl	800cbfc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cd7e:	f107 0308 	add.w	r3, r7, #8
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 fdac 	bl	800d8e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800cd94:	bf00      	nop
 800cd96:	3724      	adds	r7, #36	@ 0x24
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd90      	pop	{r4, r7, pc}
 800cd9c:	0800cda1 	.word	0x0800cda1

0800cda0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEastImpl()
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af02      	add	r7, sp, #8
 800cda6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800cdbc:	9300      	str	r3, [sp, #0]
 800cdbe:	4b04      	ldr	r3, [pc, #16]	@ (800cdd0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x30>)
 800cdc0:	4804      	ldr	r0, [pc, #16]	@ (800cdd4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x34>)
 800cdc2:	f000 fa9b 	bl	800d2fc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cdc6:	bf00      	nop
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	20012728 	.word	0x20012728
 800cdd4:	20012724 	.word	0x20012724

0800cdd8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800cdd8:	b480      	push	{r7}
 800cdda:	b083      	sub	sp, #12
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	4a04      	ldr	r2, [pc, #16]	@ (800cdf4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	601a      	str	r2, [r3, #0]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	4618      	mov	r0, r3
 800cdea:	370c      	adds	r7, #12
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr
 800cdf4:	0802d928 	.word	0x0802d928

0800cdf8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7ff ffe8 	bl	800cdd8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ce08:	4a08      	ldr	r2, [pc, #32]	@ (800ce2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	601a      	str	r2, [r3, #0]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	605a      	str	r2, [r3, #4]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	609a      	str	r2, [r3, #8]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	60da      	str	r2, [r3, #12]
    {
    }
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4618      	mov	r0, r3
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	0802d898 	.word	0x0802d898

0800ce30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	4639      	mov	r1, r7
 800ce3c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7ff ffc8 	bl	800cdd8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ce48:	4a08      	ldr	r2, [pc, #32]	@ (800ce6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	601a      	str	r2, [r3, #0]
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	68ba      	ldr	r2, [r7, #8]
 800ce52:	605a      	str	r2, [r3, #4]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	3308      	adds	r3, #8
 800ce58:	463a      	mov	r2, r7
 800ce5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce5e:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	4618      	mov	r0, r3
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	0802d898 	.word	0x0802d898

0800ce70 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7ff fce4 	bl	800c848 <_ZN8touchgfx10TransitionC1Ev>
 800ce80:	4a03      	ldr	r2, [pc, #12]	@ (800ce90 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	601a      	str	r2, [r3, #0]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}
 800ce90:	0802d820 	.word	0x0802d820

0800ce94 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ce94:	b590      	push	{r4, r7, lr}
 800ce96:	b08f      	sub	sp, #60	@ 0x3c
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
 800cea0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	689a      	ldr	r2, [r3, #8]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	3320      	adds	r3, #32
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	4798      	blx	r3
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 800ceba:	d205      	bcs.n	800cec8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800cebc:	4b7d      	ldr	r3, [pc, #500]	@ (800d0b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800cebe:	4a7e      	ldr	r2, [pc, #504]	@ (800d0b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800cec0:	21a3      	movs	r1, #163	@ 0xa3
 800cec2:	487e      	ldr	r0, [pc, #504]	@ (800d0bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800cec4:	f01e fa64 	bl	802b390 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	3320      	adds	r3, #32
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4610      	mov	r0, r2
 800ced8:	4798      	blx	r3
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b0f      	cmp	r3, #15
 800cede:	d805      	bhi.n	800ceec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800cee0:	4b77      	ldr	r3, [pc, #476]	@ (800d0c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800cee2:	4a75      	ldr	r2, [pc, #468]	@ (800d0b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800cee4:	21a4      	movs	r1, #164	@ 0xa4
 800cee6:	4875      	ldr	r0, [pc, #468]	@ (800d0bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800cee8:	f01e fa52 	bl	802b390 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	68da      	ldr	r2, [r3, #12]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	3320      	adds	r3, #32
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4610      	mov	r0, r2
 800cefc:	4798      	blx	r3
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b0b      	cmp	r3, #11
 800cf02:	d805      	bhi.n	800cf10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800cf04:	4b6f      	ldr	r3, [pc, #444]	@ (800d0c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800cf06:	4a6c      	ldr	r2, [pc, #432]	@ (800d0b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800cf08:	21a5      	movs	r1, #165	@ 0xa5
 800cf0a:	486c      	ldr	r0, [pc, #432]	@ (800d0bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800cf0c:	f01e fa40 	bl	802b390 <__assert_func>
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800cf1c:	f00b fdaa 	bl	8018a74 <_ZN8touchgfx11Application11getInstanceEv>
 800cf20:	4603      	mov	r3, r0
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7ff fc3b 	bl	800c79e <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800cf28:	6a3b      	ldr	r3, [r7, #32]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d008      	beq.n	800cf42 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800cf30:	6a3b      	ldr	r3, [r7, #32]
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	6a3b      	ldr	r3, [r7, #32]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	330c      	adds	r3, #12
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4610      	mov	r0, r2
 800cf40:	4798      	blx	r3
    if (*currentTrans)
 800cf42:	6a3b      	ldr	r3, [r7, #32]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d007      	beq.n	800cf5a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800cf4a:	6a3b      	ldr	r3, [r7, #32]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	6a3b      	ldr	r3, [r7, #32]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4610      	mov	r0, r2
 800cf58:	4798      	blx	r3
    if (*currentScreen)
 800cf5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d008      	beq.n	800cf74 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800cf62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	3314      	adds	r3, #20
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4610      	mov	r0, r2
 800cf72:	4798      	blx	r3
    if (*currentPresenter)
 800cf74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d008      	beq.n	800cf8e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800cf7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	3304      	adds	r3, #4
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4610      	mov	r0, r2
 800cf8c:	4798      	blx	r3
    if (*currentScreen)
 800cf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d007      	beq.n	800cfa6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800cf96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4610      	mov	r0, r2
 800cfa4:	4798      	blx	r3
    if (*currentPresenter)
 800cfa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d008      	beq.n	800cfc0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800cfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	3308      	adds	r3, #8
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4610      	mov	r0, r2
 800cfbe:	4798      	blx	r3
}
 800cfc0:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f000 fab1 	bl	800d530 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	200c      	movs	r0, #12
 800cfd4:	f7ff f99d 	bl	800c312 <_ZnwjPv>
 800cfd8:	4604      	mov	r4, r0
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f7ff ff48 	bl	800ce70 <_ZN8touchgfx12NoTransitionC1Ev>
 800cfe0:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	2100      	movs	r1, #0
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f000 fab4 	bl	800d556 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800cfee:	4603      	mov	r3, r0
 800cff0:	4619      	mov	r1, r3
 800cff2:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 800cff6:	f7ff f98c 	bl	800c312 <_ZnwjPv>
 800cffa:	4604      	mov	r4, r0
 800cffc:	4620      	mov	r0, r4
 800cffe:	f002 fe99 	bl	800fd34 <_ZN11Screen1ViewC1Ev>
 800d002:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	2100      	movs	r1, #0
 800d00a:	4618      	mov	r0, r3
 800d00c:	f000 fab6 	bl	800d57c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800d010:	4603      	mov	r3, r0
 800d012:	4619      	mov	r1, r3
 800d014:	2010      	movs	r0, #16
 800d016:	f7ff f97c 	bl	800c312 <_ZnwjPv>
 800d01a:	4604      	mov	r4, r0
 800d01c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d01e:	4620      	mov	r0, r4
 800d020:	f002 fe30 	bl	800fc84 <_ZN16Screen1PresenterC1ER11Screen1View>
 800d024:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d02a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d030:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d036:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d002      	beq.n	800d044 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800d03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d040:	3304      	adds	r3, #4
 800d042:	e000      	b.n	800d046 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d044:	2300      	movs	r3, #0
 800d046:	4619      	mov	r1, r3
 800d048:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d04a:	f7ff fced 	bl	800ca28 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d050:	3304      	adds	r3, #4
 800d052:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d054:	4618      	mov	r0, r3
 800d056:	f7ff fd5a 	bl	800cb0e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d05c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d05e:	4618      	mov	r0, r3
 800d060:	f000 fa9f 	bl	800d5a2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800d064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d066:	61fb      	str	r3, [r7, #28]
 800d068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d06a:	61bb      	str	r3, [r7, #24]
 800d06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d06e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	330c      	adds	r3, #12
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	69f8      	ldr	r0, [r7, #28]
 800d07a:	4798      	blx	r3
    newPresenter->activate();
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	69b8      	ldr	r0, [r7, #24]
 800d084:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d086:	6979      	ldr	r1, [r7, #20]
 800d088:	69f8      	ldr	r0, [r7, #28]
 800d08a:	f00d fcd1 	bl	801aa30 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	3310      	adds	r3, #16
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	6978      	ldr	r0, [r7, #20]
 800d098:	4798      	blx	r3
    newTransition->invalidate();
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	3314      	adds	r3, #20
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	6978      	ldr	r0, [r7, #20]
 800d0a4:	4798      	blx	r3
}
 800d0a6:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800d0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	373c      	adds	r7, #60	@ 0x3c
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd90      	pop	{r4, r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	0802c7c8 	.word	0x0802c7c8
 800d0b8:	0802c858 	.word	0x0802c858
 800d0bc:	0802c92c 	.word	0x0802c92c
 800d0c0:	0802c970 	.word	0x0802c970
 800d0c4:	0802ca14 	.word	0x0802ca14

0800d0c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d0c8:	b590      	push	{r4, r7, lr}
 800d0ca:	b08f      	sub	sp, #60	@ 0x3c
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	607a      	str	r2, [r7, #4]
 800d0d4:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	689a      	ldr	r2, [r3, #8]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	3320      	adds	r3, #32
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4610      	mov	r0, r2
 800d0e6:	4798      	blx	r3
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 800d0ee:	d205      	bcs.n	800d0fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d0f0:	4b7d      	ldr	r3, [pc, #500]	@ (800d2e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800d0f2:	4a7e      	ldr	r2, [pc, #504]	@ (800d2ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800d0f4:	21a3      	movs	r1, #163	@ 0xa3
 800d0f6:	487e      	ldr	r0, [pc, #504]	@ (800d2f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d0f8:	f01e f94a 	bl	802b390 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685a      	ldr	r2, [r3, #4]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	3320      	adds	r3, #32
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4610      	mov	r0, r2
 800d10c:	4798      	blx	r3
 800d10e:	4603      	mov	r3, r0
 800d110:	2b0f      	cmp	r3, #15
 800d112:	d805      	bhi.n	800d120 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800d114:	4b77      	ldr	r3, [pc, #476]	@ (800d2f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800d116:	4a75      	ldr	r2, [pc, #468]	@ (800d2ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800d118:	21a4      	movs	r1, #164	@ 0xa4
 800d11a:	4875      	ldr	r0, [pc, #468]	@ (800d2f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d11c:	f01e f938 	bl	802b390 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	68da      	ldr	r2, [r3, #12]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	3320      	adds	r3, #32
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4610      	mov	r0, r2
 800d130:	4798      	blx	r3
 800d132:	4603      	mov	r3, r0
 800d134:	2b3f      	cmp	r3, #63	@ 0x3f
 800d136:	d805      	bhi.n	800d144 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800d138:	4b6f      	ldr	r3, [pc, #444]	@ (800d2f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800d13a:	4a6c      	ldr	r2, [pc, #432]	@ (800d2ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800d13c:	21a5      	movs	r1, #165	@ 0xa5
 800d13e:	486c      	ldr	r0, [pc, #432]	@ (800d2f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d140:	f01e f926 	bl	802b390 <__assert_func>
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d150:	f00b fc90 	bl	8018a74 <_ZN8touchgfx11Application11getInstanceEv>
 800d154:	4603      	mov	r3, r0
 800d156:	4618      	mov	r0, r3
 800d158:	f7ff fb21 	bl	800c79e <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d15c:	6a3b      	ldr	r3, [r7, #32]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d008      	beq.n	800d176 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800d164:	6a3b      	ldr	r3, [r7, #32]
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	6a3b      	ldr	r3, [r7, #32]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	330c      	adds	r3, #12
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4610      	mov	r0, r2
 800d174:	4798      	blx	r3
    if (*currentTrans)
 800d176:	6a3b      	ldr	r3, [r7, #32]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d007      	beq.n	800d18e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800d17e:	6a3b      	ldr	r3, [r7, #32]
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	6a3b      	ldr	r3, [r7, #32]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4610      	mov	r0, r2
 800d18c:	4798      	blx	r3
    if (*currentScreen)
 800d18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d008      	beq.n	800d1a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800d196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	3314      	adds	r3, #20
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4610      	mov	r0, r2
 800d1a6:	4798      	blx	r3
    if (*currentPresenter)
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d008      	beq.n	800d1c2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	3304      	adds	r3, #4
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4610      	mov	r0, r2
 800d1c0:	4798      	blx	r3
    if (*currentScreen)
 800d1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d007      	beq.n	800d1da <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800d1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4610      	mov	r0, r2
 800d1d8:	4798      	blx	r3
    if (*currentPresenter)
 800d1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d008      	beq.n	800d1f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800d1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	3308      	adds	r3, #8
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	4798      	blx	r3
}
 800d1f4:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	2100      	movs	r1, #0
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 f9de 	bl	800d5be <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 800d202:	4603      	mov	r3, r0
 800d204:	4619      	mov	r1, r3
 800d206:	2040      	movs	r0, #64	@ 0x40
 800d208:	f7ff f883 	bl	800c312 <_ZnwjPv>
 800d20c:	4604      	mov	r4, r0
 800d20e:	2114      	movs	r1, #20
 800d210:	4620      	mov	r0, r4
 800d212:	f000 fa09 	bl	800d628 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 800d216:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	689b      	ldr	r3, [r3, #8]
 800d21c:	2100      	movs	r1, #0
 800d21e:	4618      	mov	r0, r3
 800d220:	f000 f999 	bl	800d556 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800d224:	4603      	mov	r3, r0
 800d226:	4619      	mov	r1, r3
 800d228:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 800d22c:	f7ff f871 	bl	800c312 <_ZnwjPv>
 800d230:	4604      	mov	r4, r0
 800d232:	4620      	mov	r0, r4
 800d234:	f002 fd7e 	bl	800fd34 <_ZN11Screen1ViewC1Ev>
 800d238:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	2100      	movs	r1, #0
 800d240:	4618      	mov	r0, r3
 800d242:	f000 f99b 	bl	800d57c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800d246:	4603      	mov	r3, r0
 800d248:	4619      	mov	r1, r3
 800d24a:	2010      	movs	r0, #16
 800d24c:	f7ff f861 	bl	800c312 <_ZnwjPv>
 800d250:	4604      	mov	r4, r0
 800d252:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d254:	4620      	mov	r0, r4
 800d256:	f002 fd15 	bl	800fc84 <_ZN16Screen1PresenterC1ER11Screen1View>
 800d25a:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d260:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d266:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d26c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d276:	3304      	adds	r3, #4
 800d278:	e000      	b.n	800d27c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d27a:	2300      	movs	r3, #0
 800d27c:	4619      	mov	r1, r3
 800d27e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d280:	f7ff fbd2 	bl	800ca28 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d286:	3304      	adds	r3, #4
 800d288:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7ff fc3f 	bl	800cb0e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d292:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d294:	4618      	mov	r0, r3
 800d296:	f000 f984 	bl	800d5a2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800d29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29c:	61fb      	str	r3, [r7, #28]
 800d29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a0:	61bb      	str	r3, [r7, #24]
 800d2a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2a4:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	330c      	adds	r3, #12
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	69f8      	ldr	r0, [r7, #28]
 800d2b0:	4798      	blx	r3
    newPresenter->activate();
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	69b8      	ldr	r0, [r7, #24]
 800d2ba:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d2bc:	6979      	ldr	r1, [r7, #20]
 800d2be:	69f8      	ldr	r0, [r7, #28]
 800d2c0:	f00d fbb6 	bl	801aa30 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	3310      	adds	r3, #16
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	6978      	ldr	r0, [r7, #20]
 800d2ce:	4798      	blx	r3
    newTransition->invalidate();
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	3314      	adds	r3, #20
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	6978      	ldr	r0, [r7, #20]
 800d2da:	4798      	blx	r3
}
 800d2dc:	bf00      	nop
    return newPresenter;
 800d2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	373c      	adds	r7, #60	@ 0x3c
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd90      	pop	{r4, r7, pc}
 800d2e8:	0802c7c8 	.word	0x0802c7c8
 800d2ec:	0802cab8 	.word	0x0802cab8
 800d2f0:	0802c92c 	.word	0x0802c92c
 800d2f4:	0802c970 	.word	0x0802c970
 800d2f8:	0802ca14 	.word	0x0802ca14

0800d2fc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d2fc:	b590      	push	{r4, r7, lr}
 800d2fe:	b08f      	sub	sp, #60	@ 0x3c
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
 800d308:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	689a      	ldr	r2, [r3, #8]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	3320      	adds	r3, #32
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4610      	mov	r0, r2
 800d31a:	4798      	blx	r3
 800d31c:	4603      	mov	r3, r0
 800d31e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 800d322:	d205      	bcs.n	800d330 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d324:	4b7d      	ldr	r3, [pc, #500]	@ (800d51c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800d326:	4a7e      	ldr	r2, [pc, #504]	@ (800d520 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800d328:	21a3      	movs	r1, #163	@ 0xa3
 800d32a:	487e      	ldr	r0, [pc, #504]	@ (800d524 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d32c:	f01e f830 	bl	802b390 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	685a      	ldr	r2, [r3, #4]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	3320      	adds	r3, #32
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4610      	mov	r0, r2
 800d340:	4798      	blx	r3
 800d342:	4603      	mov	r3, r0
 800d344:	2b0f      	cmp	r3, #15
 800d346:	d805      	bhi.n	800d354 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800d348:	4b77      	ldr	r3, [pc, #476]	@ (800d528 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800d34a:	4a75      	ldr	r2, [pc, #468]	@ (800d520 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800d34c:	21a4      	movs	r1, #164	@ 0xa4
 800d34e:	4875      	ldr	r0, [pc, #468]	@ (800d524 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d350:	f01e f81e 	bl	802b390 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	68da      	ldr	r2, [r3, #12]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	3320      	adds	r3, #32
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4610      	mov	r0, r2
 800d364:	4798      	blx	r3
 800d366:	4603      	mov	r3, r0
 800d368:	2b3f      	cmp	r3, #63	@ 0x3f
 800d36a:	d805      	bhi.n	800d378 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800d36c:	4b6f      	ldr	r3, [pc, #444]	@ (800d52c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800d36e:	4a6c      	ldr	r2, [pc, #432]	@ (800d520 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800d370:	21a5      	movs	r1, #165	@ 0xa5
 800d372:	486c      	ldr	r0, [pc, #432]	@ (800d524 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d374:	f01e f80c 	bl	802b390 <__assert_func>
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d384:	f00b fb76 	bl	8018a74 <_ZN8touchgfx11Application11getInstanceEv>
 800d388:	4603      	mov	r3, r0
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7ff fa07 	bl	800c79e <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d390:	6a3b      	ldr	r3, [r7, #32]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d008      	beq.n	800d3aa <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800d398:	6a3b      	ldr	r3, [r7, #32]
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	6a3b      	ldr	r3, [r7, #32]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	330c      	adds	r3, #12
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	4610      	mov	r0, r2
 800d3a8:	4798      	blx	r3
    if (*currentTrans)
 800d3aa:	6a3b      	ldr	r3, [r7, #32]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d007      	beq.n	800d3c2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800d3b2:	6a3b      	ldr	r3, [r7, #32]
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	6a3b      	ldr	r3, [r7, #32]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	4610      	mov	r0, r2
 800d3c0:	4798      	blx	r3
    if (*currentScreen)
 800d3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d008      	beq.n	800d3dc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800d3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	3314      	adds	r3, #20
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4610      	mov	r0, r2
 800d3da:	4798      	blx	r3
    if (*currentPresenter)
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d008      	beq.n	800d3f6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e6:	681a      	ldr	r2, [r3, #0]
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	3304      	adds	r3, #4
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	4610      	mov	r0, r2
 800d3f4:	4798      	blx	r3
    if (*currentScreen)
 800d3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d007      	beq.n	800d40e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800d3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4610      	mov	r0, r2
 800d40c:	4798      	blx	r3
    if (*currentPresenter)
 800d40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d008      	beq.n	800d428 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800d416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	3308      	adds	r3, #8
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4610      	mov	r0, r2
 800d426:	4798      	blx	r3
}
 800d428:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	2100      	movs	r1, #0
 800d430:	4618      	mov	r0, r3
 800d432:	f000 f949 	bl	800d6c8 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800d436:	4603      	mov	r3, r0
 800d438:	4619      	mov	r1, r3
 800d43a:	2040      	movs	r0, #64	@ 0x40
 800d43c:	f7fe ff69 	bl	800c312 <_ZnwjPv>
 800d440:	4604      	mov	r4, r0
 800d442:	2114      	movs	r1, #20
 800d444:	4620      	mov	r0, r4
 800d446:	f000 f953 	bl	800d6f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800d44a:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	2100      	movs	r1, #0
 800d452:	4618      	mov	r0, r3
 800d454:	f000 f99e 	bl	800d794 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 800d458:	4603      	mov	r3, r0
 800d45a:	4619      	mov	r1, r3
 800d45c:	f44f 7030 	mov.w	r0, #704	@ 0x2c0
 800d460:	f7fe ff57 	bl	800c312 <_ZnwjPv>
 800d464:	4604      	mov	r4, r0
 800d466:	4620      	mov	r0, r4
 800d468:	f002 fd46 	bl	800fef8 <_ZN11Screen2ViewC1Ev>
 800d46c:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	2100      	movs	r1, #0
 800d474:	4618      	mov	r0, r3
 800d476:	f000 f9a0 	bl	800d7ba <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 800d47a:	4603      	mov	r3, r0
 800d47c:	4619      	mov	r1, r3
 800d47e:	2010      	movs	r0, #16
 800d480:	f7fe ff47 	bl	800c312 <_ZnwjPv>
 800d484:	4604      	mov	r4, r0
 800d486:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d488:	4620      	mov	r0, r4
 800d48a:	f002 fcdd 	bl	800fe48 <_ZN16Screen2PresenterC1ER11Screen2View>
 800d48e:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d494:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d49a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4a0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d002      	beq.n	800d4ae <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4aa:	3304      	adds	r3, #4
 800d4ac:	e000      	b.n	800d4b0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d4b4:	f7ff fab8 	bl	800ca28 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7ff fb25 	bl	800cb0e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f000 f989 	bl	800d7e0 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d0:	61fb      	str	r3, [r7, #28]
 800d4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d4:	61bb      	str	r3, [r7, #24]
 800d4d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4d8:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	330c      	adds	r3, #12
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	69f8      	ldr	r0, [r7, #28]
 800d4e4:	4798      	blx	r3
    newPresenter->activate();
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	69b8      	ldr	r0, [r7, #24]
 800d4ee:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d4f0:	6979      	ldr	r1, [r7, #20]
 800d4f2:	69f8      	ldr	r0, [r7, #28]
 800d4f4:	f00d fa9c 	bl	801aa30 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3310      	adds	r3, #16
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	6978      	ldr	r0, [r7, #20]
 800d502:	4798      	blx	r3
    newTransition->invalidate();
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	3314      	adds	r3, #20
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	6978      	ldr	r0, [r7, #20]
 800d50e:	4798      	blx	r3
}
 800d510:	bf00      	nop
    return newPresenter;
 800d512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800d514:	4618      	mov	r0, r3
 800d516:	373c      	adds	r7, #60	@ 0x3c
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd90      	pop	{r4, r7, pc}
 800d51c:	0802c7c8 	.word	0x0802c7c8
 800d520:	0802cba0 	.word	0x0802cba0
 800d524:	0802c92c 	.word	0x0802c92c
 800d528:	0802c970 	.word	0x0802c970
 800d52c:	0802ca14 	.word	0x0802ca14

0800d530 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	460b      	mov	r3, r1
 800d53a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	3324      	adds	r3, #36	@ 0x24
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	887a      	ldrh	r2, [r7, #2]
 800d546:	4611      	mov	r1, r2
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	4798      	blx	r3
 800d54c:	4603      	mov	r3, r0
    }
 800d54e:	4618      	mov	r0, r3
 800d550:	3708      	adds	r7, #8
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}

0800d556 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800d556:	b580      	push	{r7, lr}
 800d558:	b082      	sub	sp, #8
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
 800d55e:	460b      	mov	r3, r1
 800d560:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	3324      	adds	r3, #36	@ 0x24
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	887a      	ldrh	r2, [r7, #2]
 800d56c:	4611      	mov	r1, r2
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	4798      	blx	r3
 800d572:	4603      	mov	r3, r0
    }
 800d574:	4618      	mov	r0, r3
 800d576:	3708      	adds	r7, #8
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	460b      	mov	r3, r1
 800d586:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	3324      	adds	r3, #36	@ 0x24
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	887a      	ldrh	r2, [r7, #2]
 800d592:	4611      	mov	r1, r2
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	4798      	blx	r3
 800d598:	4603      	mov	r3, r0
    }
 800d59a:	4618      	mov	r0, r3
 800d59c:	3708      	adds	r7, #8
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800d5a2:	b480      	push	{r7}
 800d5a4:	b083      	sub	sp, #12
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
 800d5aa:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	683a      	ldr	r2, [r7, #0]
 800d5b0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800d5b2:	bf00      	nop
 800d5b4:	370c      	adds	r7, #12
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr

0800d5be <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b082      	sub	sp, #8
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	3324      	adds	r3, #36	@ 0x24
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	887a      	ldrh	r2, [r7, #2]
 800d5d4:	4611      	mov	r1, r2
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	4798      	blx	r3
 800d5da:	4603      	mov	r3, r0
    }
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3708      	adds	r7, #8
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	4a05      	ldr	r2, [pc, #20]	@ (800d604 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	601a      	str	r2, [r3, #0]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7ff fa99 	bl	800cb2c <_ZN8touchgfx6WidgetD1Ev>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	0802e63c 	.word	0x0802e63c

0800d608 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f7ff ffe7 	bl	800d5e4 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800d616:	212c      	movs	r1, #44	@ 0x2c
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f01c ff72 	bl	802a502 <_ZdlPvj>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4618      	mov	r0, r3
 800d622:	3708      	adds	r7, #8
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af02      	add	r7, sp, #8
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	460b      	mov	r3, r1
 800d632:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          snapshot(),
          animationSteps(transitionSteps),
          animationCounter(0),
          relativeValue(0)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4618      	mov	r0, r3
 800d638:	f7ff f906 	bl	800c848 <_ZN8touchgfx10TransitionC1Ev>
 800d63c:	4a1e      	ldr	r2, [pc, #120]	@ (800d6b8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x90>)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	601a      	str	r2, [r3, #0]
          snapshot(),
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	330c      	adds	r3, #12
 800d646:	4618      	mov	r0, r3
 800d648:	f008 f8e0 	bl	801580c <_ZN8touchgfx14SnapshotWidgetC1Ev>
          animationSteps(transitionSteps),
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	78fa      	ldrb	r2, [r7, #3]
 800d650:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          animationCounter(0),
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
          relativeValue(0)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	879a      	strh	r2, [r3, #60]	@ 0x3c
    {
        if (!HAL::USE_ANIMATION_STORAGE)
 800d662:	4b16      	ldr	r3, [pc, #88]	@ (800d6bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x94>)
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	f083 0301 	eor.w	r3, r3, #1
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d003      	beq.n	800d678 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x50>
        {
            // No animation storage, don't slide
            done = true;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2201      	movs	r2, #1
 800d674:	721a      	strb	r2, [r3, #8]
            return;
 800d676:	e019      	b.n	800d6ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x84>
        }

        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f103 000c 	add.w	r0, r3, #12
 800d67e:	4b10      	ldr	r3, [pc, #64]	@ (800d6c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x98>)
 800d680:	881b      	ldrh	r3, [r3, #0]
 800d682:	b21a      	sxth	r2, r3
 800d684:	4b0f      	ldr	r3, [pc, #60]	@ (800d6c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x9c>)
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	b21b      	sxth	r3, r3
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	4613      	mov	r3, r2
 800d68e:	2200      	movs	r2, #0
 800d690:	2100      	movs	r1, #0
 800d692:	f7fe fe95 	bl	800c3c0 <_ZN8touchgfx8Drawable11setPositionEssss>
        snapshot.makeSnapshot();
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	330c      	adds	r3, #12
 800d69a:	4618      	mov	r0, r3
 800d69c:	f008 f839 	bl	8015712 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
            break;
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 800d6a0:	4b07      	ldr	r3, [pc, #28]	@ (800d6c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x98>)
 800d6a2:	881b      	ldrh	r3, [r3, #0]
 800d6a4:	b21a      	sxth	r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	875a      	strh	r2, [r3, #58]	@ 0x3a
            break;
 800d6aa:	bf00      	nop
            break;
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
            break;
        }
    }
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3708      	adds	r7, #8
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	0802d7d8 	.word	0x0802d7d8
 800d6bc:	200126df 	.word	0x200126df
 800d6c0:	200126d4 	.word	0x200126d4
 800d6c4:	200126d6 	.word	0x200126d6

0800d6c8 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	3324      	adds	r3, #36	@ 0x24
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	887a      	ldrh	r2, [r7, #2]
 800d6de:	4611      	mov	r1, r2
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	4798      	blx	r3
 800d6e4:	4603      	mov	r3, r0
    }
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
	...

0800d6f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    SlideTransition(const uint8_t transitionSteps = 20)
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af02      	add	r7, sp, #8
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	70fb      	strb	r3, [r7, #3]
          relativeValue(0)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7ff f8a2 	bl	800c848 <_ZN8touchgfx10TransitionC1Ev>
 800d704:	4a1f      	ldr	r2, [pc, #124]	@ (800d784 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x94>)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	601a      	str	r2, [r3, #0]
          snapshot(),
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	330c      	adds	r3, #12
 800d70e:	4618      	mov	r0, r3
 800d710:	f008 f87c 	bl	801580c <_ZN8touchgfx14SnapshotWidgetC1Ev>
          animationSteps(transitionSteps),
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	78fa      	ldrb	r2, [r7, #3]
 800d718:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          animationCounter(0),
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2200      	movs	r2, #0
 800d720:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
          relativeValue(0)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	879a      	strh	r2, [r3, #60]	@ 0x3c
        if (!HAL::USE_ANIMATION_STORAGE)
 800d72a:	4b17      	ldr	r3, [pc, #92]	@ (800d788 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x98>)
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	f083 0301 	eor.w	r3, r3, #1
 800d732:	b2db      	uxtb	r3, r3
 800d734:	2b00      	cmp	r3, #0
 800d736:	d003      	beq.n	800d740 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x50>
            done = true;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2201      	movs	r2, #1
 800d73c:	721a      	strb	r2, [r3, #8]
            return;
 800d73e:	e01b      	b.n	800d778 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x88>
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f103 000c 	add.w	r0, r3, #12
 800d746:	4b11      	ldr	r3, [pc, #68]	@ (800d78c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x9c>)
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	b21a      	sxth	r2, r3
 800d74c:	4b10      	ldr	r3, [pc, #64]	@ (800d790 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xa0>)
 800d74e:	881b      	ldrh	r3, [r3, #0]
 800d750:	b21b      	sxth	r3, r3
 800d752:	9300      	str	r3, [sp, #0]
 800d754:	4613      	mov	r3, r2
 800d756:	2200      	movs	r2, #0
 800d758:	2100      	movs	r1, #0
 800d75a:	f7fe fe31 	bl	800c3c0 <_ZN8touchgfx8Drawable11setPositionEssss>
        snapshot.makeSnapshot();
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	330c      	adds	r3, #12
 800d762:	4618      	mov	r0, r3
 800d764:	f007 ffd5 	bl	8015712 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            targetValue = -HAL::DISPLAY_WIDTH;
 800d768:	4b08      	ldr	r3, [pc, #32]	@ (800d78c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x9c>)
 800d76a:	881b      	ldrh	r3, [r3, #0]
 800d76c:	425b      	negs	r3, r3
 800d76e:	b29b      	uxth	r3, r3
 800d770:	b21a      	sxth	r2, r3
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	875a      	strh	r2, [r3, #58]	@ 0x3a
            break;
 800d776:	bf00      	nop
    }
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	4618      	mov	r0, r3
 800d77c:	3708      	adds	r7, #8
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	0802d7fc 	.word	0x0802d7fc
 800d788:	200126df 	.word	0x200126df
 800d78c:	200126d4 	.word	0x200126d4
 800d790:	200126d6 	.word	0x200126d6

0800d794 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	460b      	mov	r3, r1
 800d79e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	3324      	adds	r3, #36	@ 0x24
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	887a      	ldrh	r2, [r7, #2]
 800d7aa:	4611      	mov	r1, r2
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	4798      	blx	r3
 800d7b0:	4603      	mov	r3, r0
    }
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3708      	adds	r7, #8
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b082      	sub	sp, #8
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	3324      	adds	r3, #36	@ 0x24
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	887a      	ldrh	r2, [r7, #2]
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	4798      	blx	r3
 800d7d6:	4603      	mov	r3, r0
    }
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3708      	adds	r7, #8
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	683a      	ldr	r2, [r7, #0]
 800d7ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800d7f0:	bf00      	nop
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
class SlideTransition : public Transition
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	4a08      	ldr	r2, [pc, #32]	@ (800d828 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x2c>)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	601a      	str	r2, [r3, #0]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	330c      	adds	r3, #12
 800d80e:	4618      	mov	r0, r3
 800d810:	f7ff fee8 	bl	800d5e4 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	4618      	mov	r0, r3
 800d818:	f7ff f82c 	bl	800c874 <_ZN8touchgfx10TransitionD1Ev>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	4618      	mov	r0, r3
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	0802d7d8 	.word	0x0802d7d8

0800d82c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f7ff ffe1 	bl	800d7fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 800d83a:	2140      	movs	r1, #64	@ 0x40
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f01c fe60 	bl	802a502 <_ZdlPvj>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	4618      	mov	r0, r3
 800d846:	3708      	adds	r7, #8
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	4a08      	ldr	r2, [pc, #32]	@ (800d878 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x2c>)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	330c      	adds	r3, #12
 800d85e:	4618      	mov	r0, r3
 800d860:	f7ff fec0 	bl	800d5e4 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4618      	mov	r0, r3
 800d868:	f7ff f804 	bl	800c874 <_ZN8touchgfx10TransitionD1Ev>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4618      	mov	r0, r3
 800d870:	3708      	adds	r7, #8
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	0802d7fc 	.word	0x0802d7fc

0800d87c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f7ff ffe1 	bl	800d84c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 800d88a:	2140      	movs	r1, #64	@ 0x40
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f01c fe38 	bl	802a502 <_ZdlPvj>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	4618      	mov	r0, r3
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <_ZN8touchgfx12NoTransitionD1Ev>:
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	4a05      	ldr	r2, [pc, #20]	@ (800d8bc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	601a      	str	r2, [r3, #0]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7fe ffe1 	bl	800c874 <_ZN8touchgfx10TransitionD1Ev>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	0802d820 	.word	0x0802d820

0800d8c0 <_ZN8touchgfx12NoTransitionD0Ev>:
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f7ff ffe7 	bl	800d89c <_ZN8touchgfx12NoTransitionD1Ev>
 800d8ce:	210c      	movs	r1, #12
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f01c fe16 	bl	802a502 <_ZdlPvj>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3708      	adds	r7, #8
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	4a05      	ldr	r2, [pc, #20]	@ (800d900 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	601a      	str	r2, [r3, #0]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7fe ff61 	bl	800c7b8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3708      	adds	r7, #8
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	0802d898 	.word	0x0802d898

0800d904 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f7ff ffe7 	bl	800d8e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d912:	2110      	movs	r1, #16
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f01c fdf4 	bl	802a502 <_ZdlPvj>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	4618      	mov	r0, r3
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
     * Handles the tick event when transitioning. It moves the contents of the Screen's
     * container and a SnapshotWidget with a snapshot of the previous Screen. The direction
     * of the transition determines the direction the contents of the container and the
     * SnapshotWidget moves.
     */
    virtual void handleTickEvent()
 800d924:	b5b0      	push	{r4, r5, r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	4618      	mov	r0, r3
 800d930:	f7fe ffc0 	bl	800c8b4 <_ZN8touchgfx10Transition15handleTickEventEv>

        // Calculate new position or stop animation
        animationCounter++;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800d93a:	3301      	adds	r3, #1
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        if (animationCounter > animationSteps)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d950:	429a      	cmp	r2, r3
 800d952:	d907      	bls.n	800d964 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x40>
        {
            // Final step: stop the animation
            done = true;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            return;
 800d962:	e05f      	b.n	800da24 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x100>
        }

        // Calculate value in [0;targetValue]
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800d96a:	4618      	mov	r0, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	@ 0x3a
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d978:	2100      	movs	r1, #0
 800d97a:	f00d f85f 	bl	801aa3c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800d97e:	4603      	mov	r3, r0
 800d980:	81fb      	strh	r3, [r7, #14]

        // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
        if ((calculatedValue % 2) != 0)
 800d982:	89fb      	ldrh	r3, [r7, #14]
 800d984:	f003 0301 	and.w	r3, r3, #1
 800d988:	b29b      	uxth	r3, r3
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00b      	beq.n	800d9a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x82>
        {
            // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800d98e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d992:	2b00      	cmp	r3, #0
 800d994:	dd01      	ble.n	800d99a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x76>
 800d996:	2201      	movs	r2, #1
 800d998:	e001      	b.n	800d99e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x7a>
 800d99a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d99e:	89fb      	ldrh	r3, [r7, #14]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	81fb      	strh	r3, [r7, #14]
        // Move snapshot
        switch (templateDirection)
        {
        case EAST:
        case WEST:
            relativeValue = calculatedValue - snapshot.getX();
 800d9a6:	89fc      	ldrh	r4, [r7, #14]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	330c      	adds	r3, #12
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7fe fd28 	bl	800c402 <_ZNK8touchgfx8Drawable4getXEv>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	1ae3      	subs	r3, r4, r3
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	b21a      	sxth	r2, r3
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	879a      	strh	r2, [r3, #60]	@ 0x3c
            break;
 800d9c0:	bf00      	nop
            relativeValue = calculatedValue - snapshot.getY();
            break;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	685a      	ldr	r2, [r3, #4]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	331c      	adds	r3, #28
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4610      	mov	r0, r2
 800d9d2:	4798      	blx	r3
 800d9d4:	60b8      	str	r0, [r7, #8]
        while (d)
 800d9d6:	e018      	b.n	800da0a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xe6>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() + relativeValue);
 800d9d8:	68bd      	ldr	r5, [r7, #8]
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	3330      	adds	r3, #48	@ 0x30
 800d9e0:	681c      	ldr	r4, [r3, #0]
 800d9e2:	68b8      	ldr	r0, [r7, #8]
 800d9e4:	f7fe fd0d 	bl	800c402 <_ZNK8touchgfx8Drawable4getXEv>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	b29a      	uxth	r2, r3
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	4413      	add	r3, r2
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	b21b      	sxth	r3, r3
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	47a0      	blx	r4
                break;
 800da00:	bf00      	nop
            case NORTH:
            case SOUTH:
                d->setY(d->getY() + relativeValue);
                break;
            }
            d = d->getNextSibling();
 800da02:	68b8      	ldr	r0, [r7, #8]
 800da04:	f7fe fcc5 	bl	800c392 <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800da08:	60b8      	str	r0, [r7, #8]
        while (d)
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d1e3      	bne.n	800d9d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb4>
        }

        // Entire screen has changed, redraw
        screenContainer->invalidate();
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	461a      	mov	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	3314      	adds	r3, #20
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4610      	mov	r0, r2
 800da22:	4798      	blx	r3
    }
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800da2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:

    virtual void tearDown()
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
    {
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800da34:	4b0b      	ldr	r3, [pc, #44]	@ (800da64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x38>)
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d00e      	beq.n	800da5a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00a      	beq.n	800da5a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
        {
            screenContainer->remove(snapshot);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6858      	ldr	r0, [r3, #4]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	3364      	adds	r3, #100	@ 0x64
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	320c      	adds	r2, #12
 800da56:	4611      	mov	r1, r2
 800da58:	4798      	blx	r3
        }
    }
 800da5a:	bf00      	nop
 800da5c:	3708      	adds	r7, #8
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	200126df 	.word	0x200126df

0800da68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:

    virtual void init()
 800da68:	b5b0      	push	{r4, r5, r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4618      	mov	r0, r3
 800da74:	f7fe ff32 	bl	800c8dc <_ZN8touchgfx10Transition4initEv>

        if (done)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	7a1b      	ldrb	r3, [r3, #8]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d132      	bne.n	800dae6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x7e>
        {
            return;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	685a      	ldr	r2, [r3, #4]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	331c      	adds	r3, #28
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4610      	mov	r0, r2
 800da90:	4798      	blx	r3
 800da92:	60f8      	str	r0, [r7, #12]
        while (d)
 800da94:	e018      	b.n	800dac8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x60>
        {
            switch (templateDirection)
            {
            case EAST:
            case WEST:
                d->setX(d->getX() - targetValue);
 800da96:	68fd      	ldr	r5, [r7, #12]
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	3330      	adds	r3, #48	@ 0x30
 800da9e:	681c      	ldr	r4, [r3, #0]
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f7fe fcae 	bl	800c402 <_ZNK8touchgfx8Drawable4getXEv>
 800daa6:	4603      	mov	r3, r0
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	b21b      	sxth	r3, r3
 800dab8:	4619      	mov	r1, r3
 800daba:	4628      	mov	r0, r5
 800dabc:	47a0      	blx	r4
                break;
 800dabe:	bf00      	nop
            case SOUTH:
                d->setY(d->getY() - targetValue);
                break;
            }

            d = d->getNextSibling();
 800dac0:	68f8      	ldr	r0, [r7, #12]
 800dac2:	f7fe fc66 	bl	800c392 <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800dac6:	60f8      	str	r0, [r7, #12]
        while (d)
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d1e3      	bne.n	800da96 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x2e>
        }

        screenContainer->add(snapshot);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6858      	ldr	r0, [r3, #4]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	3360      	adds	r3, #96	@ 0x60
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	320c      	adds	r2, #12
 800dae0:	4611      	mov	r1, r2
 800dae2:	4798      	blx	r3
 800dae4:	e000      	b.n	800dae8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x80>
            return;
 800dae6:	bf00      	nop
    }
 800dae8:	3710      	adds	r7, #16
 800daea:	46bd      	mov	sp, r7
 800daec:	bdb0      	pop	{r4, r5, r7, pc}

0800daee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800daee:	b5b0      	push	{r4, r5, r7, lr}
 800daf0:	b084      	sub	sp, #16
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7fe fedb 	bl	800c8b4 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800db04:	3301      	adds	r3, #1
 800db06:	b2da      	uxtb	r2, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        if (animationCounter > animationSteps)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d907      	bls.n	800db2e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x40>
            done = true;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2201      	movs	r2, #1
 800db22:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2200      	movs	r2, #0
 800db28:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            return;
 800db2c:	e05f      	b.n	800dbee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x100>
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800db34:	4618      	mov	r0, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	@ 0x3a
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800db42:	2100      	movs	r1, #0
 800db44:	f00c ff7a 	bl	801aa3c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800db48:	4603      	mov	r3, r0
 800db4a:	81fb      	strh	r3, [r7, #14]
        if ((calculatedValue % 2) != 0)
 800db4c:	89fb      	ldrh	r3, [r7, #14]
 800db4e:	f003 0301 	and.w	r3, r3, #1
 800db52:	b29b      	uxth	r3, r3
 800db54:	2b00      	cmp	r3, #0
 800db56:	d00b      	beq.n	800db70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x82>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800db58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	dd01      	ble.n	800db64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x76>
 800db60:	2201      	movs	r2, #1
 800db62:	e001      	b.n	800db68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x7a>
 800db64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db68:	89fb      	ldrh	r3, [r7, #14]
 800db6a:	4413      	add	r3, r2
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	81fb      	strh	r3, [r7, #14]
            relativeValue = calculatedValue - snapshot.getX();
 800db70:	89fc      	ldrh	r4, [r7, #14]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	330c      	adds	r3, #12
 800db76:	4618      	mov	r0, r3
 800db78:	f7fe fc43 	bl	800c402 <_ZNK8touchgfx8Drawable4getXEv>
 800db7c:	4603      	mov	r3, r0
 800db7e:	b29b      	uxth	r3, r3
 800db80:	1ae3      	subs	r3, r4, r3
 800db82:	b29b      	uxth	r3, r3
 800db84:	b21a      	sxth	r2, r3
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	879a      	strh	r2, [r3, #60]	@ 0x3c
            break;
 800db8a:	bf00      	nop
        Drawable* d = screenContainer->getFirstChild();
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	685a      	ldr	r2, [r3, #4]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	331c      	adds	r3, #28
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4610      	mov	r0, r2
 800db9c:	4798      	blx	r3
 800db9e:	60b8      	str	r0, [r7, #8]
        while (d)
 800dba0:	e018      	b.n	800dbd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xe6>
                d->setX(d->getX() + relativeValue);
 800dba2:	68bd      	ldr	r5, [r7, #8]
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	3330      	adds	r3, #48	@ 0x30
 800dbaa:	681c      	ldr	r4, [r3, #0]
 800dbac:	68b8      	ldr	r0, [r7, #8]
 800dbae:	f7fe fc28 	bl	800c402 <_ZNK8touchgfx8Drawable4getXEv>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	b29a      	uxth	r2, r3
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	4413      	add	r3, r2
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	b21b      	sxth	r3, r3
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	47a0      	blx	r4
                break;
 800dbca:	bf00      	nop
            d = d->getNextSibling();
 800dbcc:	68b8      	ldr	r0, [r7, #8]
 800dbce:	f7fe fbe0 	bl	800c392 <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800dbd2:	60b8      	str	r0, [r7, #8]
        while (d)
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1e3      	bne.n	800dba2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb4>
        screenContainer->invalidate();
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	461a      	mov	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	3314      	adds	r3, #20
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4610      	mov	r0, r2
 800dbec:	4798      	blx	r3
    }
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bdb0      	pop	{r4, r5, r7, pc}

0800dbf4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800dbfc:	4b0b      	ldr	r3, [pc, #44]	@ (800dc2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d00e      	beq.n	800dc22 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00a      	beq.n	800dc22 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6858      	ldr	r0, [r3, #4]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	3364      	adds	r3, #100	@ 0x64
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	320c      	adds	r2, #12
 800dc1e:	4611      	mov	r1, r2
 800dc20:	4798      	blx	r3
    }
 800dc22:	bf00      	nop
 800dc24:	3708      	adds	r7, #8
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	200126df 	.word	0x200126df

0800dc30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800dc30:	b5b0      	push	{r4, r5, r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
        Transition::init();
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fe fe4e 	bl	800c8dc <_ZN8touchgfx10Transition4initEv>
        if (done)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	7a1b      	ldrb	r3, [r3, #8]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d132      	bne.n	800dcae <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x7e>
        Drawable* d = screenContainer->getFirstChild();
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	685a      	ldr	r2, [r3, #4]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	331c      	adds	r3, #28
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4610      	mov	r0, r2
 800dc58:	4798      	blx	r3
 800dc5a:	60f8      	str	r0, [r7, #12]
        while (d)
 800dc5c:	e018      	b.n	800dc90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x60>
                d->setX(d->getX() - targetValue);
 800dc5e:	68fd      	ldr	r5, [r7, #12]
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	3330      	adds	r3, #48	@ 0x30
 800dc66:	681c      	ldr	r4, [r3, #0]
 800dc68:	68f8      	ldr	r0, [r7, #12]
 800dc6a:	f7fe fbca 	bl	800c402 <_ZNK8touchgfx8Drawable4getXEv>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	b29a      	uxth	r2, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	@ 0x3a
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	1ad3      	subs	r3, r2, r3
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	b21b      	sxth	r3, r3
 800dc80:	4619      	mov	r1, r3
 800dc82:	4628      	mov	r0, r5
 800dc84:	47a0      	blx	r4
                break;
 800dc86:	bf00      	nop
            d = d->getNextSibling();
 800dc88:	68f8      	ldr	r0, [r7, #12]
 800dc8a:	f7fe fb82 	bl	800c392 <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800dc8e:	60f8      	str	r0, [r7, #12]
        while (d)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d1e3      	bne.n	800dc5e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x2e>
        screenContainer->add(snapshot);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6858      	ldr	r0, [r3, #4]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	3360      	adds	r3, #96	@ 0x60
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	320c      	adds	r2, #12
 800dca8:	4611      	mov	r1, r2
 800dcaa:	4798      	blx	r3
 800dcac:	e000      	b.n	800dcb0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x80>
            return;
 800dcae:	bf00      	nop
    }
 800dcb0:	3710      	adds	r7, #16
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bdb0      	pop	{r4, r5, r7, pc}

0800dcb6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b082      	sub	sp, #8
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	68d2      	ldr	r2, [r2, #12]
 800dcc6:	1052      	asrs	r2, r2, #1
 800dcc8:	1899      	adds	r1, r3, r2
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	68db      	ldr	r3, [r3, #12]
 800dcce:	f003 0301 	and.w	r3, r3, #1
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d102      	bne.n	800dcdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	e00a      	b.n	800dcf2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	68d2      	ldr	r2, [r2, #12]
 800dce4:	1052      	asrs	r2, r2, #1
 800dce6:	4413      	add	r3, r2
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	6892      	ldr	r2, [r2, #8]
 800dcee:	4413      	add	r3, r2
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4608      	mov	r0, r1
 800dcf4:	4798      	blx	r3
    }
 800dcf6:	bf00      	nop
 800dcf8:	3708      	adds	r7, #8
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}

0800dcfe <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800dcfe:	b480      	push	{r7}
 800dd00:	b083      	sub	sp, #12
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d010      	beq.n	800dd30 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d107      	bne.n	800dd26 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	f003 0301 	and.w	r3, r3, #1
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d101      	bne.n	800dd26 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800dd22:	2301      	movs	r3, #1
 800dd24:	e000      	b.n	800dd28 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800dd26:	2300      	movs	r3, #0
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d001      	beq.n	800dd30 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e000      	b.n	800dd32 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800dd30:	2300      	movs	r3, #0
    }
 800dd32:	4618      	mov	r0, r3
 800dd34:	370c      	adds	r7, #12
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr

0800dd3e <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800dd3e:	b480      	push	{r7}
 800dd40:	b083      	sub	sp, #12
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
 800dd46:	6039      	str	r1, [r7, #0]
        : color(col)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	683a      	ldr	r2, [r7, #0]
 800dd4c:	601a      	str	r2, [r3, #0]
    {
    }
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4618      	mov	r0, r3
 800dd52:	370c      	adds	r7, #12
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr

0800dd5c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800dd5c:	b480      	push	{r7}
 800dd5e:	b083      	sub	sp, #12
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2200      	movs	r2, #0
 800dd68:	801a      	strh	r2, [r3, #0]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	805a      	strh	r2, [r3, #2]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2200      	movs	r2, #0
 800dd74:	809a      	strh	r2, [r3, #4]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	80da      	strh	r2, [r3, #6]
    {
    }
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	370c      	adds	r7, #12
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr

0800dd8a <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800dd8a:	b480      	push	{r7}
 800dd8c:	b083      	sub	sp, #12
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
 800dd92:	460b      	mov	r3, r1
 800dd94:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	887a      	ldrh	r2, [r7, #2]
 800dd9a:	801a      	strh	r2, [r3, #0]
    {
    }
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	370c      	adds	r7, #12
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr
	...

0800ddac <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
          visible(true)
 800ddb4:	4a14      	ldr	r2, [pc, #80]	@ (800de08 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	601a      	str	r2, [r3, #0]
        : rect(),
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	3304      	adds	r3, #4
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7ff ffcc 	bl	800dd5c <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	330c      	adds	r3, #12
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7ff ffc7 	bl	800dd5c <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2200      	movs	r2, #0
 800ddde:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2200      	movs	r2, #0
 800dde4:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4618      	mov	r0, r3
 800de00:	3708      	adds	r7, #8
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	0802e9dc 	.word	0x0802e9dc

0800de0c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
    {
 800de14:	4a06      	ldr	r2, [pc, #24]	@ (800de30 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	601a      	str	r2, [r3, #0]
    }
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	3304      	adds	r3, #4
 800de1e:	4618      	mov	r0, r3
 800de20:	f000 fba8 	bl	800e574 <_ZN8touchgfx9ContainerD1Ev>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	4618      	mov	r0, r3
 800de28:	3708      	adds	r7, #8
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	0802eafc 	.word	0x0802eafc

0800de34 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
    }
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f7ff ffe5 	bl	800de0c <_ZN8touchgfx6ScreenD1Ev>
 800de42:	213c      	movs	r1, #60	@ 0x3c
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f01c fb5c 	bl	802a502 <_ZdlPvj>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	4618      	mov	r0, r3
 800de4e:	3708      	adds	r7, #8
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
    {
    }
 800de5c:	bf00      	nop
 800de5e:	370c      	adds	r7, #12
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
    {
    }
 800de70:	bf00      	nop
 800de72:	370c      	adds	r7, #12
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr

0800de7c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
    {
    }
 800de84:	bf00      	nop
 800de86:	370c      	adds	r7, #12
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr

0800de90 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800de90:	b480      	push	{r7}
 800de92:	b083      	sub	sp, #12
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
    {
    }
 800de98:	bf00      	nop
 800de9a:	370c      	adds	r7, #12
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr

0800dea4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	460b      	mov	r3, r1
 800deae:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800deb0:	bf00      	nop
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	3304      	adds	r3, #4
 800deca:	6839      	ldr	r1, [r7, #0]
 800decc:	4618      	mov	r0, r3
 800dece:	f004 fe61 	bl	8012b94 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800ded2:	bf00      	nop
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
	...

0800dedc <_ZN8touchgfx6WidgetC1Ev>:
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7ff ff60 	bl	800ddac <_ZN8touchgfx8DrawableC1Ev>
 800deec:	4a03      	ldr	r2, [pc, #12]	@ (800defc <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	601a      	str	r2, [r3, #0]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	4618      	mov	r0, r3
 800def6:	3708      	adds	r7, #8
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	0802d940 	.word	0x0802d940

0800df00 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	4618      	mov	r0, r3
 800df0c:	2326      	movs	r3, #38	@ 0x26
 800df0e:	461a      	mov	r2, r3
 800df10:	2100      	movs	r1, #0
 800df12:	f01d fc64 	bl	802b7de <memset>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	4618      	mov	r0, r3
 800df1a:	f7ff ffdf 	bl	800dedc <_ZN8touchgfx6WidgetC1Ev>
 800df1e:	4a09      	ldr	r2, [pc, #36]	@ (800df44 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	601a      	str	r2, [r3, #0]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	22ff      	movs	r2, #255	@ 0xff
 800df28:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	3328      	adds	r3, #40	@ 0x28
 800df30:	2100      	movs	r1, #0
 800df32:	4618      	mov	r0, r3
 800df34:	f7ff ff03 	bl	800dd3e <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	4618      	mov	r0, r3
 800df3c:	3708      	adds	r7, #8
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	0802e73c 	.word	0x0802e73c

0800df48 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	683a      	ldr	r2, [r7, #0]
 800df56:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800df58:	bf00      	nop
 800df5a:	370c      	adds	r7, #12
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr

0800df64 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	683a      	ldr	r2, [r7, #0]
 800df72:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800df74:	bf00      	nop
 800df76:	370c      	adds	r7, #12
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	4a05      	ldr	r2, [pc, #20]	@ (800dfa0 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	601a      	str	r2, [r3, #0]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	4618      	mov	r0, r3
 800df92:	f7fe fdcb 	bl	800cb2c <_ZN8touchgfx6WidgetD1Ev>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	4618      	mov	r0, r3
 800df9a:	3708      	adds	r7, #8
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	0802e5cc 	.word	0x0802e5cc

0800dfa4 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7ff ffe7 	bl	800df80 <_ZN8touchgfx14AbstractButtonD1Ev>
 800dfb2:	2130      	movs	r1, #48	@ 0x30
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f01c faa4 	bl	802a502 <_ZdlPvj>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3708      	adds	r7, #8
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
 800dfc4:	b480      	push	{r7}
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	460b      	mov	r3, r1
 800dfce:	807b      	strh	r3, [r7, #2]
    {
        iconX = x;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	887a      	ldrh	r2, [r7, #2]
 800dfd4:	871a      	strh	r2, [r3, #56]	@ 0x38
    }
 800dfd6:	bf00      	nop
 800dfd8:	370c      	adds	r7, #12
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr

0800dfe2 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
 800dfe2:	b480      	push	{r7}
 800dfe4:	b083      	sub	sp, #12
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	460b      	mov	r3, r1
 800dfec:	807b      	strh	r3, [r7, #2]
    {
        iconY = y;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	887a      	ldrh	r2, [r7, #2]
 800dff2:	875a      	strh	r2, [r3, #58]	@ 0x3a
    }
 800dff4:	bf00      	nop
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
     *           allowed.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The values set are overwritten on a subsequent call to setBitmaps.
     */
    void setIconXY(int16_t x, int16_t y)
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	460b      	mov	r3, r1
 800e00a:	807b      	strh	r3, [r7, #2]
 800e00c:	4613      	mov	r3, r2
 800e00e:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 800e010:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e014:	4619      	mov	r1, r3
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f7ff ffd4 	bl	800dfc4 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 800e01c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e020:	4619      	mov	r1, r3
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f7ff ffdd 	bl	800dfe2 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 800e028:	bf00      	nop
 800e02a:	3708      	adds	r7, #8
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <_ZN15Screen1ViewBase14toggle_curtainEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void toggle_curtain()
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 800e038:	bf00      	nop
 800e03a:	370c      	adds	r7, #12
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <_ZN15Screen1ViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800e04c:	f00a fd12 	bl	8018a74 <_ZN8touchgfx11Application11getInstanceEv>
 800e050:	4603      	mov	r3, r0
    }
 800e052:	4618      	mov	r0, r3
 800e054:	3708      	adds	r7, #8
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
	...

0800e05c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	4a05      	ldr	r2, [pc, #20]	@ (800e07c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	601a      	str	r2, [r3, #0]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7ff fecd 	bl	800de0c <_ZN8touchgfx6ScreenD1Ev>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	4618      	mov	r0, r3
 800e076:	3708      	adds	r7, #8
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	0802da20 	.word	0x0802da20

0800e080 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f7ff ffe7 	bl	800e05c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800e08e:	2140      	movs	r1, #64	@ 0x40
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f01c fa36 	bl	802a502 <_ZdlPvj>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4618      	mov	r0, r3
 800e09a:	3708      	adds	r7, #8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase() :
 800e0a0:	b590      	push	{r4, r7, lr}
 800e0a2:	b097      	sub	sp, #92	@ 0x5c
 800e0a4:	af02      	add	r7, sp, #8
 800e0a6:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f000 f9da 	bl	800e464 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800e0b0:	4ab3      	ldr	r2, [pc, #716]	@ (800e380 <_ZN15Screen1ViewBaseC1Ev+0x2e0>)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	601a      	str	r2, [r3, #0]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	3340      	adds	r3, #64	@ 0x40
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7ff ff20 	bl	800df00 <_ZN8touchgfx3BoxC1Ev>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	336c      	adds	r3, #108	@ 0x6c
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7ff ff1b 	bl	800df00 <_ZN8touchgfx3BoxC1Ev>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	3398      	adds	r3, #152	@ 0x98
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f008 f934 	bl	801633c <_ZN8touchgfx14ButtonWithIconC1Ev>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	33d4      	adds	r3, #212	@ 0xd4
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f008 f92f 	bl	801633c <_ZN8touchgfx14ButtonWithIconC1Ev>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f008 f929 	bl	801633c <_ZN8touchgfx14ButtonWithIconC1Ev>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f503 70a6 	add.w	r0, r3, #332	@ 0x14c
 800e0f0:	4ba4      	ldr	r3, [pc, #656]	@ (800e384 <_ZN15Screen1ViewBaseC1Ev+0x2e4>)
 800e0f2:	60bb      	str	r3, [r7, #8]
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	60fb      	str	r3, [r7, #12]
 800e0f8:	f107 0308 	add.w	r3, r7, #8
 800e0fc:	cb0c      	ldmia	r3, {r2, r3}
 800e0fe:	6879      	ldr	r1, [r7, #4]
 800e100:	f000 f9d6 	bl	800e4b0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 240, 320);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800e10a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800e10e:	9300      	str	r3, [sp, #0]
 800e110:	23f0      	movs	r3, #240	@ 0xf0
 800e112:	2200      	movs	r2, #0
 800e114:	2100      	movs	r1, #0
 800e116:	f7fe f953 	bl	800c3c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800e120:	2300      	movs	r3, #0
 800e122:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 800e126:	2300      	movs	r3, #0
 800e128:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800e12c:	2300      	movs	r3, #0
 800e12e:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800e132:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800e136:	041a      	lsls	r2, r3, #16
 800e138:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800e13c:	021b      	lsls	r3, r3, #8
 800e13e:	431a      	orrs	r2, r3
 800e140:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800e144:	4313      	orrs	r3, r2
 800e146:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800e14a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800e14e:	4611      	mov	r1, r2
 800e150:	4618      	mov	r0, r3
 800e152:	f7ff fdf4 	bl	800dd3e <_ZN8touchgfx9colortypeC1Em>
 800e156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e158:	4619      	mov	r1, r3
 800e15a:	4620      	mov	r0, r4
 800e15c:	f7ff fef4 	bl	800df48 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	3340      	adds	r3, #64	@ 0x40
 800e166:	4619      	mov	r1, r3
 800e168:	4610      	mov	r0, r2
 800e16a:	f7ff fea7 	bl	800debc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 240, 320);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800e174:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	23f0      	movs	r3, #240	@ 0xf0
 800e17c:	2200      	movs	r2, #0
 800e17e:	2100      	movs	r1, #0
 800e180:	f7fe f91e 	bl	800c3c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(58, 45, 138));
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800e18a:	233a      	movs	r3, #58	@ 0x3a
 800e18c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e190:	232d      	movs	r3, #45	@ 0x2d
 800e192:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800e196:	238a      	movs	r3, #138	@ 0x8a
 800e198:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800e19c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e1a0:	041a      	lsls	r2, r3, #16
 800e1a2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800e1a6:	021b      	lsls	r3, r3, #8
 800e1a8:	431a      	orrs	r2, r3
 800e1aa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800e1b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800e1b8:	4611      	mov	r1, r2
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7ff fdbf 	bl	800dd3e <_ZN8touchgfx9colortypeC1Em>
 800e1c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f7ff febf 	bl	800df48 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	336c      	adds	r3, #108	@ 0x6c
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	f7ff fe72 	bl	800debc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Temperature.setXY(33, 154);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	3398      	adds	r3, #152	@ 0x98
 800e1dc:	229a      	movs	r2, #154	@ 0x9a
 800e1de:	2121      	movs	r1, #33	@ 0x21
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fe f939 	bl	800c458 <_ZN8touchgfx8Drawable5setXYEss>
    Temperature.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_INVERT_COLORS_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800e1ec:	f107 0310 	add.w	r3, r7, #16
 800e1f0:	2100      	movs	r1, #0
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7ff fdc9 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800e1f8:	f107 0314 	add.w	r3, r7, #20
 800e1fc:	2100      	movs	r1, #0
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7ff fdc3 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800e204:	f107 0318 	add.w	r3, r7, #24
 800e208:	2103      	movs	r1, #3
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7ff fdbd 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800e210:	f107 031c 	add.w	r3, r7, #28
 800e214:	2102      	movs	r1, #2
 800e216:	4618      	mov	r0, r3
 800e218:	f7ff fdb7 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800e21c:	f107 0018 	add.w	r0, r7, #24
 800e220:	f107 0214 	add.w	r2, r7, #20
 800e224:	f107 0110 	add.w	r1, r7, #16
 800e228:	f107 031c 	add.w	r3, r7, #28
 800e22c:	9300      	str	r3, [sp, #0]
 800e22e:	4603      	mov	r3, r0
 800e230:	4620      	mov	r0, r4
 800e232:	f007 ffee 	bl	8016212 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Temperature.setIconXY(63, 0);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	3398      	adds	r3, #152	@ 0x98
 800e23a:	2200      	movs	r2, #0
 800e23c:	213f      	movs	r1, #63	@ 0x3f
 800e23e:	4618      	mov	r0, r3
 800e240:	f7ff fede 	bl	800e000 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Temperature.setAction(buttonCallback);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800e250:	4619      	mov	r1, r3
 800e252:	4610      	mov	r0, r2
 800e254:	f7ff fe86 	bl	800df64 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(Temperature);
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	3398      	adds	r3, #152	@ 0x98
 800e25e:	4619      	mov	r1, r3
 800e260:	4610      	mov	r0, r2
 800e262:	f7ff fe2b 	bl	800debc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Power.setXY(33, 64);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	33d4      	adds	r3, #212	@ 0xd4
 800e26a:	2240      	movs	r2, #64	@ 0x40
 800e26c:	2121      	movs	r1, #33	@ 0x21
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fe f8f2 	bl	800c458 <_ZN8touchgfx8Drawable5setXYEss>
    Power.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_POWER_SETTINGS_NEW_40_40_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_POWER_SETTINGS_NEW_40_40_E8F6FB_SVG_ID));
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f103 04d4 	add.w	r4, r3, #212	@ 0xd4
 800e27a:	f107 0320 	add.w	r3, r7, #32
 800e27e:	2100      	movs	r1, #0
 800e280:	4618      	mov	r0, r3
 800e282:	f7ff fd82 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800e286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e28a:	2101      	movs	r1, #1
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7ff fd7c 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800e292:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e296:	2104      	movs	r1, #4
 800e298:	4618      	mov	r0, r3
 800e29a:	f7ff fd76 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800e29e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e2a2:	2104      	movs	r1, #4
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7ff fd70 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800e2aa:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800e2ae:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800e2b2:	f107 0120 	add.w	r1, r7, #32
 800e2b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e2ba:	9300      	str	r3, [sp, #0]
 800e2bc:	4603      	mov	r3, r0
 800e2be:	4620      	mov	r0, r4
 800e2c0:	f007 ffa7 	bl	8016212 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Power.setIconXY(68, 7);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	33d4      	adds	r3, #212	@ 0xd4
 800e2c8:	2207      	movs	r2, #7
 800e2ca:	2144      	movs	r1, #68	@ 0x44
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7ff fe97 	bl	800e000 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    add(Power);
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	33d4      	adds	r3, #212	@ 0xd4
 800e2d8:	4619      	mov	r1, r3
 800e2da:	4610      	mov	r0, r2
 800e2dc:	f7ff fdee 	bl	800debc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Curtain.setXY(33, 240);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800e2e6:	22f0      	movs	r2, #240	@ 0xf0
 800e2e8:	2121      	movs	r1, #33	@ 0x21
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7fe f8b4 	bl	800c458 <_ZN8touchgfx8Drawable5setXYEss>
    Curtain.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_THUMB_UP_OFF_ALT_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 800e2f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800e2fa:	2100      	movs	r1, #0
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7ff fd44 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800e302:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e306:	2100      	movs	r1, #0
 800e308:	4618      	mov	r0, r3
 800e30a:	f7ff fd3e 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800e30e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800e312:	2106      	movs	r1, #6
 800e314:	4618      	mov	r0, r3
 800e316:	f7ff fd38 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800e31a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e31e:	2102      	movs	r1, #2
 800e320:	4618      	mov	r0, r3
 800e322:	f7ff fd32 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800e326:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800e32a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e32e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800e332:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e336:	9300      	str	r3, [sp, #0]
 800e338:	4603      	mov	r3, r0
 800e33a:	4620      	mov	r0, r4
 800e33c:	f007 ff69 	bl	8016212 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    Curtain.setIconXY(62, 0);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800e346:	2200      	movs	r2, #0
 800e348:	213e      	movs	r1, #62	@ 0x3e
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7ff fe58 	bl	800e000 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    Curtain.setAction(buttonCallback);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800e35c:	4619      	mov	r1, r3
 800e35e:	4610      	mov	r0, r2
 800e360:	f7ff fe00 	bl	800df64 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(Curtain);
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800e36c:	4619      	mov	r1, r3
 800e36e:	4610      	mov	r0, r2
 800e370:	f7ff fda4 	bl	800debc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	4618      	mov	r0, r3
 800e378:	3754      	adds	r7, #84	@ 0x54
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd90      	pop	{r4, r7, pc}
 800e37e:	bf00      	nop
 800e380:	0802d9d0 	.word	0x0802d9d0
 800e384:	0800e423 	.word	0x0800e423

0800e388 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	4a15      	ldr	r2, [pc, #84]	@ (800e3e8 <_ZN15Screen1ViewBaseD1Ev+0x60>)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	601a      	str	r2, [r3, #0]
{

}
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800e39c:	4618      	mov	r0, r3
 800e39e:	f000 f8c7 	bl	800e530 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f000 f949 	bl	800e640 <_ZN8touchgfx14ButtonWithIconD1Ev>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	33d4      	adds	r3, #212	@ 0xd4
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f000 f944 	bl	800e640 <_ZN8touchgfx14ButtonWithIconD1Ev>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	3398      	adds	r3, #152	@ 0x98
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f000 f93f 	bl	800e640 <_ZN8touchgfx14ButtonWithIconD1Ev>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	336c      	adds	r3, #108	@ 0x6c
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f000 f8f6 	bl	800e5b8 <_ZN8touchgfx3BoxD1Ev>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	3340      	adds	r3, #64	@ 0x40
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f000 f8f1 	bl	800e5b8 <_ZN8touchgfx3BoxD1Ev>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7ff fe3f 	bl	800e05c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	0802d9d0 	.word	0x0802d9d0

0800e3ec <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
}
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f7ff ffc7 	bl	800e388 <_ZN15Screen1ViewBaseD1Ev>
 800e3fa:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f01c f87f 	bl	802a502 <_ZdlPvj>
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	4618      	mov	r0, r3
 800e408:	3708      	adds	r7, #8
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}

0800e40e <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800e40e:	b480      	push	{r7}
 800e410:	b083      	sub	sp, #12
 800e412:	af00      	add	r7, sp, #0
 800e414:	6078      	str	r0, [r7, #4]

}
 800e416:	bf00      	nop
 800e418:	370c      	adds	r7, #12
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr

0800e422 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800e422:	b580      	push	{r7, lr}
 800e424:	b082      	sub	sp, #8
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	6039      	str	r1, [r7, #0]
    if (&src == &Temperature)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	3398      	adds	r3, #152	@ 0x98
 800e430:	683a      	ldr	r2, [r7, #0]
 800e432:	429a      	cmp	r2, r3
 800e434:	d106      	bne.n	800e444 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //go_temp
        //When Temperature clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f7ff fe04 	bl	800e044 <_ZN15Screen1ViewBase11applicationEv>
 800e43c:	4603      	mov	r3, r0
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fe fc84 	bl	800cd4c <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
    }
    if (&src == &Curtain)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800e44a:	683a      	ldr	r2, [r7, #0]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d105      	bne.n	800e45c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
    {
        //toggle_curtain
        //When Curtain clicked call virtual function
        //Call toggle_curtain
        toggle_curtain();
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	332c      	adds	r3, #44	@ 0x2c
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	4798      	blx	r3
    }
}
 800e45c:	bf00      	nop
 800e45e:	3708      	adds	r7, #8
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	4618      	mov	r0, r3
 800e470:	f00c f932 	bl	801a6d8 <_ZN8touchgfx6ScreenC1Ev>
 800e474:	4a05      	ldr	r2, [pc, #20]	@ (800e48c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	601a      	str	r2, [r3, #0]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2200      	movs	r2, #0
 800e47e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4618      	mov	r0, r3
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	0802da20 	.word	0x0802da20

0800e490 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	4a04      	ldr	r2, [pc, #16]	@ (800e4ac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	601a      	str	r2, [r3, #0]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr
 800e4ac:	0802da54 	.word	0x0802da54

0800e4b0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	60b9      	str	r1, [r7, #8]
 800e4ba:	4639      	mov	r1, r7
 800e4bc:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7ff ffe4 	bl	800e490 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800e4c8:	4a08      	ldr	r2, [pc, #32]	@ (800e4ec <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	601a      	str	r2, [r3, #0]
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	68ba      	ldr	r2, [r7, #8]
 800e4d2:	605a      	str	r2, [r3, #4]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	3308      	adds	r3, #8
 800e4d8:	463a      	mov	r2, r7
 800e4da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e4de:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	0802da08 	.word	0x0802da08

0800e4f0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
    }
 800e4f8:	4a04      	ldr	r2, [pc, #16]	@ (800e50c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	601a      	str	r2, [r3, #0]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4618      	mov	r0, r3
 800e502:	370c      	adds	r7, #12
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr
 800e50c:	0802da54 	.word	0x0802da54

0800e510 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
    }
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f7ff ffe9 	bl	800e4f0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800e51e:	2104      	movs	r1, #4
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f01b ffee 	bl	802a502 <_ZdlPvj>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	4618      	mov	r0, r3
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	4a05      	ldr	r2, [pc, #20]	@ (800e550 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	601a      	str	r2, [r3, #0]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4618      	mov	r0, r3
 800e542:	f7ff ffd5 	bl	800e4f0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	4618      	mov	r0, r3
 800e54a:	3708      	adds	r7, #8
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	0802da08 	.word	0x0802da08

0800e554 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f7ff ffe7 	bl	800e530 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e562:	2110      	movs	r1, #16
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f01b ffcc 	bl	802a502 <_ZdlPvj>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4618      	mov	r0, r3
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	4a05      	ldr	r2, [pc, #20]	@ (800e594 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	601a      	str	r2, [r3, #0]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	4618      	mov	r0, r3
 800e586:	f7fd fed1 	bl	800c32c <_ZN8touchgfx8DrawableD1Ev>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	4618      	mov	r0, r3
 800e58e:	3708      	adds	r7, #8
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}
 800e594:	0802e2b4 	.word	0x0802e2b4

0800e598 <_ZN8touchgfx9ContainerD0Ev>:
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f7ff ffe7 	bl	800e574 <_ZN8touchgfx9ContainerD1Ev>
 800e5a6:	212c      	movs	r1, #44	@ 0x2c
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f01b ffaa 	bl	802a502 <_ZdlPvj>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	4a05      	ldr	r2, [pc, #20]	@ (800e5d8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	601a      	str	r2, [r3, #0]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7fe faaf 	bl	800cb2c <_ZN8touchgfx6WidgetD1Ev>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	0802e73c 	.word	0x0802e73c

0800e5dc <_ZN8touchgfx3BoxD0Ev>:
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f7ff ffe7 	bl	800e5b8 <_ZN8touchgfx3BoxD1Ev>
 800e5ea:	212c      	movs	r1, #44	@ 0x2c
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f01b ff88 	bl	802a502 <_ZdlPvj>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3708      	adds	r7, #8
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	4a05      	ldr	r2, [pc, #20]	@ (800e61c <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	601a      	str	r2, [r3, #0]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7ff fcb7 	bl	800df80 <_ZN8touchgfx14AbstractButtonD1Ev>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	4618      	mov	r0, r3
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	0802e7a4 	.word	0x0802e7a4

0800e620 <_ZN8touchgfx6ButtonD0Ev>:
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f7ff ffe7 	bl	800e5fc <_ZN8touchgfx6ButtonD1Ev>
 800e62e:	2134      	movs	r1, #52	@ 0x34
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f01b ff66 	bl	802a502 <_ZdlPvj>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	4618      	mov	r0, r3
 800e63a:	3708      	adds	r7, #8
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	4a05      	ldr	r2, [pc, #20]	@ (800e660 <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	601a      	str	r2, [r3, #0]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4618      	mov	r0, r3
 800e652:	f7ff ffd3 	bl	800e5fc <_ZN8touchgfx6ButtonD1Ev>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4618      	mov	r0, r3
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	0802e8a8 	.word	0x0802e8a8

0800e664 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800e664:	b580      	push	{r7, lr}
 800e666:	b082      	sub	sp, #8
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f7ff ffe7 	bl	800e640 <_ZN8touchgfx14ButtonWithIconD1Ev>
 800e672:	213c      	movs	r1, #60	@ 0x3c
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f01b ff44 	bl	802a502 <_ZdlPvj>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	4618      	mov	r0, r3
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	68d2      	ldr	r2, [r2, #12]
 800e696:	1052      	asrs	r2, r2, #1
 800e698:	1898      	adds	r0, r3, r2
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	f003 0301 	and.w	r3, r3, #1
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d102      	bne.n	800e6ac <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	689b      	ldr	r3, [r3, #8]
 800e6aa:	e00a      	b.n	800e6c2 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	68d2      	ldr	r2, [r2, #12]
 800e6b4:	1052      	asrs	r2, r2, #1
 800e6b6:	4413      	add	r3, r2
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	6892      	ldr	r2, [r2, #8]
 800e6be:	4413      	add	r3, r2
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	6839      	ldr	r1, [r7, #0]
 800e6c4:	4798      	blx	r3
    }
 800e6c6:	bf00      	nop
 800e6c8:	3708      	adds	r7, #8
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800e6ce:	b480      	push	{r7}
 800e6d0:	b083      	sub	sp, #12
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d010      	beq.n	800e700 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	689b      	ldr	r3, [r3, #8]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d107      	bne.n	800e6f6 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	68db      	ldr	r3, [r3, #12]
 800e6ea:	f003 0301 	and.w	r3, r3, #1
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d101      	bne.n	800e6f6 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	e000      	b.n	800e6f8 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d001      	beq.n	800e700 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	e000      	b.n	800e702 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800e700:	2300      	movs	r3, #0
    }
 800e702:	4618      	mov	r0, r3
 800e704:	370c      	adds	r7, #12
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr

0800e70e <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800e70e:	b480      	push	{r7}
 800e710:	b085      	sub	sp, #20
 800e712:	af00      	add	r7, sp, #0
 800e714:	60f8      	str	r0, [r7, #12]
 800e716:	4608      	mov	r0, r1
 800e718:	4611      	mov	r1, r2
 800e71a:	461a      	mov	r2, r3
 800e71c:	4603      	mov	r3, r0
 800e71e:	817b      	strh	r3, [r7, #10]
 800e720:	460b      	mov	r3, r1
 800e722:	813b      	strh	r3, [r7, #8]
 800e724:	4613      	mov	r3, r2
 800e726:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	897a      	ldrh	r2, [r7, #10]
 800e72c:	801a      	strh	r2, [r3, #0]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	893a      	ldrh	r2, [r7, #8]
 800e732:	805a      	strh	r2, [r3, #2]
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	88fa      	ldrh	r2, [r7, #6]
 800e738:	809a      	strh	r2, [r3, #4]
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	8b3a      	ldrh	r2, [r7, #24]
 800e73e:	80da      	strh	r2, [r3, #6]
    {
    }
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	4618      	mov	r0, r3
 800e744:	3714      	adds	r7, #20
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
	...

0800e750 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	460b      	mov	r3, r1
 800e75a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800e75c:	4a06      	ldr	r2, [pc, #24]	@ (800e778 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	601a      	str	r2, [r3, #0]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	887a      	ldrh	r2, [r7, #2]
 800e766:	809a      	strh	r2, [r3, #4]
    }
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4618      	mov	r0, r3
 800e76c:	370c      	adds	r7, #12
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop
 800e778:	0802d760 	.word	0x0802d760

0800e77c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b082      	sub	sp, #8
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4618      	mov	r0, r3
 800e788:	2326      	movs	r3, #38	@ 0x26
 800e78a:	461a      	mov	r2, r3
 800e78c:	2100      	movs	r1, #0
 800e78e:	f01d f826 	bl	802b7de <memset>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	4618      	mov	r0, r3
 800e796:	f7ff fba1 	bl	800dedc <_ZN8touchgfx6WidgetC1Ev>
 800e79a:	4a16      	ldr	r2, [pc, #88]	@ (800e7f4 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	601a      	str	r2, [r3, #0]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	3328      	adds	r3, #40	@ 0x28
 800e7a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7ff ffd1 	bl	800e750 <_ZN8touchgfx9TypedTextC1Et>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	3330      	adds	r3, #48	@ 0x30
 800e7b2:	2100      	movs	r1, #0
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7ff fac2 	bl	800dd3e <_ZN8touchgfx9colortypeC1Em>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	869a      	strh	r2, [r3, #52]	@ 0x34
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	22ff      	movs	r2, #255	@ 0xff
 800e7c4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	333c      	adds	r3, #60	@ 0x3c
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f000 f8f0 	bl	800e9ca <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	0802e6ac 	.word	0x0802e6ac

0800e7f8 <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 800e7f8:	b590      	push	{r4, r7, lr}
 800e7fa:	b087      	sub	sp, #28
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6178      	str	r0, [r7, #20]
 800e800:	460b      	mov	r3, r1
 800e802:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800e80a:	4611      	mov	r1, r2
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7fd fe41 	bl	800c494 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	3384      	adds	r3, #132	@ 0x84
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	697c      	ldr	r4, [r7, #20]
 800e81c:	463a      	mov	r2, r7
 800e81e:	6979      	ldr	r1, [r7, #20]
 800e820:	4610      	mov	r0, r2
 800e822:	4798      	blx	r3
 800e824:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800e828:	463a      	mov	r2, r7
 800e82a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e82c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800e830:	bf00      	nop
 800e832:	371c      	adds	r7, #28
 800e834:	46bd      	mov	sp, r7
 800e836:	bd90      	pop	{r4, r7, pc}

0800e838 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800e838:	b590      	push	{r4, r7, lr}
 800e83a:	b087      	sub	sp, #28
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6178      	str	r0, [r7, #20]
 800e840:	460b      	mov	r3, r1
 800e842:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800e84a:	4611      	mov	r1, r2
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7fd fe30 	bl	800c4b2 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	3384      	adds	r3, #132	@ 0x84
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	697c      	ldr	r4, [r7, #20]
 800e85c:	463a      	mov	r2, r7
 800e85e:	6979      	ldr	r1, [r7, #20]
 800e860:	4610      	mov	r0, r2
 800e862:	4798      	blx	r3
 800e864:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800e868:	463a      	mov	r2, r7
 800e86a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e86c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800e870:	bf00      	nop
 800e872:	371c      	adds	r7, #28
 800e874:	46bd      	mov	sp, r7
 800e876:	bd90      	pop	{r4, r7, pc}

0800e878 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f7ff fa6a 	bl	800dd5c <_ZN8touchgfx4RectC1Ev>
    }
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	3708      	adds	r7, #8
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	460b      	mov	r3, r1
 800e89a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	78fa      	ldrb	r2, [r7, #3]
 800e8a0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    }
 800e8a4:	bf00      	nop
 800e8a6:	370c      	adds	r7, #12
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800e8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800e8bc:	687e      	ldr	r6, [r7, #4]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	3334      	adds	r3, #52	@ 0x34
 800e8c4:	681c      	ldr	r4, [r3, #0]
 800e8c6:	887d      	ldrh	r5, [r7, #2]
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f000 f867 	bl	800e99c <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e8d2:	4b1c      	ldr	r3, [pc, #112]	@ (800e944 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d105      	bne.n	800e8e6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800e8da:	4b1b      	ldr	r3, [pc, #108]	@ (800e948 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800e8dc:	4a1b      	ldr	r2, [pc, #108]	@ (800e94c <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800e8de:	216c      	movs	r1, #108	@ 0x6c
 800e8e0:	481b      	ldr	r0, [pc, #108]	@ (800e950 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800e8e2:	f01c fd55 	bl	802b390 <__assert_func>
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	889a      	ldrh	r2, [r3, #4]
 800e8ee:	4b19      	ldr	r3, [pc, #100]	@ (800e954 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800e8f0:	881b      	ldrh	r3, [r3, #0]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	bf34      	ite	cc
 800e8f6:	2301      	movcc	r3, #1
 800e8f8:	2300      	movcs	r3, #0
 800e8fa:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d105      	bne.n	800e90c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800e900:	4b15      	ldr	r3, [pc, #84]	@ (800e958 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800e902:	4a12      	ldr	r2, [pc, #72]	@ (800e94c <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800e904:	216d      	movs	r1, #109	@ 0x6d
 800e906:	4812      	ldr	r0, [pc, #72]	@ (800e950 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800e908:	f01c fd42 	bl	802b390 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800e90c:	4b13      	ldr	r3, [pc, #76]	@ (800e95c <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	4b0c      	ldr	r3, [pc, #48]	@ (800e944 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800e912:	6819      	ldr	r1, [r3, #0]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	889b      	ldrh	r3, [r3, #4]
 800e918:	005b      	lsls	r3, r3, #1
 800e91a:	440b      	add	r3, r1
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	009b      	lsls	r3, r3, #2
 800e920:	4413      	add	r3, r2
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	3230      	adds	r2, #48	@ 0x30
 800e928:	6812      	ldr	r2, [r2, #0]
 800e92a:	4618      	mov	r0, r3
 800e92c:	4790      	blx	r2
 800e92e:	4603      	mov	r3, r0
 800e930:	1aeb      	subs	r3, r5, r3
 800e932:	b29b      	uxth	r3, r3
 800e934:	b21b      	sxth	r3, r3
 800e936:	4619      	mov	r1, r3
 800e938:	4630      	mov	r0, r6
 800e93a:	47a0      	blx	r4
    }
 800e93c:	bf00      	nop
 800e93e:	3714      	adds	r7, #20
 800e940:	46bd      	mov	sp, r7
 800e942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e944:	20012738 	.word	0x20012738
 800e948:	0802cc88 	.word	0x0802cc88
 800e94c:	0802cccc 	.word	0x0802cccc
 800e950:	0802cd08 	.word	0x0802cd08
 800e954:	2001273c 	.word	0x2001273c
 800e958:	0802cd4c 	.word	0x0802cd4c
 800e95c:	20012740 	.word	0x20012740

0800e960 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	460b      	mov	r3, r1
 800e96a:	807b      	strh	r3, [r7, #2]
 800e96c:	4613      	mov	r3, r2
 800e96e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	3330      	adds	r3, #48	@ 0x30
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800e97e:	4610      	mov	r0, r2
 800e980:	4798      	blx	r3
        setBaselineY(baselineY);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	3364      	adds	r3, #100	@ 0x64
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e98e:	4611      	mov	r1, r2
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	4798      	blx	r3
    }
 800e994:	bf00      	nop
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	3328      	adds	r3, #40	@ 0x28
    }
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	370c      	adds	r7, #12
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800e9b4:	b480      	push	{r7}
 800e9b6:	b083      	sub	sp, #12
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e9bc:	2300      	movs	r3, #0
    }
 800e9be:	4618      	mov	r0, r3
 800e9c0:	370c      	adds	r7, #12
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr

0800e9ca <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800e9ca:	b580      	push	{r7, lr}
 800e9cc:	b084      	sub	sp, #16
 800e9ce:	af02      	add	r7, sp, #8
 800e9d0:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e9d8:	9300      	str	r3, [sp, #0]
 800e9da:	f04f 33ff 	mov.w	r3, #4294967295
 800e9de:	2200      	movs	r2, #0
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	f7ff fe94 	bl	800e70e <_ZN8touchgfx4RectC1Essss>
              text(0)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	609a      	str	r2, [r3, #8]
        {
        }
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3708      	adds	r7, #8
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
	...

0800e9f8 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	4a08      	ldr	r2, [pc, #32]	@ (800ea24 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	601a      	str	r2, [r3, #0]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	3328      	adds	r3, #40	@ 0x28
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7fd fa80 	bl	800bf10 <_ZN8touchgfx9TypedTextD1Ev>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7fe f88a 	bl	800cb2c <_ZN8touchgfx6WidgetD1Ev>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3708      	adds	r7, #8
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	0802e6ac 	.word	0x0802e6ac

0800ea28 <_ZN8touchgfx8TextAreaD0Ev>:
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7ff ffe1 	bl	800e9f8 <_ZN8touchgfx8TextAreaD1Ev>
 800ea36:	2148      	movs	r1, #72	@ 0x48
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f01b fd62 	bl	802a502 <_ZdlPvj>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4618      	mov	r0, r3
 800ea42:	3708      	adds	r7, #8
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
        : TextArea()
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7ff fe92 	bl	800e77c <_ZN8touchgfx8TextAreaC1Ev>
 800ea58:	4a03      	ldr	r2, [pc, #12]	@ (800ea68 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	601a      	str	r2, [r3, #0]
    {
    }
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4618      	mov	r0, r3
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	0802e818 	.word	0x0802e818

0800ea6c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fd fc78 	bl	800c36c <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800ea7c:	bf00      	nop
 800ea7e:	3708      	adds	r7, #8
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f7ff ff9b 	bl	800e9ca <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	3708      	adds	r7, #8
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	4a05      	ldr	r2, [pc, #20]	@ (800eabc <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	601a      	str	r2, [r3, #0]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7ff ffa3 	bl	800e9f8 <_ZN8touchgfx8TextAreaD1Ev>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	4618      	mov	r0, r3
 800eab6:	3708      	adds	r7, #8
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}
 800eabc:	0802e818 	.word	0x0802e818

0800eac0 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f7ff ffe7 	bl	800ea9c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800eace:	2148      	movs	r1, #72	@ 0x48
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f01b fd16 	bl	802a502 <_ZdlPvj>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4618      	mov	r0, r3
 800eada:	3708      	adds	r7, #8
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7ff ffac 	bl	800ea48 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800eaf0:	4a05      	ldr	r2, [pc, #20]	@ (800eb08 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	601a      	str	r2, [r3, #0]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	649a      	str	r2, [r3, #72]	@ 0x48
    {
    }
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	4618      	mov	r0, r3
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	0802daf4 	.word	0x0802daf4

0800eb0c <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard1(const Unicode::UnicodeChar* value)
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
    {
        wc1 = value;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	683a      	ldr	r2, [r7, #0]
 800eb1a:	649a      	str	r2, [r3, #72]	@ 0x48
    }
 800eb1c:	bf00      	nop
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 800eb34:	4618      	mov	r0, r3
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr

0800eb40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 800eb4a:	6839      	ldr	r1, [r7, #0]
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f7ff ffdd 	bl	800eb0c <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 800eb52:	bf00      	nop
 800eb54:	3708      	adds	r7, #8
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}

0800eb5a <_ZN15Screen2ViewBase7temp_upEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void temp_up()
 800eb5a:	b480      	push	{r7}
 800eb5c:	b083      	sub	sp, #12
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen2
    }
 800eb62:	bf00      	nop
 800eb64:	370c      	adds	r7, #12
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr

0800eb6e <_ZN15Screen2ViewBase9temp_downEv>:
    virtual void temp_down()
 800eb6e:	b480      	push	{r7}
 800eb70:	b083      	sub	sp, #12
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen2
    }
 800eb76:	bf00      	nop
 800eb78:	370c      	adds	r7, #12
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr

0800eb82 <_ZN15Screen2ViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800eb82:	b580      	push	{r7, lr}
 800eb84:	b082      	sub	sp, #8
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800eb8a:	f009 ff73 	bl	8018a74 <_ZN8touchgfx11Application11getInstanceEv>
 800eb8e:	4603      	mov	r3, r0
    }
 800eb90:	4618      	mov	r0, r3
 800eb92:	3708      	adds	r7, #8
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	4a05      	ldr	r2, [pc, #20]	@ (800ebb8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	601a      	str	r2, [r3, #0]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7ff f92f 	bl	800de0c <_ZN8touchgfx6ScreenD1Ev>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3708      	adds	r7, #8
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}
 800ebb8:	0802dac0 	.word	0x0802dac0

0800ebbc <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f7ff ffe7 	bl	800eb98 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 800ebca:	2140      	movs	r1, #64	@ 0x40
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f01b fc98 	bl	802a502 <_ZdlPvj>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3708      	adds	r7, #8
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <_ZN15Screen2ViewBaseC1Ev>:
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen2ViewBase::Screen2ViewBase() :
 800ebdc:	b590      	push	{r4, r7, lr}
 800ebde:	b0c1      	sub	sp, #260	@ 0x104
 800ebe0:	af02      	add	r7, sp, #8
 800ebe2:	6178      	str	r0, [r7, #20]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f000 fc82 	bl	800f4f0 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 800ebec:	4ae0      	ldr	r2, [pc, #896]	@ (800ef70 <_ZN15Screen2ViewBaseC1Ev+0x394>)
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	601a      	str	r2, [r3, #0]
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	3340      	adds	r3, #64	@ 0x40
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7ff f982 	bl	800df00 <_ZN8touchgfx3BoxC1Ev>
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	336c      	adds	r3, #108	@ 0x6c
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7ff f97d 	bl	800df00 <_ZN8touchgfx3BoxC1Ev>
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	3398      	adds	r3, #152	@ 0x98
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f007 fb96 	bl	801633c <_ZN8touchgfx14ButtonWithIconC1Ev>
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	33d4      	adds	r3, #212	@ 0xd4
 800ec14:	4618      	mov	r0, r3
 800ec16:	f007 fb91 	bl	801633c <_ZN8touchgfx14ButtonWithIconC1Ev>
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800ec20:	4618      	mov	r0, r3
 800ec22:	f007 fb8b 	bl	801633c <_ZN8touchgfx14ButtonWithIconC1Ev>
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7ff ff57 	bl	800eae0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7ff ff51 	bl	800eae0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7ff fd99 	bl	800e77c <_ZN8touchgfx8TextAreaC1Ev>
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7ff fd93 	bl	800e77c <_ZN8touchgfx8TextAreaC1Ev>
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	f503 702c 	add.w	r0, r3, #688	@ 0x2b0
 800ec5c:	4bc5      	ldr	r3, [pc, #788]	@ (800ef74 <_ZN15Screen2ViewBaseC1Ev+0x398>)
 800ec5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ec60:	2300      	movs	r3, #0
 800ec62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ec68:	cb0c      	ldmia	r3, {r2, r3}
 800ec6a:	6979      	ldr	r1, [r7, #20]
 800ec6c:	f000 fc56 	bl	800f51c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 240, 320);
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800ec76:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800ec7a:	9300      	str	r3, [sp, #0]
 800ec7c:	23f0      	movs	r3, #240	@ 0xf0
 800ec7e:	2200      	movs	r2, #0
 800ec80:	2100      	movs	r1, #0
 800ec82:	f7fd fb9d 	bl	800c3c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
 800ec92:	2300      	movs	r3, #0
 800ec94:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
 800ec98:	2300      	movs	r3, #0
 800ec9a:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 800ec9e:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800eca2:	041a      	lsls	r2, r3, #16
 800eca4:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 800eca8:	021b      	lsls	r3, r3, #8
 800ecaa:	431a      	orrs	r2, r3
 800ecac:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800ecb0:	4313      	orrs	r3, r2
 800ecb2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800ecb6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ecba:	4611      	mov	r1, r2
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7ff f83e 	bl	800dd3e <_ZN8touchgfx9colortypeC1Em>
 800ecc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	4620      	mov	r0, r4
 800ecca:	f7ff f93d 	bl	800df48 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800ecce:	697a      	ldr	r2, [r7, #20]
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	3340      	adds	r3, #64	@ 0x40
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	4610      	mov	r0, r2
 800ecd8:	f7ff f8f0 	bl	800debc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 240, 320);
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800ece2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	23f0      	movs	r3, #240	@ 0xf0
 800ecea:	2200      	movs	r2, #0
 800ecec:	2100      	movs	r1, #0
 800ecee:	f7fd fb67 	bl	800c3c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(58, 45, 138));
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800ecf8:	233a      	movs	r3, #58	@ 0x3a
 800ecfa:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
 800ecfe:	232d      	movs	r3, #45	@ 0x2d
 800ed00:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 800ed04:	238a      	movs	r3, #138	@ 0x8a
 800ed06:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 800ed0a:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 800ed0e:	041a      	lsls	r2, r3, #16
 800ed10:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800ed14:	021b      	lsls	r3, r3, #8
 800ed16:	431a      	orrs	r2, r3
 800ed18:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800ed1c:	4313      	orrs	r3, r2
 800ed1e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800ed22:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800ed26:	4611      	mov	r1, r2
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7ff f808 	bl	800dd3e <_ZN8touchgfx9colortypeC1Em>
 800ed2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed32:	4619      	mov	r1, r3
 800ed34:	4620      	mov	r0, r4
 800ed36:	f7ff f907 	bl	800df48 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800ed3a:	697a      	ldr	r2, [r7, #20]
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	336c      	adds	r3, #108	@ 0x6c
 800ed40:	4619      	mov	r1, r3
 800ed42:	4610      	mov	r0, r2
 800ed44:	f7ff f8ba 	bl	800debc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    tempup.setXY(33, 28);
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	3398      	adds	r3, #152	@ 0x98
 800ed4c:	221c      	movs	r2, #28
 800ed4e:	2121      	movs	r1, #33	@ 0x21
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7fd fb81 	bl	800c458 <_ZN8touchgfx8Drawable5setXYEss>
    tempup.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_THUMB_UP_OFF_ALT_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800ed5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ed60:	2100      	movs	r1, #0
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7ff f811 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800ed68:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800ed6c:	2100      	movs	r1, #0
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7ff f80b 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800ed74:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ed78:	2106      	movs	r1, #6
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7ff f805 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800ed80:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ed84:	2102      	movs	r1, #2
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7fe ffff 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800ed8c:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800ed90:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800ed94:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800ed98:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ed9c:	9300      	str	r3, [sp, #0]
 800ed9e:	4603      	mov	r3, r0
 800eda0:	4620      	mov	r0, r4
 800eda2:	f007 fa36 	bl	8016212 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    tempup.setIconXY(61, 0);
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	3398      	adds	r3, #152	@ 0x98
 800edaa:	2200      	movs	r2, #0
 800edac:	213d      	movs	r1, #61	@ 0x3d
 800edae:	4618      	mov	r0, r3
 800edb0:	f7ff f926 	bl	800e000 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    tempup.setAction(buttonCallback);
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800edc0:	4619      	mov	r1, r3
 800edc2:	4610      	mov	r0, r2
 800edc4:	f7ff f8ce 	bl	800df64 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(tempup);
 800edc8:	697a      	ldr	r2, [r7, #20]
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	3398      	adds	r3, #152	@ 0x98
 800edce:	4619      	mov	r1, r3
 800edd0:	4610      	mov	r0, r2
 800edd2:	f7ff f873 	bl	800debc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    tempdown.setXY(33, 187);
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	33d4      	adds	r3, #212	@ 0xd4
 800edda:	22bb      	movs	r2, #187	@ 0xbb
 800eddc:	2121      	movs	r1, #33	@ 0x21
 800edde:	4618      	mov	r0, r3
 800ede0:	f7fd fb3a 	bl	800c458 <_ZN8touchgfx8Drawable5setXYEss>
    tempdown.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_THUMB_DOWN_OFF_ALT_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	f103 04d4 	add.w	r4, r3, #212	@ 0xd4
 800edea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800edee:	2100      	movs	r1, #0
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7fe ffca 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800edf6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800edfa:	2100      	movs	r1, #0
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7fe ffc4 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800ee02:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800ee06:	2105      	movs	r1, #5
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7fe ffbe 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800ee0e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ee12:	2102      	movs	r1, #2
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fe ffb8 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800ee1a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800ee1e:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800ee22:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800ee26:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ee2a:	9300      	str	r3, [sp, #0]
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	4620      	mov	r0, r4
 800ee30:	f007 f9ef 	bl	8016212 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    tempdown.setIconXY(61, 0);
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	33d4      	adds	r3, #212	@ 0xd4
 800ee38:	2200      	movs	r2, #0
 800ee3a:	213d      	movs	r1, #61	@ 0x3d
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7ff f8df 	bl	800e000 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    tempdown.setAction(buttonCallback);
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	f103 02d4 	add.w	r2, r3, #212	@ 0xd4
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800ee4e:	4619      	mov	r1, r3
 800ee50:	4610      	mov	r0, r2
 800ee52:	f7ff f887 	bl	800df64 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(tempdown);
 800ee56:	697a      	ldr	r2, [r7, #20]
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	33d4      	adds	r3, #212	@ 0xd4
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	4610      	mov	r0, r2
 800ee60:	f7ff f82c 	bl	800debc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    mainmenu.setXY(33, 256);
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800ee6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ee6e:	2121      	movs	r1, #33	@ 0x21
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7fd faf1 	bl	800c458 <_ZN8touchgfx8Drawable5setXYEss>
    mainmenu.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUND_ACTION_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_HARDWARE_KEYBOARD_BACKSPACE_50_50_E8F6FB_SVG_ID), touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 800ee7c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ee80:	2100      	movs	r1, #0
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7fe ff81 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800ee88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ee8c:	2100      	movs	r1, #0
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7fe ff7b 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800ee94:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800ee98:	2107      	movs	r1, #7
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7fe ff75 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800eea0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800eea4:	2102      	movs	r1, #2
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fe ff6f 	bl	800dd8a <_ZN8touchgfx6BitmapC1Et>
 800eeac:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 800eeb0:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800eeb4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800eeb8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800eebc:	9300      	str	r3, [sp, #0]
 800eebe:	4603      	mov	r3, r0
 800eec0:	4620      	mov	r0, r4
 800eec2:	f007 f9a6 	bl	8016212 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    mainmenu.setIconXY(62, 0);
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800eecc:	2200      	movs	r2, #0
 800eece:	213e      	movs	r1, #62	@ 0x3e
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7ff f895 	bl	800e000 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    mainmenu.setAction(buttonCallback);
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800eee2:	4619      	mov	r1, r3
 800eee4:	4610      	mov	r0, r2
 800eee6:	f7ff f83d 	bl	800df64 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(mainmenu);
 800eeea:	697a      	ldr	r2, [r7, #20]
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800eef2:	4619      	mov	r1, r3
 800eef4:	4610      	mov	r0, r2
 800eef6:	f7fe ffe1 	bl	800debc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    TX.setXY(165, 102);
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800ef00:	2266      	movs	r2, #102	@ 0x66
 800ef02:	21a5      	movs	r1, #165	@ 0xa5
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7fd faa7 	bl	800c458 <_ZN8touchgfx8Drawable5setXYEss>
    TX.setColor(touchgfx::Color::getColorFromRGB(33, 209, 39));
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	f503 74a6 	add.w	r4, r3, #332	@ 0x14c
 800ef10:	2321      	movs	r3, #33	@ 0x21
 800ef12:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800ef16:	23d1      	movs	r3, #209	@ 0xd1
 800ef18:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
 800ef1c:	2327      	movs	r3, #39	@ 0x27
 800ef1e:	f887 30b1 	strb.w	r3, [r7, #177]	@ 0xb1
 800ef22:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800ef26:	041a      	lsls	r2, r3, #16
 800ef28:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 800ef2c:	021b      	lsls	r3, r3, #8
 800ef2e:	431a      	orrs	r2, r3
 800ef30:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 800ef34:	4313      	orrs	r3, r2
 800ef36:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800ef3a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800ef3e:	4611      	mov	r1, r2
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7fe fefc 	bl	800dd3e <_ZN8touchgfx9colortypeC1Em>
 800ef46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ef4a:	f8c7 40b4 	str.w	r4, [r7, #180]	@ 0xb4
 800ef4e:	627b      	str	r3, [r7, #36]	@ 0x24
        color = newColor;
 800ef50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ef54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef56:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800ef58:	bf00      	nop
    TX.setLinespacing(0);
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800ef60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ef64:	2300      	movs	r3, #0
 800ef66:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
        linespace = space;
 800ef6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ef6e:	e003      	b.n	800ef78 <_ZN15Screen2ViewBaseC1Ev+0x39c>
 800ef70:	0802da6c 	.word	0x0802da6c
 800ef74:	0800f497 	.word	0x0800f497
 800ef78:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	@ 0xba
 800ef7c:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 800ef7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	3384      	adds	r3, #132	@ 0x84
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f8d7 40bc 	ldr.w	r4, [r7, #188]	@ 0xbc
 800ef8c:	463a      	mov	r2, r7
 800ef8e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800ef92:	4610      	mov	r0, r2
 800ef94:	4798      	blx	r3
 800ef96:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800ef9a:	463a      	mov	r2, r7
 800ef9c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ef9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800efa2:	bf00      	nop
    Unicode::snprintf(TXBuffer, TX_SIZE, "%s", touchgfx::TypedText(T_TXBUFFER).getText());
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	f503 741d 	add.w	r4, r3, #628	@ 0x274
 800efaa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800efae:	2104      	movs	r1, #4
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7ff fbcd 	bl	800e750 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800efb6:	4b6c      	ldr	r3, [pc, #432]	@ (800f168 <_ZN15Screen2ViewBaseC1Ev+0x58c>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d105      	bne.n	800efca <_ZN15Screen2ViewBaseC1Ev+0x3ee>
 800efbe:	4b6b      	ldr	r3, [pc, #428]	@ (800f16c <_ZN15Screen2ViewBaseC1Ev+0x590>)
 800efc0:	4a6b      	ldr	r2, [pc, #428]	@ (800f170 <_ZN15Screen2ViewBaseC1Ev+0x594>)
 800efc2:	2160      	movs	r1, #96	@ 0x60
 800efc4:	486b      	ldr	r0, [pc, #428]	@ (800f174 <_ZN15Screen2ViewBaseC1Ev+0x598>)
 800efc6:	f01c f9e3 	bl	802b390 <__assert_func>
 800efca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800efce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        return typedTextId < numberOfTypedTexts;
 800efd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800efd6:	889a      	ldrh	r2, [r3, #4]
 800efd8:	4b67      	ldr	r3, [pc, #412]	@ (800f178 <_ZN15Screen2ViewBaseC1Ev+0x59c>)
 800efda:	881b      	ldrh	r3, [r3, #0]
 800efdc:	429a      	cmp	r2, r3
 800efde:	bf34      	ite	cc
 800efe0:	2301      	movcc	r3, #1
 800efe2:	2300      	movcs	r3, #0
 800efe4:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d105      	bne.n	800eff6 <_ZN15Screen2ViewBaseC1Ev+0x41a>
 800efea:	4b64      	ldr	r3, [pc, #400]	@ (800f17c <_ZN15Screen2ViewBaseC1Ev+0x5a0>)
 800efec:	4a60      	ldr	r2, [pc, #384]	@ (800f170 <_ZN15Screen2ViewBaseC1Ev+0x594>)
 800efee:	2161      	movs	r1, #97	@ 0x61
 800eff0:	4860      	ldr	r0, [pc, #384]	@ (800f174 <_ZN15Screen2ViewBaseC1Ev+0x598>)
 800eff2:	f01c f9cd 	bl	802b390 <__assert_func>
        return texts->getText(typedTextId);
 800eff6:	4b62      	ldr	r3, [pc, #392]	@ (800f180 <_ZN15Screen2ViewBaseC1Ev+0x5a4>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 800effe:	4611      	mov	r1, r2
 800f000:	4618      	mov	r0, r3
 800f002:	f000 fcd9 	bl	800f9b8 <_ZNK8touchgfx5Texts7getTextEt>
 800f006:	4603      	mov	r3, r0
 800f008:	bf00      	nop
 800f00a:	4a5e      	ldr	r2, [pc, #376]	@ (800f184 <_ZN15Screen2ViewBaseC1Ev+0x5a8>)
 800f00c:	210f      	movs	r1, #15
 800f00e:	4620      	mov	r0, r4
 800f010:	f00d f818 	bl	801c044 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f014:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800f018:	4618      	mov	r0, r3
 800f01a:	f7fc ff79 	bl	800bf10 <_ZN8touchgfx9TypedTextD1Ev>
    TX.setWildcard(TXBuffer);
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	f503 72a6 	add.w	r2, r3, #332	@ 0x14c
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 800f02a:	4619      	mov	r1, r3
 800f02c:	4610      	mov	r0, r2
 800f02e:	f7ff fd87 	bl	800eb40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TX.resizeToCurrentText();
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800f038:	4618      	mov	r0, r3
 800f03a:	f006 ff57 	bl	8015eec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    TX.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AWFL));
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	f503 74a6 	add.w	r4, r3, #332	@ 0x14c
 800f044:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f048:	2105      	movs	r1, #5
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7ff fb80 	bl	800e750 <_ZN8touchgfx9TypedTextC1Et>
 800f050:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f054:	4619      	mov	r1, r3
 800f056:	4620      	mov	r0, r4
 800f058:	f006 ff68 	bl	8015f2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f05c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f060:	4618      	mov	r0, r3
 800f062:	f7fc ff55 	bl	800bf10 <_ZN8touchgfx9TypedTextD1Ev>
    add(TX);
 800f066:	697a      	ldr	r2, [r7, #20]
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800f06e:	4619      	mov	r1, r3
 800f070:	4610      	mov	r0, r2
 800f072:	f7fe ff23 	bl	800debc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    nowtemp.setXY(165, 140);
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800f07c:	228c      	movs	r2, #140	@ 0x8c
 800f07e:	21a5      	movs	r1, #165	@ 0xa5
 800f080:	4618      	mov	r0, r3
 800f082:	f7fd f9e9 	bl	800c458 <_ZN8touchgfx8Drawable5setXYEss>
    nowtemp.setColor(touchgfx::Color::getColorFromRGB(33, 209, 39));
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	f503 74cc 	add.w	r4, r3, #408	@ 0x198
 800f08c:	2321      	movs	r3, #33	@ 0x21
 800f08e:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 800f092:	23d1      	movs	r3, #209	@ 0xd1
 800f094:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
 800f098:	2327      	movs	r3, #39	@ 0x27
 800f09a:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
 800f09e:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800f0a2:	041a      	lsls	r2, r3, #16
 800f0a4:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800f0a8:	021b      	lsls	r3, r3, #8
 800f0aa:	431a      	orrs	r2, r3
 800f0ac:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 800f0b0:	4313      	orrs	r3, r2
 800f0b2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f0b6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800f0ba:	4611      	mov	r1, r2
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7fe fe3e 	bl	800dd3e <_ZN8touchgfx9colortypeC1Em>
 800f0c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f0c6:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 800f0ca:	623b      	str	r3, [r7, #32]
        color = newColor;
 800f0cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f0d0:	6a3a      	ldr	r2, [r7, #32]
 800f0d2:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800f0d4:	bf00      	nop
    nowtemp.setLinespacing(0);
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800f0dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
        linespace = space;
 800f0e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f0ea:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800f0ee:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 800f0f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	3384      	adds	r3, #132	@ 0x84
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f8d7 40d0 	ldr.w	r4, [r7, #208]	@ 0xd0
 800f0fe:	463a      	mov	r2, r7
 800f100:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800f104:	4610      	mov	r0, r2
 800f106:	4798      	blx	r3
 800f108:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800f10c:	463a      	mov	r2, r7
 800f10e:	ca07      	ldmia	r2, {r0, r1, r2}
 800f110:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f114:	bf00      	nop
    Unicode::snprintf(nowtempBuffer, NOWTEMP_SIZE, "%s", touchgfx::TypedText(T_NWBUFFER).getText());
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	f203 2492 	addw	r4, r3, #658	@ 0x292
 800f11c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800f120:	2102      	movs	r1, #2
 800f122:	4618      	mov	r0, r3
 800f124:	f7ff fb14 	bl	800e750 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f128:	4b0f      	ldr	r3, [pc, #60]	@ (800f168 <_ZN15Screen2ViewBaseC1Ev+0x58c>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d105      	bne.n	800f13c <_ZN15Screen2ViewBaseC1Ev+0x560>
 800f130:	4b0e      	ldr	r3, [pc, #56]	@ (800f16c <_ZN15Screen2ViewBaseC1Ev+0x590>)
 800f132:	4a0f      	ldr	r2, [pc, #60]	@ (800f170 <_ZN15Screen2ViewBaseC1Ev+0x594>)
 800f134:	2160      	movs	r1, #96	@ 0x60
 800f136:	480f      	ldr	r0, [pc, #60]	@ (800f174 <_ZN15Screen2ViewBaseC1Ev+0x598>)
 800f138:	f01c f92a 	bl	802b390 <__assert_func>
 800f13c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800f140:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        return typedTextId < numberOfTypedTexts;
 800f144:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f148:	889a      	ldrh	r2, [r3, #4]
 800f14a:	4b0b      	ldr	r3, [pc, #44]	@ (800f178 <_ZN15Screen2ViewBaseC1Ev+0x59c>)
 800f14c:	881b      	ldrh	r3, [r3, #0]
 800f14e:	429a      	cmp	r2, r3
 800f150:	bf34      	ite	cc
 800f152:	2301      	movcc	r3, #1
 800f154:	2300      	movcs	r3, #0
 800f156:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d115      	bne.n	800f188 <_ZN15Screen2ViewBaseC1Ev+0x5ac>
 800f15c:	4b07      	ldr	r3, [pc, #28]	@ (800f17c <_ZN15Screen2ViewBaseC1Ev+0x5a0>)
 800f15e:	4a04      	ldr	r2, [pc, #16]	@ (800f170 <_ZN15Screen2ViewBaseC1Ev+0x594>)
 800f160:	2161      	movs	r1, #97	@ 0x61
 800f162:	4804      	ldr	r0, [pc, #16]	@ (800f174 <_ZN15Screen2ViewBaseC1Ev+0x598>)
 800f164:	f01c f914 	bl	802b390 <__assert_func>
 800f168:	20012738 	.word	0x20012738
 800f16c:	0802cc88 	.word	0x0802cc88
 800f170:	0802cd8c 	.word	0x0802cd8c
 800f174:	0802cd08 	.word	0x0802cd08
 800f178:	2001273c 	.word	0x2001273c
 800f17c:	0802cd4c 	.word	0x0802cd4c
 800f180:	20012744 	.word	0x20012744
 800f184:	0802cdd8 	.word	0x0802cdd8
        return texts->getText(typedTextId);
 800f188:	4b8e      	ldr	r3, [pc, #568]	@ (800f3c4 <_ZN15Screen2ViewBaseC1Ev+0x7e8>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 800f190:	4611      	mov	r1, r2
 800f192:	4618      	mov	r0, r3
 800f194:	f000 fc10 	bl	800f9b8 <_ZNK8touchgfx5Texts7getTextEt>
 800f198:	4603      	mov	r3, r0
 800f19a:	bf00      	nop
 800f19c:	4a8a      	ldr	r2, [pc, #552]	@ (800f3c8 <_ZN15Screen2ViewBaseC1Ev+0x7ec>)
 800f19e:	210f      	movs	r1, #15
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f00c ff4f 	bl	801c044 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f1a6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fc feb0 	bl	800bf10 <_ZN8touchgfx9TypedTextD1Ev>
    nowtemp.setWildcard(nowtempBuffer);
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	f203 2392 	addw	r3, r3, #658	@ 0x292
 800f1bc:	4619      	mov	r1, r3
 800f1be:	4610      	mov	r0, r2
 800f1c0:	f7ff fcbe 	bl	800eb40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    nowtemp.resizeToCurrentText();
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f006 fe8e 	bl	8015eec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    nowtemp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8ZHO));
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	f503 74cc 	add.w	r4, r3, #408	@ 0x198
 800f1d6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800f1da:	2103      	movs	r1, #3
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7ff fab7 	bl	800e750 <_ZN8touchgfx9TypedTextC1Et>
 800f1e2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f006 fe9f 	bl	8015f2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f1ee:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fc fe8c 	bl	800bf10 <_ZN8touchgfx9TypedTextD1Ev>
    add(nowtemp);
 800f1f8:	697a      	ldr	r2, [r7, #20]
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800f200:	4619      	mov	r1, r3
 800f202:	4610      	mov	r0, r2
 800f204:	f7fe fe5a 	bl	800debc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1.setXY(51, 102);
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f20e:	2266      	movs	r2, #102	@ 0x66
 800f210:	2133      	movs	r1, #51	@ 0x33
 800f212:	4618      	mov	r0, r3
 800f214:	f7fd f920 	bl	800c458 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(33, 209, 39));
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	f503 74f2 	add.w	r4, r3, #484	@ 0x1e4
 800f21e:	2321      	movs	r3, #33	@ 0x21
 800f220:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
 800f224:	23d1      	movs	r3, #209	@ 0xd1
 800f226:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800f22a:	2327      	movs	r3, #39	@ 0x27
 800f22c:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
 800f230:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800f234:	041a      	lsls	r2, r3, #16
 800f236:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 800f23a:	021b      	lsls	r3, r3, #8
 800f23c:	431a      	orrs	r2, r3
 800f23e:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800f242:	4313      	orrs	r3, r2
 800f244:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f248:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800f24c:	4611      	mov	r1, r2
 800f24e:	4618      	mov	r0, r3
 800f250:	f7fe fd75 	bl	800dd3e <_ZN8touchgfx9colortypeC1Em>
 800f254:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f258:	f8c7 40dc 	str.w	r4, [r7, #220]	@ 0xdc
 800f25c:	61fb      	str	r3, [r7, #28]
        color = newColor;
 800f25e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f262:	69fa      	ldr	r2, [r7, #28]
 800f264:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800f266:	bf00      	nop
    textArea1.setLinespacing(0);
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f26e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f272:	2300      	movs	r3, #0
 800f274:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
        linespace = space;
 800f278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f27c:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	@ 0xe2
 800f280:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 800f282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	3384      	adds	r3, #132	@ 0x84
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f8d7 40e4 	ldr.w	r4, [r7, #228]	@ 0xe4
 800f290:	463a      	mov	r2, r7
 800f292:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800f296:	4610      	mov	r0, r2
 800f298:	4798      	blx	r3
 800f29a:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800f29e:	463a      	mov	r2, r7
 800f2a0:	ca07      	ldmia	r2, {r0, r1, r2}
 800f2a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f2a6:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1G6O));
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	f503 74f2 	add.w	r4, r3, #484	@ 0x1e4
 800f2ae:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800f2b2:	2101      	movs	r1, #1
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7ff fa4b 	bl	800e750 <_ZN8touchgfx9TypedTextC1Et>
 800f2ba:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800f2be:	4619      	mov	r1, r3
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f006 fe33 	bl	8015f2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f2c6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fc fe20 	bl	800bf10 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea1);
 800f2d0:	697a      	ldr	r2, [r7, #20]
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f2d8:	4619      	mov	r1, r3
 800f2da:	4610      	mov	r0, r2
 800f2dc:	f7fe fdee 	bl	800debc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1_1.setXY(49, 140);
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 800f2e6:	228c      	movs	r2, #140	@ 0x8c
 800f2e8:	2131      	movs	r1, #49	@ 0x31
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fd f8b4 	bl	800c458 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_1.setColor(touchgfx::Color::getColorFromRGB(33, 209, 39));
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	f503 740b 	add.w	r4, r3, #556	@ 0x22c
 800f2f6:	2321      	movs	r3, #33	@ 0x21
 800f2f8:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 800f2fc:	23d1      	movs	r3, #209	@ 0xd1
 800f2fe:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
 800f302:	2327      	movs	r3, #39	@ 0x27
 800f304:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
 800f308:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800f30c:	041a      	lsls	r2, r3, #16
 800f30e:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 800f312:	021b      	lsls	r3, r3, #8
 800f314:	431a      	orrs	r2, r3
 800f316:	f897 30e9 	ldrb.w	r3, [r7, #233]	@ 0xe9
 800f31a:	4313      	orrs	r3, r2
 800f31c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f320:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800f324:	4611      	mov	r1, r2
 800f326:	4618      	mov	r0, r3
 800f328:	f7fe fd09 	bl	800dd3e <_ZN8touchgfx9colortypeC1Em>
 800f32c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f330:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 800f334:	61bb      	str	r3, [r7, #24]
        color = newColor;
 800f336:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f33a:	69ba      	ldr	r2, [r7, #24]
 800f33c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800f33e:	bf00      	nop
    textArea1_1.setLinespacing(0);
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 800f346:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800f34a:	2300      	movs	r3, #0
 800f34c:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
        linespace = space;
 800f350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f354:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	@ 0xf2
 800f358:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 800f35a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	3384      	adds	r3, #132	@ 0x84
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 800f368:	463a      	mov	r2, r7
 800f36a:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 800f36e:	4610      	mov	r0, r2
 800f370:	4798      	blx	r3
 800f372:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800f376:	463a      	mov	r2, r7
 800f378:	ca07      	ldmia	r2, {r0, r1, r2}
 800f37a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f37e:	bf00      	nop
    textArea1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PQUD));
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	f503 740b 	add.w	r4, r3, #556	@ 0x22c
 800f386:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800f38a:	2100      	movs	r1, #0
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7ff f9df 	bl	800e750 <_ZN8touchgfx9TypedTextC1Et>
 800f392:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800f396:	4619      	mov	r1, r3
 800f398:	4620      	mov	r0, r4
 800f39a:	f006 fdc7 	bl	8015f2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f39e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7fc fdb4 	bl	800bf10 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea1_1);
 800f3a8:	697a      	ldr	r2, [r7, #20]
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	4610      	mov	r0, r2
 800f3b4:	f7fe fd82 	bl	800debc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	37fc      	adds	r7, #252	@ 0xfc
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd90      	pop	{r4, r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	20012744 	.word	0x20012744
 800f3c8:	0802cdd8 	.word	0x0802cdd8

0800f3cc <_ZN15Screen2ViewBaseD1Ev>:

Screen2ViewBase::~Screen2ViewBase()
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b082      	sub	sp, #8
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	4a21      	ldr	r2, [pc, #132]	@ (800f45c <_ZN15Screen2ViewBaseD1Ev+0x90>)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	601a      	str	r2, [r3, #0]
{

}
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f000 f8bb 	bl	800f55c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7ff fb03 	bl	800e9f8 <_ZN8touchgfx8TextAreaD1Ev>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7ff fafd 	bl	800e9f8 <_ZN8touchgfx8TextAreaD1Ev>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800f404:	4618      	mov	r0, r3
 800f406:	f000 f8cb 	bl	800f5a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800f410:	4618      	mov	r0, r3
 800f412:	f000 f8c5 	bl	800f5a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7ff f90f 	bl	800e640 <_ZN8touchgfx14ButtonWithIconD1Ev>
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	33d4      	adds	r3, #212	@ 0xd4
 800f426:	4618      	mov	r0, r3
 800f428:	f7ff f90a 	bl	800e640 <_ZN8touchgfx14ButtonWithIconD1Ev>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	3398      	adds	r3, #152	@ 0x98
 800f430:	4618      	mov	r0, r3
 800f432:	f7ff f905 	bl	800e640 <_ZN8touchgfx14ButtonWithIconD1Ev>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	336c      	adds	r3, #108	@ 0x6c
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7ff f8bc 	bl	800e5b8 <_ZN8touchgfx3BoxD1Ev>
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	3340      	adds	r3, #64	@ 0x40
 800f444:	4618      	mov	r0, r3
 800f446:	f7ff f8b7 	bl	800e5b8 <_ZN8touchgfx3BoxD1Ev>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7ff fba3 	bl	800eb98 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	4618      	mov	r0, r3
 800f456:	3708      	adds	r7, #8
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}
 800f45c:	0802da6c 	.word	0x0802da6c

0800f460 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 800f460:	b580      	push	{r7, lr}
 800f462:	b082      	sub	sp, #8
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
}
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f7ff ffaf 	bl	800f3cc <_ZN15Screen2ViewBaseD1Ev>
 800f46e:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f01b f845 	bl	802a502 <_ZdlPvj>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	4618      	mov	r0, r3
 800f47c:	3708      	adds	r7, #8
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 800f482:	b480      	push	{r7}
 800f484:	b083      	sub	sp, #12
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]

}
 800f48a:	bf00      	nop
 800f48c:	370c      	adds	r7, #12
 800f48e:	46bd      	mov	sp, r7
 800f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f494:	4770      	bx	lr

0800f496 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800f496:	b580      	push	{r7, lr}
 800f498:	b082      	sub	sp, #8
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
 800f49e:	6039      	str	r1, [r7, #0]
    if (&src == &mainmenu)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800f4a6:	683a      	ldr	r2, [r7, #0]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d106      	bne.n	800f4ba <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //go_main
        //When mainmenu clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenSlideTransitionWest();
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f7ff fb68 	bl	800eb82 <_ZN15Screen2ViewBase11applicationEv>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f7fd fc03 	bl	800ccc0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>
    }
    if (&src == &tempup)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	3398      	adds	r3, #152	@ 0x98
 800f4be:	683a      	ldr	r2, [r7, #0]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d105      	bne.n	800f4d0 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
    {
        //temp_up
        //When tempup clicked call virtual function
        //Call temp_up
        temp_up();
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	332c      	adds	r3, #44	@ 0x2c
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	4798      	blx	r3
    }
    if (&src == &tempdown)
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	33d4      	adds	r3, #212	@ 0xd4
 800f4d4:	683a      	ldr	r2, [r7, #0]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d105      	bne.n	800f4e6 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x50>
    {
        //temp_down
        //When tempdown clicked call virtual function
        //Call temp_down
        temp_down();
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	3330      	adds	r3, #48	@ 0x30
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	4798      	blx	r3
    }
}
 800f4e6:	bf00      	nop
 800f4e8:	3708      	adds	r7, #8
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
	...

0800f4f0 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f00b f8ec 	bl	801a6d8 <_ZN8touchgfx6ScreenC1Ev>
 800f500:	4a05      	ldr	r2, [pc, #20]	@ (800f518 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	601a      	str	r2, [r3, #0]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2200      	movs	r2, #0
 800f50a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	4618      	mov	r0, r3
 800f510:	3708      	adds	r7, #8
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	0802dac0 	.word	0x0802dac0

0800f51c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b084      	sub	sp, #16
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	4639      	mov	r1, r7
 800f528:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fe ffae 	bl	800e490 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800f534:	4a08      	ldr	r2, [pc, #32]	@ (800f558 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	601a      	str	r2, [r3, #0]
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	68ba      	ldr	r2, [r7, #8]
 800f53e:	605a      	str	r2, [r3, #4]
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	3308      	adds	r3, #8
 800f544:	463a      	mov	r2, r7
 800f546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f54a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	4618      	mov	r0, r3
 800f552:	3710      	adds	r7, #16
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}
 800f558:	0802daa8 	.word	0x0802daa8

0800f55c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	4a05      	ldr	r2, [pc, #20]	@ (800f57c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	601a      	str	r2, [r3, #0]
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7fe ffbf 	bl	800e4f0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	4618      	mov	r0, r3
 800f576:	3708      	adds	r7, #8
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}
 800f57c:	0802daa8 	.word	0x0802daa8

0800f580 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f7ff ffe7 	bl	800f55c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f58e:	2110      	movs	r1, #16
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f01a ffb6 	bl	802a502 <_ZdlPvj>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	4618      	mov	r0, r3
 800f59a:	3708      	adds	r7, #8
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}

0800f5a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	4a05      	ldr	r2, [pc, #20]	@ (800f5c0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	601a      	str	r2, [r3, #0]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7ff fa73 	bl	800ea9c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3708      	adds	r7, #8
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	0802daf4 	.word	0x0802daf4

0800f5c4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b082      	sub	sp, #8
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f7ff ffe7 	bl	800f5a0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f5d2:	214c      	movs	r1, #76	@ 0x4c
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f01a ff94 	bl	802a502 <_ZdlPvj>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3708      	adds	r7, #8
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	68d2      	ldr	r2, [r2, #12]
 800f5f6:	1052      	asrs	r2, r2, #1
 800f5f8:	1898      	adds	r0, r3, r2
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	68db      	ldr	r3, [r3, #12]
 800f5fe:	f003 0301 	and.w	r3, r3, #1
 800f602:	2b00      	cmp	r3, #0
 800f604:	d102      	bne.n	800f60c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	e00a      	b.n	800f622 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	687a      	ldr	r2, [r7, #4]
 800f612:	68d2      	ldr	r2, [r2, #12]
 800f614:	1052      	asrs	r2, r2, #1
 800f616:	4413      	add	r3, r2
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	6892      	ldr	r2, [r2, #8]
 800f61e:	4413      	add	r3, r2
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	6839      	ldr	r1, [r7, #0]
 800f624:	4798      	blx	r3
    }
 800f626:	bf00      	nop
 800f628:	3708      	adds	r7, #8
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}

0800f62e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800f62e:	b480      	push	{r7}
 800f630:	b083      	sub	sp, #12
 800f632:	af00      	add	r7, sp, #0
 800f634:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d010      	beq.n	800f660 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	689b      	ldr	r3, [r3, #8]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d107      	bne.n	800f656 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	f003 0301 	and.w	r3, r3, #1
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d101      	bne.n	800f656 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f652:	2301      	movs	r3, #1
 800f654:	e000      	b.n	800f658 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800f656:	2300      	movs	r3, #0
 800f658:	2b01      	cmp	r3, #1
 800f65a:	d001      	beq.n	800f660 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f65c:	2301      	movs	r3, #1
 800f65e:	e000      	b.n	800f662 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800f660:	2300      	movs	r3, #0
    }
 800f662:	4618      	mov	r0, r3
 800f664:	370c      	adds	r7, #12
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr
	...

0800f670 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800f670:	b480      	push	{r7}
 800f672:	af00      	add	r7, sp, #0
    return bitmap_database;
 800f674:	4b02      	ldr	r3, [pc, #8]	@ (800f680 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800f676:	4618      	mov	r0, r3
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr
 800f680:	0802db7c 	.word	0x0802db7c

0800f684 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800f684:	b480      	push	{r7}
 800f686:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800f688:	2308      	movs	r3, #8
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr

0800f694 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800f694:	b480      	push	{r7}
 800f696:	b085      	sub	sp, #20
 800f698:	af00      	add	r7, sp, #0
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	460b      	mov	r3, r1
 800f69e:	607a      	str	r2, [r7, #4]
 800f6a0:	817b      	strh	r3, [r7, #10]
        return 0;
 800f6a2:	2300      	movs	r3, #0
    }
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3714      	adds	r7, #20
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
        return 0;
 800f6b8:	2300      	movs	r3, #0
    }
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	370c      	adds	r7, #12
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c4:	4770      	bx	lr

0800f6c6 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f6c6:	b480      	push	{r7}
 800f6c8:	b083      	sub	sp, #12
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	6078      	str	r0, [r7, #4]
        return 0;
 800f6ce:	2300      	movs	r3, #0
    }
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	370c      	adds	r7, #12
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr

0800f6dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800f6dc:	b480      	push	{r7}
 800f6de:	b085      	sub	sp, #20
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	60f8      	str	r0, [r7, #12]
 800f6e4:	60b9      	str	r1, [r7, #8]
 800f6e6:	4613      	mov	r3, r2
 800f6e8:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800f6ea:	4a07      	ldr	r2, [pc, #28]	@ (800f708 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	6013      	str	r3, [r2, #0]
        fonts = f;
 800f6f0:	4a06      	ldr	r2, [pc, #24]	@ (800f70c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800f6f6:	4a06      	ldr	r2, [pc, #24]	@ (800f710 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800f6f8:	88fb      	ldrh	r3, [r7, #6]
 800f6fa:	8013      	strh	r3, [r2, #0]
    }
 800f6fc:	bf00      	nop
 800f6fe:	3714      	adds	r7, #20
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr
 800f708:	20012738 	.word	0x20012738
 800f70c:	20012740 	.word	0x20012740
 800f710:	2001273c 	.word	0x2001273c

0800f714 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f714:	b40e      	push	{r1, r2, r3}
 800f716:	b580      	push	{r7, lr}
 800f718:	b085      	sub	sp, #20
 800f71a:	af00      	add	r7, sp, #0
 800f71c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800f71e:	f107 0320 	add.w	r3, r7, #32
 800f722:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	69fa      	ldr	r2, [r7, #28]
 800f728:	2100      	movs	r1, #0
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f00a f8ee 	bl	801990c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f730:	4603      	mov	r3, r0
 800f732:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f734:	89fb      	ldrh	r3, [r7, #14]
}
 800f736:	4618      	mov	r0, r3
 800f738:	3714      	adds	r7, #20
 800f73a:	46bd      	mov	sp, r7
 800f73c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f740:	b003      	add	sp, #12
 800f742:	4770      	bx	lr

0800f744 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f744:	b40c      	push	{r2, r3}
 800f746:	b580      	push	{r7, lr}
 800f748:	b084      	sub	sp, #16
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	6078      	str	r0, [r7, #4]
 800f74e:	460b      	mov	r3, r1
 800f750:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800f752:	f107 031c 	add.w	r3, r7, #28
 800f756:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800f758:	78f9      	ldrb	r1, [r7, #3]
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	69ba      	ldr	r2, [r7, #24]
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f00a f8d4 	bl	801990c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f764:	4603      	mov	r3, r0
 800f766:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f768:	89fb      	ldrh	r3, [r7, #14]
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3710      	adds	r7, #16
 800f76e:	46bd      	mov	sp, r7
 800f770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f774:	b002      	add	sp, #8
 800f776:	4770      	bx	lr

0800f778 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b08a      	sub	sp, #40	@ 0x28
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	460b      	mov	r3, r1
 800f782:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d016      	beq.n	800f7ba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	3322      	adds	r3, #34	@ 0x22
 800f790:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800f792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f794:	8adb      	ldrh	r3, [r3, #22]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d105      	bne.n	800f7a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800f79a:	4b43      	ldr	r3, [pc, #268]	@ (800f8a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800f79c:	4a43      	ldr	r2, [pc, #268]	@ (800f8ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800f79e:	21c5      	movs	r1, #197	@ 0xc5
 800f7a0:	4843      	ldr	r0, [pc, #268]	@ (800f8b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f7a2:	f01b fdf5 	bl	802b390 <__assert_func>
            return buffer[pos];
 800f7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a8:	8a9b      	ldrh	r3, [r3, #20]
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d001      	beq.n	800f7ba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	e000      	b.n	800f7bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d06a      	beq.n	800f896 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f00b fe96 	bl	801b4f2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	3322      	adds	r3, #34	@ 0x22
 800f7ca:	623b      	str	r3, [r7, #32]
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800f7d0:	6a3b      	ldr	r3, [r7, #32]
 800f7d2:	8adb      	ldrh	r3, [r3, #22]
 800f7d4:	8bfa      	ldrh	r2, [r7, #30]
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d305      	bcc.n	800f7e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800f7da:	4b36      	ldr	r3, [pc, #216]	@ (800f8b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800f7dc:	4a36      	ldr	r2, [pc, #216]	@ (800f8b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800f7de:	21cb      	movs	r1, #203	@ 0xcb
 800f7e0:	4833      	ldr	r0, [pc, #204]	@ (800f8b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f7e2:	f01b fdd5 	bl	802b390 <__assert_func>
            const uint16_t index = pos + offset;
 800f7e6:	6a3b      	ldr	r3, [r7, #32]
 800f7e8:	8a9a      	ldrh	r2, [r3, #20]
 800f7ea:	8bfb      	ldrh	r3, [r7, #30]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800f7f0:	8bbb      	ldrh	r3, [r7, #28]
 800f7f2:	2b09      	cmp	r3, #9
 800f7f4:	d801      	bhi.n	800f7fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800f7f6:	8bbb      	ldrh	r3, [r7, #28]
 800f7f8:	e001      	b.n	800f7fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800f7fa:	8bbb      	ldrh	r3, [r7, #28]
 800f7fc:	3b0a      	subs	r3, #10
 800f7fe:	6a3a      	ldr	r2, [r7, #32]
 800f800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f804:	f640 123f 	movw	r2, #2367	@ 0x93f
 800f808:	4293      	cmp	r3, r2
 800f80a:	bf0c      	ite	eq
 800f80c:	2301      	moveq	r3, #1
 800f80e:	2300      	movne	r3, #0
 800f810:	b2db      	uxtb	r3, r3
 800f812:	2b00      	cmp	r3, #0
 800f814:	d03f      	beq.n	800f896 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	3322      	adds	r3, #34	@ 0x22
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	3222      	adds	r2, #34	@ 0x22
 800f81e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800f820:	68ba      	ldr	r2, [r7, #8]
 800f822:	8ad2      	ldrh	r2, [r2, #22]
 800f824:	2a00      	cmp	r2, #0
 800f826:	d105      	bne.n	800f834 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800f828:	4b1f      	ldr	r3, [pc, #124]	@ (800f8a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800f82a:	4a20      	ldr	r2, [pc, #128]	@ (800f8ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800f82c:	21c5      	movs	r1, #197	@ 0xc5
 800f82e:	4820      	ldr	r0, [pc, #128]	@ (800f8b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f830:	f01b fdae 	bl	802b390 <__assert_func>
            return buffer[pos];
 800f834:	68ba      	ldr	r2, [r7, #8]
 800f836:	8a92      	ldrh	r2, [r2, #20]
 800f838:	4611      	mov	r1, r2
 800f83a:	68ba      	ldr	r2, [r7, #8]
 800f83c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800f840:	613b      	str	r3, [r7, #16]
 800f842:	4613      	mov	r3, r2
 800f844:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	8adb      	ldrh	r3, [r3, #22]
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d806      	bhi.n	800f85c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800f84e:	4b1b      	ldr	r3, [pc, #108]	@ (800f8bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800f850:	4a1b      	ldr	r2, [pc, #108]	@ (800f8c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800f852:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800f856:	4816      	ldr	r0, [pc, #88]	@ (800f8b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f858:	f01b fd9a 	bl	802b390 <__assert_func>
            const uint16_t index = pos + 1;
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	8a9b      	ldrh	r3, [r3, #20]
 800f860:	3301      	adds	r3, #1
 800f862:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800f864:	89bb      	ldrh	r3, [r7, #12]
 800f866:	2b09      	cmp	r3, #9
 800f868:	d801      	bhi.n	800f86e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800f86a:	89bb      	ldrh	r3, [r7, #12]
 800f86c:	e000      	b.n	800f870 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800f86e:	2300      	movs	r3, #0
 800f870:	693a      	ldr	r2, [r7, #16]
 800f872:	89f9      	ldrh	r1, [r7, #14]
 800f874:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800f878:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	3322      	adds	r3, #34	@ 0x22
 800f87e:	61bb      	str	r3, [r7, #24]
 800f880:	f640 133f 	movw	r3, #2367	@ 0x93f
 800f884:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	8a9b      	ldrh	r3, [r3, #20]
 800f88a:	4619      	mov	r1, r3
 800f88c:	69bb      	ldr	r3, [r7, #24]
 800f88e:	8afa      	ldrh	r2, [r7, #22]
 800f890:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800f894:	bf00      	nop
        }
    }
    return getNextChar();
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f00b fd2e 	bl	801b2f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f89c:	4603      	mov	r3, r0
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3728      	adds	r7, #40	@ 0x28
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}
 800f8a6:	bf00      	nop
 800f8a8:	0802cddc 	.word	0x0802cddc
 800f8ac:	0802cde8 	.word	0x0802cde8
 800f8b0:	0802ce94 	.word	0x0802ce94
 800f8b4:	0802cedc 	.word	0x0802cedc
 800f8b8:	0802ceec 	.word	0x0802ceec
 800f8bc:	0802cfc0 	.word	0x0802cfc0
 800f8c0:	0802cfcc 	.word	0x0802cfcc

0800f8c4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f00b fcda 	bl	801b286 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800f8d2:	bf00      	nop
 800f8d4:	3708      	adds	r7, #8
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}

0800f8da <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800f8da:	b580      	push	{r7, lr}
 800f8dc:	b088      	sub	sp, #32
 800f8de:	af02      	add	r7, sp, #8
 800f8e0:	60f8      	str	r0, [r7, #12]
 800f8e2:	1d38      	adds	r0, r7, #4
 800f8e4:	e880 0006 	stmia.w	r0, {r1, r2}
 800f8e8:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800f8ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f8ee:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800f8f0:	1d39      	adds	r1, r7, #4
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	9301      	str	r3, [sp, #4]
 800f8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f8:	9300      	str	r3, [sp, #0]
 800f8fa:	6a3b      	ldr	r3, [r7, #32]
 800f8fc:	683a      	ldr	r2, [r7, #0]
 800f8fe:	68f8      	ldr	r0, [r7, #12]
 800f900:	f008 fc60 	bl	80181c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800f904:	bf00      	nop
 800f906:	3718      	adds	r7, #24
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800f90c:	b590      	push	{r4, r7, lr}
 800f90e:	b085      	sub	sp, #20
 800f910:	af00      	add	r7, sp, #0
 800f912:	4603      	mov	r3, r0
 800f914:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800f916:	2300      	movs	r3, #0
 800f918:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800f91a:	88fb      	ldrh	r3, [r7, #6]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d127      	bne.n	800f970 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800f920:	88fb      	ldrh	r3, [r7, #6]
 800f922:	4a1e      	ldr	r2, [pc, #120]	@ (800f99c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800f924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d016      	beq.n	800f95a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800f92c:	88fb      	ldrh	r3, [r7, #6]
 800f92e:	4a1b      	ldr	r2, [pc, #108]	@ (800f99c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800f930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f934:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	68ba      	ldr	r2, [r7, #8]
 800f93c:	4413      	add	r3, r2
 800f93e:	4a18      	ldr	r2, [pc, #96]	@ (800f9a0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f940:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	68ba      	ldr	r2, [r7, #8]
 800f948:	4413      	add	r3, r2
 800f94a:	4a16      	ldr	r2, [pc, #88]	@ (800f9a4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f94c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	689b      	ldr	r3, [r3, #8]
 800f952:	68ba      	ldr	r2, [r7, #8]
 800f954:	4413      	add	r3, r2
 800f956:	60fb      	str	r3, [r7, #12]
 800f958:	e00a      	b.n	800f970 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800f95a:	4b11      	ldr	r3, [pc, #68]	@ (800f9a0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f95c:	4a12      	ldr	r2, [pc, #72]	@ (800f9a8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800f95e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800f960:	4a12      	ldr	r2, [pc, #72]	@ (800f9ac <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800f962:	4b10      	ldr	r3, [pc, #64]	@ (800f9a4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f964:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800f966:	88fb      	ldrh	r3, [r7, #6]
 800f968:	4a11      	ldr	r2, [pc, #68]	@ (800f9b0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800f96a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f96e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d00d      	beq.n	800f992 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800f976:	4a0f      	ldr	r2, [pc, #60]	@ (800f9b4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800f978:	88fb      	ldrh	r3, [r7, #6]
 800f97a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800f97c:	f000 f83e 	bl	800f9fc <_ZN17TypedTextDatabase8getFontsEv>
 800f980:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800f982:	f000 f833 	bl	800f9ec <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800f986:	4603      	mov	r3, r0
 800f988:	461a      	mov	r2, r3
 800f98a:	4621      	mov	r1, r4
 800f98c:	68f8      	ldr	r0, [r7, #12]
 800f98e:	f7ff fea5 	bl	800f6dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800f992:	bf00      	nop
 800f994:	3714      	adds	r7, #20
 800f996:	46bd      	mov	sp, r7
 800f998:	bd90      	pop	{r4, r7, pc}
 800f99a:	bf00      	nop
 800f99c:	20011260 	.word	0x20011260
 800f9a0:	20011268 	.word	0x20011268
 800f9a4:	2001126c 	.word	0x2001126c
 800f9a8:	08050388 	.word	0x08050388
 800f9ac:	08050370 	.word	0x08050370
 800f9b0:	080503c8 	.word	0x080503c8
 800f9b4:	20011264 	.word	0x20011264

0800f9b8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b083      	sub	sp, #12
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800f9c4:	4b07      	ldr	r3, [pc, #28]	@ (800f9e4 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800f9c6:	681a      	ldr	r2, [r3, #0]
 800f9c8:	4b07      	ldr	r3, [pc, #28]	@ (800f9e8 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800f9ca:	6819      	ldr	r1, [r3, #0]
 800f9cc:	887b      	ldrh	r3, [r7, #2]
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	440b      	add	r3, r1
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	005b      	lsls	r3, r3, #1
 800f9d6:	4413      	add	r3, r2
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr
 800f9e4:	20011268 	.word	0x20011268
 800f9e8:	2001126c 	.word	0x2001126c

0800f9ec <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800f9f0:	2306      	movs	r3, #6
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr

0800f9fc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800fa00:	4b02      	ldr	r3, [pc, #8]	@ (800fa0c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr
 800fa0c:	20011270 	.word	0x20011270

0800fa10 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	d113      	bne.n	800fa48 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d10e      	bne.n	800fa48 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800fa2a:	f7fc fbad 	bl	800c188 <_Z23getFont_verdana_20_4bppv>
 800fa2e:	4603      	mov	r3, r0
};
 800fa30:	4a07      	ldr	r2, [pc, #28]	@ (800fa50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800fa32:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800fa34:	f7fc fc02 	bl	800c23c <_Z23getFont_verdana_40_4bppv>
 800fa38:	4603      	mov	r3, r0
};
 800fa3a:	4a05      	ldr	r2, [pc, #20]	@ (800fa50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800fa3c:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800fa3e:	f7fc fb49 	bl	800c0d4 <_Z23getFont_verdana_10_4bppv>
 800fa42:	4603      	mov	r3, r0
};
 800fa44:	4a02      	ldr	r2, [pc, #8]	@ (800fa50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800fa46:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800fa48:	bf00      	nop
 800fa4a:	3708      	adds	r7, #8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	20011270 	.word	0x20011270

0800fa54 <_GLOBAL__sub_I_touchgfx_fonts>:
 800fa54:	b580      	push	{r7, lr}
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fa5c:	2001      	movs	r0, #1
 800fa5e:	f7ff ffd7 	bl	800fa10 <_Z41__static_initialization_and_destruction_0ii>
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	4a05      	ldr	r2, [pc, #20]	@ (800fa84 <_ZN19FrontendApplicationD1Ev+0x20>)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	601a      	str	r2, [r3, #0]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fd f809 	bl	800ca8c <_ZN23FrontendApplicationBaseD1Ev>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3708      	adds	r7, #8
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	0802dc88 	.word	0x0802dc88

0800fa88 <_ZN19FrontendApplicationD0Ev>:
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f7ff ffe7 	bl	800fa64 <_ZN19FrontendApplicationD1Ev>
 800fa96:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f01a fd31 	bl	802a502 <_ZdlPvj>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	4618      	mov	r0, r3
 800faa4:	3708      	adds	r7, #8
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800faaa:	b580      	push	{r7, lr}
 800faac:	b082      	sub	sp, #8
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800fab8:	4618      	mov	r0, r3
 800faba:	f000 f82d 	bl	800fb18 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4618      	mov	r0, r3
 800fac2:	f009 f859 	bl	8018b78 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800fac6:	bf00      	nop
 800fac8:	3708      	adds	r7, #8
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
	...

0800fad0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	60f8      	str	r0, [r7, #12]
 800fad8:	60b9      	str	r1, [r7, #8]
 800fada:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	687a      	ldr	r2, [r7, #4]
 800fae0:	68b9      	ldr	r1, [r7, #8]
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7fd f844 	bl	800cb70 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800fae8:	4a03      	ldr	r2, [pc, #12]	@ (800faf8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	601a      	str	r2, [r3, #0]
{

}
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	4618      	mov	r0, r3
 800faf2:	3710      	adds	r7, #16
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	0802dc88 	.word	0x0802dc88

0800fafc <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800fafc:	b480      	push	{r7}
 800fafe:	b083      	sub	sp, #12
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2200      	movs	r2, #0
 800fb08:	601a      	str	r2, [r3, #0]
{

}
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	370c      	adds	r7, #12
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr

0800fb18 <_ZN5Model4tickEv>:

void Model::tick()
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b083      	sub	sp, #12
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]

}
 800fb20:	bf00      	nop
 800fb22:	370c      	adds	r7, #12
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr

0800fb2c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800fb2c:	b480      	push	{r7}
 800fb2e:	b083      	sub	sp, #12
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
    {
    }
 800fb34:	bf00      	nop
 800fb36:	370c      	adds	r7, #12
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3e:	4770      	bx	lr

0800fb40 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800fb40:	b480      	push	{r7}
 800fb42:	b083      	sub	sp, #12
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
    {
    }
 800fb48:	bf00      	nop
 800fb4a:	370c      	adds	r7, #12
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr

0800fb54 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
    {
 800fb5c:	4a04      	ldr	r2, [pc, #16]	@ (800fb70 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	601a      	str	r2, [r3, #0]
    }
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4618      	mov	r0, r3
 800fb66:	370c      	adds	r7, #12
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr
 800fb70:	0802dd14 	.word	0x0802dd14

0800fb74 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
    }
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f7ff ffe9 	bl	800fb54 <_ZN8touchgfx9PresenterD1Ev>
 800fb82:	2104      	movs	r1, #4
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f01a fcbc 	bl	802a502 <_ZdlPvj>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800fb94:	b480      	push	{r7}
 800fb96:	b083      	sub	sp, #12
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
    {
 800fb9c:	4a04      	ldr	r2, [pc, #16]	@ (800fbb0 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	601a      	str	r2, [r3, #0]
    }
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	4618      	mov	r0, r3
 800fba6:	370c      	adds	r7, #12
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbae:	4770      	bx	lr
 800fbb0:	0802dd14 	.word	0x0802dd14

0800fbb4 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800fbb4:	b480      	push	{r7}
 800fbb6:	b083      	sub	sp, #12
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	4a06      	ldr	r2, [pc, #24]	@ (800fbd8 <_ZN13ModelListenerC1Ev+0x24>)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	601a      	str	r2, [r3, #0]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	605a      	str	r2, [r3, #4]
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	4618      	mov	r0, r3
 800fbcc:	370c      	adds	r7, #12
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr
 800fbd6:	bf00      	nop
 800fbd8:	0802dd04 	.word	0x0802dd04

0800fbdc <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800fbdc:	b480      	push	{r7}
 800fbde:	b083      	sub	sp, #12
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	4a04      	ldr	r2, [pc, #16]	@ (800fbf8 <_ZN13ModelListenerD1Ev+0x1c>)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	601a      	str	r2, [r3, #0]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4618      	mov	r0, r3
 800fbee:	370c      	adds	r7, #12
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf6:	4770      	bx	lr
 800fbf8:	0802dd04 	.word	0x0802dd04

0800fbfc <_ZN13ModelListenerD0Ev>:
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b082      	sub	sp, #8
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f7ff ffe9 	bl	800fbdc <_ZN13ModelListenerD1Ev>
 800fc0a:	2108      	movs	r1, #8
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f01a fc78 	bl	802a502 <_ZdlPvj>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	4618      	mov	r0, r3
 800fc16:	3708      	adds	r7, #8
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	4a09      	ldr	r2, [pc, #36]	@ (800fc4c <_ZN16Screen1PresenterD1Ev+0x30>)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	601a      	str	r2, [r3, #0]
 800fc2a:	4a09      	ldr	r2, [pc, #36]	@ (800fc50 <_ZN16Screen1PresenterD1Ev+0x34>)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	605a      	str	r2, [r3, #4]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	3304      	adds	r3, #4
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7ff ffd1 	bl	800fbdc <_ZN13ModelListenerD1Ev>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7ff ff89 	bl	800fb54 <_ZN8touchgfx9PresenterD1Ev>
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	4618      	mov	r0, r3
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	0802dcdc 	.word	0x0802dcdc
 800fc50:	0802dcf4 	.word	0x0802dcf4

0800fc54 <_ZThn4_N16Screen1PresenterD1Ev>:
 800fc54:	f1a0 0004 	sub.w	r0, r0, #4
 800fc58:	e7e0      	b.n	800fc1c <_ZN16Screen1PresenterD1Ev>
 800fc5a:	bf00      	nop

0800fc5c <_ZN16Screen1PresenterD0Ev>:
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f7ff ffd9 	bl	800fc1c <_ZN16Screen1PresenterD1Ev>
 800fc6a:	2110      	movs	r1, #16
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f01a fc48 	bl	802a502 <_ZdlPvj>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4618      	mov	r0, r3
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <_ZThn4_N16Screen1PresenterD0Ev>:
 800fc7c:	f1a0 0004 	sub.w	r0, r0, #4
 800fc80:	e7ec      	b.n	800fc5c <_ZN16Screen1PresenterD0Ev>
	...

0800fc84 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
    : view(v)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7ff ff7f 	bl	800fb94 <_ZN8touchgfx9PresenterC1Ev>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	3304      	adds	r3, #4
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7ff ff8a 	bl	800fbb4 <_ZN13ModelListenerC1Ev>
 800fca0:	4a06      	ldr	r2, [pc, #24]	@ (800fcbc <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	601a      	str	r2, [r3, #0]
 800fca6:	4a06      	ldr	r2, [pc, #24]	@ (800fcc0 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	605a      	str	r2, [r3, #4]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	683a      	ldr	r2, [r7, #0]
 800fcb0:	60da      	str	r2, [r3, #12]
{

}
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3708      	adds	r7, #8
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	0802dcdc 	.word	0x0802dcdc
 800fcc0:	0802dcf4 	.word	0x0802dcf4

0800fcc4 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]

}
 800fccc:	bf00      	nop
 800fcce:	370c      	adds	r7, #12
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr

0800fcd8 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b083      	sub	sp, #12
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]

}
 800fce0:	bf00      	nop
 800fce2:	370c      	adds	r7, #12
 800fce4:	46bd      	mov	sp, r7
 800fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcea:	4770      	bx	lr

0800fcec <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	4a05      	ldr	r2, [pc, #20]	@ (800fd0c <_ZN11Screen1ViewD1Ev+0x20>)
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	601a      	str	r2, [r3, #0]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7fe fb43 	bl	800e388 <_ZN15Screen1ViewBaseD1Ev>
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	4618      	mov	r0, r3
 800fd06:	3708      	adds	r7, #8
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	0802dd2c 	.word	0x0802dd2c

0800fd10 <_ZN11Screen1ViewD0Ev>:
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f7ff ffe7 	bl	800fcec <_ZN11Screen1ViewD1Ev>
 800fd1e:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f01a fbed 	bl	802a502 <_ZdlPvj>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3708      	adds	r7, #8
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
	...

0800fd34 <_ZN11Screen1ViewC1Ev>:

extern UART_HandleTypeDef huart1;
//extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart3;
extern int state;
Screen1View::Screen1View()
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7fe f9ae 	bl	800e0a0 <_ZN15Screen1ViewBaseC1Ev>
 800fd44:	4a03      	ldr	r2, [pc, #12]	@ (800fd54 <_ZN11Screen1ViewC1Ev+0x20>)
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	601a      	str	r2, [r3, #0]
{

}
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	3708      	adds	r7, #8
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}
 800fd54:	0802dd2c 	.word	0x0802dd2c

0800fd58 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b082      	sub	sp, #8
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7fe fb53 	bl	800e40e <_ZN15Screen1ViewBase11setupScreenEv>
}
 800fd68:	bf00      	nop
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]

    Screen1ViewBase::tearDownScreen();
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7fe f87e 	bl	800de7c <_ZN8touchgfx6Screen14tearDownScreenEv>
    state=1;
 800fd80:	4b03      	ldr	r3, [pc, #12]	@ (800fd90 <_ZN11Screen1View14tearDownScreenEv+0x20>)
 800fd82:	2201      	movs	r2, #1
 800fd84:	601a      	str	r2, [r3, #0]
}
 800fd86:	bf00      	nop
 800fd88:	3708      	adds	r7, #8
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	2001127c 	.word	0x2001127c

0800fd94 <_ZN11Screen1View14toggle_curtainEv>:

void Screen1View::toggle_curtain()
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
	uint8_t str[] = "C\r\n";
 800fd9c:	4b0c      	ldr	r3, [pc, #48]	@ (800fdd0 <_ZN11Screen1View14toggle_curtainEv+0x3c>)
 800fd9e:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, str, sizeof(str), 100);
 800fda0:	f107 010c 	add.w	r1, r7, #12
 800fda4:	2364      	movs	r3, #100	@ 0x64
 800fda6:	2204      	movs	r2, #4
 800fda8:	480a      	ldr	r0, [pc, #40]	@ (800fdd4 <_ZN11Screen1View14toggle_curtainEv+0x40>)
 800fdaa:	f7f7 f9db 	bl	8007164 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, str, sizeof(str), 100);
 800fdae:	f107 010c 	add.w	r1, r7, #12
 800fdb2:	2364      	movs	r3, #100	@ 0x64
 800fdb4:	2204      	movs	r2, #4
 800fdb6:	4808      	ldr	r0, [pc, #32]	@ (800fdd8 <_ZN11Screen1View14toggle_curtainEv+0x44>)
 800fdb8:	f7f7 f9d4 	bl	8007164 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 800fdbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fdc0:	4806      	ldr	r0, [pc, #24]	@ (800fddc <_ZN11Screen1View14toggle_curtainEv+0x48>)
 800fdc2:	f7f3 fa8e 	bl	80032e2 <HAL_GPIO_TogglePin>
}
 800fdc6:	bf00      	nop
 800fdc8:	3710      	adds	r7, #16
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	000a0d43 	.word	0x000a0d43
 800fdd4:	2000038c 	.word	0x2000038c
 800fdd8:	20000344 	.word	0x20000344
 800fddc:	40021800 	.word	0x40021800

0800fde0 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {}
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b082      	sub	sp, #8
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	4a09      	ldr	r2, [pc, #36]	@ (800fe10 <_ZN16Screen2PresenterD1Ev+0x30>)
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	601a      	str	r2, [r3, #0]
 800fdee:	4a09      	ldr	r2, [pc, #36]	@ (800fe14 <_ZN16Screen2PresenterD1Ev+0x34>)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	605a      	str	r2, [r3, #4]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	3304      	adds	r3, #4
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7ff feef 	bl	800fbdc <_ZN13ModelListenerD1Ev>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7ff fea7 	bl	800fb54 <_ZN8touchgfx9PresenterD1Ev>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	0802dd64 	.word	0x0802dd64
 800fe14:	0802dd7c 	.word	0x0802dd7c

0800fe18 <_ZThn4_N16Screen2PresenterD1Ev>:
 800fe18:	f1a0 0004 	sub.w	r0, r0, #4
 800fe1c:	e7e0      	b.n	800fde0 <_ZN16Screen2PresenterD1Ev>
 800fe1e:	bf00      	nop

0800fe20 <_ZN16Screen2PresenterD0Ev>:
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f7ff ffd9 	bl	800fde0 <_ZN16Screen2PresenterD1Ev>
 800fe2e:	2110      	movs	r1, #16
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f01a fb66 	bl	802a502 <_ZdlPvj>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3708      	adds	r7, #8
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}

0800fe40 <_ZThn4_N16Screen2PresenterD0Ev>:
 800fe40:	f1a0 0004 	sub.w	r0, r0, #4
 800fe44:	e7ec      	b.n	800fe20 <_ZN16Screen2PresenterD0Ev>
	...

0800fe48 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
    : view(v)
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	4618      	mov	r0, r3
 800fe56:	f7ff fe9d 	bl	800fb94 <_ZN8touchgfx9PresenterC1Ev>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	3304      	adds	r3, #4
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7ff fea8 	bl	800fbb4 <_ZN13ModelListenerC1Ev>
 800fe64:	4a06      	ldr	r2, [pc, #24]	@ (800fe80 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	601a      	str	r2, [r3, #0]
 800fe6a:	4a06      	ldr	r2, [pc, #24]	@ (800fe84 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	605a      	str	r2, [r3, #4]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	683a      	ldr	r2, [r7, #0]
 800fe74:	60da      	str	r2, [r3, #12]
{

}
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3708      	adds	r7, #8
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}
 800fe80:	0802dd64 	.word	0x0802dd64
 800fe84:	0802dd7c 	.word	0x0802dd7c

0800fe88 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b083      	sub	sp, #12
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]

}
 800fe90:	bf00      	nop
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]

}
 800fea4:	bf00      	nop
 800fea6:	370c      	adds	r7, #12
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr

0800feb0 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	4a05      	ldr	r2, [pc, #20]	@ (800fed0 <_ZN11Screen2ViewD1Ev+0x20>)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	601a      	str	r2, [r3, #0]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7ff fa83 	bl	800f3cc <_ZN15Screen2ViewBaseD1Ev>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	4618      	mov	r0, r3
 800feca:	3708      	adds	r7, #8
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}
 800fed0:	0802dd8c 	.word	0x0802dd8c

0800fed4 <_ZN11Screen2ViewD0Ev>:
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f7ff ffe7 	bl	800feb0 <_ZN11Screen2ViewD1Ev>
 800fee2:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f01a fb0b 	bl	802a502 <_ZdlPvj>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	4618      	mov	r0, r3
 800fef0:	3708      	adds	r7, #8
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
	...

0800fef8 <_ZN11Screen2ViewC1Ev>:
extern UART_HandleTypeDef huart3;

int state;
int now_temp=77;
int select_temp=20;
Screen2View::Screen2View()
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7fe fe6a 	bl	800ebdc <_ZN15Screen2ViewBaseC1Ev>
 800ff08:	4a03      	ldr	r2, [pc, #12]	@ (800ff18 <_ZN11Screen2ViewC1Ev+0x20>)
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	601a      	str	r2, [r3, #0]
{

}
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4618      	mov	r0, r3
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	0802dd8c 	.word	0x0802dd8c

0800ff1c <_ZN11Screen2View7temp_upEv>:

void Screen2View::temp_up()
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b084      	sub	sp, #16
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 800ff24:	2201      	movs	r2, #1
 800ff26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ff2a:	481d      	ldr	r0, [pc, #116]	@ (800ffa0 <_ZN11Screen2View7temp_upEv+0x84>)
 800ff2c:	f7f3 f9c0 	bl	80032b0 <HAL_GPIO_WritePin>

	uint8_t str[] = "0\r\n";
 800ff30:	4b1c      	ldr	r3, [pc, #112]	@ (800ffa4 <_ZN11Screen2View7temp_upEv+0x88>)
 800ff32:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, str, sizeof(str), 100);
 800ff34:	f107 010c 	add.w	r1, r7, #12
 800ff38:	2364      	movs	r3, #100	@ 0x64
 800ff3a:	2204      	movs	r2, #4
 800ff3c:	481a      	ldr	r0, [pc, #104]	@ (800ffa8 <_ZN11Screen2View7temp_upEv+0x8c>)
 800ff3e:	f7f7 f911 	bl	8007164 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, str, sizeof(str), 100);
 800ff42:	f107 010c 	add.w	r1, r7, #12
 800ff46:	2364      	movs	r3, #100	@ 0x64
 800ff48:	2204      	movs	r2, #4
 800ff4a:	4818      	ldr	r0, [pc, #96]	@ (800ffac <_ZN11Screen2View7temp_upEv+0x90>)
 800ff4c:	f7f7 f90a 	bl	8007164 <HAL_UART_Transmit>
	select_temp++;
 800ff50:	4b17      	ldr	r3, [pc, #92]	@ (800ffb0 <_ZN11Screen2View7temp_upEv+0x94>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	3301      	adds	r3, #1
 800ff56:	4a16      	ldr	r2, [pc, #88]	@ (800ffb0 <_ZN11Screen2View7temp_upEv+0x94>)
 800ff58:	6013      	str	r3, [r2, #0]

	Unicode::snprintf(TXBuffer, 15, "%d", select_temp);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f503 701d 	add.w	r0, r3, #628	@ 0x274
 800ff60:	4b13      	ldr	r3, [pc, #76]	@ (800ffb0 <_ZN11Screen2View7temp_upEv+0x94>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4a13      	ldr	r2, [pc, #76]	@ (800ffb4 <_ZN11Screen2View7temp_upEv+0x98>)
 800ff66:	210f      	movs	r1, #15
 800ff68:	f00c f86c 	bl	801c044 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	TX.invalidate();
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800ff72:	4618      	mov	r0, r3
 800ff74:	f009 fdf4 	bl	8019b60 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(nowtempBuffer, 15, "%d", now_temp);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f203 2092 	addw	r0, r3, #658	@ 0x292
 800ff7e:	4b0e      	ldr	r3, [pc, #56]	@ (800ffb8 <_ZN11Screen2View7temp_upEv+0x9c>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	4a0c      	ldr	r2, [pc, #48]	@ (800ffb4 <_ZN11Screen2View7temp_upEv+0x98>)
 800ff84:	210f      	movs	r1, #15
 800ff86:	f00c f85d 	bl	801c044 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	nowtemp.invalidate();
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800ff90:	4618      	mov	r0, r3
 800ff92:	f009 fde5 	bl	8019b60 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800ff96:	bf00      	nop
 800ff98:	3710      	adds	r7, #16
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	40021800 	.word	0x40021800
 800ffa4:	000a0d30 	.word	0x000a0d30
 800ffa8:	20000344 	.word	0x20000344
 800ffac:	2000038c 	.word	0x2000038c
 800ffb0:	20000080 	.word	0x20000080
 800ffb4:	0802d080 	.word	0x0802d080
 800ffb8:	2000007c 	.word	0x2000007c

0800ffbc <_ZN11Screen2View9temp_downEv>:

void Screen2View::temp_down()
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b084      	sub	sp, #16
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ffca:	481d      	ldr	r0, [pc, #116]	@ (8010040 <_ZN11Screen2View9temp_downEv+0x84>)
 800ffcc:	f7f3 f970 	bl	80032b0 <HAL_GPIO_WritePin>
	uint8_t str[] = "1\r\n";
 800ffd0:	4b1c      	ldr	r3, [pc, #112]	@ (8010044 <_ZN11Screen2View9temp_downEv+0x88>)
 800ffd2:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, str, sizeof(str), 100);
 800ffd4:	f107 010c 	add.w	r1, r7, #12
 800ffd8:	2364      	movs	r3, #100	@ 0x64
 800ffda:	2204      	movs	r2, #4
 800ffdc:	481a      	ldr	r0, [pc, #104]	@ (8010048 <_ZN11Screen2View9temp_downEv+0x8c>)
 800ffde:	f7f7 f8c1 	bl	8007164 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, str, sizeof(str), 100);
 800ffe2:	f107 010c 	add.w	r1, r7, #12
 800ffe6:	2364      	movs	r3, #100	@ 0x64
 800ffe8:	2204      	movs	r2, #4
 800ffea:	4818      	ldr	r0, [pc, #96]	@ (801004c <_ZN11Screen2View9temp_downEv+0x90>)
 800ffec:	f7f7 f8ba 	bl	8007164 <HAL_UART_Transmit>
	select_temp--;
 800fff0:	4b17      	ldr	r3, [pc, #92]	@ (8010050 <_ZN11Screen2View9temp_downEv+0x94>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	3b01      	subs	r3, #1
 800fff6:	4a16      	ldr	r2, [pc, #88]	@ (8010050 <_ZN11Screen2View9temp_downEv+0x94>)
 800fff8:	6013      	str	r3, [r2, #0]


	 Unicode::snprintf(TXBuffer, 15, "%d", select_temp);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f503 701d 	add.w	r0, r3, #628	@ 0x274
 8010000:	4b13      	ldr	r3, [pc, #76]	@ (8010050 <_ZN11Screen2View9temp_downEv+0x94>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	4a13      	ldr	r2, [pc, #76]	@ (8010054 <_ZN11Screen2View9temp_downEv+0x98>)
 8010006:	210f      	movs	r1, #15
 8010008:	f00c f81c 	bl	801c044 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	 TX.invalidate();
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8010012:	4618      	mov	r0, r3
 8010014:	f009 fda4 	bl	8019b60 <_ZNK8touchgfx8Drawable10invalidateEv>
	 Unicode::snprintf(nowtempBuffer, 15, "%d", now_temp);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f203 2092 	addw	r0, r3, #658	@ 0x292
 801001e:	4b0e      	ldr	r3, [pc, #56]	@ (8010058 <_ZN11Screen2View9temp_downEv+0x9c>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4a0c      	ldr	r2, [pc, #48]	@ (8010054 <_ZN11Screen2View9temp_downEv+0x98>)
 8010024:	210f      	movs	r1, #15
 8010026:	f00c f80d 	bl	801c044 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	 nowtemp.invalidate();
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8010030:	4618      	mov	r0, r3
 8010032:	f009 fd95 	bl	8019b60 <_ZNK8touchgfx8Drawable10invalidateEv>

	//TX.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AWFL));

}
 8010036:	bf00      	nop
 8010038:	3710      	adds	r7, #16
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	40021800 	.word	0x40021800
 8010044:	000a0d31 	.word	0x000a0d31
 8010048:	20000344 	.word	0x20000344
 801004c:	2000038c 	.word	0x2000038c
 8010050:	20000080 	.word	0x20000080
 8010054:	0802d080 	.word	0x0802d080
 8010058:	2000007c 	.word	0x2000007c

0801005c <_ZN11Screen2View11setupScreenEv>:


void Screen2View::setupScreen()
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b082      	sub	sp, #8
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	4618      	mov	r0, r3
 8010068:	f7ff fa0b 	bl	800f482 <_ZN15Screen2ViewBase11setupScreenEv>
}
 801006c:	bf00      	nop
 801006e:	3708      	adds	r7, #8
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	4618      	mov	r0, r3
 8010080:	f7fd fefc 	bl	800de7c <_ZN8touchgfx6Screen14tearDownScreenEv>
    state=0;
 8010084:	4b03      	ldr	r3, [pc, #12]	@ (8010094 <_ZN11Screen2View14tearDownScreenEv+0x20>)
 8010086:	2200      	movs	r2, #0
 8010088:	601a      	str	r2, [r3, #0]
}
 801008a:	bf00      	nop
 801008c:	3708      	adds	r7, #8
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
 8010092:	bf00      	nop
 8010094:	2001127c 	.word	0x2001127c

08010098 <_ZN11Screen2View16changeAppearanceEv>:

void Screen2View::changeAppearance()
{   //Color
 8010098:	b480      	push	{r7}
 801009a:	b083      	sub	sp, #12
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]

}
 80100a0:	bf00      	nop
 80100a2:	370c      	adds	r7, #12
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr

080100ac <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
    {
 80100b4:	4a04      	ldr	r2, [pc, #16]	@ (80100c8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	601a      	str	r2, [r3, #0]
    }
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	4618      	mov	r0, r3
 80100be:	370c      	adds	r7, #12
 80100c0:	46bd      	mov	sp, r7
 80100c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c6:	4770      	bx	lr
 80100c8:	0802dde4 	.word	0x0802dde4

080100cc <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b082      	sub	sp, #8
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
    }
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f7ff ffe9 	bl	80100ac <_ZN8touchgfx15TouchControllerD1Ev>
 80100da:	2104      	movs	r1, #4
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f01a fa10 	bl	802a502 <_ZdlPvj>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	4618      	mov	r0, r3
 80100e6:	3708      	adds	r7, #8
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <_ZN20STM32TouchController4initEv>:

uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize);
void    BSP_TS_GetState(TS_StateTypeDef* TsState);

void STM32TouchController::init()
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    BSP_TS_Init(240, 320);
 80100f4:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80100f8:	20f0      	movs	r0, #240	@ 0xf0
 80100fa:	f000 f821 	bl	8010140 <_Z11BSP_TS_Inittt>
}
 80100fe:	bf00      	nop
 8010100:	3708      	adds	r7, #8
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8010106:	b580      	push	{r7, lr}
 8010108:	b086      	sub	sp, #24
 801010a:	af00      	add	r7, sp, #0
 801010c:	60f8      	str	r0, [r7, #12]
 801010e:	60b9      	str	r1, [r7, #8]
 8010110:	607a      	str	r2, [r7, #4]
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_StateTypeDef state;
    BSP_TS_GetState(&state);
 8010112:	f107 0310 	add.w	r3, r7, #16
 8010116:	4618      	mov	r0, r3
 8010118:	f000 f850 	bl	80101bc <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 801011c:	8a3b      	ldrh	r3, [r7, #16]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d009      	beq.n	8010136 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>
    {
        x = state.X;
 8010122:	8a7b      	ldrh	r3, [r7, #18]
 8010124:	461a      	mov	r2, r3
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	601a      	str	r2, [r3, #0]
        y = state.Y;
 801012a:	8abb      	ldrh	r3, [r7, #20]
 801012c:	461a      	mov	r2, r3
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	601a      	str	r2, [r3, #0]
        return true;
 8010132:	2301      	movs	r3, #1
 8010134:	e000      	b.n	8010138 <_ZN20STM32TouchController11sampleTouchERlS0_+0x32>
    }
    return false;
 8010136:	2300      	movs	r3, #0
}
 8010138:	4618      	mov	r0, r3
 801013a:	3718      	adds	r7, #24
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b084      	sub	sp, #16
 8010144:	af00      	add	r7, sp, #0
 8010146:	4603      	mov	r3, r0
 8010148:	460a      	mov	r2, r1
 801014a:	80fb      	strh	r3, [r7, #6]
 801014c:	4613      	mov	r3, r2
 801014e:	80bb      	strh	r3, [r7, #4]
    uint8_t ret = TS_ERROR;
 8010150:	2301      	movs	r3, #1
 8010152:	73fb      	strb	r3, [r7, #15]

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 8010154:	4a15      	ldr	r2, [pc, #84]	@ (80101ac <_Z11BSP_TS_Inittt+0x6c>)
 8010156:	88fb      	ldrh	r3, [r7, #6]
 8010158:	8013      	strh	r3, [r2, #0]
    TsYBoundary = YSize;
 801015a:	4a15      	ldr	r2, [pc, #84]	@ (80101b0 <_Z11BSP_TS_Inittt+0x70>)
 801015c:	88bb      	ldrh	r3, [r7, #4]
 801015e:	8013      	strh	r3, [r2, #0]

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8010160:	4b14      	ldr	r3, [pc, #80]	@ (80101b4 <_Z11BSP_TS_Inittt+0x74>)
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	2082      	movs	r0, #130	@ 0x82
 8010166:	4798      	blx	r3
 8010168:	4603      	mov	r3, r0
 801016a:	461a      	mov	r2, r3
 801016c:	f640 0311 	movw	r3, #2065	@ 0x811
 8010170:	429a      	cmp	r2, r3
 8010172:	bf0c      	ite	eq
 8010174:	2301      	moveq	r3, #1
 8010176:	2300      	movne	r3, #0
 8010178:	b2db      	uxtb	r3, r3
 801017a:	2b00      	cmp	r3, #0
 801017c:	d004      	beq.n	8010188 <_Z11BSP_TS_Inittt+0x48>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 801017e:	4b0e      	ldr	r3, [pc, #56]	@ (80101b8 <_Z11BSP_TS_Inittt+0x78>)
 8010180:	4a0c      	ldr	r2, [pc, #48]	@ (80101b4 <_Z11BSP_TS_Inittt+0x74>)
 8010182:	601a      	str	r2, [r3, #0]

        ret = TS_OK;
 8010184:	2300      	movs	r3, #0
 8010186:	73fb      	strb	r3, [r7, #15]
    }

    if (ret == TS_OK)
 8010188:	7bfb      	ldrb	r3, [r7, #15]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d109      	bne.n	80101a2 <_Z11BSP_TS_Inittt+0x62>
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 801018e:	4b0a      	ldr	r3, [pc, #40]	@ (80101b8 <_Z11BSP_TS_Inittt+0x78>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2082      	movs	r0, #130	@ 0x82
 8010196:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 8010198:	4b07      	ldr	r3, [pc, #28]	@ (80101b8 <_Z11BSP_TS_Inittt+0x78>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	68db      	ldr	r3, [r3, #12]
 801019e:	2082      	movs	r0, #130	@ 0x82
 80101a0:	4798      	blx	r3
    }

    return ret;
 80101a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3710      	adds	r7, #16
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	20011284 	.word	0x20011284
 80101b0:	20011286 	.word	0x20011286
 80101b4:	20000048 	.word	0x20000048
 80101b8:	20011280 	.word	0x20011280

080101bc <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b086      	sub	sp, #24
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80101c4:	4b58      	ldr	r3, [pc, #352]	@ (8010328 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x16c>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	691b      	ldr	r3, [r3, #16]
 80101ca:	2082      	movs	r0, #130	@ 0x82
 80101cc:	4798      	blx	r3
 80101ce:	4603      	mov	r3, r0
 80101d0:	461a      	mov	r2, r3
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	801a      	strh	r2, [r3, #0]

    if (TsState->TouchDetected)
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	881b      	ldrh	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f000 809f 	beq.w	801031e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x162>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80101e0:	4b51      	ldr	r3, [pc, #324]	@ (8010328 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x16c>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	695b      	ldr	r3, [r3, #20]
 80101e6:	f107 020c 	add.w	r2, r7, #12
 80101ea:	f107 010e 	add.w	r1, r7, #14
 80101ee:	2082      	movs	r0, #130	@ 0x82
 80101f0:	4798      	blx	r3

        //Ensures the coordinates is within the screen
        if (y > 3700)
 80101f2:	89bb      	ldrh	r3, [r7, #12]
 80101f4:	f640 6274 	movw	r2, #3700	@ 0xe74
 80101f8:	4293      	cmp	r3, r2
 80101fa:	d903      	bls.n	8010204 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x48>
        {
            y = 3700;
 80101fc:	f640 6374 	movw	r3, #3700	@ 0xe74
 8010200:	81bb      	strh	r3, [r7, #12]
 8010202:	e004      	b.n	801020e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x52>
        }
        else if (y < 180)
 8010204:	89bb      	ldrh	r3, [r7, #12]
 8010206:	2bb3      	cmp	r3, #179	@ 0xb3
 8010208:	d801      	bhi.n	801020e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x52>
        {
            y = 180;
 801020a:	23b4      	movs	r3, #180	@ 0xb4
 801020c:	81bb      	strh	r3, [r7, #12]
        }

        /* Y value first correction */
        y -= 180;
 801020e:	89bb      	ldrh	r3, [r7, #12]
 8010210:	3bb4      	subs	r3, #180	@ 0xb4
 8010212:	b29b      	uxth	r3, r3
 8010214:	81bb      	strh	r3, [r7, #12]

        /* Y value second correction */
        y = 3520 - y;
 8010216:	89bb      	ldrh	r3, [r7, #12]
 8010218:	f5c3 635c 	rsb	r3, r3, #3520	@ 0xdc0
 801021c:	b29b      	uxth	r3, r3
 801021e:	81bb      	strh	r3, [r7, #12]

        /* Y value third correction */
        yr = y / 11;
 8010220:	89bb      	ldrh	r3, [r7, #12]
 8010222:	4a42      	ldr	r2, [pc, #264]	@ (801032c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x170>)
 8010224:	fba2 2303 	umull	r2, r3, r2, r3
 8010228:	08db      	lsrs	r3, r3, #3
 801022a:	82bb      	strh	r3, [r7, #20]

        /* Return y position value */
        if (yr <= 0)
 801022c:	8abb      	ldrh	r3, [r7, #20]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d102      	bne.n	8010238 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x7c>
        {
            yr = 0;
 8010232:	2300      	movs	r3, #0
 8010234:	82bb      	strh	r3, [r7, #20]
 8010236:	e008      	b.n	801024a <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x8e>
        }
        else if (yr > TsYBoundary)
 8010238:	4b3d      	ldr	r3, [pc, #244]	@ (8010330 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x174>)
 801023a:	881b      	ldrh	r3, [r3, #0]
 801023c:	8aba      	ldrh	r2, [r7, #20]
 801023e:	429a      	cmp	r2, r3
 8010240:	d903      	bls.n	801024a <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x8e>
        {
            yr = TsYBoundary - 1;
 8010242:	4b3b      	ldr	r3, [pc, #236]	@ (8010330 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x174>)
 8010244:	881b      	ldrh	r3, [r3, #0]
 8010246:	3b01      	subs	r3, #1
 8010248:	82bb      	strh	r3, [r7, #20]
        }
        else
        {
        }
        y = yr;
 801024a:	8abb      	ldrh	r3, [r7, #20]
 801024c:	81bb      	strh	r3, [r7, #12]

        /* X value first correction */
        if (x <= 3000)
 801024e:	89fb      	ldrh	r3, [r7, #14]
 8010250:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010254:	4293      	cmp	r3, r2
 8010256:	d806      	bhi.n	8010266 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xaa>
        {
            x = 3870 - x;
 8010258:	89fb      	ldrh	r3, [r7, #14]
 801025a:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 801025e:	330e      	adds	r3, #14
 8010260:	b29b      	uxth	r3, r3
 8010262:	81fb      	strh	r3, [r7, #14]
 8010264:	e005      	b.n	8010272 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xb6>
        }
        else
        {
            x = 3800 - x;
 8010266:	89fb      	ldrh	r3, [r7, #14]
 8010268:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 801026c:	3308      	adds	r3, #8
 801026e:	b29b      	uxth	r3, r3
 8010270:	81fb      	strh	r3, [r7, #14]
        }

        /* X value second correction */
        xr = x / 15;
 8010272:	89fb      	ldrh	r3, [r7, #14]
 8010274:	4a2f      	ldr	r2, [pc, #188]	@ (8010334 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x178>)
 8010276:	fba2 2303 	umull	r2, r3, r2, r3
 801027a:	08db      	lsrs	r3, r3, #3
 801027c:	82fb      	strh	r3, [r7, #22]

        /* Return X position value */
        if (xr <= 0)
 801027e:	8afb      	ldrh	r3, [r7, #22]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d102      	bne.n	801028a <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xce>
        {
            xr = 0;
 8010284:	2300      	movs	r3, #0
 8010286:	82fb      	strh	r3, [r7, #22]
 8010288:	e008      	b.n	801029c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe0>
        }
        else if (xr > TsXBoundary)
 801028a:	4b2b      	ldr	r3, [pc, #172]	@ (8010338 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x17c>)
 801028c:	881b      	ldrh	r3, [r3, #0]
 801028e:	8afa      	ldrh	r2, [r7, #22]
 8010290:	429a      	cmp	r2, r3
 8010292:	d903      	bls.n	801029c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe0>
        {
            xr = TsXBoundary - 1;
 8010294:	4b28      	ldr	r3, [pc, #160]	@ (8010338 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x17c>)
 8010296:	881b      	ldrh	r3, [r3, #0]
 8010298:	3b01      	subs	r3, #1
 801029a:	82fb      	strh	r3, [r7, #22]
        }
        else
        {
        }

        x = xr;
 801029c:	8afb      	ldrh	r3, [r7, #22]
 801029e:	81fb      	strh	r3, [r7, #14]
        xDiff = x > _x ? (x - _x) : (_x - x);
 80102a0:	89fb      	ldrh	r3, [r7, #14]
 80102a2:	461a      	mov	r2, r3
 80102a4:	4b25      	ldr	r3, [pc, #148]	@ (801033c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x180>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d906      	bls.n	80102ba <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xfe>
 80102ac:	89fa      	ldrh	r2, [r7, #14]
 80102ae:	4b23      	ldr	r3, [pc, #140]	@ (801033c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x180>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	b29b      	uxth	r3, r3
 80102b4:	1ad3      	subs	r3, r2, r3
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	e005      	b.n	80102c6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x10a>
 80102ba:	4b20      	ldr	r3, [pc, #128]	@ (801033c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x180>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	b29a      	uxth	r2, r3
 80102c0:	89fb      	ldrh	r3, [r7, #14]
 80102c2:	1ad3      	subs	r3, r2, r3
 80102c4:	b29b      	uxth	r3, r3
 80102c6:	827b      	strh	r3, [r7, #18]
        yDiff = y > _y ? (y - _y) : (_y - y);
 80102c8:	89bb      	ldrh	r3, [r7, #12]
 80102ca:	461a      	mov	r2, r3
 80102cc:	4b1c      	ldr	r3, [pc, #112]	@ (8010340 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x184>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d906      	bls.n	80102e2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x126>
 80102d4:	89ba      	ldrh	r2, [r7, #12]
 80102d6:	4b1a      	ldr	r3, [pc, #104]	@ (8010340 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x184>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	b29b      	uxth	r3, r3
 80102dc:	1ad3      	subs	r3, r2, r3
 80102de:	b29b      	uxth	r3, r3
 80102e0:	e005      	b.n	80102ee <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x132>
 80102e2:	4b17      	ldr	r3, [pc, #92]	@ (8010340 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x184>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	b29a      	uxth	r2, r3
 80102e8:	89bb      	ldrh	r3, [r7, #12]
 80102ea:	1ad3      	subs	r3, r2, r3
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	823b      	strh	r3, [r7, #16]

        if (xDiff + yDiff > 5)
 80102f0:	8a7a      	ldrh	r2, [r7, #18]
 80102f2:	8a3b      	ldrh	r3, [r7, #16]
 80102f4:	4413      	add	r3, r2
 80102f6:	2b05      	cmp	r3, #5
 80102f8:	dd07      	ble.n	801030a <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x14e>
        {
            _x = x;
 80102fa:	89fb      	ldrh	r3, [r7, #14]
 80102fc:	461a      	mov	r2, r3
 80102fe:	4b0f      	ldr	r3, [pc, #60]	@ (801033c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x180>)
 8010300:	601a      	str	r2, [r3, #0]
            _y = y;
 8010302:	89bb      	ldrh	r3, [r7, #12]
 8010304:	461a      	mov	r2, r3
 8010306:	4b0e      	ldr	r3, [pc, #56]	@ (8010340 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x184>)
 8010308:	601a      	str	r2, [r3, #0]
        }

        /* Update the X position */
        TsState->X = _x;
 801030a:	4b0c      	ldr	r3, [pc, #48]	@ (801033c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x180>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	b29a      	uxth	r2, r3
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	805a      	strh	r2, [r3, #2]

        /* Update the Y position */
        TsState->Y = _y;
 8010314:	4b0a      	ldr	r3, [pc, #40]	@ (8010340 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x184>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	b29a      	uxth	r2, r3
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	809a      	strh	r2, [r3, #4]
    }
}
 801031e:	bf00      	nop
 8010320:	3718      	adds	r7, #24
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}
 8010326:	bf00      	nop
 8010328:	20011280 	.word	0x20011280
 801032c:	ba2e8ba3 	.word	0xba2e8ba3
 8010330:	20011286 	.word	0x20011286
 8010334:	88888889 	.word	0x88888889
 8010338:	20011284 	.word	0x20011284
 801033c:	20011288 	.word	0x20011288
 8010340:	2001128c 	.word	0x2001128c

08010344 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8010344:	b580      	push	{r7, lr}
 8010346:	b082      	sub	sp, #8
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	4a05      	ldr	r2, [pc, #20]	@ (8010364 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	601a      	str	r2, [r3, #0]
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	4618      	mov	r0, r3
 8010356:	f7ff fea9 	bl	80100ac <_ZN8touchgfx15TouchControllerD1Ev>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4618      	mov	r0, r3
 801035e:	3708      	adds	r7, #8
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}
 8010364:	0802ddcc 	.word	0x0802ddcc

08010368 <_ZN20STM32TouchControllerD0Ev>:
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f7ff ffe7 	bl	8010344 <_ZN20STM32TouchControllerD1Ev>
 8010376:	2104      	movs	r1, #4
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f01a f8c2 	bl	802a502 <_ZdlPvj>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	4618      	mov	r0, r3
 8010382:	3708      	adds	r7, #8
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
    for (int id = 0; id <= 4; id++)
 801038e:	2300      	movs	r3, #0
 8010390:	607b      	str	r3, [r7, #4]
 8010392:	e015      	b.n	80103c0 <_ZN8touchgfx4GPIO4initEv+0x38>
    {
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	b2db      	uxtb	r3, r3
 8010398:	4618      	mov	r0, r3
 801039a:	f000 f8f9 	bl	8010590 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d00a      	beq.n	80103ba <_ZN8touchgfx4GPIO4initEv+0x32>
        {
            if (GPIO_InvertedLevels[id] != 1)
 80103a4:	4a0a      	ldr	r2, [pc, #40]	@ (80103d0 <_ZN8touchgfx4GPIO4initEv+0x48>)
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	d004      	beq.n	80103ba <_ZN8touchgfx4GPIO4initEv+0x32>
            {
                GPIO_InvertedLevels[id] = 1;
 80103b0:	4a07      	ldr	r2, [pc, #28]	@ (80103d0 <_ZN8touchgfx4GPIO4initEv+0x48>)
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2101      	movs	r1, #1
 80103b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int id = 0; id <= 4; id++)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	3301      	adds	r3, #1
 80103be:	607b      	str	r3, [r7, #4]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2b04      	cmp	r3, #4
 80103c4:	dde6      	ble.n	8010394 <_ZN8touchgfx4GPIO4initEv+0xc>
            }
        }
    }
}
 80103c6:	bf00      	nop
 80103c8:	bf00      	nop
 80103ca:	3708      	adds	r7, #8
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}
 80103d0:	20011290 	.word	0x20011290

080103d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	af00      	add	r7, sp, #0
 80103da:	4603      	mov	r3, r0
 80103dc:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80103de:	79fb      	ldrb	r3, [r7, #7]
 80103e0:	2b03      	cmp	r3, #3
 80103e2:	d847      	bhi.n	8010474 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
 80103e4:	a201      	add	r2, pc, #4	@ (adr r2, 80103ec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80103e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ea:	bf00      	nop
 80103ec:	080103fd 	.word	0x080103fd
 80103f0:	0801041b 	.word	0x0801041b
 80103f4:	08010439 	.word	0x08010439
 80103f8:	08010457 	.word	0x08010457
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80103fc:	79fb      	ldrb	r3, [r7, #7]
 80103fe:	4a1f      	ldr	r2, [pc, #124]	@ (801047c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 8010400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010404:	2b00      	cmp	r3, #0
 8010406:	bf0c      	ite	eq
 8010408:	2301      	moveq	r3, #1
 801040a:	2300      	movne	r3, #0
 801040c:	b2db      	uxtb	r3, r3
 801040e:	461a      	mov	r2, r3
 8010410:	2104      	movs	r1, #4
 8010412:	481b      	ldr	r0, [pc, #108]	@ (8010480 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xac>)
 8010414:	f7f2 ff4c 	bl	80032b0 <HAL_GPIO_WritePin>
#endif
        break;
 8010418:	e02c      	b.n	8010474 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 801041a:	79fb      	ldrb	r3, [r7, #7]
 801041c:	4a17      	ldr	r2, [pc, #92]	@ (801047c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 801041e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010422:	2b00      	cmp	r3, #0
 8010424:	bf0c      	ite	eq
 8010426:	2301      	moveq	r3, #1
 8010428:	2300      	movne	r3, #0
 801042a:	b2db      	uxtb	r3, r3
 801042c:	461a      	mov	r2, r3
 801042e:	2108      	movs	r1, #8
 8010430:	4813      	ldr	r0, [pc, #76]	@ (8010480 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xac>)
 8010432:	f7f2 ff3d 	bl	80032b0 <HAL_GPIO_WritePin>
#endif
        break;
 8010436:	e01d      	b.n	8010474 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8010438:	79fb      	ldrb	r3, [r7, #7]
 801043a:	4a10      	ldr	r2, [pc, #64]	@ (801047c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 801043c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010440:	2b00      	cmp	r3, #0
 8010442:	bf0c      	ite	eq
 8010444:	2301      	moveq	r3, #1
 8010446:	2300      	movne	r3, #0
 8010448:	b2db      	uxtb	r3, r3
 801044a:	461a      	mov	r2, r3
 801044c:	2110      	movs	r1, #16
 801044e:	480c      	ldr	r0, [pc, #48]	@ (8010480 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xac>)
 8010450:	f7f2 ff2e 	bl	80032b0 <HAL_GPIO_WritePin>
#endif
        break;
 8010454:	e00e      	b.n	8010474 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8010456:	79fb      	ldrb	r3, [r7, #7]
 8010458:	4a08      	ldr	r2, [pc, #32]	@ (801047c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 801045a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801045e:	2b00      	cmp	r3, #0
 8010460:	bf0c      	ite	eq
 8010462:	2301      	moveq	r3, #1
 8010464:	2300      	movne	r3, #0
 8010466:	b2db      	uxtb	r3, r3
 8010468:	461a      	mov	r2, r3
 801046a:	2120      	movs	r1, #32
 801046c:	4804      	ldr	r0, [pc, #16]	@ (8010480 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xac>)
 801046e:	f7f2 ff1f 	bl	80032b0 <HAL_GPIO_WritePin>
#endif
        break;
 8010472:	bf00      	nop
    }
}
 8010474:	bf00      	nop
 8010476:	3708      	adds	r7, #8
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	20011290 	.word	0x20011290
 8010480:	40021000 	.word	0x40021000

08010484 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	4603      	mov	r3, r0
 801048c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801048e:	79fb      	ldrb	r3, [r7, #7]
 8010490:	2b03      	cmp	r3, #3
 8010492:	d847      	bhi.n	8010524 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
 8010494:	a201      	add	r2, pc, #4	@ (adr r2, 801049c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8010496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801049a:	bf00      	nop
 801049c:	080104ad 	.word	0x080104ad
 80104a0:	080104cb 	.word	0x080104cb
 80104a4:	080104e9 	.word	0x080104e9
 80104a8:	08010507 	.word	0x08010507
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80104ac:	79fb      	ldrb	r3, [r7, #7]
 80104ae:	4a1f      	ldr	r2, [pc, #124]	@ (801052c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 80104b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d001      	beq.n	80104bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x38>
 80104b8:	2301      	movs	r3, #1
 80104ba:	e000      	b.n	80104be <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3a>
 80104bc:	2300      	movs	r3, #0
 80104be:	461a      	mov	r2, r3
 80104c0:	2104      	movs	r1, #4
 80104c2:	481b      	ldr	r0, [pc, #108]	@ (8010530 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xac>)
 80104c4:	f7f2 fef4 	bl	80032b0 <HAL_GPIO_WritePin>
#endif
        break;
 80104c8:	e02c      	b.n	8010524 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80104ca:	79fb      	ldrb	r3, [r7, #7]
 80104cc:	4a17      	ldr	r2, [pc, #92]	@ (801052c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 80104ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d001      	beq.n	80104da <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x56>
 80104d6:	2301      	movs	r3, #1
 80104d8:	e000      	b.n	80104dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
 80104da:	2300      	movs	r3, #0
 80104dc:	461a      	mov	r2, r3
 80104de:	2108      	movs	r1, #8
 80104e0:	4813      	ldr	r0, [pc, #76]	@ (8010530 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xac>)
 80104e2:	f7f2 fee5 	bl	80032b0 <HAL_GPIO_WritePin>
#endif
        break;
 80104e6:	e01d      	b.n	8010524 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80104e8:	79fb      	ldrb	r3, [r7, #7]
 80104ea:	4a10      	ldr	r2, [pc, #64]	@ (801052c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 80104ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d001      	beq.n	80104f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
 80104f4:	2301      	movs	r3, #1
 80104f6:	e000      	b.n	80104fa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x76>
 80104f8:	2300      	movs	r3, #0
 80104fa:	461a      	mov	r2, r3
 80104fc:	2110      	movs	r1, #16
 80104fe:	480c      	ldr	r0, [pc, #48]	@ (8010530 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xac>)
 8010500:	f7f2 fed6 	bl	80032b0 <HAL_GPIO_WritePin>
#endif
        break;
 8010504:	e00e      	b.n	8010524 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8010506:	79fb      	ldrb	r3, [r7, #7]
 8010508:	4a08      	ldr	r2, [pc, #32]	@ (801052c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 801050a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d001      	beq.n	8010516 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x92>
 8010512:	2301      	movs	r3, #1
 8010514:	e000      	b.n	8010518 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x94>
 8010516:	2300      	movs	r3, #0
 8010518:	461a      	mov	r2, r3
 801051a:	2120      	movs	r1, #32
 801051c:	4804      	ldr	r0, [pc, #16]	@ (8010530 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xac>)
 801051e:	f7f2 fec7 	bl	80032b0 <HAL_GPIO_WritePin>
#endif
        break;
 8010522:	bf00      	nop
    }
}
 8010524:	bf00      	nop
 8010526:	3708      	adds	r7, #8
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	20011290 	.word	0x20011290
 8010530:	40021000 	.word	0x40021000

08010534 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	4603      	mov	r3, r0
 801053c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801053e:	79fb      	ldrb	r3, [r7, #7]
 8010540:	2b03      	cmp	r3, #3
 8010542:	d81f      	bhi.n	8010584 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
 8010544:	a201      	add	r2, pc, #4	@ (adr r2, 801054c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8010546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801054a:	bf00      	nop
 801054c:	0801055d 	.word	0x0801055d
 8010550:	08010567 	.word	0x08010567
 8010554:	08010571 	.word	0x08010571
 8010558:	0801057b 	.word	0x0801057b
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 801055c:	2104      	movs	r1, #4
 801055e:	480b      	ldr	r0, [pc, #44]	@ (801058c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 8010560:	f7f2 febf 	bl	80032e2 <HAL_GPIO_TogglePin>
#endif
        break;
 8010564:	e00e      	b.n	8010584 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8010566:	2108      	movs	r1, #8
 8010568:	4808      	ldr	r0, [pc, #32]	@ (801058c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 801056a:	f7f2 feba 	bl	80032e2 <HAL_GPIO_TogglePin>
#endif
        break;
 801056e:	e009      	b.n	8010584 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8010570:	2110      	movs	r1, #16
 8010572:	4806      	ldr	r0, [pc, #24]	@ (801058c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 8010574:	f7f2 feb5 	bl	80032e2 <HAL_GPIO_TogglePin>
#endif
        break;
 8010578:	e004      	b.n	8010584 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 801057a:	2120      	movs	r1, #32
 801057c:	4803      	ldr	r0, [pc, #12]	@ (801058c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 801057e:	f7f2 feb0 	bl	80032e2 <HAL_GPIO_TogglePin>
#endif
        break;
 8010582:	bf00      	nop
    }
}
 8010584:	bf00      	nop
 8010586:	3708      	adds	r7, #8
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	40021000 	.word	0x40021000

08010590 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b084      	sub	sp, #16
 8010594:	af00      	add	r7, sp, #0
 8010596:	4603      	mov	r3, r0
 8010598:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
 801059a:	2300      	movs	r3, #0
 801059c:	73fb      	strb	r3, [r7, #15]
    switch (id)
 801059e:	79fb      	ldrb	r3, [r7, #7]
 80105a0:	2b03      	cmp	r3, #3
 80105a2:	d827      	bhi.n	80105f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x64>
 80105a4:	a201      	add	r2, pc, #4	@ (adr r2, 80105ac <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>)
 80105a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105aa:	bf00      	nop
 80105ac:	080105bd 	.word	0x080105bd
 80105b0:	080105cb 	.word	0x080105cb
 80105b4:	080105d9 	.word	0x080105d9
 80105b8:	080105e7 	.word	0x080105e7
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80105bc:	2104      	movs	r1, #4
 80105be:	4812      	ldr	r0, [pc, #72]	@ (8010608 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x78>)
 80105c0:	f7f2 fe5e 	bl	8003280 <HAL_GPIO_ReadPin>
 80105c4:	4603      	mov	r3, r0
 80105c6:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80105c8:	e014      	b.n	80105f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x64>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80105ca:	2108      	movs	r1, #8
 80105cc:	480e      	ldr	r0, [pc, #56]	@ (8010608 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x78>)
 80105ce:	f7f2 fe57 	bl	8003280 <HAL_GPIO_ReadPin>
 80105d2:	4603      	mov	r3, r0
 80105d4:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80105d6:	e00d      	b.n	80105f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x64>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80105d8:	2110      	movs	r1, #16
 80105da:	480b      	ldr	r0, [pc, #44]	@ (8010608 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x78>)
 80105dc:	f7f2 fe50 	bl	8003280 <HAL_GPIO_ReadPin>
 80105e0:	4603      	mov	r3, r0
 80105e2:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80105e4:	e006      	b.n	80105f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x64>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80105e6:	2120      	movs	r1, #32
 80105e8:	4807      	ldr	r0, [pc, #28]	@ (8010608 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x78>)
 80105ea:	f7f2 fe49 	bl	8003280 <HAL_GPIO_ReadPin>
 80105ee:	4603      	mov	r3, r0
 80105f0:	73fb      	strb	r3, [r7, #15]
#endif
        break;
 80105f2:	bf00      	nop
    }
    return (bitstatus == GPIO_PIN_SET);
 80105f4:	7bfb      	ldrb	r3, [r7, #15]
 80105f6:	2b01      	cmp	r3, #1
 80105f8:	bf0c      	ite	eq
 80105fa:	2301      	moveq	r3, #1
 80105fc:	2300      	movne	r3, #0
 80105fe:	b2db      	uxtb	r3, r3
}
 8010600:	4618      	mov	r0, r3
 8010602:	3710      	adds	r7, #16
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}
 8010608:	40021000 	.word	0x40021000

0801060c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 801060c:	b480      	push	{r7}
 801060e:	b083      	sub	sp, #12
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
    {
 8010614:	4a04      	ldr	r2, [pc, #16]	@ (8010628 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	601a      	str	r2, [r3, #0]
    }
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	4618      	mov	r0, r3
 801061e:	370c      	adds	r7, #12
 8010620:	46bd      	mov	sp, r7
 8010622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010626:	4770      	bx	lr
 8010628:	0802e350 	.word	0x0802e350

0801062c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
    }
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f7ff ffe9 	bl	801060c <_ZN8touchgfx3HALD1Ev>
 801063a:	217c      	movs	r1, #124	@ 0x7c
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f019 ff60 	bl	802a502 <_ZdlPvj>
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	4618      	mov	r0, r3
 8010646:	3708      	adds	r7, #8
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801064c:	b480      	push	{r7}
 801064e:	b083      	sub	sp, #12
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	460b      	mov	r3, r1
 8010656:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	78fa      	ldrb	r2, [r7, #3]
 801065c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2201      	movs	r2, #1
 8010664:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 8010668:	bf00      	nop
 801066a:	370c      	adds	r7, #12
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr

08010674 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8010674:	b580      	push	{r7, lr}
 8010676:	b082      	sub	sp, #8
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	460b      	mov	r3, r1
 801067e:	807b      	strh	r3, [r7, #2]
 8010680:	4613      	mov	r3, r2
 8010682:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8010684:	4b0c      	ldr	r3, [pc, #48]	@ (80106b8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8010686:	881b      	ldrh	r3, [r3, #0]
 8010688:	887a      	ldrh	r2, [r7, #2]
 801068a:	429a      	cmp	r2, r3
 801068c:	d304      	bcc.n	8010698 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 801068e:	4b0b      	ldr	r3, [pc, #44]	@ (80106bc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8010690:	881b      	ldrh	r3, [r3, #0]
 8010692:	883a      	ldrh	r2, [r7, #0]
 8010694:	429a      	cmp	r2, r3
 8010696:	d205      	bcs.n	80106a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8010698:	4b09      	ldr	r3, [pc, #36]	@ (80106c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 801069a:	4a0a      	ldr	r2, [pc, #40]	@ (80106c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 801069c:	219e      	movs	r1, #158	@ 0x9e
 801069e:	480a      	ldr	r0, [pc, #40]	@ (80106c8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80106a0:	f01a fe76 	bl	802b390 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80106a4:	4a09      	ldr	r2, [pc, #36]	@ (80106cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80106a6:	887b      	ldrh	r3, [r7, #2]
 80106a8:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80106aa:	4a09      	ldr	r2, [pc, #36]	@ (80106d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80106ac:	883b      	ldrh	r3, [r7, #0]
 80106ae:	8013      	strh	r3, [r2, #0]
    }
 80106b0:	bf00      	nop
 80106b2:	3708      	adds	r7, #8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}
 80106b8:	200126d4 	.word	0x200126d4
 80106bc:	200126d6 	.word	0x200126d6
 80106c0:	0802d084 	.word	0x0802d084
 80106c4:	0802d0e8 	.word	0x0802d0e8
 80106c8:	0802d12c 	.word	0x0802d12c
 80106cc:	200126da 	.word	0x200126da
 80106d0:	200126dc 	.word	0x200126dc

080106d4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d009      	beq.n	80106fa <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	685a      	ldr	r2, [r3, #4]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	685b      	ldr	r3, [r3, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	4610      	mov	r0, r2
 80106f4:	4798      	blx	r3
 80106f6:	4603      	mov	r3, r0
 80106f8:	e000      	b.n	80106fc <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80106fa:	2300      	movs	r3, #0
    }
 80106fc:	4618      	mov	r0, r3
 80106fe:	3708      	adds	r7, #8
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f003 fa71 	bl	8013bf4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	33ac      	adds	r3, #172	@ 0xac
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	4798      	blx	r3
    }
 801071e:	bf00      	nop
 8010720:	3708      	adds	r7, #8
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}

08010726 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8010726:	b480      	push	{r7}
 8010728:	b083      	sub	sp, #12
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8010730:	2300      	movs	r3, #0
    }
 8010732:	4618      	mov	r0, r3
 8010734:	370c      	adds	r7, #12
 8010736:	46bd      	mov	sp, r7
 8010738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073c:	4770      	bx	lr
	...

08010740 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8010740:	b580      	push	{r7, lr}
 8010742:	b084      	sub	sp, #16
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
 801074c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d106      	bne.n	8010762 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8010754:	4b0f      	ldr	r3, [pc, #60]	@ (8010794 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8010756:	4a10      	ldr	r2, [pc, #64]	@ (8010798 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8010758:	f240 21d2 	movw	r1, #722	@ 0x2d2
 801075c:	480f      	ldr	r0, [pc, #60]	@ (801079c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801075e:	f01a fe17 	bl	802b390 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	68ba      	ldr	r2, [r7, #8]
 8010766:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	687a      	ldr	r2, [r7, #4]
 801076c:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2b00      	cmp	r3, #0
 8010772:	bf14      	ite	ne
 8010774:	2301      	movne	r3, #1
 8010776:	2300      	moveq	r3, #0
 8010778:	b2da      	uxtb	r2, r3
 801077a:	4b09      	ldr	r3, [pc, #36]	@ (80107a0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 801077c:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	338c      	adds	r3, #140	@ 0x8c
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	6839      	ldr	r1, [r7, #0]
 8010788:	68f8      	ldr	r0, [r7, #12]
 801078a:	4798      	blx	r3
    }
 801078c:	bf00      	nop
 801078e:	3710      	adds	r7, #16
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}
 8010794:	0802d170 	.word	0x0802d170
 8010798:	0802d1a8 	.word	0x0802d1a8
 801079c:	0802d12c 	.word	0x0802d12c
 80107a0:	200126de 	.word	0x200126de

080107a4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 80107a4:	b480      	push	{r7}
 80107a6:	b083      	sub	sp, #12
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	683a      	ldr	r2, [r7, #0]
 80107b2:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	bf14      	ite	ne
 80107ba:	2301      	movne	r3, #1
 80107bc:	2300      	moveq	r3, #0
 80107be:	b2da      	uxtb	r2, r3
 80107c0:	4b03      	ldr	r3, [pc, #12]	@ (80107d0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 80107c2:	701a      	strb	r2, [r3, #0]
    }
 80107c4:	bf00      	nop
 80107c6:	370c      	adds	r7, #12
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr
 80107d0:	200126df 	.word	0x200126df

080107d4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80107d4:	b480      	push	{r7}
 80107d6:	b083      	sub	sp, #12
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80107dc:	2300      	movs	r3, #0
    }
 80107de:	4618      	mov	r0, r3
 80107e0:	370c      	adds	r7, #12
 80107e2:	46bd      	mov	sp, r7
 80107e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e8:	4770      	bx	lr

080107ea <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80107ea:	b580      	push	{r7, lr}
 80107ec:	b082      	sub	sp, #8
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
 80107f2:	460b      	mov	r3, r1
 80107f4:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d004      	beq.n	8010808 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010802:	887a      	ldrh	r2, [r7, #2]
 8010804:	4610      	mov	r0, r2
 8010806:	4798      	blx	r3
        }
    }
 8010808:	bf00      	nop
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8010810:	b480      	push	{r7}
 8010812:	b083      	sub	sp, #12
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8010818:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 801081c:	4618      	mov	r0, r3
 801081e:	370c      	adds	r7, #12
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr

08010828 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8010828:	b580      	push	{r7, lr}
 801082a:	b082      	sub	sp, #8
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	685a      	ldr	r2, [r3, #4]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	3318      	adds	r3, #24
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	4610      	mov	r0, r2
 8010840:	4798      	blx	r3
 8010842:	4603      	mov	r3, r0
    }
 8010844:	4618      	mov	r0, r3
 8010846:	3708      	adds	r7, #8
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}

0801084c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 801084c:	b480      	push	{r7}
 801084e:	b085      	sub	sp, #20
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010860:	429a      	cmp	r2, r3
 8010862:	d011      	beq.n	8010888 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8010864:	4b14      	ldr	r3, [pc, #80]	@ (80108b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d11e      	bne.n	80108aa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 801086c:	4b13      	ldr	r3, [pc, #76]	@ (80108bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801086e:	881b      	ldrh	r3, [r3, #0]
 8010870:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8010872:	4b13      	ldr	r3, [pc, #76]	@ (80108c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010874:	881a      	ldrh	r2, [r3, #0]
 8010876:	4b11      	ldr	r3, [pc, #68]	@ (80108bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010878:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 801087a:	4a11      	ldr	r2, [pc, #68]	@ (80108c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801087c:	89bb      	ldrh	r3, [r7, #12]
 801087e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8010880:	4b0d      	ldr	r3, [pc, #52]	@ (80108b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8010882:	2201      	movs	r2, #1
 8010884:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8010886:	e010      	b.n	80108aa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8010888:	4b0b      	ldr	r3, [pc, #44]	@ (80108b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d00c      	beq.n	80108aa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8010890:	4b0a      	ldr	r3, [pc, #40]	@ (80108bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010892:	881b      	ldrh	r3, [r3, #0]
 8010894:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8010896:	4b0a      	ldr	r3, [pc, #40]	@ (80108c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010898:	881a      	ldrh	r2, [r3, #0]
 801089a:	4b08      	ldr	r3, [pc, #32]	@ (80108bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801089c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 801089e:	4a08      	ldr	r2, [pc, #32]	@ (80108c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80108a0:	89fb      	ldrh	r3, [r7, #14]
 80108a2:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80108a4:	4b04      	ldr	r3, [pc, #16]	@ (80108b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80108a6:	2200      	movs	r2, #0
 80108a8:	701a      	strb	r2, [r3, #0]
    }
 80108aa:	bf00      	nop
 80108ac:	3714      	adds	r7, #20
 80108ae:	46bd      	mov	sp, r7
 80108b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b4:	4770      	bx	lr
 80108b6:	bf00      	nop
 80108b8:	200126d8 	.word	0x200126d8
 80108bc:	200126d6 	.word	0x200126d6
 80108c0:	200126d4 	.word	0x200126d4

080108c4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 80108c4:	b480      	push	{r7}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
    {
    }
 80108cc:	bf00      	nop
 80108ce:	370c      	adds	r7, #12
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr

080108d8 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 80108d8:	b480      	push	{r7}
 80108da:	b083      	sub	sp, #12
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
    {
    }
 80108e0:	bf00      	nop
 80108e2:	370c      	adds	r7, #12
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr

080108ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	4618      	mov	r0, r3
 80108f8:	f002 fbda 	bl	80130b0 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80108fc:	bf00      	nop
 80108fe:	3708      	adds	r7, #8
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	4a05      	ldr	r2, [pc, #20]	@ (8010924 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	601a      	str	r2, [r3, #0]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	4618      	mov	r0, r3
 8010916:	f7ff fe79 	bl	801060c <_ZN8touchgfx3HALD1Ev>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4618      	mov	r0, r3
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	0802e168 	.word	0x0802e168

08010928 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f7ff ffe7 	bl	8010904 <_ZN20TouchGFXGeneratedHALD1Ev>
 8010936:	217c      	movs	r1, #124	@ 0x7c
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f019 fde2 	bl	802a502 <_ZdlPvj>
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	4618      	mov	r0, r3
 8010942:	3708      	adds	r7, #8
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}

08010948 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8010948:	b580      	push	{r7, lr}
 801094a:	b082      	sub	sp, #8
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	4618      	mov	r0, r3
 8010954:	f7ff ffca 	bl	80108ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8010958:	bf00      	nop
 801095a:	3708      	adds	r7, #8
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <_ZN11TouchGFXHAL10initializeEv>:
LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationStorage[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");
}

void TouchGFXHAL::initialize()
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	4618      	mov	r0, r3
 801096c:	f001 ff0e 	bl	801278c <_ZN20TouchGFXGeneratedHAL10initializeEv>

    // Add animation storage
    setAnimationStorage((void*)animationStorage);
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	338c      	adds	r3, #140	@ 0x8c
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	4903      	ldr	r1, [pc, #12]	@ (8010988 <_ZN11TouchGFXHAL10initializeEv+0x28>)
 801097c:	4610      	mov	r0, r2
 801097e:	4798      	blx	r3
}
 8010980:	bf00      	nop
 8010982:	3708      	adds	r7, #8
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}
 8010988:	d0000000 	.word	0xd0000000

0801098c <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b082      	sub	sp, #8
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	3380      	adds	r3, #128	@ 0x80
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	4798      	blx	r3
    enableInterrupts();
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	3378      	adds	r3, #120	@ 0x78
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80109ac:	f000 f906 	bl	8010bbc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	3370      	adds	r3, #112	@ 0x70
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	4610      	mov	r0, r2
 80109bc:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 80109be:	2029      	movs	r0, #41	@ 0x29
 80109c0:	f7f0 fc28 	bl	8001214 <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 80109c4:	f000 f8fa 	bl	8010bbc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80109c8:	687a      	ldr	r2, [r7, #4]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	3370      	adds	r3, #112	@ 0x70
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	4610      	mov	r0, r2
 80109d4:	4798      	blx	r3
        OSWrappers::waitForVSync();
 80109d6:	bf00      	nop
 80109d8:	e7f4      	b.n	80109c4 <_ZN11TouchGFXHAL9taskEntryEv+0x38>

080109da <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80109da:	b580      	push	{r7, lr}
 80109dc:	b082      	sub	sp, #8
 80109de:	af00      	add	r7, sp, #0
 80109e0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	4618      	mov	r0, r3
 80109e6:	f001 ff69 	bl	80128bc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80109ea:	4603      	mov	r3, r0
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3708      	adds	r7, #8
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}

080109f4 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6839      	ldr	r1, [r7, #0]
 8010a02:	4618      	mov	r0, r3
 8010a04:	f001 ff68 	bl	80128d8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8010a08:	bf00      	nop
 8010a0a:	3708      	adds	r7, #8
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6839      	ldr	r1, [r7, #0]
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f001 ff70 	bl	8012904 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8010a24:	bf00      	nop
 8010a26:	3708      	adds	r7, #8
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	4618      	mov	r0, r3
 8010a38:	f001 fecc 	bl	80127d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8010a3c:	bf00      	nop
 8010a3e:	3708      	adds	r7, #8
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f001 fed0 	bl	80127f4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8010a54:	bf00      	nop
 8010a56:	3708      	adds	r7, #8
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}

08010a5c <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	4618      	mov	r0, r3
 8010a68:	f001 fed2 	bl	8012810 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8010a6c:	bf00      	nop
 8010a6e:	3708      	adds	r7, #8
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}

08010a74 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f001 fed4 	bl	801282c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8010a84:	bf00      	nop
 8010a86:	3708      	adds	r7, #8
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	4a05      	ldr	r2, [pc, #20]	@ (8010aac <_ZN11TouchGFXHALD1Ev+0x20>)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	601a      	str	r2, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7ff ff31 	bl	8010904 <_ZN20TouchGFXGeneratedHALD1Ev>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3708      	adds	r7, #8
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}
 8010aac:	0802ddfc 	.word	0x0802ddfc

08010ab0 <_ZN11TouchGFXHALD0Ev>:
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7ff ffe7 	bl	8010a8c <_ZN11TouchGFXHALD1Ev>
 8010abe:	217c      	movs	r1, #124	@ 0x7c
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f019 fd1e 	bl	802a502 <_ZdlPvj>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3708      	adds	r7, #8
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}

08010ad0 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	2101      	movs	r1, #1
 8010ad8:	2001      	movs	r0, #1
 8010ada:	f7f7 fd9e 	bl	800861a <osSemaphoreNew>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8010b20 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8010ae2:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8010ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8010b20 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d105      	bne.n	8010af8 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8010aec:	4b0d      	ldr	r3, [pc, #52]	@ (8010b24 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8010aee:	4a0e      	ldr	r2, [pc, #56]	@ (8010b28 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8010af0:	2128      	movs	r1, #40	@ 0x28
 8010af2:	480e      	ldr	r0, [pc, #56]	@ (8010b2c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8010af4:	f01a fc4c 	bl	802b390 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8010af8:	2200      	movs	r2, #0
 8010afa:	2104      	movs	r1, #4
 8010afc:	2001      	movs	r0, #1
 8010afe:	f7f7 feab 	bl	8008858 <osMessageQueueNew>
 8010b02:	4603      	mov	r3, r0
 8010b04:	4a0a      	ldr	r2, [pc, #40]	@ (8010b30 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8010b06:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8010b08:	4b09      	ldr	r3, [pc, #36]	@ (8010b30 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d105      	bne.n	8010b1c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8010b10:	4b08      	ldr	r3, [pc, #32]	@ (8010b34 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8010b12:	4a05      	ldr	r2, [pc, #20]	@ (8010b28 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8010b14:	212c      	movs	r1, #44	@ 0x2c
 8010b16:	4805      	ldr	r0, [pc, #20]	@ (8010b2c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8010b18:	f01a fc3a 	bl	802b390 <__assert_func>
}
 8010b1c:	bf00      	nop
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	200112a0 	.word	0x200112a0
 8010b24:	0802d1f8 	.word	0x0802d1f8
 8010b28:	0802d244 	.word	0x0802d244
 8010b2c:	0802d274 	.word	0x0802d274
 8010b30:	200112a4 	.word	0x200112a4
 8010b34:	0802d2a0 	.word	0x0802d2a0

08010b38 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8010b3c:	4b04      	ldr	r3, [pc, #16]	@ (8010b50 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	f04f 31ff 	mov.w	r1, #4294967295
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7f7 fdf1 	bl	800872c <osSemaphoreAcquire>
}
 8010b4a:	bf00      	nop
 8010b4c:	bd80      	pop	{r7, pc}
 8010b4e:	bf00      	nop
 8010b50:	200112a0 	.word	0x200112a0

08010b54 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8010b58:	4b03      	ldr	r3, [pc, #12]	@ (8010b68 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f7f7 fe37 	bl	80087d0 <osSemaphoreRelease>
}
 8010b62:	bf00      	nop
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	200112a0 	.word	0x200112a0

08010b6c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8010b70:	4b03      	ldr	r3, [pc, #12]	@ (8010b80 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	2100      	movs	r1, #0
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7f7 fdd8 	bl	800872c <osSemaphoreAcquire>
}
 8010b7c:	bf00      	nop
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	200112a0 	.word	0x200112a0

08010b84 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8010b88:	4b03      	ldr	r3, [pc, #12]	@ (8010b98 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f7f7 fe1f 	bl	80087d0 <osSemaphoreRelease>
}
 8010b92:	bf00      	nop
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	200112a0 	.word	0x200112a0

08010b9c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8010ba0:	4b04      	ldr	r3, [pc, #16]	@ (8010bb4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8010ba2:	6818      	ldr	r0, [r3, #0]
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	4903      	ldr	r1, [pc, #12]	@ (8010bb8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8010baa:	f7f7 fec9 	bl	8008940 <osMessageQueuePut>
}
 8010bae:	bf00      	nop
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	200112a4 	.word	0x200112a4
 8010bb8:	20000084 	.word	0x20000084

08010bbc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b082      	sub	sp, #8
 8010bc0:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8010bc2:	4b09      	ldr	r3, [pc, #36]	@ (8010be8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8010bc4:	6818      	ldr	r0, [r3, #0]
 8010bc6:	1d39      	adds	r1, r7, #4
 8010bc8:	2300      	movs	r3, #0
 8010bca:	2200      	movs	r2, #0
 8010bcc:	f7f7 ff18 	bl	8008a00 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8010bd0:	4b05      	ldr	r3, [pc, #20]	@ (8010be8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8010bd2:	6818      	ldr	r0, [r3, #0]
 8010bd4:	1d39      	adds	r1, r7, #4
 8010bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8010bda:	2200      	movs	r2, #0
 8010bdc:	f7f7 ff10 	bl	8008a00 <osMessageQueueGet>
}
 8010be0:	bf00      	nop
 8010be2:	3708      	adds	r7, #8
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	200112a4 	.word	0x200112a4

08010bec <__NVIC_EnableIRQ>:
{
 8010bec:	b480      	push	{r7}
 8010bee:	b083      	sub	sp, #12
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	db0b      	blt.n	8010c16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010bfe:	79fb      	ldrb	r3, [r7, #7]
 8010c00:	f003 021f 	and.w	r2, r3, #31
 8010c04:	4907      	ldr	r1, [pc, #28]	@ (8010c24 <__NVIC_EnableIRQ+0x38>)
 8010c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c0a:	095b      	lsrs	r3, r3, #5
 8010c0c:	2001      	movs	r0, #1
 8010c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8010c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010c16:	bf00      	nop
 8010c18:	370c      	adds	r7, #12
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c20:	4770      	bx	lr
 8010c22:	bf00      	nop
 8010c24:	e000e100 	.word	0xe000e100

08010c28 <__NVIC_DisableIRQ>:
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b083      	sub	sp, #12
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	4603      	mov	r3, r0
 8010c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	db12      	blt.n	8010c60 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010c3a:	79fb      	ldrb	r3, [r7, #7]
 8010c3c:	f003 021f 	and.w	r2, r3, #31
 8010c40:	490a      	ldr	r1, [pc, #40]	@ (8010c6c <__NVIC_DisableIRQ+0x44>)
 8010c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c46:	095b      	lsrs	r3, r3, #5
 8010c48:	2001      	movs	r0, #1
 8010c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8010c4e:	3320      	adds	r3, #32
 8010c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010c54:	f3bf 8f4f 	dsb	sy
}
 8010c58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010c5a:	f3bf 8f6f 	isb	sy
}
 8010c5e:	bf00      	nop
}
 8010c60:	bf00      	nop
 8010c62:	370c      	adds	r7, #12
 8010c64:	46bd      	mov	sp, r7
 8010c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6a:	4770      	bx	lr
 8010c6c:	e000e100 	.word	0xe000e100

08010c70 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8010c70:	b480      	push	{r7}
 8010c72:	b083      	sub	sp, #12
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
        : color(0)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	601a      	str	r2, [r3, #0]
    }
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	4618      	mov	r0, r3
 8010c82:	370c      	adds	r7, #12
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr

08010c8c <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8010c8c:	b480      	push	{r7}
 8010c8e:	b083      	sub	sp, #12
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
        return color;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
    }
 8010c98:	4618      	mov	r0, r3
 8010c9a:	370c      	adds	r7, #12
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr

08010ca4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8010ca4:	b480      	push	{r7}
 8010ca6:	b083      	sub	sp, #12
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
    {
 8010cac:	4a04      	ldr	r2, [pc, #16]	@ (8010cc0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	601a      	str	r2, [r3, #0]
    }
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	370c      	adds	r7, #12
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbe:	4770      	bx	lr
 8010cc0:	0802df24 	.word	0x0802df24

08010cc4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b082      	sub	sp, #8
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
    }
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f7ff ffe9 	bl	8010ca4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8010cd2:	2104      	movs	r1, #4
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f019 fc14 	bl	802a502 <_ZdlPvj>
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3708      	adds	r7, #8
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	3344      	adds	r3, #68	@ 0x44
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	4798      	blx	r3
    }
 8010cf8:	bf00      	nop
 8010cfa:	3708      	adds	r7, #8
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8010d00:	b480      	push	{r7}
 8010d02:	b083      	sub	sp, #12
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
    {
 8010d08:	4a04      	ldr	r2, [pc, #16]	@ (8010d1c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	601a      	str	r2, [r3, #0]
    }
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	4618      	mov	r0, r3
 8010d12:	370c      	adds	r7, #12
 8010d14:	46bd      	mov	sp, r7
 8010d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1a:	4770      	bx	lr
 8010d1c:	0802e428 	.word	0x0802e428

08010d20 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
    }
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f7ff ffe9 	bl	8010d00 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8010d2e:	210c      	movs	r1, #12
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f019 fbe6 	bl	802a502 <_ZdlPvj>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3708      	adds	r7, #8
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8010d40:	b480      	push	{r7}
 8010d42:	b083      	sub	sp, #12
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8010d4a:	4a09      	ldr	r2, [pc, #36]	@ (8010d70 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	601a      	str	r2, [r3, #0]
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	683a      	ldr	r2, [r7, #0]
 8010d54:	605a      	str	r2, [r3, #4]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	721a      	strb	r2, [r3, #8]
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	725a      	strb	r2, [r3, #9]
    {
    }
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	4618      	mov	r0, r3
 8010d66:	370c      	adds	r7, #12
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr
 8010d70:	0802e428 	.word	0x0802e428

08010d74 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8010d74:	b480      	push	{r7}
 8010d76:	b083      	sub	sp, #12
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8010d7c:	2301      	movs	r3, #1
    }
 8010d7e:	4618      	mov	r0, r3
 8010d80:	370c      	adds	r7, #12
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr

08010d8a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b082      	sub	sp, #8
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8010d92:	687a      	ldr	r2, [r7, #4]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	3328      	adds	r3, #40	@ 0x28
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4610      	mov	r0, r2
 8010d9e:	4798      	blx	r3
    }
 8010da0:	bf00      	nop
 8010da2:	3708      	adds	r7, #8
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	685a      	ldr	r2, [r3, #4]
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	3314      	adds	r3, #20
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	4610      	mov	r0, r2
 8010dc0:	4798      	blx	r3
    }
 8010dc2:	bf00      	nop
 8010dc4:	3708      	adds	r7, #8
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}

08010dca <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8010dca:	b580      	push	{r7, lr}
 8010dcc:	b082      	sub	sp, #8
 8010dce:	af00      	add	r7, sp, #0
 8010dd0:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8010dd2:	f7fb fd11 	bl	800c7f8 <_ZN8touchgfx3HAL11getInstanceEv>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7ff ffe5 	bl	8010da8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8010dde:	bf00      	nop
 8010de0:	3708      	adds	r7, #8
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}

08010de6 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8010de6:	b580      	push	{r7, lr}
 8010de8:	b082      	sub	sp, #8
 8010dea:	af00      	add	r7, sp, #0
 8010dec:	6078      	str	r0, [r7, #4]
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	330c      	adds	r3, #12
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7ff ff3c 	bl	8010c70 <_ZN8touchgfx9colortypeC1Ev>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3708      	adds	r7, #8
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}
	...

08010e04 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8010e04:	b5b0      	push	{r4, r5, r7, lr}
 8010e06:	b082      	sub	sp, #8
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8010e0c:	687a      	ldr	r2, [r7, #4]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	330c      	adds	r3, #12
 8010e12:	4619      	mov	r1, r3
 8010e14:	4610      	mov	r0, r2
 8010e16:	f7ff ff93 	bl	8010d40 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8010e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8010e54 <_ZN8STM32DMAC1Ev+0x50>)
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	601a      	str	r2, [r3, #0]
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f103 000c 	add.w	r0, r3, #12
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	3320      	adds	r3, #32
 8010e2a:	2260      	movs	r2, #96	@ 0x60
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	f003 f835 	bl	8013e9c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	3320      	adds	r3, #32
 8010e36:	245f      	movs	r4, #95	@ 0x5f
 8010e38:	461d      	mov	r5, r3
 8010e3a:	e004      	b.n	8010e46 <_ZN8STM32DMAC1Ev+0x42>
 8010e3c:	4628      	mov	r0, r5
 8010e3e:	f7ff ffd2 	bl	8010de6 <_ZN8touchgfx6BlitOpC1Ev>
 8010e42:	3c01      	subs	r4, #1
 8010e44:	3524      	adds	r5, #36	@ 0x24
 8010e46:	2c00      	cmp	r4, #0
 8010e48:	daf8      	bge.n	8010e3c <_ZN8STM32DMAC1Ev+0x38>
{
}
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3708      	adds	r7, #8
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bdb0      	pop	{r4, r5, r7, pc}
 8010e54:	0802ded4 	.word	0x0802ded4

08010e58 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b082      	sub	sp, #8
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	4a09      	ldr	r2, [pc, #36]	@ (8010e88 <_ZN8STM32DMAD1Ev+0x30>)
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8010e66:	205a      	movs	r0, #90	@ 0x5a
 8010e68:	f7ff fede 	bl	8010c28 <__NVIC_DisableIRQ>
}
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	330c      	adds	r3, #12
 8010e70:	4618      	mov	r0, r3
 8010e72:	f000 fb2d 	bl	80114d0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7ff ff41 	bl	8010d00 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	4618      	mov	r0, r3
 8010e82:	3708      	adds	r7, #8
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	0802ded4 	.word	0x0802ded4

08010e8c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b082      	sub	sp, #8
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
}
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f7ff ffdf 	bl	8010e58 <_ZN8STM32DMAD1Ev>
 8010e9a:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f019 fb2f 	bl	802a502 <_ZdlPvj>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3708      	adds	r7, #8
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}
	...

08010eb0 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8010eb8:	2300      	movs	r3, #0
 8010eba:	60fb      	str	r3, [r7, #12]
 8010ebc:	4b10      	ldr	r3, [pc, #64]	@ (8010f00 <_ZN8STM32DMA10initializeEv+0x50>)
 8010ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ec0:	4a0f      	ldr	r2, [pc, #60]	@ (8010f00 <_ZN8STM32DMA10initializeEv+0x50>)
 8010ec2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8010ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8010f00 <_ZN8STM32DMA10initializeEv+0x50>)
 8010eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ecc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010ed0:	60fb      	str	r3, [r7, #12]
 8010ed2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8010ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8010f00 <_ZN8STM32DMA10initializeEv+0x50>)
 8010ed6:	691b      	ldr	r3, [r3, #16]
 8010ed8:	4a09      	ldr	r2, [pc, #36]	@ (8010f00 <_ZN8STM32DMA10initializeEv+0x50>)
 8010eda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010ede:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8010ee0:	4b07      	ldr	r3, [pc, #28]	@ (8010f00 <_ZN8STM32DMA10initializeEv+0x50>)
 8010ee2:	691b      	ldr	r3, [r3, #16]
 8010ee4:	4a06      	ldr	r2, [pc, #24]	@ (8010f00 <_ZN8STM32DMA10initializeEv+0x50>)
 8010ee6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010eea:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8010eec:	4b05      	ldr	r3, [pc, #20]	@ (8010f04 <_ZN8STM32DMA10initializeEv+0x54>)
 8010eee:	4a06      	ldr	r2, [pc, #24]	@ (8010f08 <_ZN8STM32DMA10initializeEv+0x58>)
 8010ef0:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8010ef2:	205a      	movs	r0, #90	@ 0x5a
 8010ef4:	f7ff fe7a 	bl	8010bec <__NVIC_EnableIRQ>
}
 8010ef8:	bf00      	nop
 8010efa:	3710      	adds	r7, #16
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}
 8010f00:	40023800 	.word	0x40023800
 8010f04:	20000190 	.word	0x20000190
 8010f08:	08010dcb 	.word	0x08010dcb

08010f0c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b084      	sub	sp, #16
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	460b      	mov	r3, r1
 8010f16:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	60fb      	str	r3, [r7, #12]

    switch (format)
 8010f1c:	78fb      	ldrb	r3, [r7, #3]
 8010f1e:	2b0b      	cmp	r3, #11
 8010f20:	d826      	bhi.n	8010f70 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8010f22:	a201      	add	r2, pc, #4	@ (adr r2, 8010f28 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8010f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f28:	08010f65 	.word	0x08010f65
 8010f2c:	08010f5f 	.word	0x08010f5f
 8010f30:	08010f59 	.word	0x08010f59
 8010f34:	08010f71 	.word	0x08010f71
 8010f38:	08010f71 	.word	0x08010f71
 8010f3c:	08010f71 	.word	0x08010f71
 8010f40:	08010f71 	.word	0x08010f71
 8010f44:	08010f6b 	.word	0x08010f6b
 8010f48:	08010f6b 	.word	0x08010f6b
 8010f4c:	08010f6b 	.word	0x08010f6b
 8010f50:	08010f6b 	.word	0x08010f6b
 8010f54:	08010f6b 	.word	0x08010f6b
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	60fb      	str	r3, [r7, #12]
        break;
 8010f5c:	e00e      	b.n	8010f7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8010f5e:	2301      	movs	r3, #1
 8010f60:	60fb      	str	r3, [r7, #12]
        break;
 8010f62:	e00b      	b.n	8010f7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8010f64:	2302      	movs	r3, #2
 8010f66:	60fb      	str	r3, [r7, #12]
        break;
 8010f68:	e008      	b.n	8010f7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8010f6a:	2305      	movs	r3, #5
 8010f6c:	60fb      	str	r3, [r7, #12]
        break;
 8010f6e:	e005      	b.n	8010f7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8010f70:	4b05      	ldr	r3, [pc, #20]	@ (8010f88 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8010f72:	4a06      	ldr	r2, [pc, #24]	@ (8010f8c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8010f74:	2165      	movs	r1, #101	@ 0x65
 8010f76:	4806      	ldr	r0, [pc, #24]	@ (8010f90 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8010f78:	f01a fa0a 	bl	802b390 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3710      	adds	r7, #16
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop
 8010f88:	0802d2e4 	.word	0x0802d2e4
 8010f8c:	0802d300 	.word	0x0802d300
 8010f90:	0802d34c 	.word	0x0802d34c

08010f94 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	60fb      	str	r3, [r7, #12]

    switch (format)
 8010fa4:	78fb      	ldrb	r3, [r7, #3]
 8010fa6:	2b0a      	cmp	r3, #10
 8010fa8:	d821      	bhi.n	8010fee <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8010faa:	a201      	add	r2, pc, #4	@ (adr r2, 8010fb0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8010fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fb0:	08010fe9 	.word	0x08010fe9
 8010fb4:	08010fe3 	.word	0x08010fe3
 8010fb8:	08010fdd 	.word	0x08010fdd
 8010fbc:	08010fef 	.word	0x08010fef
 8010fc0:	08010fef 	.word	0x08010fef
 8010fc4:	08010fef 	.word	0x08010fef
 8010fc8:	08010fef 	.word	0x08010fef
 8010fcc:	08010fe3 	.word	0x08010fe3
 8010fd0:	08010fe3 	.word	0x08010fe3
 8010fd4:	08010fe3 	.word	0x08010fe3
 8010fd8:	08010fe3 	.word	0x08010fe3
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	60fb      	str	r3, [r7, #12]
        break;
 8010fe0:	e00b      	b.n	8010ffa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	60fb      	str	r3, [r7, #12]
        break;
 8010fe6:	e008      	b.n	8010ffa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8010fe8:	2302      	movs	r3, #2
 8010fea:	60fb      	str	r3, [r7, #12]
        break;
 8010fec:	e005      	b.n	8010ffa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8010fee:	4b05      	ldr	r3, [pc, #20]	@ (8011004 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8010ff0:	4a05      	ldr	r2, [pc, #20]	@ (8011008 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8010ff2:	2186      	movs	r1, #134	@ 0x86
 8010ff4:	4805      	ldr	r0, [pc, #20]	@ (801100c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8010ff6:	f01a f9cb 	bl	802b390 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8010ffa:	68fb      	ldr	r3, [r7, #12]
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3710      	adds	r7, #16
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}
 8011004:	0802d2e4 	.word	0x0802d2e4
 8011008:	0802d378 	.word	0x0802d378
 801100c:	0802d34c 	.word	0x0802d34c

08011010 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8011010:	b480      	push	{r7}
 8011012:	b083      	sub	sp, #12
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8011018:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 801101c:	4618      	mov	r0, r3
 801101e:	370c      	adds	r7, #12
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr

08011028 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8011028:	b590      	push	{r4, r7, lr}
 801102a:	b089      	sub	sp, #36	@ 0x24
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	7f5b      	ldrb	r3, [r3, #29]
 8011036:	4619      	mov	r1, r3
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f7ff ff67 	bl	8010f0c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801103e:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	7f9b      	ldrb	r3, [r3, #30]
 8011044:	4619      	mov	r1, r3
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f7ff ff60 	bl	8010f0c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801104c:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	7f9b      	ldrb	r3, [r3, #30]
 8011052:	4619      	mov	r1, r3
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f7ff ff9d 	bl	8010f94 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801105a:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	8b5b      	ldrh	r3, [r3, #26]
 8011060:	461a      	mov	r2, r3
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	8a9b      	ldrh	r3, [r3, #20]
 8011066:	1ad2      	subs	r2, r2, r3
 8011068:	4b93      	ldr	r3, [pc, #588]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801106a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	8b5b      	ldrh	r3, [r3, #26]
 8011070:	461a      	mov	r2, r3
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	8a9b      	ldrh	r3, [r3, #20]
 8011076:	1ad2      	subs	r2, r2, r3
 8011078:	4b8f      	ldr	r3, [pc, #572]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801107a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	8b1b      	ldrh	r3, [r3, #24]
 8011080:	461a      	mov	r2, r3
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	8a9b      	ldrh	r3, [r3, #20]
 8011086:	1ad2      	subs	r2, r2, r3
 8011088:	4b8b      	ldr	r3, [pc, #556]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801108a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 801108c:	4a8a      	ldr	r2, [pc, #552]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	8adb      	ldrh	r3, [r3, #22]
 8011096:	461a      	mov	r2, r3
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	8a9b      	ldrh	r3, [r3, #20]
 801109c:	041b      	lsls	r3, r3, #16
 801109e:	431a      	orrs	r2, r3
 80110a0:	4b85      	ldr	r3, [pc, #532]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80110a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	691a      	ldr	r2, [r3, #16]
 80110a8:	4b83      	ldr	r3, [pc, #524]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80110aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	685a      	ldr	r2, [r3, #4]
 80110b0:	4b81      	ldr	r3, [pc, #516]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80110b2:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80110bc:	d037      	beq.n	801112e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 80110be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80110c2:	f200 80e5 	bhi.w	8011290 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x268>
 80110c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80110ca:	d014      	beq.n	80110f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 80110cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80110d0:	f200 80de 	bhi.w	8011290 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x268>
 80110d4:	2b80      	cmp	r3, #128	@ 0x80
 80110d6:	d05a      	beq.n	801118e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x166>
 80110d8:	2b80      	cmp	r3, #128	@ 0x80
 80110da:	f200 80d9 	bhi.w	8011290 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x268>
 80110de:	2b40      	cmp	r3, #64	@ 0x40
 80110e0:	f000 80c2 	beq.w	8011268 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x240>
 80110e4:	2b40      	cmp	r3, #64	@ 0x40
 80110e6:	f200 80d3 	bhi.w	8011290 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x268>
 80110ea:	2b04      	cmp	r3, #4
 80110ec:	d03b      	beq.n	8011166 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 80110ee:	2b20      	cmp	r3, #32
 80110f0:	f000 80ba 	beq.w	8011268 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x240>
 80110f4:	e0cc      	b.n	8011290 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x268>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	7f1b      	ldrb	r3, [r3, #28]
 80110fa:	061b      	lsls	r3, r3, #24
 80110fc:	4a6e      	ldr	r2, [pc, #440]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80110fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011102:	f043 030a 	orr.w	r3, r3, #10
 8011106:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	330c      	adds	r3, #12
 801110c:	4c6a      	ldr	r4, [pc, #424]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801110e:	4618      	mov	r0, r3
 8011110:	f7ff fdbc 	bl	8010c8c <_ZNK8touchgfx9colortypecvmEv>
 8011114:	4603      	mov	r3, r0
 8011116:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011118:	4a67      	ldr	r2, [pc, #412]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	691a      	ldr	r2, [r3, #16]
 8011122:	4b65      	ldr	r3, [pc, #404]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8011124:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011126:	4b64      	ldr	r3, [pc, #400]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8011128:	4a64      	ldr	r2, [pc, #400]	@ (80112bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801112a:	601a      	str	r2, [r3, #0]
        break;
 801112c:	e0d5      	b.n	80112da <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b2>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	7f1b      	ldrb	r3, [r3, #28]
 8011132:	061b      	lsls	r3, r3, #24
 8011134:	4a60      	ldr	r2, [pc, #384]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8011136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801113a:	f043 0309 	orr.w	r3, r3, #9
 801113e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	330c      	adds	r3, #12
 8011144:	4c5c      	ldr	r4, [pc, #368]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8011146:	4618      	mov	r0, r3
 8011148:	f7ff fda0 	bl	8010c8c <_ZNK8touchgfx9colortypecvmEv>
 801114c:	4603      	mov	r3, r0
 801114e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011150:	4a59      	ldr	r2, [pc, #356]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	691a      	ldr	r2, [r3, #16]
 801115a:	4b57      	ldr	r3, [pc, #348]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801115c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801115e:	4b56      	ldr	r3, [pc, #344]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8011160:	4a56      	ldr	r2, [pc, #344]	@ (80112bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011162:	601a      	str	r2, [r3, #0]
        break;
 8011164:	e0b9      	b.n	80112da <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b2>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	7f1b      	ldrb	r3, [r3, #28]
 801116a:	061a      	lsls	r2, r3, #24
 801116c:	69bb      	ldr	r3, [r7, #24]
 801116e:	4313      	orrs	r3, r2
 8011170:	4a51      	ldr	r2, [pc, #324]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8011172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011176:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011178:	4a4f      	ldr	r2, [pc, #316]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	691a      	ldr	r2, [r3, #16]
 8011182:	4b4d      	ldr	r3, [pc, #308]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8011184:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011186:	4b4c      	ldr	r3, [pc, #304]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8011188:	4a4c      	ldr	r2, [pc, #304]	@ (80112bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801118a:	601a      	str	r2, [r3, #0]
        break;
 801118c:	e0a5      	b.n	80112da <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b2>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 801118e:	2301      	movs	r3, #1
 8011190:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	689b      	ldr	r3, [r3, #8]
 8011196:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	1d1a      	adds	r2, r3, #4
 801119c:	4b46      	ldr	r3, [pc, #280]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801119e:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	7f1b      	ldrb	r3, [r3, #28]
 80111a4:	061a      	lsls	r2, r3, #24
 80111a6:	69bb      	ldr	r3, [r7, #24]
 80111a8:	4313      	orrs	r3, r2
 80111aa:	4a43      	ldr	r2, [pc, #268]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80111ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80111b0:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80111b2:	4a41      	ldr	r2, [pc, #260]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	691a      	ldr	r2, [r3, #16]
 80111bc:	4b3e      	ldr	r3, [pc, #248]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80111be:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	881b      	ldrh	r3, [r3, #0]
 80111c4:	b2db      	uxtb	r3, r3
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d002      	beq.n	80111d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 80111ca:	2b01      	cmp	r3, #1
 80111cc:	d00f      	beq.n	80111ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c6>
 80111ce:	e024      	b.n	801121a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80111d0:	4b39      	ldr	r3, [pc, #228]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80111d2:	69db      	ldr	r3, [r3, #28]
 80111d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80111d8:	f023 0310 	bic.w	r3, r3, #16
 80111dc:	68fa      	ldr	r2, [r7, #12]
 80111de:	8852      	ldrh	r2, [r2, #2]
 80111e0:	3a01      	subs	r2, #1
 80111e2:	0212      	lsls	r2, r2, #8
 80111e4:	4611      	mov	r1, r2
 80111e6:	4a34      	ldr	r2, [pc, #208]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80111e8:	430b      	orrs	r3, r1
 80111ea:	61d3      	str	r3, [r2, #28]
                break;
 80111ec:	e01c      	b.n	8011228 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x200>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	7f1b      	ldrb	r3, [r3, #28]
 80111f2:	2bff      	cmp	r3, #255	@ 0xff
 80111f4:	d101      	bne.n	80111fa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d2>
                {
                    blend = false;
 80111f6:	2300      	movs	r3, #0
 80111f8:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80111fa:	4b2f      	ldr	r3, [pc, #188]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80111fc:	69db      	ldr	r3, [r3, #28]
 80111fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011202:	f023 0310 	bic.w	r3, r3, #16
 8011206:	68fa      	ldr	r2, [r7, #12]
 8011208:	8852      	ldrh	r2, [r2, #2]
 801120a:	3a01      	subs	r2, #1
 801120c:	0212      	lsls	r2, r2, #8
 801120e:	4313      	orrs	r3, r2
 8011210:	4a29      	ldr	r2, [pc, #164]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8011212:	f043 0310 	orr.w	r3, r3, #16
 8011216:	61d3      	str	r3, [r2, #28]
                break;
 8011218:	e006      	b.n	8011228 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x200>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 801121a:	4b29      	ldr	r3, [pc, #164]	@ (80112c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801121c:	4a29      	ldr	r2, [pc, #164]	@ (80112c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801121e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8011222:	4829      	ldr	r0, [pc, #164]	@ (80112c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8011224:	f01a f8b4 	bl	802b390 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8011228:	4b23      	ldr	r3, [pc, #140]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801122a:	69db      	ldr	r3, [r3, #28]
 801122c:	4a22      	ldr	r2, [pc, #136]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801122e:	f043 0320 	orr.w	r3, r3, #32
 8011232:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8011234:	bf00      	nop
 8011236:	4b20      	ldr	r3, [pc, #128]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8011238:	69db      	ldr	r3, [r3, #28]
 801123a:	f003 0320 	and.w	r3, r3, #32
 801123e:	2b00      	cmp	r3, #0
 8011240:	bf14      	ite	ne
 8011242:	2301      	movne	r3, #1
 8011244:	2300      	moveq	r3, #0
 8011246:	b2db      	uxtb	r3, r3
 8011248:	2b00      	cmp	r3, #0
 801124a:	d1f4      	bne.n	8011236 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20e>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 801124c:	4b1a      	ldr	r3, [pc, #104]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801124e:	2210      	movs	r2, #16
 8011250:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8011252:	7ffb      	ldrb	r3, [r7, #31]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d003      	beq.n	8011260 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011258:	4b17      	ldr	r3, [pc, #92]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801125a:	4a18      	ldr	r2, [pc, #96]	@ (80112bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801125c:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 801125e:	e03c      	b.n	80112da <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b2>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8011260:	4b15      	ldr	r3, [pc, #84]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8011262:	4a1a      	ldr	r2, [pc, #104]	@ (80112cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8011264:	601a      	str	r2, [r3, #0]
        break;
 8011266:	e038      	b.n	80112da <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b2>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	7f1b      	ldrb	r3, [r3, #28]
 801126c:	061a      	lsls	r2, r3, #24
 801126e:	69bb      	ldr	r3, [r7, #24]
 8011270:	4313      	orrs	r3, r2
 8011272:	4a11      	ldr	r2, [pc, #68]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8011274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011278:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801127a:	4a0f      	ldr	r2, [pc, #60]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	691a      	ldr	r2, [r3, #16]
 8011284:	4b0c      	ldr	r3, [pc, #48]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8011286:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011288:	4b0b      	ldr	r3, [pc, #44]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801128a:	4a0c      	ldr	r2, [pc, #48]	@ (80112bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801128c:	601a      	str	r2, [r3, #0]
        break;
 801128e:	e024      	b.n	80112da <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b2>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	7f1b      	ldrb	r3, [r3, #28]
 8011294:	061a      	lsls	r2, r3, #24
 8011296:	69bb      	ldr	r3, [r7, #24]
 8011298:	4313      	orrs	r3, r2
 801129a:	4a07      	ldr	r2, [pc, #28]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801129c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80112a0:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	7f5a      	ldrb	r2, [r3, #29]
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	7f9b      	ldrb	r3, [r3, #30]
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d010      	beq.n	80112d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80112ae:	4b02      	ldr	r3, [pc, #8]	@ (80112b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80112b0:	4a06      	ldr	r2, [pc, #24]	@ (80112cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80112b2:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 80112b4:	e010      	b.n	80112d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
 80112b6:	bf00      	nop
 80112b8:	4002b000 	.word	0x4002b000
 80112bc:	00020201 	.word	0x00020201
 80112c0:	0802d3c4 	.word	0x0802d3c4
 80112c4:	0802d3e0 	.word	0x0802d3e0
 80112c8:	0802d34c 	.word	0x0802d34c
 80112cc:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80112d0:	4b04      	ldr	r3, [pc, #16]	@ (80112e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 80112d2:	f240 2201 	movw	r2, #513	@ 0x201
 80112d6:	601a      	str	r2, [r3, #0]
        break;
 80112d8:	bf00      	nop
    }
}
 80112da:	bf00      	nop
 80112dc:	3724      	adds	r7, #36	@ 0x24
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd90      	pop	{r4, r7, pc}
 80112e2:	bf00      	nop
 80112e4:	4002b000 	.word	0x4002b000

080112e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80112e8:	b590      	push	{r4, r7, lr}
 80112ea:	b085      	sub	sp, #20
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	7f9b      	ldrb	r3, [r3, #30]
 80112f6:	4619      	mov	r1, r3
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f7ff fe4b 	bl	8010f94 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80112fe:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8011300:	4a3b      	ldr	r2, [pc, #236]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	8adb      	ldrh	r3, [r3, #22]
 801130a:	461a      	mov	r2, r3
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	8a9b      	ldrh	r3, [r3, #20]
 8011310:	041b      	lsls	r3, r3, #16
 8011312:	431a      	orrs	r2, r3
 8011314:	4b36      	ldr	r3, [pc, #216]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011316:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	691a      	ldr	r2, [r3, #16]
 801131c:	4b34      	ldr	r3, [pc, #208]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801131e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	8b5b      	ldrh	r3, [r3, #26]
 8011324:	461a      	mov	r2, r3
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	8a9b      	ldrh	r3, [r3, #20]
 801132a:	1ad2      	subs	r2, r2, r3
 801132c:	4b30      	ldr	r3, [pc, #192]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801132e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	2b08      	cmp	r3, #8
 8011336:	d12f      	bne.n	8011398 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	8b5b      	ldrh	r3, [r3, #26]
 801133c:	461a      	mov	r2, r3
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	8a9b      	ldrh	r3, [r3, #20]
 8011342:	1ad2      	subs	r2, r2, r3
 8011344:	4b2a      	ldr	r3, [pc, #168]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011346:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	8b5b      	ldrh	r3, [r3, #26]
 801134c:	461a      	mov	r2, r3
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	8a9b      	ldrh	r3, [r3, #20]
 8011352:	1ad2      	subs	r2, r2, r3
 8011354:	4b26      	ldr	r3, [pc, #152]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011356:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011358:	4a25      	ldr	r2, [pc, #148]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	7f1b      	ldrb	r3, [r3, #28]
 8011362:	061b      	lsls	r3, r3, #24
 8011364:	4a22      	ldr	r2, [pc, #136]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801136a:	f043 0309 	orr.w	r3, r3, #9
 801136e:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	330c      	adds	r3, #12
 8011374:	4c1e      	ldr	r4, [pc, #120]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011376:	4618      	mov	r0, r3
 8011378:	f7ff fc88 	bl	8010c8c <_ZNK8touchgfx9colortypecvmEv>
 801137c:	4603      	mov	r3, r0
 801137e:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	691a      	ldr	r2, [r3, #16]
 8011384:	4b1a      	ldr	r3, [pc, #104]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011386:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	691a      	ldr	r2, [r3, #16]
 801138c:	4b18      	ldr	r3, [pc, #96]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801138e:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8011390:	4b17      	ldr	r3, [pc, #92]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8011392:	4a18      	ldr	r2, [pc, #96]	@ (80113f4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8011394:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8011396:	e027      	b.n	80113e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8011398:	4a15      	ldr	r2, [pc, #84]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 801139e:	4b14      	ldr	r3, [pc, #80]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80113a0:	2200      	movs	r2, #0
 80113a2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	330c      	adds	r3, #12
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7ff fc6f 	bl	8010c8c <_ZNK8touchgfx9colortypecvmEv>
 80113ae:	4603      	mov	r3, r0
 80113b0:	0a1b      	lsrs	r3, r3, #8
 80113b2:	f403 4478 	and.w	r4, r3, #63488	@ 0xf800
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	330c      	adds	r3, #12
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7ff fc66 	bl	8010c8c <_ZNK8touchgfx9colortypecvmEv>
 80113c0:	4603      	mov	r3, r0
 80113c2:	095b      	lsrs	r3, r3, #5
 80113c4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80113c8:	431c      	orrs	r4, r3
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	330c      	adds	r3, #12
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7ff fc5c 	bl	8010c8c <_ZNK8touchgfx9colortypecvmEv>
 80113d4:	4603      	mov	r3, r0
 80113d6:	08db      	lsrs	r3, r3, #3
 80113d8:	f003 031f 	and.w	r3, r3, #31
 80113dc:	4a04      	ldr	r2, [pc, #16]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80113de:	4323      	orrs	r3, r4
 80113e0:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80113e2:	4b03      	ldr	r3, [pc, #12]	@ (80113f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80113e4:	4a04      	ldr	r2, [pc, #16]	@ (80113f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 80113e6:	601a      	str	r2, [r3, #0]
}
 80113e8:	bf00      	nop
 80113ea:	3714      	adds	r7, #20
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd90      	pop	{r4, r7, pc}
 80113f0:	4002b000 	.word	0x4002b000
 80113f4:	00020201 	.word	0x00020201
 80113f8:	00030201 	.word	0x00030201

080113fc <_ZN8touchgfx5paint8tearDownEv>:
 * @fn void tearDown();
 *
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
 80113fc:	b480      	push	{r7}
 80113fe:	af00      	add	r7, sp, #0
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8011400:	bf00      	nop
 8011402:	4b09      	ldr	r3, [pc, #36]	@ (8011428 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	f003 0301 	and.w	r3, r3, #1
 801140a:	2b00      	cmp	r3, #0
 801140c:	bf14      	ite	ne
 801140e:	2301      	movne	r3, #1
 8011410:	2300      	moveq	r3, #0
 8011412:	b2db      	uxtb	r3, r3
 8011414:	2b00      	cmp	r3, #0
 8011416:	d1f4      	bne.n	8011402 <_ZN8touchgfx5paint8tearDownEv+0x6>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8011418:	4b03      	ldr	r3, [pc, #12]	@ (8011428 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 801141a:	2223      	movs	r2, #35	@ 0x23
 801141c:	609a      	str	r2, [r3, #8]
}
 801141e:	bf00      	nop
 8011420:	46bd      	mov	sp, r7
 8011422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011426:	4770      	bx	lr
 8011428:	4002b000 	.word	0x4002b000

0801142c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 801142c:	b480      	push	{r7}
 801142e:	b085      	sub	sp, #20
 8011430:	af00      	add	r7, sp, #0
 8011432:	60f8      	str	r0, [r7, #12]
 8011434:	60b9      	str	r1, [r7, #8]
 8011436:	607a      	str	r2, [r7, #4]
 8011438:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 801143a:	bf00      	nop
 801143c:	4b21      	ldr	r3, [pc, #132]	@ (80114c4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	f003 0301 	and.w	r3, r3, #1
 8011444:	2b00      	cmp	r3, #0
 8011446:	bf14      	ite	ne
 8011448:	2301      	movne	r3, #1
 801144a:	2300      	moveq	r3, #0
 801144c:	b2db      	uxtb	r3, r3
 801144e:	2b00      	cmp	r3, #0
 8011450:	d1f4      	bne.n	801143c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8011452:	4b1c      	ldr	r3, [pc, #112]	@ (80114c4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011454:	2223      	movs	r2, #35	@ 0x23
 8011456:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8011458:	4b1a      	ldr	r3, [pc, #104]	@ (80114c4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801145a:	2202      	movs	r2, #2
 801145c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	041b      	lsls	r3, r3, #16
 8011462:	4a18      	ldr	r2, [pc, #96]	@ (80114c4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011464:	f043 0301 	orr.w	r3, r3, #1
 8011468:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 801146a:	4a16      	ldr	r2, [pc, #88]	@ (80114c4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	63d3      	str	r3, [r2, #60]	@ 0x3c

    if (alpha < 0xFF)
 8011470:	78fb      	ldrb	r3, [r7, #3]
 8011472:	2bff      	cmp	r3, #255	@ 0xff
 8011474:	d017      	beq.n	80114a6 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x7a>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011476:	4b13      	ldr	r3, [pc, #76]	@ (80114c4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011478:	2202      	movs	r2, #2
 801147a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 801147c:	78fb      	ldrb	r3, [r7, #3]
 801147e:	061b      	lsls	r3, r3, #24
 8011480:	4a10      	ldr	r2, [pc, #64]	@ (80114c4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011486:	f043 0309 	orr.w	r3, r3, #9
 801148a:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color);
 801148c:	4a0d      	ldr	r2, [pc, #52]	@ (80114c4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8011492:	4a0c      	ldr	r2, [pc, #48]	@ (80114c4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	6153      	str	r3, [r2, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8011498:	4a0a      	ldr	r2, [pc, #40]	@ (80114c4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	60d3      	str	r3, [r2, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 801149e:	4b09      	ldr	r3, [pc, #36]	@ (80114c4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80114a0:	4a09      	ldr	r2, [pc, #36]	@ (80114c8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x9c>)
 80114a2:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}
 80114a4:	e008      	b.n	80114b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x8c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80114a6:	4b07      	ldr	r3, [pc, #28]	@ (80114c4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80114a8:	2202      	movs	r2, #2
 80114aa:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 80114ac:	4a05      	ldr	r2, [pc, #20]	@ (80114c4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80114ae:	69bb      	ldr	r3, [r7, #24]
 80114b0:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 80114b2:	4b04      	ldr	r3, [pc, #16]	@ (80114c4 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 80114b4:	4a05      	ldr	r2, [pc, #20]	@ (80114cc <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xa0>)
 80114b6:	601a      	str	r2, [r3, #0]
}
 80114b8:	bf00      	nop
 80114ba:	3714      	adds	r7, #20
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr
 80114c4:	4002b000 	.word	0x4002b000
 80114c8:	00020001 	.word	0x00020001
 80114cc:	00030001 	.word	0x00030001

080114d0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	4a05      	ldr	r2, [pc, #20]	@ (80114f0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	601a      	str	r2, [r3, #0]
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7ff fbdf 	bl	8010ca4 <_ZN8touchgfx9DMA_QueueD1Ev>
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	4618      	mov	r0, r3
 80114ea:	3708      	adds	r7, #8
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}
 80114f0:	0802e478 	.word	0x0802e478

080114f4 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b082      	sub	sp, #8
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f7ff ffe7 	bl	80114d0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011502:	2114      	movs	r1, #20
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f018 fffc 	bl	802a502 <_ZdlPvj>
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	4618      	mov	r0, r3
 801150e:	3708      	adds	r7, #8
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8011514:	b480      	push	{r7}
 8011516:	b083      	sub	sp, #12
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 801151c:	4a04      	ldr	r2, [pc, #16]	@ (8011530 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6013      	str	r3, [r2, #0]
    }
 8011522:	bf00      	nop
 8011524:	370c      	adds	r7, #12
 8011526:	46bd      	mov	sp, r7
 8011528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152c:	4770      	bx	lr
 801152e:	bf00      	nop
 8011530:	20012744 	.word	0x20012744

08011534 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8011534:	b480      	push	{r7}
 8011536:	b085      	sub	sp, #20
 8011538:	af00      	add	r7, sp, #0
 801153a:	60f8      	str	r0, [r7, #12]
 801153c:	60b9      	str	r1, [r7, #8]
 801153e:	607a      	str	r2, [r7, #4]
 8011540:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8011542:	4a0b      	ldr	r2, [pc, #44]	@ (8011570 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	68ba      	ldr	r2, [r7, #8]
 801154c:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	683a      	ldr	r2, [r7, #0]
 8011558:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	69ba      	ldr	r2, [r7, #24]
 801155e:	611a      	str	r2, [r3, #16]
    {
    }
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	4618      	mov	r0, r3
 8011564:	3714      	adds	r7, #20
 8011566:	46bd      	mov	sp, r7
 8011568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156c:	4770      	bx	lr
 801156e:	bf00      	nop
 8011570:	0802e020 	.word	0x0802e020

08011574 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8011574:	b480      	push	{r7}
 8011576:	b083      	sub	sp, #12
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
    {
 801157c:	4a04      	ldr	r2, [pc, #16]	@ (8011590 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	601a      	str	r2, [r3, #0]
    }
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	4618      	mov	r0, r3
 8011586:	370c      	adds	r7, #12
 8011588:	46bd      	mov	sp, r7
 801158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158e:	4770      	bx	lr
 8011590:	0802e020 	.word	0x0802e020

08011594 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
    }
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f7ff ffe9 	bl	8011574 <_ZN8touchgfx7MVPHeapD1Ev>
 80115a2:	2114      	movs	r1, #20
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f018 ffac 	bl	802a502 <_ZdlPvj>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	4618      	mov	r0, r3
 80115ae:	3708      	adds	r7, #8
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}

080115b4 <_ZN8touchgfx18VectorFontRendererD1Ev>:
 */
class VectorFontRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorFontRenderer()
 80115b4:	b480      	push	{r7}
 80115b6:	b083      	sub	sp, #12
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
    {
 80115bc:	4a04      	ldr	r2, [pc, #16]	@ (80115d0 <_ZN8touchgfx18VectorFontRendererD1Ev+0x1c>)
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	601a      	str	r2, [r3, #0]
    }
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	4618      	mov	r0, r3
 80115c6:	370c      	adds	r7, #12
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr
 80115d0:	0802e00c 	.word	0x0802e00c

080115d4 <_ZN8touchgfx18VectorFontRendererD0Ev>:
    virtual ~VectorFontRenderer()
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
    }
 80115dc:	6878      	ldr	r0, [r7, #4]
 80115de:	f7ff ffe9 	bl	80115b4 <_ZN8touchgfx18VectorFontRendererD1Ev>
 80115e2:	2104      	movs	r1, #4
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f018 ff8c 	bl	802a502 <_ZdlPvj>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	4618      	mov	r0, r3
 80115ee:	3708      	adds	r7, #8
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80115f4:	b480      	push	{r7}
 80115f6:	b083      	sub	sp, #12
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
    {
 80115fc:	4a04      	ldr	r2, [pc, #16]	@ (8011610 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	601a      	str	r2, [r3, #0]
    }
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	4618      	mov	r0, r3
 8011606:	370c      	adds	r7, #12
 8011608:	46bd      	mov	sp, r7
 801160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160e:	4770      	bx	lr
 8011610:	0802e930 	.word	0x0802e930

08011614 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8011614:	b580      	push	{r7, lr}
 8011616:	b082      	sub	sp, #8
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
    }
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f7ff ffe9 	bl	80115f4 <_ZN8touchgfx3LCDD1Ev>
 8011622:	210c      	movs	r1, #12
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f018 ff6c 	bl	802a502 <_ZdlPvj>
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	4618      	mov	r0, r3
 801162e:	3708      	adds	r7, #8
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}

08011634 <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>:
    /**
     * Set the vector font renderer
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
 8011634:	b480      	push	{r7}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	6039      	str	r1, [r7, #0]
    {
        vectorFontRenderer = renderer;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	683a      	ldr	r2, [r7, #0]
 8011642:	609a      	str	r2, [r3, #8]
    }
 8011644:	bf00      	nop
 8011646:	370c      	adds	r7, #12
 8011648:	46bd      	mov	sp, r7
 801164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164e:	4770      	bx	lr

08011650 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8011650:	b480      	push	{r7}
 8011652:	b083      	sub	sp, #12
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
            : startX(0),
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2200      	movs	r2, #0
 801165c:	801a      	strh	r2, [r3, #0]
              startY(0),
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2200      	movs	r2, #0
 8011662:	805a      	strh	r2, [r3, #2]
              downX(0),
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2200      	movs	r2, #0
 8011668:	809a      	strh	r2, [r3, #4]
              downY(0),
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2200      	movs	r2, #0
 801166e:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2200      	movs	r2, #0
 8011674:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2200      	movs	r2, #0
 801167a:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2200      	movs	r2, #0
 8011680:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2200      	movs	r2, #0
 8011686:	739a      	strb	r2, [r3, #14]
        {
        }
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	4618      	mov	r0, r3
 801168c:	370c      	adds	r7, #12
 801168e:	46bd      	mov	sp, r7
 8011690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011694:	4770      	bx	lr

08011696 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8011696:	b580      	push	{r7, lr}
 8011698:	b082      	sub	sp, #8
 801169a:	af00      	add	r7, sp, #0
 801169c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7ff ffd5 	bl	8011650 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2200      	movs	r2, #0
 80116aa:	611a      	str	r2, [r3, #16]
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2200      	movs	r2, #0
 80116b0:	829a      	strh	r2, [r3, #20]
    {
    }
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	4618      	mov	r0, r3
 80116b6:	3708      	adds	r7, #8
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}

080116bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80116bc:	b580      	push	{r7, lr}
 80116be:	b084      	sub	sp, #16
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	60f8      	str	r0, [r7, #12]
 80116c4:	60b9      	str	r1, [r7, #8]
 80116c6:	607a      	str	r2, [r7, #4]
 80116c8:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80116ca:	4a55      	ldr	r2, [pc, #340]	@ (8011820 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	68ba      	ldr	r2, [r7, #8]
 80116d4:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	687a      	ldr	r2, [r7, #4]
 80116da:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	683a      	ldr	r2, [r7, #0]
 80116e0:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	2200      	movs	r2, #0
 80116e6:	611a      	str	r2, [r3, #16]
          buttonController(0),
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	2200      	movs	r2, #0
 80116ec:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2200      	movs	r2, #0
 80116f2:	619a      	str	r2, [r3, #24]
          gestures(),
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	331c      	adds	r3, #28
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7ff ffcc 	bl	8011696 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	2200      	movs	r2, #0
 8011702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	2200      	movs	r2, #0
 801170a:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	2200      	movs	r2, #0
 8011710:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	2200      	movs	r2, #0
 8011716:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	2200      	movs	r2, #0
 801171c:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	2200      	movs	r2, #0
 8011722:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	2201      	movs	r2, #1
 801172a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	2200      	movs	r2, #0
 8011732:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	2200      	movs	r2, #0
 801173a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	2200      	movs	r2, #0
 8011742:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	3350      	adds	r3, #80	@ 0x50
 8011748:	4618      	mov	r0, r3
 801174a:	f7fc fb07 	bl	800dd5c <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2200      	movs	r2, #0
 8011752:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2200      	movs	r2, #0
 801175a:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	2200      	movs	r2, #0
 8011760:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	2200      	movs	r2, #0
 8011766:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	2201      	movs	r2, #1
 801176c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	2200      	movs	r2, #0
 8011774:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	2200      	movs	r2, #0
 801177c:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	2201      	movs	r2, #1
 8011784:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	2200      	movs	r2, #0
 801178c:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2200      	movs	r2, #0
 8011794:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	2200      	movs	r2, #0
 801179c:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2200      	movs	r2, #0
 80117a4:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	2200      	movs	r2, #0
 80117ac:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	2200      	movs	r2, #0
 80117b4:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2200      	movs	r2, #0
 80117ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	2200      	movs	r2, #0
 80117c2:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2201      	movs	r2, #1
 80117ca:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE)
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	2201      	movs	r2, #1
 80117d2:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
        instance = this;
 80117d6:	4a13      	ldr	r2, [pc, #76]	@ (8011824 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80117dc:	4a12      	ldr	r2, [pc, #72]	@ (8011828 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80117de:	8b3b      	ldrh	r3, [r7, #24]
 80117e0:	8013      	strh	r3, [r2, #0]
 80117e2:	4b11      	ldr	r3, [pc, #68]	@ (8011828 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80117e4:	881a      	ldrh	r2, [r3, #0]
 80117e6:	4b11      	ldr	r3, [pc, #68]	@ (801182c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80117e8:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80117ea:	4a11      	ldr	r2, [pc, #68]	@ (8011830 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80117ec:	8bbb      	ldrh	r3, [r7, #28]
 80117ee:	8013      	strh	r3, [r2, #0]
 80117f0:	4b0f      	ldr	r3, [pc, #60]	@ (8011830 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80117f2:	881a      	ldrh	r2, [r3, #0]
 80117f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011834 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80117f6:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80117f8:	4b0f      	ldr	r3, [pc, #60]	@ (8011838 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80117fa:	2200      	movs	r2, #0
 80117fc:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80117fe:	8b3a      	ldrh	r2, [r7, #24]
 8011800:	8bbb      	ldrh	r3, [r7, #28]
 8011802:	429a      	cmp	r2, r3
 8011804:	bf34      	ite	cc
 8011806:	2301      	movcc	r3, #1
 8011808:	2300      	movcs	r3, #0
 801180a:	b2db      	uxtb	r3, r3
 801180c:	461a      	mov	r2, r3
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	4618      	mov	r0, r3
 8011818:	3710      	adds	r7, #16
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	0802e350 	.word	0x0802e350
 8011824:	200126e0 	.word	0x200126e0
 8011828:	200126d4 	.word	0x200126d4
 801182c:	200126da 	.word	0x200126da
 8011830:	200126d6 	.word	0x200126d6
 8011834:	200126dc 	.word	0x200126dc
 8011838:	200126d8 	.word	0x200126d8

0801183c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801183c:	b580      	push	{r7, lr}
 801183e:	b082      	sub	sp, #8
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
 8011844:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	4618      	mov	r0, r3
 801184a:	f7fb f9f3 	bl	800cc34 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 801184e:	bf00      	nop
 8011850:	3708      	adds	r7, #8
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
	...

08011858 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8011858:	b580      	push	{r7, lr}
 801185a:	b086      	sub	sp, #24
 801185c:	af02      	add	r7, sp, #8
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	607a      	str	r2, [r7, #4]
 8011864:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8011866:	68f8      	ldr	r0, [r7, #12]
 8011868:	69bb      	ldr	r3, [r7, #24]
 801186a:	9300      	str	r3, [sp, #0]
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	68b9      	ldr	r1, [r7, #8]
 8011872:	f7ff fe5f 	bl	8011534 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8011876:	4a04      	ldr	r2, [pc, #16]	@ (8011888 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	601a      	str	r2, [r3, #0]
    {

    }
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	4618      	mov	r0, r3
 8011880:	3710      	adds	r7, #16
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop
 8011888:	0802dff8 	.word	0x0802dff8

0801188c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801188c:	b580      	push	{r7, lr}
 801188e:	af00      	add	r7, sp, #0
 8011890:	4801      	ldr	r0, [pc, #4]	@ (8011898 <__tcf_0+0xc>)
 8011892:	f000 f96d 	bl	8011b70 <_ZN12FrontendHeapD1Ev>
 8011896:	bd80      	pop	{r7, pc}
 8011898:	200112a8 	.word	0x200112a8

0801189c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801189c:	b580      	push	{r7, lr}
 801189e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80118a0:	4b11      	ldr	r3, [pc, #68]	@ (80118e8 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	f3bf 8f5b 	dmb	ish
 80118a8:	f003 0301 	and.w	r3, r3, #1
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	bf0c      	ite	eq
 80118b0:	2301      	moveq	r3, #1
 80118b2:	2300      	movne	r3, #0
 80118b4:	b2db      	uxtb	r3, r3
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d013      	beq.n	80118e2 <_ZN12FrontendHeap11getInstanceEv+0x46>
 80118ba:	480b      	ldr	r0, [pc, #44]	@ (80118e8 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 80118bc:	f018 fe23 	bl	802a506 <__cxa_guard_acquire>
 80118c0:	4603      	mov	r3, r0
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	bf14      	ite	ne
 80118c6:	2301      	movne	r3, #1
 80118c8:	2300      	moveq	r3, #0
 80118ca:	b2db      	uxtb	r3, r3
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d008      	beq.n	80118e2 <_ZN12FrontendHeap11getInstanceEv+0x46>
 80118d0:	4806      	ldr	r0, [pc, #24]	@ (80118ec <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80118d2:	f000 f867 	bl	80119a4 <_ZN12FrontendHeapC1Ev>
 80118d6:	4806      	ldr	r0, [pc, #24]	@ (80118f0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80118d8:	f019 fd78 	bl	802b3cc <atexit>
 80118dc:	4802      	ldr	r0, [pc, #8]	@ (80118e8 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 80118de:	f018 fe1e 	bl	802a51e <__cxa_guard_release>
        return instance;
 80118e2:	4b02      	ldr	r3, [pc, #8]	@ (80118ec <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 80118e4:	4618      	mov	r0, r3
 80118e6:	bd80      	pop	{r7, pc}
 80118e8:	20011744 	.word	0x20011744
 80118ec:	200112a8 	.word	0x200112a8
 80118f0:	0801188d 	.word	0x0801188d

080118f4 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	4a05      	ldr	r2, [pc, #20]	@ (8011914 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	601a      	str	r2, [r3, #0]
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	4618      	mov	r0, r3
 8011906:	f7ff fe35 	bl	8011574 <_ZN8touchgfx7MVPHeapD1Ev>
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	4618      	mov	r0, r3
 801190e:	3708      	adds	r7, #8
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}
 8011914:	0802dff8 	.word	0x0802dff8

08011918 <_ZN16FrontendHeapBaseD0Ev>:
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f7ff ffe7 	bl	80118f4 <_ZN16FrontendHeapBaseD1Ev>
 8011926:	2114      	movs	r1, #20
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f018 fdea 	bl	802a502 <_ZdlPvj>
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	4618      	mov	r0, r3
 8011932:	3708      	adds	r7, #8
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	4618      	mov	r0, r3
 8011944:	f001 f912 	bl	8012b6c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011948:	4a03      	ldr	r2, [pc, #12]	@ (8011958 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	601a      	str	r2, [r3, #0]
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	4618      	mov	r0, r3
 8011952:	3708      	adds	r7, #8
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}
 8011958:	0802dfc4 	.word	0x0802dfc4

0801195c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 801195c:	b580      	push	{r7, lr}
 801195e:	b082      	sub	sp, #8
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	4618      	mov	r0, r3
 8011968:	f001 f900 	bl	8012b6c <_ZN8touchgfx17AbstractPartitionC1Ev>
 801196c:	4a03      	ldr	r2, [pc, #12]	@ (801197c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	601a      	str	r2, [r3, #0]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	4618      	mov	r0, r3
 8011976:	3708      	adds	r7, #8
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}
 801197c:	0802df90 	.word	0x0802df90

08011980 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8011980:	b580      	push	{r7, lr}
 8011982:	b082      	sub	sp, #8
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	4618      	mov	r0, r3
 801198c:	f001 f8ee 	bl	8012b6c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011990:	4a03      	ldr	r2, [pc, #12]	@ (80119a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	601a      	str	r2, [r3, #0]
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	4618      	mov	r0, r3
 801199a:	3708      	adds	r7, #8
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}
 80119a0:	0802df5c 	.word	0x0802df5c

080119a4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80119a4:	b590      	push	{r4, r7, lr}
 80119a6:	b085      	sub	sp, #20
 80119a8:	af02      	add	r7, sp, #8
 80119aa:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f103 0114 	add.w	r1, r3, #20
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f503 743d 	add.w	r4, r3, #756	@ 0x2f4
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f503 7350 	add.w	r3, r3, #832	@ 0x340
                     app(model, *this)
 80119c6:	9300      	str	r3, [sp, #0]
 80119c8:	4623      	mov	r3, r4
 80119ca:	f7ff ff45 	bl	8011858 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80119ce:	4a18      	ldr	r2, [pc, #96]	@ (8011a30 <_ZN12FrontendHeapC1Ev+0x8c>)
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	601a      	str	r2, [r3, #0]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	3314      	adds	r3, #20
 80119d8:	4618      	mov	r0, r3
 80119da:	f7ff ffad 	bl	8011938 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	332c      	adds	r3, #44	@ 0x2c
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7ff ffba 	bl	801195c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80119ee:	4618      	mov	r0, r3
 80119f0:	f7ff ffc6 	bl	8011980 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7fe f87e 	bl	800fafc <_ZN5ModelC1Ev>
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f503 7050 	add.w	r0, r3, #832	@ 0x340
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8011a0c:	687a      	ldr	r2, [r7, #4]
 8011a0e:	4619      	mov	r1, r3
 8011a10:	f7fe f85e 	bl	800fad0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8011a14:	687a      	ldr	r2, [r7, #4]
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	4610      	mov	r0, r2
 8011a20:	f7ff ff0c 	bl	801183c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	4618      	mov	r0, r3
 8011a28:	370c      	adds	r7, #12
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd90      	pop	{r4, r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	0802df48 	.word	0x0802df48

08011a34 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b086      	sub	sp, #24
 8011a38:	af02      	add	r7, sp, #8
 8011a3a:	60f8      	str	r0, [r7, #12]
 8011a3c:	60b9      	str	r1, [r7, #8]
 8011a3e:	607a      	str	r2, [r7, #4]
 8011a40:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8011a42:	68f8      	ldr	r0, [r7, #12]
 8011a44:	8bbb      	ldrh	r3, [r7, #28]
 8011a46:	9301      	str	r3, [sp, #4]
 8011a48:	8b3b      	ldrh	r3, [r7, #24]
 8011a4a:	9300      	str	r3, [sp, #0]
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	687a      	ldr	r2, [r7, #4]
 8011a50:	68b9      	ldr	r1, [r7, #8]
 8011a52:	f7ff fe33 	bl	80116bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8011a56:	4a04      	ldr	r2, [pc, #16]	@ (8011a68 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	601a      	str	r2, [r3, #0]
    }
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	bf00      	nop
 8011a68:	0802e168 	.word	0x0802e168

08011a6c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b086      	sub	sp, #24
 8011a70:	af02      	add	r7, sp, #8
 8011a72:	60f8      	str	r0, [r7, #12]
 8011a74:	60b9      	str	r1, [r7, #8]
 8011a76:	607a      	str	r2, [r7, #4]
 8011a78:	603b      	str	r3, [r7, #0]
 8011a7a:	68f8      	ldr	r0, [r7, #12]
 8011a7c:	8bbb      	ldrh	r3, [r7, #28]
 8011a7e:	9301      	str	r3, [sp, #4]
 8011a80:	8b3b      	ldrh	r3, [r7, #24]
 8011a82:	9300      	str	r3, [sp, #0]
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	687a      	ldr	r2, [r7, #4]
 8011a88:	68b9      	ldr	r1, [r7, #8]
 8011a8a:	f7ff ffd3 	bl	8011a34 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8011a8e:	4a04      	ldr	r2, [pc, #16]	@ (8011aa0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	601a      	str	r2, [r3, #0]
    }
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	4618      	mov	r0, r3
 8011a98:	3710      	adds	r7, #16
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
 8011a9e:	bf00      	nop
 8011aa0:	0802ddfc 	.word	0x0802ddfc

08011aa4 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8011aa4:	b480      	push	{r7}
 8011aa6:	b083      	sub	sp, #12
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	4a04      	ldr	r2, [pc, #16]	@ (8011ac0 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	601a      	str	r2, [r3, #0]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	370c      	adds	r7, #12
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abe:	4770      	bx	lr
 8011ac0:	0802dde4 	.word	0x0802dde4

08011ac4 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b082      	sub	sp, #8
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7ff ffe8 	bl	8011aa4 <_ZN8touchgfx15TouchControllerC1Ev>
 8011ad4:	4a03      	ldr	r2, [pc, #12]	@ (8011ae4 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	601a      	str	r2, [r3, #0]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	4618      	mov	r0, r3
 8011ade:	3708      	adds	r7, #8
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}
 8011ae4:	0802ddcc 	.word	0x0802ddcc

08011ae8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8011ae8:	b590      	push	{r4, r7, lr}
 8011aea:	b085      	sub	sp, #20
 8011aec:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8011aee:	f7fd fdbf 	bl	800f670 <_ZN14BitmapDatabase11getInstanceEv>
 8011af2:	4604      	mov	r4, r0
 8011af4:	f7fd fdc6 	bl	800f684 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8011af8:	4603      	mov	r3, r0
 8011afa:	4619      	mov	r1, r3
 8011afc:	2300      	movs	r3, #0
 8011afe:	9300      	str	r3, [sp, #0]
 8011b00:	2300      	movs	r3, #0
 8011b02:	2200      	movs	r2, #0
 8011b04:	4620      	mov	r0, r4
 8011b06:	f00a fb43 	bl	801c190 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8011b0a:	480b      	ldr	r0, [pc, #44]	@ (8011b38 <touchgfx_init+0x50>)
 8011b0c:	f7ff fd02 	bl	8011514 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8011b10:	2000      	movs	r0, #0
 8011b12:	f7fd fefb 	bl	800f90c <_ZN8touchgfx5Texts11setLanguageEt>

    display.setVectorFontRenderer(&vectorFontRenderer);
 8011b16:	4909      	ldr	r1, [pc, #36]	@ (8011b3c <touchgfx_init+0x54>)
 8011b18:	4809      	ldr	r0, [pc, #36]	@ (8011b40 <touchgfx_init+0x58>)
 8011b1a:	f7ff fd8b 	bl	8011634 <_ZN8touchgfx3LCD21setVectorFontRendererEPNS_18VectorFontRendererE>

    FontManager::setFontProvider(&fontProvider);
 8011b1e:	4809      	ldr	r0, [pc, #36]	@ (8011b44 <touchgfx_init+0x5c>)
 8011b20:	f00a fa9e 	bl	801c060 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8011b24:	f7ff feba 	bl	801189c <_ZN12FrontendHeap11getInstanceEv>
 8011b28:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8011b2a:	4807      	ldr	r0, [pc, #28]	@ (8011b48 <touchgfx_init+0x60>)
 8011b2c:	f7fe ff18 	bl	8010960 <_ZN11TouchGFXHAL10initializeEv>
}
 8011b30:	bf00      	nop
 8011b32:	370c      	adds	r7, #12
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd90      	pop	{r4, r7, pc}
 8011b38:	20012590 	.word	0x20012590
 8011b3c:	20012574 	.word	0x20012574
 8011b40:	200124ec 	.word	0x200124ec
 8011b44:	20000088 	.word	0x20000088
 8011b48:	20012594 	.word	0x20012594

08011b4c <touchgfx_components_init>:

void touchgfx_components_init()
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	af00      	add	r7, sp, #0
}
 8011b50:	bf00      	nop
 8011b52:	46bd      	mov	sp, r7
 8011b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b58:	4770      	bx	lr
	...

08011b5c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8011b60:	4802      	ldr	r0, [pc, #8]	@ (8011b6c <touchgfx_taskEntry+0x10>)
 8011b62:	f7fe ff13 	bl	801098c <_ZN11TouchGFXHAL9taskEntryEv>
}
 8011b66:	bf00      	nop
 8011b68:	bd80      	pop	{r7, pc}
 8011b6a:	bf00      	nop
 8011b6c:	20012594 	.word	0x20012594

08011b70 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	4a10      	ldr	r2, [pc, #64]	@ (8011bbc <_ZN12FrontendHeapD1Ev+0x4c>)
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	601a      	str	r2, [r3, #0]
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7fd ff6d 	bl	800fa64 <_ZN19FrontendApplicationD1Ev>
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8011b90:	4618      	mov	r0, r3
 8011b92:	f000 f827 	bl	8011be4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	332c      	adds	r3, #44	@ 0x2c
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f000 f844 	bl	8011c28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	3314      	adds	r3, #20
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f000 f863 	bl	8011c70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7ff fea1 	bl	80118f4 <_ZN16FrontendHeapBaseD1Ev>
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3708      	adds	r7, #8
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}
 8011bbc:	0802df48 	.word	0x0802df48

08011bc0 <_ZN12FrontendHeapD0Ev>:
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f7ff ffd1 	bl	8011b70 <_ZN12FrontendHeapD1Ev>
 8011bce:	f240 419c 	movw	r1, #1180	@ 0x49c
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f018 fc95 	bl	802a502 <_ZdlPvj>
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3708      	adds	r7, #8
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}
	...

08011be4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	4a05      	ldr	r2, [pc, #20]	@ (8011c04 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	601a      	str	r2, [r3, #0]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f000 ffb8 	bl	8012b6a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3708      	adds	r7, #8
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	0802df5c 	.word	0x0802df5c

08011c08 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f7ff ffe7 	bl	8011be4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8011c16:	2148      	movs	r1, #72	@ 0x48
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f018 fc72 	bl	802a502 <_ZdlPvj>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	4618      	mov	r0, r3
 8011c22:	3708      	adds	r7, #8
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}

08011c28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b082      	sub	sp, #8
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
 8011c30:	4a05      	ldr	r2, [pc, #20]	@ (8011c48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	601a      	str	r2, [r3, #0]
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f000 ff96 	bl	8012b6a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	4618      	mov	r0, r3
 8011c42:	3708      	adds	r7, #8
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}
 8011c48:	0802df90 	.word	0x0802df90

08011c4c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b082      	sub	sp, #8
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f7ff ffe7 	bl	8011c28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011c5a:	f44f 7132 	mov.w	r1, #712	@ 0x2c8
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f018 fc4f 	bl	802a502 <_ZdlPvj>
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	4618      	mov	r0, r3
 8011c68:	3708      	adds	r7, #8
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
	...

08011c70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
 8011c78:	4a05      	ldr	r2, [pc, #20]	@ (8011c90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	601a      	str	r2, [r3, #0]
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	4618      	mov	r0, r3
 8011c82:	f000 ff72 	bl	8012b6a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3708      	adds	r7, #8
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}
 8011c90:	0802dfc4 	.word	0x0802dfc4

08011c94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b082      	sub	sp, #8
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
 8011c9c:	6878      	ldr	r0, [r7, #4]
 8011c9e:	f7ff ffe7 	bl	8011c70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011ca2:	2118      	movs	r1, #24
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	f018 fc2c 	bl	802a502 <_ZdlPvj>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	4618      	mov	r0, r3
 8011cae:	3708      	adds	r7, #8
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
namespace touchgfx
{
/**
 * Implementation of the VectorFontRenderer interface
 */
class VectorFontRendererImpl : public VectorFontRenderer
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	4a05      	ldr	r2, [pc, #20]	@ (8011cd4 <_ZN8touchgfx22VectorFontRendererImplD1Ev+0x20>)
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	601a      	str	r2, [r3, #0]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7ff fc75 	bl	80115b4 <_ZN8touchgfx18VectorFontRendererD1Ev>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3708      	adds	r7, #8
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}
 8011cd4:	0802ea44 	.word	0x0802ea44

08011cd8 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f7ff ffe7 	bl	8011cb4 <_ZN8touchgfx22VectorFontRendererImplD1Ev>
 8011ce6:	211c      	movs	r1, #28
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f018 fc0a 	bl	802a502 <_ZdlPvj>
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3708      	adds	r7, #8
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b082      	sub	sp, #8
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	4a05      	ldr	r2, [pc, #20]	@ (8011d18 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	601a      	str	r2, [r3, #0]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7ff fc73 	bl	80115f4 <_ZN8touchgfx3LCDD1Ev>
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	4618      	mov	r0, r3
 8011d12:	3708      	adds	r7, #8
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	0802edb4 	.word	0x0802edb4

08011d1c <_ZN8touchgfx8LCD16bppD0Ev>:
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f7ff ffe7 	bl	8011cf8 <_ZN8touchgfx8LCD16bppD1Ev>
 8011d2a:	2188      	movs	r1, #136	@ 0x88
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f018 fbe8 	bl	802a502 <_ZdlPvj>
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	4618      	mov	r0, r3
 8011d36:	3708      	adds	r7, #8
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <_Z41__static_initialization_and_destruction_0ii>:
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b084      	sub	sp, #16
 8011d40:	af02      	add	r7, sp, #8
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	6039      	str	r1, [r7, #0]
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2b01      	cmp	r3, #1
 8011d4a:	d11b      	bne.n	8011d84 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011d52:	4293      	cmp	r3, r2
 8011d54:	d116      	bne.n	8011d84 <_Z41__static_initialization_and_destruction_0ii+0x48>
static STM32TouchController tc;
 8011d56:	481a      	ldr	r0, [pc, #104]	@ (8011dc0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8011d58:	f7ff feb4 	bl	8011ac4 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8011d5c:	4819      	ldr	r0, [pc, #100]	@ (8011dc4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8011d5e:	f7ff f851 	bl	8010e04 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8011d62:	4819      	ldr	r0, [pc, #100]	@ (8011dc8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8011d64:	f00e fcde 	bl	8020724 <_ZN8touchgfx8LCD16bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8011d68:	4818      	ldr	r0, [pc, #96]	@ (8011dcc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8011d6a:	f007 ffa7 	bl	8019cbc <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 8011d6e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8011d72:	9301      	str	r3, [sp, #4]
 8011d74:	23f0      	movs	r3, #240	@ 0xf0
 8011d76:	9300      	str	r3, [sp, #0]
 8011d78:	4b11      	ldr	r3, [pc, #68]	@ (8011dc0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8011d7a:	4a13      	ldr	r2, [pc, #76]	@ (8011dc8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8011d7c:	4911      	ldr	r1, [pc, #68]	@ (8011dc4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8011d7e:	4814      	ldr	r0, [pc, #80]	@ (8011dd0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8011d80:	f7ff fe74 	bl	8011a6c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d116      	bne.n	8011db8 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011d90:	4293      	cmp	r3, r2
 8011d92:	d111      	bne.n	8011db8 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 8011d94:	480e      	ldr	r0, [pc, #56]	@ (8011dd0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8011d96:	f7fe fe79 	bl	8010a8c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8011d9a:	480e      	ldr	r0, [pc, #56]	@ (8011dd4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8011d9c:	f7f9 ffaa 	bl	800bcf4 <_ZN23ApplicationFontProviderD1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8011da0:	480a      	ldr	r0, [pc, #40]	@ (8011dcc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8011da2:	f7ff ff87 	bl	8011cb4 <_ZN8touchgfx22VectorFontRendererImplD1Ev>
static LCD16bpp display;
 8011da6:	4808      	ldr	r0, [pc, #32]	@ (8011dc8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8011da8:	f7ff ffa6 	bl	8011cf8 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8011dac:	4805      	ldr	r0, [pc, #20]	@ (8011dc4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8011dae:	f7ff f853 	bl	8010e58 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8011db2:	4803      	ldr	r0, [pc, #12]	@ (8011dc0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8011db4:	f7fe fac6 	bl	8010344 <_ZN20STM32TouchControllerD1Ev>
}
 8011db8:	bf00      	nop
 8011dba:	3708      	adds	r7, #8
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}
 8011dc0:	20011748 	.word	0x20011748
 8011dc4:	2001174c 	.word	0x2001174c
 8011dc8:	200124ec 	.word	0x200124ec
 8011dcc:	20012574 	.word	0x20012574
 8011dd0:	20012594 	.word	0x20012594
 8011dd4:	20000088 	.word	0x20000088

08011dd8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8011dd8:	b480      	push	{r7}
 8011dda:	b083      	sub	sp, #12
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8011de0:	2301      	movs	r3, #1
    }
 8011de2:	4618      	mov	r0, r3
 8011de4:	370c      	adds	r7, #12
 8011de6:	46bd      	mov	sp, r7
 8011de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dec:	4770      	bx	lr

08011dee <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8011dee:	b480      	push	{r7}
 8011df0:	b083      	sub	sp, #12
 8011df2:	af00      	add	r7, sp, #0
 8011df4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8011df6:	2340      	movs	r3, #64	@ 0x40
    }
 8011df8:	4618      	mov	r0, r3
 8011dfa:	370c      	adds	r7, #12
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr

08011e04 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8011e04:	b480      	push	{r7}
 8011e06:	b083      	sub	sp, #12
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	460b      	mov	r3, r1
 8011e0e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8011e10:	887b      	ldrh	r3, [r7, #2]
 8011e12:	019b      	lsls	r3, r3, #6
 8011e14:	3308      	adds	r3, #8
 8011e16:	687a      	ldr	r2, [r7, #4]
 8011e18:	4413      	add	r3, r2
    }
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	370c      	adds	r7, #12
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e24:	4770      	bx	lr

08011e26 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8011e26:	b480      	push	{r7}
 8011e28:	b083      	sub	sp, #12
 8011e2a:	af00      	add	r7, sp, #0
 8011e2c:	6078      	str	r0, [r7, #4]
 8011e2e:	460b      	mov	r3, r1
 8011e30:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8011e32:	887b      	ldrh	r3, [r7, #2]
 8011e34:	019b      	lsls	r3, r3, #6
 8011e36:	3308      	adds	r3, #8
 8011e38:	687a      	ldr	r2, [r7, #4]
 8011e3a:	4413      	add	r3, r2
    }
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	370c      	adds	r7, #12
 8011e40:	46bd      	mov	sp, r7
 8011e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e46:	4770      	bx	lr

08011e48 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8011e48:	b480      	push	{r7}
 8011e4a:	b083      	sub	sp, #12
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8011e50:	2301      	movs	r3, #1
    }
 8011e52:	4618      	mov	r0, r3
 8011e54:	370c      	adds	r7, #12
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr

08011e5e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8011e5e:	b480      	push	{r7}
 8011e60:	b083      	sub	sp, #12
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8011e66:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
    }
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	370c      	adds	r7, #12
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e74:	4770      	bx	lr

08011e76 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8011e76:	b480      	push	{r7}
 8011e78:	b083      	sub	sp, #12
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	6078      	str	r0, [r7, #4]
 8011e7e:	460b      	mov	r3, r1
 8011e80:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011e82:	887b      	ldrh	r3, [r7, #2]
 8011e84:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 8011e88:	fb02 f303 	mul.w	r3, r2, r3
 8011e8c:	3308      	adds	r3, #8
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	4413      	add	r3, r2
    }
 8011e92:	4618      	mov	r0, r3
 8011e94:	370c      	adds	r7, #12
 8011e96:	46bd      	mov	sp, r7
 8011e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9c:	4770      	bx	lr

08011e9e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8011e9e:	b480      	push	{r7}
 8011ea0:	b083      	sub	sp, #12
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
 8011ea6:	460b      	mov	r3, r1
 8011ea8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011eaa:	887b      	ldrh	r3, [r7, #2]
 8011eac:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 8011eb0:	fb02 f303 	mul.w	r3, r2, r3
 8011eb4:	3308      	adds	r3, #8
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	4413      	add	r3, r2
    }
 8011eba:	4618      	mov	r0, r3
 8011ebc:	370c      	adds	r7, #12
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec4:	4770      	bx	lr

08011ec6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8011ec6:	b480      	push	{r7}
 8011ec8:	b083      	sub	sp, #12
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8011ece:	2301      	movs	r3, #1
    }
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	370c      	adds	r7, #12
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eda:	4770      	bx	lr

08011edc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8011edc:	b480      	push	{r7}
 8011ede:	b083      	sub	sp, #12
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8011ee4:	2310      	movs	r3, #16
    }
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	370c      	adds	r7, #12
 8011eea:	46bd      	mov	sp, r7
 8011eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef0:	4770      	bx	lr

08011ef2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8011ef2:	b480      	push	{r7}
 8011ef4:	b083      	sub	sp, #12
 8011ef6:	af00      	add	r7, sp, #0
 8011ef8:	6078      	str	r0, [r7, #4]
 8011efa:	460b      	mov	r3, r1
 8011efc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011efe:	887b      	ldrh	r3, [r7, #2]
 8011f00:	011b      	lsls	r3, r3, #4
 8011f02:	3308      	adds	r3, #8
 8011f04:	687a      	ldr	r2, [r7, #4]
 8011f06:	4413      	add	r3, r2
    }
 8011f08:	4618      	mov	r0, r3
 8011f0a:	370c      	adds	r7, #12
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f12:	4770      	bx	lr

08011f14 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8011f14:	b480      	push	{r7}
 8011f16:	b083      	sub	sp, #12
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	460b      	mov	r3, r1
 8011f1e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011f20:	887b      	ldrh	r3, [r7, #2]
 8011f22:	011b      	lsls	r3, r3, #4
 8011f24:	3308      	adds	r3, #8
 8011f26:	687a      	ldr	r2, [r7, #4]
 8011f28:	4413      	add	r3, r2
    }
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	370c      	adds	r7, #12
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f34:	4770      	bx	lr

08011f36 <_GLOBAL__sub_I_touchgfx_init>:
 8011f36:	b580      	push	{r7, lr}
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011f3e:	2001      	movs	r0, #1
 8011f40:	f7ff fefc 	bl	8011d3c <_Z41__static_initialization_and_destruction_0ii>
 8011f44:	bd80      	pop	{r7, pc}

08011f46 <_GLOBAL__sub_D_touchgfx_init>:
 8011f46:	b580      	push	{r7, lr}
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011f4e:	2000      	movs	r0, #0
 8011f50:	f7ff fef4 	bl	8011d3c <_Z41__static_initialization_and_destruction_0ii>
 8011f54:	bd80      	pop	{r7, pc}

08011f56 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8011f56:	b480      	push	{r7}
 8011f58:	b083      	sub	sp, #12
 8011f5a:	af00      	add	r7, sp, #0
 8011f5c:	6078      	str	r0, [r7, #4]
        return rect.width;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8011f64:	4618      	mov	r0, r3
 8011f66:	370c      	adds	r7, #12
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6e:	4770      	bx	lr

08011f70 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8011f70:	b480      	push	{r7}
 8011f72:	b083      	sub	sp, #12
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
        return rect.height;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8011f7e:	4618      	mov	r0, r3
 8011f80:	370c      	adds	r7, #12
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr
	...

08011f8c <_ZN8touchgfx14VectorRendererD1Ev>:
 */
class VectorRenderer
{
public:
    /** Virtual destructor. */
    virtual ~VectorRenderer()
 8011f8c:	b480      	push	{r7}
 8011f8e:	b083      	sub	sp, #12
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
    {
 8011f94:	4a04      	ldr	r2, [pc, #16]	@ (8011fa8 <_ZN8touchgfx14VectorRendererD1Ev+0x1c>)
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	601a      	str	r2, [r3, #0]
    }
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	370c      	adds	r7, #12
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa6:	4770      	bx	lr
 8011fa8:	0802e240 	.word	0x0802e240

08011fac <_ZN8touchgfx14VectorRendererD0Ev>:
    virtual ~VectorRenderer()
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b082      	sub	sp, #8
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
    }
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f7ff ffe9 	bl	8011f8c <_ZN8touchgfx14VectorRendererD1Ev>
 8011fba:	2104      	movs	r1, #4
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f018 faa0 	bl	802a502 <_ZdlPvj>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	3708      	adds	r7, #8
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}

08011fcc <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	3320      	adds	r3, #32
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	4798      	blx	r3
    }
 8011fe0:	bf00      	nop
 8011fe2:	3708      	adds	r7, #8
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}

08011fe8 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8011fe8:	b480      	push	{r7}
 8011fea:	b083      	sub	sp, #12
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	b2da      	uxtb	r2, r3
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
    }
 8012000:	bf00      	nop
 8012002:	370c      	adds	r7, #12
 8012004:	46bd      	mov	sp, r7
 8012006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200a:	4770      	bx	lr

0801200c <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 801200c:	b480      	push	{r7}
 801200e:	b083      	sub	sp, #12
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    }
 8012018:	4618      	mov	r0, r3
 801201a:	370c      	adds	r7, #12
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr

08012024 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	6039      	str	r1, [r7, #0]
    {
 801202e:	4a08      	ldr	r2, [pc, #32]	@ (8012050 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	601a      	str	r2, [r3, #0]
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	3304      	adds	r3, #4
 8012038:	4618      	mov	r0, r3
 801203a:	f7fe fe19 	bl	8010c70 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 801203e:	6839      	ldr	r1, [r7, #0]
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f000 f827 	bl	8012094 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	4618      	mov	r0, r3
 801204a:	3708      	adds	r7, #8
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}
 8012050:	0802e154 	.word	0x0802e154

08012054 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 8012054:	b480      	push	{r7}
 8012056:	b083      	sub	sp, #12
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
    {
 801205c:	4a04      	ldr	r2, [pc, #16]	@ (8012070 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	601a      	str	r2, [r3, #0]
    }
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	4618      	mov	r0, r3
 8012066:	370c      	adds	r7, #12
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr
 8012070:	0802e154 	.word	0x0802e154

08012074 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
    }
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f7ff ffe9 	bl	8012054 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8012082:	2108      	movs	r1, #8
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f018 fa3c 	bl	802a502 <_ZdlPvj>
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	4618      	mov	r0, r3
 801208e:	3708      	adds	r7, #8
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}

08012094 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 8012094:	b480      	push	{r7}
 8012096:	b083      	sub	sp, #12
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	683a      	ldr	r2, [r7, #0]
 80120a2:	605a      	str	r2, [r3, #4]
    }
 80120a4:	bf00      	nop
 80120a6:	370c      	adds	r7, #12
 80120a8:	46bd      	mov	sp, r7
 80120aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ae:	4770      	bx	lr

080120b0 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 80120b0:	b480      	push	{r7}
 80120b2:	b083      	sub	sp, #12
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 80120b8:	4a06      	ldr	r2, [pc, #24]	@ (80120d4 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	601a      	str	r2, [r3, #0]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2200      	movs	r2, #0
 80120c2:	809a      	strh	r2, [r3, #4]
    {
    }
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	4618      	mov	r0, r3
 80120c8:	370c      	adds	r7, #12
 80120ca:	46bd      	mov	sp, r7
 80120cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d0:	4770      	bx	lr
 80120d2:	bf00      	nop
 80120d4:	0802e134 	.word	0x0802e134

080120d8 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 80120d8:	b480      	push	{r7}
 80120da:	b083      	sub	sp, #12
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
    {
 80120e0:	4a04      	ldr	r2, [pc, #16]	@ (80120f4 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	601a      	str	r2, [r3, #0]
    }
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	4618      	mov	r0, r3
 80120ea:	370c      	adds	r7, #12
 80120ec:	46bd      	mov	sp, r7
 80120ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f2:	4770      	bx	lr
 80120f4:	0802e134 	.word	0x0802e134

080120f8 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
    }
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f7ff ffe9 	bl	80120d8 <_ZN8touchgfx15AbstractPainterD1Ev>
 8012106:	2108      	movs	r1, #8
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f018 f9fa 	bl	802a502 <_ZdlPvj>
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	4618      	mov	r0, r3
 8012112:	3708      	adds	r7, #8
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}

08012118 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 8012118:	b480      	push	{r7}
 801211a:	b083      	sub	sp, #12
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 8012120:	2300      	movs	r3, #0
    }
 8012122:	4618      	mov	r0, r3
 8012124:	370c      	adds	r7, #12
 8012126:	46bd      	mov	sp, r7
 8012128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212c:	4770      	bx	lr

0801212e <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 801212e:	b480      	push	{r7}
 8012130:	b083      	sub	sp, #12
 8012132:	af00      	add	r7, sp, #0
 8012134:	6078      	str	r0, [r7, #4]
 8012136:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	809a      	strh	r2, [r3, #4]
        return true;
 8012142:	2301      	movs	r3, #1
    }
 8012144:	4618      	mov	r0, r3
 8012146:	370c      	adds	r7, #12
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr

08012150 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 8012150:	b480      	push	{r7}
 8012152:	b083      	sub	sp, #12
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
    {
        return;
 8012158:	bf00      	nop
    }
 801215a:	370c      	adds	r7, #12
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr

08012164 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>:
 */
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
 8012164:	b580      	push	{r7, lr}
 8012166:	b082      	sub	sp, #8
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
        : AbstractPainter(),
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	4618      	mov	r0, r3
 8012170:	f7ff ff9e 	bl	80120b0 <_ZN8touchgfx15AbstractPainterC1Ev>
 8012174:	4a14      	ldr	r2, [pc, #80]	@ (80121c8 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev+0x64>)
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	601a      	str	r2, [r3, #0]
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	2200      	movs	r2, #0
 801217e:	80da      	strh	r2, [r3, #6]
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2264      	movs	r2, #100	@ 0x64
 8012184:	811a      	strh	r2, [r3, #8]
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	2200      	movs	r2, #0
 801218a:	60da      	str	r2, [r3, #12]
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2200      	movs	r2, #0
 8012190:	741a      	strb	r2, [r3, #16]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2200      	movs	r2, #0
 8012196:	745a      	strb	r2, [r3, #17]
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2200      	movs	r2, #0
 801219c:	749a      	strb	r2, [r3, #18]
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f04f 0200 	mov.w	r2, #0
 80121a4:	615a      	str	r2, [r3, #20]
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	f04f 0200 	mov.w	r2, #0
 80121ac:	619a      	str	r2, [r3, #24]
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f04f 0200 	mov.w	r2, #0
 80121b4:	61da      	str	r2, [r3, #28]
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f04f 0200 	mov.w	r2, #0
 80121bc:	621a      	str	r2, [r3, #32]
    {
    }
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	4618      	mov	r0, r3
 80121c2:	3708      	adds	r7, #8
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}
 80121c8:	0802e114 	.word	0x0802e114

080121cc <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterLinearGradient()
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b082      	sub	sp, #8
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
    {
 80121d4:	4a05      	ldr	r2, [pc, #20]	@ (80121ec <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev+0x20>)
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	601a      	str	r2, [r3, #0]
    }
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	4618      	mov	r0, r3
 80121de:	f7ff ff7b 	bl	80120d8 <_ZN8touchgfx15AbstractPainterD1Ev>
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	4618      	mov	r0, r3
 80121e6:	3708      	adds	r7, #8
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	0802e114 	.word	0x0802e114

080121f0 <_ZN8touchgfx29AbstractPainterLinearGradientD0Ev>:
    virtual ~AbstractPainterLinearGradient()
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b082      	sub	sp, #8
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
    }
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f7ff ffe7 	bl	80121cc <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 80121fe:	2124      	movs	r1, #36	@ 0x24
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f018 f97e 	bl	802a502 <_ZdlPvj>
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	4618      	mov	r0, r3
 801220a:	3708      	adds	r7, #8
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}

08012210 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 8012210:	b480      	push	{r7}
 8012212:	b083      	sub	sp, #12
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	460b      	mov	r3, r1
 801221a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	78fa      	ldrb	r2, [r7, #3]
 8012220:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    }
 8012224:	bf00      	nop
 8012226:	370c      	adds	r7, #12
 8012228:	46bd      	mov	sp, r7
 801222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222e:	4770      	bx	lr

08012230 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 8012230:	b480      	push	{r7}
 8012232:	b083      	sub	sp, #12
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    }
 801223e:	4618      	mov	r0, r3
 8012240:	370c      	adds	r7, #12
 8012242:	46bd      	mov	sp, r7
 8012244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012248:	4770      	bx	lr

0801224a <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 801224a:	b590      	push	{r4, r7, lr}
 801224c:	b085      	sub	sp, #20
 801224e:	af02      	add	r7, sp, #8
 8012250:	6078      	str	r0, [r7, #4]
 8012252:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	4618      	mov	r0, r3
 8012258:	f7ff fe7d 	bl	8011f56 <_ZNK8touchgfx8Drawable8getWidthEv>
 801225c:	4603      	mov	r3, r0
 801225e:	461c      	mov	r4, r3
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	4618      	mov	r0, r3
 8012264:	f7ff fe84 	bl	8011f70 <_ZNK8touchgfx8Drawable9getHeightEv>
 8012268:	4603      	mov	r3, r0
 801226a:	9300      	str	r3, [sp, #0]
 801226c:	4623      	mov	r3, r4
 801226e:	2200      	movs	r2, #0
 8012270:	2100      	movs	r1, #0
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f7fc fa4b 	bl	800e70e <_ZN8touchgfx4RectC1Essss>
    }
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	370c      	adds	r7, #12
 801227c:	46bd      	mov	sp, r7
 801227e:	bd90      	pop	{r4, r7, pc}

08012280 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 8012280:	b580      	push	{r7, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f7fb fd66 	bl	800dd5c <_ZN8touchgfx4RectC1Ev>
    }
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	3708      	adds	r7, #8
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}

08012298 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 8012298:	b580      	push	{r7, lr}
 801229a:	b084      	sub	sp, #16
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7ff ff04 	bl	80120b0 <_ZN8touchgfx15AbstractPainterC1Ev>
 80122a8:	4a26      	ldr	r2, [pc, #152]	@ (8012344 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	601a      	str	r2, [r3, #0]
 80122ae:	2300      	movs	r3, #0
 80122b0:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80122b2:	f7fa faad 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 80122b6:	4603      	mov	r3, r0
 80122b8:	681a      	ldr	r2, [r3, #0]
 80122ba:	322c      	adds	r2, #44	@ 0x2c
 80122bc:	6812      	ldr	r2, [r2, #0]
 80122be:	4618      	mov	r0, r3
 80122c0:	4790      	blx	r2
 80122c2:	4603      	mov	r3, r0
 80122c4:	461a      	mov	r2, r3
 80122c6:	7bfb      	ldrb	r3, [r7, #15]
 80122c8:	4293      	cmp	r3, r2
 80122ca:	bf0c      	ite	eq
 80122cc:	2301      	moveq	r3, #1
 80122ce:	2300      	movne	r3, #0
 80122d0:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80122d2:	f7fa fa91 	bl	800c7f8 <_ZN8touchgfx3HAL11getInstanceEv>
 80122d6:	4603      	mov	r3, r0
 80122d8:	4618      	mov	r0, r3
 80122da:	f7ff fe97 	bl	801200c <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80122de:	4603      	mov	r3, r0
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	bf14      	ite	ne
 80122e4:	2301      	movne	r3, #1
 80122e6:	2300      	moveq	r3, #0
 80122e8:	b2db      	uxtb	r3, r3
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d01b      	beq.n	8012326 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80122ee:	f7fa fa83 	bl	800c7f8 <_ZN8touchgfx3HAL11getInstanceEv>
 80122f2:	4603      	mov	r3, r0
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7ff fe89 	bl	801200c <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80122fa:	4603      	mov	r3, r0
 80122fc:	681a      	ldr	r2, [r3, #0]
 80122fe:	322c      	adds	r2, #44	@ 0x2c
 8012300:	6812      	ldr	r2, [r2, #0]
 8012302:	4618      	mov	r0, r3
 8012304:	4790      	blx	r2
 8012306:	4603      	mov	r3, r0
 8012308:	461a      	mov	r2, r3
 801230a:	7bfb      	ldrb	r3, [r7, #15]
 801230c:	4293      	cmp	r3, r2
 801230e:	bf0c      	ite	eq
 8012310:	2301      	moveq	r3, #1
 8012312:	2300      	movne	r3, #0
 8012314:	b2da      	uxtb	r2, r3
 8012316:	7bbb      	ldrb	r3, [r7, #14]
 8012318:	4313      	orrs	r3, r2
 801231a:	b2db      	uxtb	r3, r3
 801231c:	2b00      	cmp	r3, #0
 801231e:	bf14      	ite	ne
 8012320:	2301      	movne	r3, #1
 8012322:	2300      	moveq	r3, #0
 8012324:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8012326:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 8012328:	2b00      	cmp	r3, #0
 801232a:	d105      	bne.n	8012338 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 801232c:	4b06      	ldr	r3, [pc, #24]	@ (8012348 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 801232e:	4a07      	ldr	r2, [pc, #28]	@ (801234c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 8012330:	212c      	movs	r1, #44	@ 0x2c
 8012332:	4807      	ldr	r0, [pc, #28]	@ (8012350 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 8012334:	f019 f82c 	bl	802b390 <__assert_func>
    }
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	4618      	mov	r0, r3
 801233c:	3710      	adds	r7, #16
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}
 8012342:	bf00      	nop
 8012344:	0802e0f4 	.word	0x0802e0f4
 8012348:	0802d594 	.word	0x0802d594
 801234c:	0802d5f4 	.word	0x0802d5f4
 8012350:	0802d630 	.word	0x0802d630

08012354 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 8012354:	b580      	push	{r7, lr}
 8012356:	b082      	sub	sp, #8
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	4a05      	ldr	r2, [pc, #20]	@ (8012374 <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	601a      	str	r2, [r3, #0]
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	4618      	mov	r0, r3
 8012366:	f7ff feb7 	bl	80120d8 <_ZN8touchgfx15AbstractPainterD1Ev>
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	4618      	mov	r0, r3
 801236e:	3708      	adds	r7, #8
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}
 8012374:	0802e0f4 	.word	0x0802e0f4

08012378 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f7ff ffe7 	bl	8012354 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8012386:	2108      	movs	r1, #8
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f018 f8ba 	bl	802a502 <_ZdlPvj>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	4618      	mov	r0, r3
 8012392:	3708      	adds	r7, #8
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}

08012398 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 8012398:	b580      	push	{r7, lr}
 801239a:	b082      	sub	sp, #8
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
 80123a0:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7ff ff77 	bl	8012298 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	3308      	adds	r3, #8
 80123ae:	6839      	ldr	r1, [r7, #0]
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7ff fe37 	bl	8012024 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 80123b6:	4a05      	ldr	r2, [pc, #20]	@ (80123cc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	601a      	str	r2, [r3, #0]
 80123bc:	4a04      	ldr	r2, [pc, #16]	@ (80123d0 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	609a      	str	r2, [r3, #8]
    {
    }
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	4618      	mov	r0, r3
 80123c6:	3708      	adds	r7, #8
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}
 80123cc:	0802e4bc 	.word	0x0802e4bc
 80123d0:	0802e4e0 	.word	0x0802e4e0

080123d4 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * The default mode is non-zero filling.
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
 80123d4:	b480      	push	{r7}
 80123d6:	b083      	sub	sp, #12
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	460b      	mov	r3, r1
 80123de:	70fb      	strb	r3, [r7, #3]
    {
        drawMode = mode;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	78fa      	ldrb	r2, [r7, #3]
 80123e4:	771a      	strb	r2, [r3, #28]
    }
 80123e6:	bf00      	nop
 80123e8:	370c      	adds	r7, #12
 80123ea:	46bd      	mov	sp, r7
 80123ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f0:	4770      	bx	lr

080123f2 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
 80123f2:	b480      	push	{r7}
 80123f4:	b083      	sub	sp, #12
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
 80123fa:	ed87 0a00 	vstr	s0, [r7]
    {
        strokeMiterLimit = miterLimit;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	683a      	ldr	r2, [r7, #0]
 8012402:	621a      	str	r2, [r3, #32]
    }
 8012404:	bf00      	nop
 8012406:	370c      	adds	r7, #12
 8012408:	46bd      	mov	sp, r7
 801240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240e:	4770      	bx	lr

08012410 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
 8012410:	b480      	push	{r7}
 8012412:	b083      	sub	sp, #12
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
 8012418:	460b      	mov	r3, r1
 801241a:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineJoin = lineJoin;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	78fa      	ldrb	r2, [r7, #3]
 8012420:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 8012424:	bf00      	nop
 8012426:	370c      	adds	r7, #12
 8012428:	46bd      	mov	sp, r7
 801242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242e:	4770      	bx	lr

08012430 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
 8012430:	b480      	push	{r7}
 8012432:	b083      	sub	sp, #12
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	460b      	mov	r3, r1
 801243a:	70fb      	strb	r3, [r7, #3]
    {
        strokeLineCap = lineCap;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	78fa      	ldrb	r2, [r7, #3]
 8012440:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
 8012444:	bf00      	nop
 8012446:	370c      	adds	r7, #12
 8012448:	46bd      	mov	sp, r7
 801244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244e:	4770      	bx	lr

08012450 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    void drawStrokeBackwards(uint32_t cmdInxPathStart, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points, bool drawLineCaps, StrokeCanvas& canvas) const;
    void getPreviousDestination(float& positionX, float& positionY, uint32_t cmdInx, uint32_t pointInx, const uint8_t* cmds, const float* points) const;

    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
 8012450:	b480      	push	{r7}
 8012452:	b083      	sub	sp, #12
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
 8012458:	6039      	str	r1, [r7, #0]
        {
            return true;
 801245a:	2301      	movs	r3, #1
        }
 801245c:	4618      	mov	r0, r3
 801245e:	370c      	adds	r7, #12
 8012460:	46bd      	mov	sp, r7
 8012462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012466:	4770      	bx	lr

08012468 <_ZN8touchgfx23CWRVectorRendererRGB56516getLinearPainterEv>:
 * Implementation of the CWRVectorRendererInterface
 * for the RGB565 framebuffer format.
 */
class CWRVectorRendererRGB565 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
 8012468:	b480      	push	{r7}
 801246a:	b083      	sub	sp, #12
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
    {
        return linearPainter;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	3398      	adds	r3, #152	@ 0x98
    }
 8012474:	4618      	mov	r0, r3
 8012476:	370c      	adds	r7, #12
 8012478:	46bd      	mov	sp, r7
 801247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247e:	4770      	bx	lr

08012480 <_ZN8touchgfx23CWRVectorRendererRGB56520getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
 8012480:	b480      	push	{r7}
 8012482:	b083      	sub	sp, #12
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	338c      	adds	r3, #140	@ 0x8c
    }
 801248c:	4618      	mov	r0, r3
 801248e:	370c      	adds	r7, #12
 8012490:	46bd      	mov	sp, r7
 8012492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012496:	4770      	bx	lr

08012498 <_ZN8touchgfx23CWRVectorRendererRGB56515getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
 8012498:	b480      	push	{r7}
 801249a:	b083      	sub	sp, #12
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
    {
        return colorPainter;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	3384      	adds	r3, #132	@ 0x84
    }
 80124a4:	4618      	mov	r0, r3
 80124a6:	370c      	adds	r7, #12
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr

080124b0 <_ZN8touchgfx14VectorRendererC1Ev>:
class VectorRenderer
 80124b0:	b480      	push	{r7}
 80124b2:	b083      	sub	sp, #12
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	4a04      	ldr	r2, [pc, #16]	@ (80124cc <_ZN8touchgfx14VectorRendererC1Ev+0x1c>)
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	601a      	str	r2, [r3, #0]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	4618      	mov	r0, r3
 80124c2:	370c      	adds	r7, #12
 80124c4:	46bd      	mov	sp, r7
 80124c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ca:	4770      	bx	lr
 80124cc:	0802e240 	.word	0x0802e240

080124d0 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b082      	sub	sp, #8
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	4a05      	ldr	r2, [pc, #20]	@ (80124f0 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	601a      	str	r2, [r3, #0]
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	4618      	mov	r0, r3
 80124e2:	f7fa fb23 	bl	800cb2c <_ZN8touchgfx6WidgetD1Ev>
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	4618      	mov	r0, r3
 80124ea:	3708      	adds	r7, #8
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}
 80124f0:	0802e554 	.word	0x0802e554

080124f4 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b082      	sub	sp, #8
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f7ff ffe7 	bl	80124d0 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8012502:	212c      	movs	r1, #44	@ 0x2c
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	f017 fffc 	bl	802a502 <_ZdlPvj>
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	4618      	mov	r0, r3
 801250e:	3708      	adds	r7, #8
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}

08012514 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	4618      	mov	r0, r3
 8012520:	f003 f8a2 	bl	8015668 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8012524:	4a03      	ldr	r2, [pc, #12]	@ (8012534 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev+0x20>)
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	601a      	str	r2, [r3, #0]
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	4618      	mov	r0, r3
 801252e:	3708      	adds	r7, #8
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}
 8012534:	0802e07c 	.word	0x0802e07c

08012538 <_ZN8touchgfx17CWRVectorRendererC1Ev>:
class CWRVectorRenderer : public VectorRenderer
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	4618      	mov	r0, r3
 8012544:	f7ff ffb4 	bl	80124b0 <_ZN8touchgfx14VectorRendererC1Ev>
 8012548:	4a10      	ldr	r2, [pc, #64]	@ (801258c <_ZN8touchgfx17CWRVectorRendererC1Ev+0x54>)
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	601a      	str	r2, [r3, #0]
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	3304      	adds	r3, #4
 8012552:	4618      	mov	r0, r3
 8012554:	f7fb fc02 	bl	800dd5c <_ZN8touchgfx4RectC1Ev>
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	330c      	adds	r3, #12
 801255c:	4618      	mov	r0, r3
 801255e:	f7fb fbfd 	bl	800dd5c <_ZN8touchgfx4RectC1Ev>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	3326      	adds	r3, #38	@ 0x26
 8012566:	4618      	mov	r0, r3
 8012568:	f7fb fbf8 	bl	800dd5c <_ZN8touchgfx4RectC1Ev>
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	3334      	adds	r3, #52	@ 0x34
 8012570:	4618      	mov	r0, r3
 8012572:	f007 fe02 	bl	801a17a <_ZN8touchgfx9Matrix3x3C1Ev>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	3358      	adds	r3, #88	@ 0x58
 801257a:	4618      	mov	r0, r3
 801257c:	f7ff ffca 	bl	8012514 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyC1Ev>
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	4618      	mov	r0, r3
 8012584:	3708      	adds	r7, #8
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop
 801258c:	0802e508 	.word	0x0802e508

08012590 <_ZN8touchgfx17CWRVectorRendererD1Ev>:
 8012590:	b580      	push	{r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	4a08      	ldr	r2, [pc, #32]	@ (80125bc <_ZN8touchgfx17CWRVectorRendererD1Ev+0x2c>)
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	601a      	str	r2, [r3, #0]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	3358      	adds	r3, #88	@ 0x58
 80125a2:	4618      	mov	r0, r3
 80125a4:	f000 fa46 	bl	8012a34 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	4618      	mov	r0, r3
 80125ac:	f7ff fcee 	bl	8011f8c <_ZN8touchgfx14VectorRendererD1Ev>
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	4618      	mov	r0, r3
 80125b4:	3708      	adds	r7, #8
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}
 80125ba:	bf00      	nop
 80125bc:	0802e508 	.word	0x0802e508

080125c0 <_ZN8touchgfx17CWRVectorRendererD0Ev>:
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	f7ff ffe1 	bl	8012590 <_ZN8touchgfx17CWRVectorRendererD1Ev>
 80125ce:	2184      	movs	r1, #132	@ 0x84
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f017 ff96 	bl	802a502 <_ZdlPvj>
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	4618      	mov	r0, r3
 80125da:	3708      	adds	r7, #8
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}

080125e0 <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev>:
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB565LinearGradient : public AbstractPainterLinearGradient
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b082      	sub	sp, #8
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7ff fdba 	bl	8012164 <_ZN8touchgfx29AbstractPainterLinearGradientC1Ev>
 80125f0:	4a03      	ldr	r2, [pc, #12]	@ (8012600 <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev+0x20>)
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	601a      	str	r2, [r3, #0]
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	4618      	mov	r0, r3
 80125fa:	3708      	adds	r7, #8
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}
 8012600:	0802e49c 	.word	0x0802e49c

08012604 <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev>:
class CWRVectorRendererRGB565 : public CWRVectorRenderer
 8012604:	b590      	push	{r4, r7, lr}
 8012606:	b085      	sub	sp, #20
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	4618      	mov	r0, r3
 8012610:	f7ff ff92 	bl	8012538 <_ZN8touchgfx17CWRVectorRendererC1Ev>
 8012614:	4a0c      	ldr	r2, [pc, #48]	@ (8012648 <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev+0x44>)
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	601a      	str	r2, [r3, #0]
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 8012620:	f107 030c 	add.w	r3, r7, #12
 8012624:	2100      	movs	r1, #0
 8012626:	4618      	mov	r0, r3
 8012628:	f7fb fb89 	bl	800dd3e <_ZN8touchgfx9colortypeC1Em>
 801262c:	68f9      	ldr	r1, [r7, #12]
 801262e:	4620      	mov	r0, r4
 8012630:	f7ff feb2 	bl	8012398 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	3398      	adds	r3, #152	@ 0x98
 8012638:	4618      	mov	r0, r3
 801263a:	f7ff ffd1 	bl	80125e0 <_ZN8touchgfx27PainterRGB565LinearGradientC1Ev>
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	4618      	mov	r0, r3
 8012642:	3714      	adds	r7, #20
 8012644:	46bd      	mov	sp, r7
 8012646:	bd90      	pop	{r4, r7, pc}
 8012648:	0802e030 	.word	0x0802e030

0801264c <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB565 renderer;
 801264c:	b580      	push	{r7, lr}
 801264e:	af00      	add	r7, sp, #0
 8012650:	4801      	ldr	r0, [pc, #4]	@ (8012658 <__tcf_1+0xc>)
 8012652:	f000 f9c3 	bl	80129dc <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>
 8012656:	bd80      	pop	{r7, pc}
 8012658:	20012610 	.word	0x20012610

0801265c <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 801265c:	b580      	push	{r7, lr}
 801265e:	af00      	add	r7, sp, #0
    static CWRVectorRendererRGB565 renderer;
 8012660:	4b11      	ldr	r3, [pc, #68]	@ (80126a8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f3bf 8f5b 	dmb	ish
 8012668:	f003 0301 	and.w	r3, r3, #1
 801266c:	2b00      	cmp	r3, #0
 801266e:	bf0c      	ite	eq
 8012670:	2301      	moveq	r3, #1
 8012672:	2300      	movne	r3, #0
 8012674:	b2db      	uxtb	r3, r3
 8012676:	2b00      	cmp	r3, #0
 8012678:	d013      	beq.n	80126a2 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x46>
 801267a:	480b      	ldr	r0, [pc, #44]	@ (80126a8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 801267c:	f017 ff43 	bl	802a506 <__cxa_guard_acquire>
 8012680:	4603      	mov	r3, r0
 8012682:	2b00      	cmp	r3, #0
 8012684:	bf14      	ite	ne
 8012686:	2301      	movne	r3, #1
 8012688:	2300      	moveq	r3, #0
 801268a:	b2db      	uxtb	r3, r3
 801268c:	2b00      	cmp	r3, #0
 801268e:	d008      	beq.n	80126a2 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x46>
 8012690:	4806      	ldr	r0, [pc, #24]	@ (80126ac <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
 8012692:	f7ff ffb7 	bl	8012604 <_ZN8touchgfx23CWRVectorRendererRGB565C1Ev>
 8012696:	4806      	ldr	r0, [pc, #24]	@ (80126b0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x54>)
 8012698:	f018 fe98 	bl	802b3cc <atexit>
 801269c:	4802      	ldr	r0, [pc, #8]	@ (80126a8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x4c>)
 801269e:	f017 ff3e 	bl	802a51e <__cxa_guard_release>

    return &renderer;
 80126a2:	4b02      	ldr	r3, [pc, #8]	@ (80126ac <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x50>)
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	bd80      	pop	{r7, pc}
 80126a8:	200126cc 	.word	0x200126cc
 80126ac:	20012610 	.word	0x20012610
 80126b0:	0801264d 	.word	0x0801264d

080126b4 <__NVIC_EnableIRQ>:
{
 80126b4:	b480      	push	{r7}
 80126b6:	b083      	sub	sp, #12
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	4603      	mov	r3, r0
 80126bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80126be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	db0b      	blt.n	80126de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80126c6:	79fb      	ldrb	r3, [r7, #7]
 80126c8:	f003 021f 	and.w	r2, r3, #31
 80126cc:	4907      	ldr	r1, [pc, #28]	@ (80126ec <__NVIC_EnableIRQ+0x38>)
 80126ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126d2:	095b      	lsrs	r3, r3, #5
 80126d4:	2001      	movs	r0, #1
 80126d6:	fa00 f202 	lsl.w	r2, r0, r2
 80126da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80126de:	bf00      	nop
 80126e0:	370c      	adds	r7, #12
 80126e2:	46bd      	mov	sp, r7
 80126e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e8:	4770      	bx	lr
 80126ea:	bf00      	nop
 80126ec:	e000e100 	.word	0xe000e100

080126f0 <__NVIC_DisableIRQ>:
{
 80126f0:	b480      	push	{r7}
 80126f2:	b083      	sub	sp, #12
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	4603      	mov	r3, r0
 80126f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80126fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	db12      	blt.n	8012728 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012702:	79fb      	ldrb	r3, [r7, #7]
 8012704:	f003 021f 	and.w	r2, r3, #31
 8012708:	490a      	ldr	r1, [pc, #40]	@ (8012734 <__NVIC_DisableIRQ+0x44>)
 801270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801270e:	095b      	lsrs	r3, r3, #5
 8012710:	2001      	movs	r0, #1
 8012712:	fa00 f202 	lsl.w	r2, r0, r2
 8012716:	3320      	adds	r3, #32
 8012718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801271c:	f3bf 8f4f 	dsb	sy
}
 8012720:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012722:	f3bf 8f6f 	isb	sy
}
 8012726:	bf00      	nop
}
 8012728:	bf00      	nop
 801272a:	370c      	adds	r7, #12
 801272c:	46bd      	mov	sp, r7
 801272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012732:	4770      	bx	lr
 8012734:	e000e100 	.word	0xe000e100

08012738 <__NVIC_SetPriority>:
{
 8012738:	b480      	push	{r7}
 801273a:	b083      	sub	sp, #12
 801273c:	af00      	add	r7, sp, #0
 801273e:	4603      	mov	r3, r0
 8012740:	6039      	str	r1, [r7, #0]
 8012742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012748:	2b00      	cmp	r3, #0
 801274a:	db0a      	blt.n	8012762 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	b2da      	uxtb	r2, r3
 8012750:	490c      	ldr	r1, [pc, #48]	@ (8012784 <__NVIC_SetPriority+0x4c>)
 8012752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012756:	0112      	lsls	r2, r2, #4
 8012758:	b2d2      	uxtb	r2, r2
 801275a:	440b      	add	r3, r1
 801275c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8012760:	e00a      	b.n	8012778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	b2da      	uxtb	r2, r3
 8012766:	4908      	ldr	r1, [pc, #32]	@ (8012788 <__NVIC_SetPriority+0x50>)
 8012768:	79fb      	ldrb	r3, [r7, #7]
 801276a:	f003 030f 	and.w	r3, r3, #15
 801276e:	3b04      	subs	r3, #4
 8012770:	0112      	lsls	r2, r2, #4
 8012772:	b2d2      	uxtb	r2, r2
 8012774:	440b      	add	r3, r1
 8012776:	761a      	strb	r2, [r3, #24]
}
 8012778:	bf00      	nop
 801277a:	370c      	adds	r7, #12
 801277c:	46bd      	mov	sp, r7
 801277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012782:	4770      	bx	lr
 8012784:	e000e100 	.word	0xe000e100
 8012788:	e000ed00 	.word	0xe000ed00

0801278c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 801278c:	b5b0      	push	{r4, r5, r7, lr}
 801278e:	b082      	sub	sp, #8
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	4618      	mov	r0, r3
 8012798:	f000 fcdf 	bl	801315a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 801279c:	687d      	ldr	r5, [r7, #4]
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	3364      	adds	r3, #100	@ 0x64
 80127a4:	681c      	ldr	r4, [r3, #0]
 80127a6:	f006 f965 	bl	8018a74 <_ZN8touchgfx11Application11getInstanceEv>
 80127aa:	4603      	mov	r3, r0
 80127ac:	4619      	mov	r1, r3
 80127ae:	4628      	mov	r0, r5
 80127b0:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80127b2:	6878      	ldr	r0, [r7, #4]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	3388      	adds	r3, #136	@ 0x88
 80127ba:	681c      	ldr	r4, [r3, #0]
 80127bc:	4a03      	ldr	r2, [pc, #12]	@ (80127cc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80127be:	2300      	movs	r3, #0
 80127c0:	4903      	ldr	r1, [pc, #12]	@ (80127d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80127c2:	47a0      	blx	r4
}
 80127c4:	bf00      	nop
 80127c6:	3708      	adds	r7, #8
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bdb0      	pop	{r4, r5, r7, pc}
 80127cc:	d004b000 	.word	0xd004b000
 80127d0:	d0025800 	.word	0xd0025800

080127d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b082      	sub	sp, #8
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80127dc:	2109      	movs	r1, #9
 80127de:	205a      	movs	r0, #90	@ 0x5a
 80127e0:	f7ff ffaa 	bl	8012738 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80127e4:	2109      	movs	r1, #9
 80127e6:	2058      	movs	r0, #88	@ 0x58
 80127e8:	f7ff ffa6 	bl	8012738 <__NVIC_SetPriority>
}
 80127ec:	bf00      	nop
 80127ee:	3708      	adds	r7, #8
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}

080127f4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80127fc:	205a      	movs	r0, #90	@ 0x5a
 80127fe:	f7ff ff59 	bl	80126b4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8012802:	2058      	movs	r0, #88	@ 0x58
 8012804:	f7ff ff56 	bl	80126b4 <__NVIC_EnableIRQ>
}
 8012808:	bf00      	nop
 801280a:	3708      	adds	r7, #8
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}

08012810 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012818:	205a      	movs	r0, #90	@ 0x5a
 801281a:	f7ff ff69 	bl	80126f0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801281e:	2058      	movs	r0, #88	@ 0x58
 8012820:	f7ff ff66 	bl	80126f0 <__NVIC_DisableIRQ>
}
 8012824:	bf00      	nop
 8012826:	3708      	adds	r7, #8
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}

0801282c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 801282c:	b480      	push	{r7}
 801282e:	b083      	sub	sp, #12
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8012834:	4b11      	ldr	r3, [pc, #68]	@ (801287c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012836:	68db      	ldr	r3, [r3, #12]
 8012838:	b29b      	uxth	r3, r3
 801283a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801283e:	b29b      	uxth	r3, r3
 8012840:	3b01      	subs	r3, #1
 8012842:	b29a      	uxth	r2, r3
 8012844:	4b0e      	ldr	r3, [pc, #56]	@ (8012880 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8012846:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8012848:	4b0c      	ldr	r3, [pc, #48]	@ (801287c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801284a:	691b      	ldr	r3, [r3, #16]
 801284c:	b29b      	uxth	r3, r3
 801284e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012852:	b29b      	uxth	r3, r3
 8012854:	3b01      	subs	r3, #1
 8012856:	b29a      	uxth	r2, r3
 8012858:	4b0a      	ldr	r3, [pc, #40]	@ (8012884 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801285a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 801285c:	4b08      	ldr	r3, [pc, #32]	@ (8012880 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801285e:	881a      	ldrh	r2, [r3, #0]
 8012860:	4b06      	ldr	r3, [pc, #24]	@ (801287c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012862:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8012864:	4b05      	ldr	r3, [pc, #20]	@ (801287c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012868:	4a04      	ldr	r2, [pc, #16]	@ (801287c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801286a:	f043 0301 	orr.w	r3, r3, #1
 801286e:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8012870:	bf00      	nop
 8012872:	370c      	adds	r7, #12
 8012874:	46bd      	mov	sp, r7
 8012876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287a:	4770      	bx	lr
 801287c:	40016800 	.word	0x40016800
 8012880:	200126d0 	.word	0x200126d0
 8012884:	200126d2 	.word	0x200126d2

08012888 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b082      	sub	sp, #8
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	4618      	mov	r0, r3
 8012894:	f000 fc48 	bl	8013128 <_ZN8touchgfx3HAL10beginFrameEv>
 8012898:	4603      	mov	r3, r0
}
 801289a:	4618      	mov	r0, r3
 801289c:	3708      	adds	r7, #8
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}

080128a2 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80128a2:	b580      	push	{r7, lr}
 80128a4:	b082      	sub	sp, #8
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	4618      	mov	r0, r3
 80128ae:	f000 fc47 	bl	8013140 <_ZN8touchgfx3HAL8endFrameEv>
}
 80128b2:	bf00      	nop
 80128b4:	3708      	adds	r7, #8
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}
	...

080128bc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80128bc:	b480      	push	{r7}
 80128be:	b083      	sub	sp, #12
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80128c4:	4b03      	ldr	r3, [pc, #12]	@ (80128d4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80128c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	370c      	adds	r7, #12
 80128cc:	46bd      	mov	sp, r7
 80128ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d2:	4770      	bx	lr
 80128d4:	40016884 	.word	0x40016884

080128d8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80128d8:	b480      	push	{r7}
 80128da:	b083      	sub	sp, #12
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80128e2:	4a06      	ldr	r2, [pc, #24]	@ (80128fc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80128e8:	4b05      	ldr	r3, [pc, #20]	@ (8012900 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80128ea:	2201      	movs	r2, #1
 80128ec:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80128ee:	bf00      	nop
 80128f0:	370c      	adds	r7, #12
 80128f2:	46bd      	mov	sp, r7
 80128f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f8:	4770      	bx	lr
 80128fa:	bf00      	nop
 80128fc:	40016884 	.word	0x40016884
 8012900:	40016800 	.word	0x40016800

08012904 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
 801290c:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	6839      	ldr	r1, [r7, #0]
 8012912:	4618      	mov	r0, r3
 8012914:	f000 fbd2 	bl	80130bc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8012918:	bf00      	nop
 801291a:	3708      	adds	r7, #8
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}

08012920 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b084      	sub	sp, #16
 8012924:	af00      	add	r7, sp, #0
 8012926:	60f8      	str	r0, [r7, #12]
 8012928:	60b9      	str	r1, [r7, #8]
 801292a:	607a      	str	r2, [r7, #4]
 801292c:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 801292e:	68f8      	ldr	r0, [r7, #12]
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	687a      	ldr	r2, [r7, #4]
 8012934:	68b9      	ldr	r1, [r7, #8]
 8012936:	f000 fd32 	bl	801339e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801293a:	4603      	mov	r3, r0
}
 801293c:	4618      	mov	r0, r3
 801293e:	3710      	adds	r7, #16
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}

08012944 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8012944:	b580      	push	{r7, lr}
 8012946:	b082      	sub	sp, #8
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 801294c:	f7f9 ff54 	bl	800c7f8 <_ZN8touchgfx3HAL11getInstanceEv>
 8012950:	4603      	mov	r3, r0
 8012952:	2b00      	cmp	r3, #0
 8012954:	bf0c      	ite	eq
 8012956:	2301      	moveq	r3, #1
 8012958:	2300      	movne	r3, #0
 801295a:	b2db      	uxtb	r3, r3
 801295c:	2b00      	cmp	r3, #0
 801295e:	d132      	bne.n	80129c6 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8012960:	4b1b      	ldr	r3, [pc, #108]	@ (80129d0 <HAL_LTDC_LineEventCallback+0x8c>)
 8012962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012964:	4a1b      	ldr	r2, [pc, #108]	@ (80129d4 <HAL_LTDC_LineEventCallback+0x90>)
 8012966:	8812      	ldrh	r2, [r2, #0]
 8012968:	4293      	cmp	r3, r2
 801296a:	bf0c      	ite	eq
 801296c:	2301      	moveq	r3, #1
 801296e:	2300      	movne	r3, #0
 8012970:	b2db      	uxtb	r3, r3
 8012972:	2b00      	cmp	r3, #0
 8012974:	d017      	beq.n	80129a6 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8012976:	4b18      	ldr	r3, [pc, #96]	@ (80129d8 <HAL_LTDC_LineEventCallback+0x94>)
 8012978:	881b      	ldrh	r3, [r3, #0]
 801297a:	4619      	mov	r1, r3
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f7f1 ff31 	bl	80047e4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8012982:	f7f9 ff39 	bl	800c7f8 <_ZN8touchgfx3HAL11getInstanceEv>
 8012986:	4603      	mov	r3, r0
 8012988:	4618      	mov	r0, r3
 801298a:	f7ff fb2d 	bl	8011fe8 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 801298e:	f7fe f905 	bl	8010b9c <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8012992:	f7f9 ff31 	bl	800c7f8 <_ZN8touchgfx3HAL11getInstanceEv>
 8012996:	4603      	mov	r3, r0
 8012998:	4618      	mov	r0, r3
 801299a:	f001 f92b 	bl	8013bf4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801299e:	2000      	movs	r0, #0
 80129a0:	f7fd fd18 	bl	80103d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80129a4:	e010      	b.n	80129c8 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80129a6:	4b0b      	ldr	r3, [pc, #44]	@ (80129d4 <HAL_LTDC_LineEventCallback+0x90>)
 80129a8:	881b      	ldrh	r3, [r3, #0]
 80129aa:	4619      	mov	r1, r3
 80129ac:	6878      	ldr	r0, [r7, #4]
 80129ae:	f7f1 ff19 	bl	80047e4 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 80129b2:	f7f9 ff21 	bl	800c7f8 <_ZN8touchgfx3HAL11getInstanceEv>
 80129b6:	4603      	mov	r3, r0
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7ff fb07 	bl	8011fcc <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80129be:	2000      	movs	r0, #0
 80129c0:	f7fd fd60 	bl	8010484 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80129c4:	e000      	b.n	80129c8 <HAL_LTDC_LineEventCallback+0x84>
            return;
 80129c6:	bf00      	nop
        }
    }
 80129c8:	3708      	adds	r7, #8
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}
 80129ce:	bf00      	nop
 80129d0:	40016800 	.word	0x40016800
 80129d4:	200126d0 	.word	0x200126d0
 80129d8:	200126d2 	.word	0x200126d2

080129dc <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>:
 80129dc:	b580      	push	{r7, lr}
 80129de:	b082      	sub	sp, #8
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	4a0a      	ldr	r2, [pc, #40]	@ (8012a10 <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev+0x34>)
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	601a      	str	r2, [r3, #0]
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	3398      	adds	r3, #152	@ 0x98
 80129ee:	4618      	mov	r0, r3
 80129f0:	f000 f876 	bl	8012ae0 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	3384      	adds	r3, #132	@ 0x84
 80129f8:	4618      	mov	r0, r3
 80129fa:	f000 f83d 	bl	8012a78 <_ZN8touchgfx13PainterRGB565D1Ev>
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7ff fdc5 	bl	8012590 <_ZN8touchgfx17CWRVectorRendererD1Ev>
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	4618      	mov	r0, r3
 8012a0a:	3708      	adds	r7, #8
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	bd80      	pop	{r7, pc}
 8012a10:	0802e030 	.word	0x0802e030

08012a14 <_ZN8touchgfx23CWRVectorRendererRGB565D0Ev>:
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	f7ff ffdd 	bl	80129dc <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>
 8012a22:	21bc      	movs	r1, #188	@ 0xbc
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f017 fd6c 	bl	802a502 <_ZdlPvj>
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3708      	adds	r7, #8
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}

08012a34 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b082      	sub	sp, #8
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
 8012a3c:	4a05      	ldr	r2, [pc, #20]	@ (8012a54 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev+0x20>)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	601a      	str	r2, [r3, #0]
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	4618      	mov	r0, r3
 8012a46:	f7ff fd43 	bl	80124d0 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	3708      	adds	r7, #8
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}
 8012a54:	0802e07c 	.word	0x0802e07c

08012a58 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f7ff ffe7 	bl	8012a34 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>
 8012a66:	212c      	movs	r1, #44	@ 0x2c
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f017 fd4a 	bl	802a502 <_ZdlPvj>
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	4618      	mov	r0, r3
 8012a72:	3708      	adds	r7, #8
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}

08012a78 <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b082      	sub	sp, #8
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
 8012a80:	4a09      	ldr	r2, [pc, #36]	@ (8012aa8 <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	601a      	str	r2, [r3, #0]
 8012a86:	4a09      	ldr	r2, [pc, #36]	@ (8012aac <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	609a      	str	r2, [r3, #8]
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	3308      	adds	r3, #8
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7ff fadf 	bl	8012054 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7ff fc5b 	bl	8012354 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3708      	adds	r7, #8
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}
 8012aa8:	0802e4bc 	.word	0x0802e4bc
 8012aac:	0802e4e0 	.word	0x0802e4e0

08012ab0 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 8012ab0:	f1a0 0008 	sub.w	r0, r0, #8
 8012ab4:	e7e0      	b.n	8012a78 <_ZN8touchgfx13PainterRGB565D1Ev>
 8012ab6:	bf00      	nop

08012ab8 <_ZN8touchgfx13PainterRGB565D0Ev>:
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b082      	sub	sp, #8
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f7ff ffd9 	bl	8012a78 <_ZN8touchgfx13PainterRGB565D1Ev>
 8012ac6:	2114      	movs	r1, #20
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f017 fd1a 	bl	802a502 <_ZdlPvj>
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3708      	adds	r7, #8
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}

08012ad8 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 8012ad8:	f1a0 0008 	sub.w	r0, r0, #8
 8012adc:	e7ec      	b.n	8012ab8 <_ZN8touchgfx13PainterRGB565D0Ev>
	...

08012ae0 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>:
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	4a05      	ldr	r2, [pc, #20]	@ (8012b00 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev+0x20>)
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	601a      	str	r2, [r3, #0]
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7ff fb6b 	bl	80121cc <_ZN8touchgfx29AbstractPainterLinearGradientD1Ev>
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	4618      	mov	r0, r3
 8012afa:	3708      	adds	r7, #8
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}
 8012b00:	0802e49c 	.word	0x0802e49c

08012b04 <_ZN8touchgfx27PainterRGB565LinearGradientD0Ev>:
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b082      	sub	sp, #8
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f7ff ffe7 	bl	8012ae0 <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>
 8012b12:	2124      	movs	r1, #36	@ 0x24
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f017 fcf4 	bl	802a502 <_ZdlPvj>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	3708      	adds	r7, #8
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd80      	pop	{r7, pc}

08012b24 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012b24:	8880      	ldrh	r0, [r0, #4]
 8012b26:	4770      	bx	lr

08012b28 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012b28:	b570      	push	{r4, r5, r6, lr}
 8012b2a:	6803      	ldr	r3, [r0, #0]
 8012b2c:	4605      	mov	r5, r0
 8012b2e:	460c      	mov	r4, r1
 8012b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b32:	2100      	movs	r1, #0
 8012b34:	4798      	blx	r3
 8012b36:	682b      	ldr	r3, [r5, #0]
 8012b38:	4606      	mov	r6, r0
 8012b3a:	6a1b      	ldr	r3, [r3, #32]
 8012b3c:	4628      	mov	r0, r5
 8012b3e:	4798      	blx	r3
 8012b40:	1ba4      	subs	r4, r4, r6
 8012b42:	b2a4      	uxth	r4, r4
 8012b44:	fbb4 f0f0 	udiv	r0, r4, r0
 8012b48:	bd70      	pop	{r4, r5, r6, pc}

08012b4a <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	8083      	strh	r3, [r0, #4]
 8012b4e:	4770      	bx	lr

08012b50 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8012b50:	b510      	push	{r4, lr}
 8012b52:	6803      	ldr	r3, [r0, #0]
 8012b54:	8881      	ldrh	r1, [r0, #4]
 8012b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b58:	4604      	mov	r4, r0
 8012b5a:	4798      	blx	r3
 8012b5c:	88a3      	ldrh	r3, [r4, #4]
 8012b5e:	3301      	adds	r3, #1
 8012b60:	80a3      	strh	r3, [r4, #4]
 8012b62:	bd10      	pop	{r4, pc}

08012b64 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012b64:	6803      	ldr	r3, [r0, #0]
 8012b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b68:	4718      	bx	r3

08012b6a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8012b6a:	4770      	bx	lr

08012b6c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012b6c:	4a02      	ldr	r2, [pc, #8]	@ (8012b78 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8012b6e:	6002      	str	r2, [r0, #0]
 8012b70:	2200      	movs	r2, #0
 8012b72:	8082      	strh	r2, [r0, #4]
 8012b74:	4770      	bx	lr
 8012b76:	bf00      	nop
 8012b78:	0802e280 	.word	0x0802e280

08012b7c <_ZN8touchgfx9Container13getFirstChildEv>:
 8012b7c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8012b7e:	4770      	bx	lr

08012b80 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8012b80:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012b82:	2000      	movs	r0, #0
 8012b84:	b12b      	cbz	r3, 8012b92 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012b86:	b920      	cbnz	r0, 8012b92 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012b88:	1a5a      	subs	r2, r3, r1
 8012b8a:	4250      	negs	r0, r2
 8012b8c:	4150      	adcs	r0, r2
 8012b8e:	699b      	ldr	r3, [r3, #24]
 8012b90:	e7f8      	b.n	8012b84 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8012b92:	4770      	bx	lr

08012b94 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8012b94:	2300      	movs	r3, #0
 8012b96:	6148      	str	r0, [r1, #20]
 8012b98:	618b      	str	r3, [r1, #24]
 8012b9a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012b9c:	b913      	cbnz	r3, 8012ba4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8012b9e:	6281      	str	r1, [r0, #40]	@ 0x28
 8012ba0:	4770      	bx	lr
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	699a      	ldr	r2, [r3, #24]
 8012ba6:	2a00      	cmp	r2, #0
 8012ba8:	d1fb      	bne.n	8012ba2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8012baa:	6199      	str	r1, [r3, #24]
 8012bac:	4770      	bx	lr

08012bae <_ZN8touchgfx9Container9removeAllEv>:
 8012bae:	2200      	movs	r2, #0
 8012bb0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012bb2:	b123      	cbz	r3, 8012bbe <_ZN8touchgfx9Container9removeAllEv+0x10>
 8012bb4:	6999      	ldr	r1, [r3, #24]
 8012bb6:	6281      	str	r1, [r0, #40]	@ 0x28
 8012bb8:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8012bbc:	e7f8      	b.n	8012bb0 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8012bbe:	4770      	bx	lr

08012bc0 <_ZN8touchgfx9Container6unlinkEv>:
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	6283      	str	r3, [r0, #40]	@ 0x28
 8012bc4:	4770      	bx	lr

08012bc6 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	8002      	strh	r2, [r0, #0]
 8012bca:	8042      	strh	r2, [r0, #2]
 8012bcc:	8082      	strh	r2, [r0, #4]
 8012bce:	80c2      	strh	r2, [r0, #6]
 8012bd0:	4770      	bx	lr

08012bd2 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8012bd2:	b570      	push	{r4, r5, r6, lr}
 8012bd4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012bd6:	460d      	mov	r5, r1
 8012bd8:	4616      	mov	r6, r2
 8012bda:	b13c      	cbz	r4, 8012bec <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012bdc:	6823      	ldr	r3, [r4, #0]
 8012bde:	4620      	mov	r0, r4
 8012be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012be2:	4632      	mov	r2, r6
 8012be4:	4629      	mov	r1, r5
 8012be6:	4798      	blx	r3
 8012be8:	69a4      	ldr	r4, [r4, #24]
 8012bea:	e7f6      	b.n	8012bda <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012bec:	bd70      	pop	{r4, r5, r6, pc}

08012bee <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8012bee:	b538      	push	{r3, r4, r5, lr}
 8012bf0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012bf2:	460d      	mov	r5, r1
 8012bf4:	b134      	cbz	r4, 8012c04 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012bf6:	682b      	ldr	r3, [r5, #0]
 8012bf8:	4621      	mov	r1, r4
 8012bfa:	689b      	ldr	r3, [r3, #8]
 8012bfc:	4628      	mov	r0, r5
 8012bfe:	4798      	blx	r3
 8012c00:	69a4      	ldr	r4, [r4, #24]
 8012c02:	e7f7      	b.n	8012bf4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012c04:	bd38      	pop	{r3, r4, r5, pc}

08012c06 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012c06:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012c08:	b19b      	cbz	r3, 8012c32 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012c0a:	428b      	cmp	r3, r1
 8012c0c:	d109      	bne.n	8012c22 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8012c0e:	699a      	ldr	r2, [r3, #24]
 8012c10:	2100      	movs	r1, #0
 8012c12:	6159      	str	r1, [r3, #20]
 8012c14:	6282      	str	r2, [r0, #40]	@ 0x28
 8012c16:	b902      	cbnz	r2, 8012c1a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8012c18:	4770      	bx	lr
 8012c1a:	6199      	str	r1, [r3, #24]
 8012c1c:	4770      	bx	lr
 8012c1e:	4613      	mov	r3, r2
 8012c20:	b13a      	cbz	r2, 8012c32 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012c22:	699a      	ldr	r2, [r3, #24]
 8012c24:	428a      	cmp	r2, r1
 8012c26:	d1fa      	bne.n	8012c1e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012c28:	698a      	ldr	r2, [r1, #24]
 8012c2a:	619a      	str	r2, [r3, #24]
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8012c32:	4770      	bx	lr

08012c34 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012c34:	b410      	push	{r4}
 8012c36:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012c38:	4604      	mov	r4, r0
 8012c3a:	b92b      	cbnz	r3, 8012c48 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012c3c:	6803      	ldr	r3, [r0, #0]
 8012c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012c44:	4611      	mov	r1, r2
 8012c46:	4718      	bx	r3
 8012c48:	b941      	cbnz	r1, 8012c5c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8012c4a:	6193      	str	r3, [r2, #24]
 8012c4c:	6282      	str	r2, [r0, #40]	@ 0x28
 8012c4e:	6154      	str	r4, [r2, #20]
 8012c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c54:	4770      	bx	lr
 8012c56:	4603      	mov	r3, r0
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	d0f9      	beq.n	8012c50 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012c5c:	4299      	cmp	r1, r3
 8012c5e:	6998      	ldr	r0, [r3, #24]
 8012c60:	d1f9      	bne.n	8012c56 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8012c62:	6190      	str	r0, [r2, #24]
 8012c64:	618a      	str	r2, [r1, #24]
 8012c66:	e7f2      	b.n	8012c4e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08012c68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c6c:	461f      	mov	r7, r3
 8012c6e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8012c72:	460d      	mov	r5, r1
 8012c74:	4616      	mov	r6, r2
 8012c76:	b103      	cbz	r3, 8012c7a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012c78:	6038      	str	r0, [r7, #0]
 8012c7a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012c7c:	b314      	cbz	r4, 8012cc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012c7e:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012c82:	b1eb      	cbz	r3, 8012cc0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012c84:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012c88:	428d      	cmp	r5, r1
 8012c8a:	db19      	blt.n	8012cc0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012c8c:	8923      	ldrh	r3, [r4, #8]
 8012c8e:	b289      	uxth	r1, r1
 8012c90:	440b      	add	r3, r1
 8012c92:	b21b      	sxth	r3, r3
 8012c94:	429d      	cmp	r5, r3
 8012c96:	da13      	bge.n	8012cc0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012c98:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012c9c:	4296      	cmp	r6, r2
 8012c9e:	db0f      	blt.n	8012cc0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012ca0:	8963      	ldrh	r3, [r4, #10]
 8012ca2:	b292      	uxth	r2, r2
 8012ca4:	4413      	add	r3, r2
 8012ca6:	b21b      	sxth	r3, r3
 8012ca8:	429e      	cmp	r6, r3
 8012caa:	da09      	bge.n	8012cc0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012cac:	6823      	ldr	r3, [r4, #0]
 8012cae:	1ab2      	subs	r2, r6, r2
 8012cb0:	1a69      	subs	r1, r5, r1
 8012cb2:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8012cb6:	b212      	sxth	r2, r2
 8012cb8:	463b      	mov	r3, r7
 8012cba:	b209      	sxth	r1, r1
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	47c0      	blx	r8
 8012cc0:	69a4      	ldr	r4, [r4, #24]
 8012cc2:	e7db      	b.n	8012c7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012cc8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8012cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ccc:	4c6e      	ldr	r4, [pc, #440]	@ (8012e88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8012cce:	b0a1      	sub	sp, #132	@ 0x84
 8012cd0:	6824      	ldr	r4, [r4, #0]
 8012cd2:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8012cd4:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8012cd8:	9303      	str	r3, [sp, #12]
 8012cda:	2400      	movs	r4, #0
 8012cdc:	802c      	strh	r4, [r5, #0]
 8012cde:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8012ce0:	802c      	strh	r4, [r5, #0]
 8012ce2:	601c      	str	r4, [r3, #0]
 8012ce4:	4606      	mov	r6, r0
 8012ce6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012cea:	f7ff ffbd 	bl	8012c68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012cee:	f1b9 0f03 	cmp.w	r9, #3
 8012cf2:	f340 80c2 	ble.w	8012e7a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8012cf6:	4631      	mov	r1, r6
 8012cf8:	a80c      	add	r0, sp, #48	@ 0x30
 8012cfa:	f006 ffcd 	bl	8019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012cfe:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8012d02:	9306      	str	r3, [sp, #24]
 8012d04:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8012d08:	9307      	str	r3, [sp, #28]
 8012d0a:	9b03      	ldr	r3, [sp, #12]
 8012d0c:	f8d3 a000 	ldr.w	sl, [r3]
 8012d10:	f1ba 0f00 	cmp.w	sl, #0
 8012d14:	f000 80b4 	beq.w	8012e80 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8012d18:	4651      	mov	r1, sl
 8012d1a:	a810      	add	r0, sp, #64	@ 0x40
 8012d1c:	f006 ffbc 	bl	8019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012d20:	9b01      	ldr	r3, [sp, #4]
 8012d22:	9a06      	ldr	r2, [sp, #24]
 8012d24:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8012d28:	189d      	adds	r5, r3, r2
 8012d2a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8012d2e:	9a07      	ldr	r2, [sp, #28]
 8012d30:	2002      	movs	r0, #2
 8012d32:	fb91 f1f0 	sdiv	r1, r1, r0
 8012d36:	4419      	add	r1, r3
 8012d38:	1a6d      	subs	r5, r5, r1
 8012d3a:	9b02      	ldr	r3, [sp, #8]
 8012d3c:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8012d40:	4413      	add	r3, r2
 8012d42:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8012d46:	fb92 f2f0 	sdiv	r2, r2, r0
 8012d4a:	440a      	add	r2, r1
 8012d4c:	1a9b      	subs	r3, r3, r2
 8012d4e:	435b      	muls	r3, r3
 8012d50:	fb05 3505 	mla	r5, r5, r5, r3
 8012d54:	4f4d      	ldr	r7, [pc, #308]	@ (8012e8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 8012d56:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012d58:	ac10      	add	r4, sp, #64	@ 0x40
 8012d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d5c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d60:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d64:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012d68:	f1b9 0f0c 	cmp.w	r9, #12
 8012d6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012d70:	f04f 0303 	mov.w	r3, #3
 8012d74:	bfc8      	it	gt
 8012d76:	4698      	movgt	r8, r3
 8012d78:	f8cd 9000 	str.w	r9, [sp]
 8012d7c:	f04f 0400 	mov.w	r4, #0
 8012d80:	bfdc      	itt	le
 8012d82:	f109 32ff 	addle.w	r2, r9, #4294967295
 8012d86:	fb92 f8f3 	sdivle	r8, r2, r3
 8012d8a:	1c63      	adds	r3, r4, #1
 8012d8c:	aa10      	add	r2, sp, #64	@ 0x40
 8012d8e:	f004 0401 	and.w	r4, r4, #1
 8012d92:	9308      	str	r3, [sp, #32]
 8012d94:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8012d98:	9b00      	ldr	r3, [sp, #0]
 8012d9a:	fb93 f3f8 	sdiv	r3, r3, r8
 8012d9e:	b29b      	uxth	r3, r3
 8012da0:	3404      	adds	r4, #4
 8012da2:	f04f 0b00 	mov.w	fp, #0
 8012da6:	9304      	str	r3, [sp, #16]
 8012da8:	9a04      	ldr	r2, [sp, #16]
 8012daa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012dae:	fb13 f302 	smulbb	r3, r3, r2
 8012db2:	9a01      	ldr	r2, [sp, #4]
 8012db4:	b29b      	uxth	r3, r3
 8012db6:	1899      	adds	r1, r3, r2
 8012db8:	9305      	str	r3, [sp, #20]
 8012dba:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012dbe:	b209      	sxth	r1, r1
 8012dc0:	4299      	cmp	r1, r3
 8012dc2:	db4d      	blt.n	8012e60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012dc4:	8932      	ldrh	r2, [r6, #8]
 8012dc6:	4413      	add	r3, r2
 8012dc8:	b21b      	sxth	r3, r3
 8012dca:	4299      	cmp	r1, r3
 8012dcc:	da48      	bge.n	8012e60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012dce:	9b04      	ldr	r3, [sp, #16]
 8012dd0:	6827      	ldr	r7, [r4, #0]
 8012dd2:	fb17 f703 	smulbb	r7, r7, r3
 8012dd6:	9b02      	ldr	r3, [sp, #8]
 8012dd8:	b2bf      	uxth	r7, r7
 8012dda:	18fa      	adds	r2, r7, r3
 8012ddc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012de0:	b212      	sxth	r2, r2
 8012de2:	429a      	cmp	r2, r3
 8012de4:	db3c      	blt.n	8012e60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012de6:	8970      	ldrh	r0, [r6, #10]
 8012de8:	4403      	add	r3, r0
 8012dea:	b21b      	sxth	r3, r3
 8012dec:	429a      	cmp	r2, r3
 8012dee:	da37      	bge.n	8012e60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012df0:	2300      	movs	r3, #0
 8012df2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012df4:	4630      	mov	r0, r6
 8012df6:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012df8:	f7ff ff36 	bl	8012c68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012dfc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012dfe:	b37a      	cbz	r2, 8012e60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012e00:	4552      	cmp	r2, sl
 8012e02:	d02d      	beq.n	8012e60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012e04:	4611      	mov	r1, r2
 8012e06:	a80e      	add	r0, sp, #56	@ 0x38
 8012e08:	9209      	str	r2, [sp, #36]	@ 0x24
 8012e0a:	f006 ff45 	bl	8019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012e0e:	9a06      	ldr	r2, [sp, #24]
 8012e10:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8012e14:	9b01      	ldr	r3, [sp, #4]
 8012e16:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8012e1a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8012e1e:	4413      	add	r3, r2
 8012e20:	f04f 0e02 	mov.w	lr, #2
 8012e24:	fb91 f1fe 	sdiv	r1, r1, lr
 8012e28:	4401      	add	r1, r0
 8012e2a:	1a58      	subs	r0, r3, r1
 8012e2c:	9a07      	ldr	r2, [sp, #28]
 8012e2e:	9b02      	ldr	r3, [sp, #8]
 8012e30:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8012e34:	fb9c fcfe 	sdiv	ip, ip, lr
 8012e38:	4413      	add	r3, r2
 8012e3a:	448c      	add	ip, r1
 8012e3c:	eba3 030c 	sub.w	r3, r3, ip
 8012e40:	435b      	muls	r3, r3
 8012e42:	fb00 3300 	mla	r3, r0, r0, r3
 8012e46:	42ab      	cmp	r3, r5
 8012e48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e4a:	d208      	bcs.n	8012e5e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8012e4c:	9803      	ldr	r0, [sp, #12]
 8012e4e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012e50:	6001      	str	r1, [r0, #0]
 8012e52:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8012e54:	9805      	ldr	r0, [sp, #20]
 8012e56:	8008      	strh	r0, [r1, #0]
 8012e58:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8012e5a:	461d      	mov	r5, r3
 8012e5c:	800f      	strh	r7, [r1, #0]
 8012e5e:	4692      	mov	sl, r2
 8012e60:	f10b 0b01 	add.w	fp, fp, #1
 8012e64:	f1bb 0f04 	cmp.w	fp, #4
 8012e68:	f104 0408 	add.w	r4, r4, #8
 8012e6c:	d19c      	bne.n	8012da8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8012e6e:	9b00      	ldr	r3, [sp, #0]
 8012e70:	9c08      	ldr	r4, [sp, #32]
 8012e72:	444b      	add	r3, r9
 8012e74:	4544      	cmp	r4, r8
 8012e76:	9300      	str	r3, [sp, #0]
 8012e78:	d187      	bne.n	8012d8a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8012e7a:	b021      	add	sp, #132	@ 0x84
 8012e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e80:	f04f 35ff 	mov.w	r5, #4294967295
 8012e84:	e766      	b.n	8012d54 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8012e86:	bf00      	nop
 8012e88:	200126e0 	.word	0x200126e0
 8012e8c:	0802d690 	.word	0x0802d690

08012e90 <_ZN8touchgfx4RectaNERKS0_>:
 8012e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e94:	f9b1 7000 	ldrsh.w	r7, [r1]
 8012e98:	888c      	ldrh	r4, [r1, #4]
 8012e9a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012e9e:	443c      	add	r4, r7
 8012ea0:	b2a4      	uxth	r4, r4
 8012ea2:	fa0f f884 	sxth.w	r8, r4
 8012ea6:	45c1      	cmp	r9, r8
 8012ea8:	da2f      	bge.n	8012f0a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012eaa:	8882      	ldrh	r2, [r0, #4]
 8012eac:	444a      	add	r2, r9
 8012eae:	b292      	uxth	r2, r2
 8012eb0:	fa0f fe82 	sxth.w	lr, r2
 8012eb4:	4577      	cmp	r7, lr
 8012eb6:	da28      	bge.n	8012f0a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012eb8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012ebc:	88cb      	ldrh	r3, [r1, #6]
 8012ebe:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012ec2:	442b      	add	r3, r5
 8012ec4:	b21b      	sxth	r3, r3
 8012ec6:	429e      	cmp	r6, r3
 8012ec8:	da1f      	bge.n	8012f0a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012eca:	88c3      	ldrh	r3, [r0, #6]
 8012ecc:	4433      	add	r3, r6
 8012ece:	b29b      	uxth	r3, r3
 8012ed0:	fa0f fc83 	sxth.w	ip, r3
 8012ed4:	4565      	cmp	r5, ip
 8012ed6:	da18      	bge.n	8012f0a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012ed8:	454f      	cmp	r7, r9
 8012eda:	bfb8      	it	lt
 8012edc:	464f      	movlt	r7, r9
 8012ede:	42b5      	cmp	r5, r6
 8012ee0:	bfb8      	it	lt
 8012ee2:	4635      	movlt	r5, r6
 8012ee4:	45f0      	cmp	r8, lr
 8012ee6:	bfd8      	it	le
 8012ee8:	4622      	movle	r2, r4
 8012eea:	1bd2      	subs	r2, r2, r7
 8012eec:	8082      	strh	r2, [r0, #4]
 8012eee:	884a      	ldrh	r2, [r1, #2]
 8012ef0:	88c9      	ldrh	r1, [r1, #6]
 8012ef2:	8007      	strh	r7, [r0, #0]
 8012ef4:	440a      	add	r2, r1
 8012ef6:	b292      	uxth	r2, r2
 8012ef8:	b211      	sxth	r1, r2
 8012efa:	458c      	cmp	ip, r1
 8012efc:	bfa8      	it	ge
 8012efe:	4613      	movge	r3, r2
 8012f00:	1b5b      	subs	r3, r3, r5
 8012f02:	80c3      	strh	r3, [r0, #6]
 8012f04:	8045      	strh	r5, [r0, #2]
 8012f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	8003      	strh	r3, [r0, #0]
 8012f0e:	8043      	strh	r3, [r0, #2]
 8012f10:	8083      	strh	r3, [r0, #4]
 8012f12:	80c3      	strh	r3, [r0, #6]
 8012f14:	e7f7      	b.n	8012f06 <_ZN8touchgfx4RectaNERKS0_+0x76>

08012f16 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8012f16:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	dd06      	ble.n	8012f2c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8012f1e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012f22:	2800      	cmp	r0, #0
 8012f24:	bfcc      	ite	gt
 8012f26:	2000      	movgt	r0, #0
 8012f28:	2001      	movle	r0, #1
 8012f2a:	4770      	bx	lr
 8012f2c:	2001      	movs	r0, #1
 8012f2e:	4770      	bx	lr

08012f30 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f34:	2300      	movs	r3, #0
 8012f36:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8012f38:	8003      	strh	r3, [r0, #0]
 8012f3a:	4604      	mov	r4, r0
 8012f3c:	8043      	strh	r3, [r0, #2]
 8012f3e:	8083      	strh	r3, [r0, #4]
 8012f40:	80c3      	strh	r3, [r0, #6]
 8012f42:	2d00      	cmp	r5, #0
 8012f44:	d040      	beq.n	8012fc8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012f46:	1d28      	adds	r0, r5, #4
 8012f48:	f7ff ffe5 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012f4c:	b988      	cbnz	r0, 8012f72 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012f4e:	4620      	mov	r0, r4
 8012f50:	f7ff ffe1 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012f54:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012f58:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012f5c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8012f60:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8012f64:	b138      	cbz	r0, 8012f76 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8012f66:	8022      	strh	r2, [r4, #0]
 8012f68:	8063      	strh	r3, [r4, #2]
 8012f6a:	f8a4 e004 	strh.w	lr, [r4, #4]
 8012f6e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012f72:	69ad      	ldr	r5, [r5, #24]
 8012f74:	e7e5      	b.n	8012f42 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8012f76:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012f7a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012f7e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8012f82:	4290      	cmp	r0, r2
 8012f84:	4607      	mov	r7, r0
 8012f86:	bfa8      	it	ge
 8012f88:	4617      	movge	r7, r2
 8012f8a:	4472      	add	r2, lr
 8012f8c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8012f90:	8027      	strh	r7, [r4, #0]
 8012f92:	4299      	cmp	r1, r3
 8012f94:	460e      	mov	r6, r1
 8012f96:	4440      	add	r0, r8
 8012f98:	bfa8      	it	ge
 8012f9a:	461e      	movge	r6, r3
 8012f9c:	4471      	add	r1, lr
 8012f9e:	4463      	add	r3, ip
 8012fa0:	b200      	sxth	r0, r0
 8012fa2:	b212      	sxth	r2, r2
 8012fa4:	b209      	sxth	r1, r1
 8012fa6:	b21b      	sxth	r3, r3
 8012fa8:	4290      	cmp	r0, r2
 8012faa:	bfac      	ite	ge
 8012fac:	ebc7 0200 	rsbge	r2, r7, r0
 8012fb0:	ebc7 0202 	rsblt	r2, r7, r2
 8012fb4:	4299      	cmp	r1, r3
 8012fb6:	bfac      	ite	ge
 8012fb8:	ebc6 0301 	rsbge	r3, r6, r1
 8012fbc:	ebc6 0303 	rsblt	r3, r6, r3
 8012fc0:	8066      	strh	r6, [r4, #2]
 8012fc2:	80a2      	strh	r2, [r4, #4]
 8012fc4:	80e3      	strh	r3, [r4, #6]
 8012fc6:	e7d4      	b.n	8012f72 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012fc8:	4620      	mov	r0, r4
 8012fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012fce <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8012fce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012fd2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8012fd6:	b383      	cbz	r3, 801303a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012fd8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012fda:	b374      	cbz	r4, 801303a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012fdc:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012fe0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8012fe4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8012fe8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012fec:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012ff0:	b303      	cbz	r3, 8013034 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012ff2:	4668      	mov	r0, sp
 8012ff4:	1d21      	adds	r1, r4, #4
 8012ff6:	f8ad 5000 	strh.w	r5, [sp]
 8012ffa:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012ffe:	f8ad 7004 	strh.w	r7, [sp, #4]
 8013002:	f8ad 8006 	strh.w	r8, [sp, #6]
 8013006:	f7ff ff43 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 801300a:	4668      	mov	r0, sp
 801300c:	f7ff ff83 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013010:	b980      	cbnz	r0, 8013034 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8013012:	f8bd 3000 	ldrh.w	r3, [sp]
 8013016:	88a2      	ldrh	r2, [r4, #4]
 8013018:	1a9b      	subs	r3, r3, r2
 801301a:	f8ad 3000 	strh.w	r3, [sp]
 801301e:	88e2      	ldrh	r2, [r4, #6]
 8013020:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013024:	1a9b      	subs	r3, r3, r2
 8013026:	f8ad 3002 	strh.w	r3, [sp, #2]
 801302a:	6823      	ldr	r3, [r4, #0]
 801302c:	4669      	mov	r1, sp
 801302e:	689b      	ldr	r3, [r3, #8]
 8013030:	4620      	mov	r0, r4
 8013032:	4798      	blx	r3
 8013034:	69a4      	ldr	r4, [r4, #24]
 8013036:	2c00      	cmp	r4, #0
 8013038:	d1d8      	bne.n	8012fec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801303a:	b002      	add	sp, #8
 801303c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013040 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8013040:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013042:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8013046:	460d      	mov	r5, r1
 8013048:	4616      	mov	r6, r2
 801304a:	b323      	cbz	r3, 8013096 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801304c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801304e:	b314      	cbz	r4, 8013096 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013050:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8013054:	b1eb      	cbz	r3, 8013092 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013056:	6828      	ldr	r0, [r5, #0]
 8013058:	6869      	ldr	r1, [r5, #4]
 801305a:	466b      	mov	r3, sp
 801305c:	c303      	stmia	r3!, {r0, r1}
 801305e:	4668      	mov	r0, sp
 8013060:	1d21      	adds	r1, r4, #4
 8013062:	f7ff ff15 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 8013066:	4668      	mov	r0, sp
 8013068:	f7ff ff55 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 801306c:	b988      	cbnz	r0, 8013092 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801306e:	f8bd 3000 	ldrh.w	r3, [sp]
 8013072:	88a2      	ldrh	r2, [r4, #4]
 8013074:	1a9b      	subs	r3, r3, r2
 8013076:	f8ad 3000 	strh.w	r3, [sp]
 801307a:	88e2      	ldrh	r2, [r4, #6]
 801307c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013080:	1a9b      	subs	r3, r3, r2
 8013082:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013086:	6823      	ldr	r3, [r4, #0]
 8013088:	4632      	mov	r2, r6
 801308a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801308c:	4669      	mov	r1, sp
 801308e:	4620      	mov	r0, r4
 8013090:	4798      	blx	r3
 8013092:	69a4      	ldr	r4, [r4, #24]
 8013094:	e7db      	b.n	801304e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8013096:	b002      	add	sp, #8
 8013098:	bd70      	pop	{r4, r5, r6, pc}

0801309a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801309a:	b513      	push	{r0, r1, r4, lr}
 801309c:	6803      	ldr	r3, [r0, #0]
 801309e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 80130a2:	2300      	movs	r3, #0
 80130a4:	e9cd 3300 	strd	r3, r3, [sp]
 80130a8:	466b      	mov	r3, sp
 80130aa:	47a0      	blx	r4
 80130ac:	b002      	add	sp, #8
 80130ae:	bd10      	pop	{r4, pc}

080130b0 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80130b0:	2301      	movs	r3, #1
 80130b2:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80130b6:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80130ba:	4770      	bx	lr

080130bc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80130bc:	2301      	movs	r3, #1
 80130be:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80130c2:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80130c6:	4770      	bx	lr

080130c8 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80130c8:	6843      	ldr	r3, [r0, #4]
 80130ca:	2201      	movs	r2, #1
 80130cc:	725a      	strb	r2, [r3, #9]
 80130ce:	6840      	ldr	r0, [r0, #4]
 80130d0:	6803      	ldr	r3, [r0, #0]
 80130d2:	691b      	ldr	r3, [r3, #16]
 80130d4:	4718      	bx	r3

080130d6 <_ZN8touchgfx3HAL8flushDMAEv>:
 80130d6:	6840      	ldr	r0, [r0, #4]
 80130d8:	6803      	ldr	r3, [r0, #0]
 80130da:	689b      	ldr	r3, [r3, #8]
 80130dc:	4718      	bx	r3

080130de <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80130de:	b530      	push	{r4, r5, lr}
 80130e0:	b08b      	sub	sp, #44	@ 0x2c
 80130e2:	6804      	ldr	r4, [r0, #0]
 80130e4:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 80130e8:	9509      	str	r5, [sp, #36]	@ 0x24
 80130ea:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 80130ee:	9508      	str	r5, [sp, #32]
 80130f0:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80130f4:	9507      	str	r5, [sp, #28]
 80130f6:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 80130fa:	9506      	str	r5, [sp, #24]
 80130fc:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8013100:	9505      	str	r5, [sp, #20]
 8013102:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8013106:	9504      	str	r5, [sp, #16]
 8013108:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 801310c:	9503      	str	r5, [sp, #12]
 801310e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8013112:	9502      	str	r5, [sp, #8]
 8013114:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8013118:	e9cd 3500 	strd	r3, r5, [sp]
 801311c:	4613      	mov	r3, r2
 801311e:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8013120:	2200      	movs	r2, #0
 8013122:	47a0      	blx	r4
 8013124:	b00b      	add	sp, #44	@ 0x2c
 8013126:	bd30      	pop	{r4, r5, pc}

08013128 <_ZN8touchgfx3HAL10beginFrameEv>:
 8013128:	4b04      	ldr	r3, [pc, #16]	@ (801313c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801312a:	781b      	ldrb	r3, [r3, #0]
 801312c:	b123      	cbz	r3, 8013138 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801312e:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8013132:	f080 0001 	eor.w	r0, r0, #1
 8013136:	4770      	bx	lr
 8013138:	2001      	movs	r0, #1
 801313a:	4770      	bx	lr
 801313c:	200126de 	.word	0x200126de

08013140 <_ZN8touchgfx3HAL8endFrameEv>:
 8013140:	b510      	push	{r4, lr}
 8013142:	4604      	mov	r4, r0
 8013144:	6840      	ldr	r0, [r0, #4]
 8013146:	6803      	ldr	r3, [r0, #0]
 8013148:	689b      	ldr	r3, [r3, #8]
 801314a:	4798      	blx	r3
 801314c:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8013150:	b113      	cbz	r3, 8013158 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8013152:	2301      	movs	r3, #1
 8013154:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8013158:	bd10      	pop	{r4, pc}

0801315a <_ZN8touchgfx3HAL10initializeEv>:
 801315a:	b510      	push	{r4, lr}
 801315c:	4604      	mov	r4, r0
 801315e:	f7fd fcb7 	bl	8010ad0 <_ZN8touchgfx10OSWrappers10initializeEv>
 8013162:	f7fd f911 	bl	8010388 <_ZN8touchgfx4GPIO4initEv>
 8013166:	6860      	ldr	r0, [r4, #4]
 8013168:	6803      	ldr	r3, [r0, #0]
 801316a:	68db      	ldr	r3, [r3, #12]
 801316c:	4798      	blx	r3
 801316e:	68e0      	ldr	r0, [r4, #12]
 8013170:	6803      	ldr	r3, [r0, #0]
 8013172:	689b      	ldr	r3, [r3, #8]
 8013174:	4798      	blx	r3
 8013176:	6823      	ldr	r3, [r4, #0]
 8013178:	4620      	mov	r0, r4
 801317a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801317c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013180:	4718      	bx	r3

08013182 <_ZN8touchgfx3HAL9taskEntryEv>:
 8013182:	b508      	push	{r3, lr}
 8013184:	6803      	ldr	r3, [r0, #0]
 8013186:	4604      	mov	r4, r0
 8013188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801318c:	4798      	blx	r3
 801318e:	6823      	ldr	r3, [r4, #0]
 8013190:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013192:	4620      	mov	r0, r4
 8013194:	4798      	blx	r3
 8013196:	f7fd fd11 	bl	8010bbc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801319a:	6823      	ldr	r3, [r4, #0]
 801319c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801319e:	e7f8      	b.n	8013192 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080131a0 <_ZN8touchgfx3HAL4tickEv>:
 80131a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80131a2:	6803      	ldr	r3, [r0, #0]
 80131a4:	4d5b      	ldr	r5, [pc, #364]	@ (8013314 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80131a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80131aa:	4604      	mov	r4, r0
 80131ac:	4798      	blx	r3
 80131ae:	2800      	cmp	r0, #0
 80131b0:	f000 8095 	beq.w	80132de <_ZN8touchgfx3HAL4tickEv+0x13e>
 80131b4:	2001      	movs	r0, #1
 80131b6:	f7fd f90d 	bl	80103d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80131ba:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 80131be:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80131c2:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 80131c6:	2600      	movs	r6, #0
 80131c8:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 80131cc:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 80131d0:	b133      	cbz	r3, 80131e0 <_ZN8touchgfx3HAL4tickEv+0x40>
 80131d2:	6823      	ldr	r3, [r4, #0]
 80131d4:	4620      	mov	r0, r4
 80131d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80131da:	4798      	blx	r3
 80131dc:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80131e0:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 80131e4:	6862      	ldr	r2, [r4, #4]
 80131e6:	f083 0301 	eor.w	r3, r3, #1
 80131ea:	7253      	strb	r3, [r2, #9]
 80131ec:	2601      	movs	r6, #1
 80131ee:	702e      	strb	r6, [r5, #0]
 80131f0:	f005 fc40 	bl	8018a74 <_ZN8touchgfx11Application11getInstanceEv>
 80131f4:	6803      	ldr	r3, [r0, #0]
 80131f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80131f8:	4798      	blx	r3
 80131fa:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80131fe:	b90b      	cbnz	r3, 8013204 <_ZN8touchgfx3HAL4tickEv+0x64>
 8013200:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8013204:	f005 fc36 	bl	8018a74 <_ZN8touchgfx11Application11getInstanceEv>
 8013208:	6803      	ldr	r3, [r0, #0]
 801320a:	695b      	ldr	r3, [r3, #20]
 801320c:	4798      	blx	r3
 801320e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8013210:	6803      	ldr	r3, [r0, #0]
 8013212:	691b      	ldr	r3, [r3, #16]
 8013214:	4798      	blx	r3
 8013216:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 801321a:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 801321e:	3b01      	subs	r3, #1
 8013220:	b2db      	uxtb	r3, r3
 8013222:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8013226:	b10a      	cbz	r2, 801322c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8013228:	2b00      	cmp	r3, #0
 801322a:	d1eb      	bne.n	8013204 <_ZN8touchgfx3HAL4tickEv+0x64>
 801322c:	4a3a      	ldr	r2, [pc, #232]	@ (8013318 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801322e:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8013232:	7813      	ldrb	r3, [r2, #0]
 8013234:	3301      	adds	r3, #1
 8013236:	b25b      	sxtb	r3, r3
 8013238:	4299      	cmp	r1, r3
 801323a:	7013      	strb	r3, [r2, #0]
 801323c:	dc10      	bgt.n	8013260 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801323e:	68e0      	ldr	r0, [r4, #12]
 8013240:	2300      	movs	r3, #0
 8013242:	7013      	strb	r3, [r2, #0]
 8013244:	6803      	ldr	r3, [r0, #0]
 8013246:	aa03      	add	r2, sp, #12
 8013248:	68db      	ldr	r3, [r3, #12]
 801324a:	a902      	add	r1, sp, #8
 801324c:	4798      	blx	r3
 801324e:	6823      	ldr	r3, [r4, #0]
 8013250:	2800      	cmp	r0, #0
 8013252:	d050      	beq.n	80132f6 <_ZN8touchgfx3HAL4tickEv+0x156>
 8013254:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013258:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801325c:	4620      	mov	r0, r4
 801325e:	4798      	blx	r3
 8013260:	6960      	ldr	r0, [r4, #20]
 8013262:	2300      	movs	r3, #0
 8013264:	f88d 3007 	strb.w	r3, [sp, #7]
 8013268:	b158      	cbz	r0, 8013282 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801326a:	6803      	ldr	r3, [r0, #0]
 801326c:	f10d 0107 	add.w	r1, sp, #7
 8013270:	68db      	ldr	r3, [r3, #12]
 8013272:	4798      	blx	r3
 8013274:	b128      	cbz	r0, 8013282 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013276:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8013278:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801327c:	6803      	ldr	r3, [r0, #0]
 801327e:	68db      	ldr	r3, [r3, #12]
 8013280:	4798      	blx	r3
 8013282:	f104 001c 	add.w	r0, r4, #28
 8013286:	f016 fb3b 	bl	8029900 <_ZN8touchgfx8Gestures4tickEv>
 801328a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 801328e:	b30b      	cbz	r3, 80132d4 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013290:	6920      	ldr	r0, [r4, #16]
 8013292:	6803      	ldr	r3, [r0, #0]
 8013294:	691b      	ldr	r3, [r3, #16]
 8013296:	4798      	blx	r3
 8013298:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801329a:	4606      	mov	r6, r0
 801329c:	b903      	cbnz	r3, 80132a0 <_ZN8touchgfx3HAL4tickEv+0x100>
 801329e:	6760      	str	r0, [r4, #116]	@ 0x74
 80132a0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80132a2:	4a1e      	ldr	r2, [pc, #120]	@ (801331c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80132a4:	1af3      	subs	r3, r6, r3
 80132a6:	4293      	cmp	r3, r2
 80132a8:	d914      	bls.n	80132d4 <_ZN8touchgfx3HAL4tickEv+0x134>
 80132aa:	6920      	ldr	r0, [r4, #16]
 80132ac:	6803      	ldr	r3, [r0, #0]
 80132ae:	699b      	ldr	r3, [r3, #24]
 80132b0:	4798      	blx	r3
 80132b2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80132b4:	2264      	movs	r2, #100	@ 0x64
 80132b6:	1af3      	subs	r3, r6, r3
 80132b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80132bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80132c0:	2800      	cmp	r0, #0
 80132c2:	dc1d      	bgt.n	8013300 <_ZN8touchgfx3HAL4tickEv+0x160>
 80132c4:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 80132c8:	6920      	ldr	r0, [r4, #16]
 80132ca:	6803      	ldr	r3, [r0, #0]
 80132cc:	2100      	movs	r1, #0
 80132ce:	69db      	ldr	r3, [r3, #28]
 80132d0:	4798      	blx	r3
 80132d2:	6766      	str	r6, [r4, #116]	@ 0x74
 80132d4:	f005 fbce 	bl	8018a74 <_ZN8touchgfx11Application11getInstanceEv>
 80132d8:	6803      	ldr	r3, [r0, #0]
 80132da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132dc:	4798      	blx	r3
 80132de:	6823      	ldr	r3, [r4, #0]
 80132e0:	4620      	mov	r0, r4
 80132e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80132e6:	4798      	blx	r3
 80132e8:	2001      	movs	r0, #1
 80132ea:	f7fd f8cb 	bl	8010484 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80132ee:	2300      	movs	r3, #0
 80132f0:	702b      	strb	r3, [r5, #0]
 80132f2:	b004      	add	sp, #16
 80132f4:	bd70      	pop	{r4, r5, r6, pc}
 80132f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80132fa:	4620      	mov	r0, r4
 80132fc:	4798      	blx	r3
 80132fe:	e7af      	b.n	8013260 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8013300:	2863      	cmp	r0, #99	@ 0x63
 8013302:	bfcb      	itete	gt
 8013304:	2300      	movgt	r3, #0
 8013306:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 801330a:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 801330e:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8013312:	e7d9      	b.n	80132c8 <_ZN8touchgfx3HAL4tickEv+0x128>
 8013314:	200126e4 	.word	0x200126e4
 8013318:	200126e5 	.word	0x200126e5
 801331c:	05f5e100 	.word	0x05f5e100

08013320 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8013320:	b510      	push	{r4, lr}
 8013322:	4604      	mov	r4, r0
 8013324:	f7fd fc16 	bl	8010b54 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8013328:	6863      	ldr	r3, [r4, #4]
 801332a:	2200      	movs	r2, #0
 801332c:	729a      	strb	r2, [r3, #10]
 801332e:	bd10      	pop	{r4, pc}

08013330 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8013330:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8013332:	301c      	adds	r0, #28
 8013334:	f016 bae2 	b.w	80298fc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08013338 <_ZN8touchgfx3HAL5touchEll>:
 8013338:	b530      	push	{r4, r5, lr}
 801333a:	b087      	sub	sp, #28
 801333c:	4604      	mov	r4, r0
 801333e:	a804      	add	r0, sp, #16
 8013340:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8013344:	f005 f988 	bl	8018658 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8013348:	9b04      	ldr	r3, [sp, #16]
 801334a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801334e:	a906      	add	r1, sp, #24
 8013350:	9b05      	ldr	r3, [sp, #20]
 8013352:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8013356:	a803      	add	r0, sp, #12
 8013358:	f005 f9d0 	bl	80186fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801335c:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8013360:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013364:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013368:	f104 001c 	add.w	r0, r4, #28
 801336c:	b189      	cbz	r1, 8013392 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801336e:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8013372:	9300      	str	r3, [sp, #0]
 8013374:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8013378:	4613      	mov	r3, r2
 801337a:	462a      	mov	r2, r5
 801337c:	f016 face 	bl	802991c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8013380:	b128      	cbz	r0, 801338e <_ZN8touchgfx3HAL5touchEll+0x56>
 8013382:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013386:	6623      	str	r3, [r4, #96]	@ 0x60
 8013388:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801338c:	6663      	str	r3, [r4, #100]	@ 0x64
 801338e:	b007      	add	sp, #28
 8013390:	bd30      	pop	{r4, r5, pc}
 8013392:	f016 fb03 	bl	802999c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013396:	2301      	movs	r3, #1
 8013398:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 801339c:	e7f1      	b.n	8013382 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801339e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801339e:	b510      	push	{r4, lr}
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d046      	beq.n	8013432 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80133a4:	ea81 0002 	eor.w	r0, r1, r2
 80133a8:	07c4      	lsls	r4, r0, #31
 80133aa:	d508      	bpl.n	80133be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80133ac:	440b      	add	r3, r1
 80133ae:	3a01      	subs	r2, #1
 80133b0:	428b      	cmp	r3, r1
 80133b2:	d93e      	bls.n	8013432 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80133b4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80133b8:	f801 0b01 	strb.w	r0, [r1], #1
 80133bc:	e7f8      	b.n	80133b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80133be:	07d0      	lsls	r0, r2, #31
 80133c0:	bf42      	ittt	mi
 80133c2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80133c6:	f801 0b01 	strbmi.w	r0, [r1], #1
 80133ca:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80133ce:	2b01      	cmp	r3, #1
 80133d0:	d911      	bls.n	80133f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80133d2:	ea81 0402 	eor.w	r4, r1, r2
 80133d6:	07a4      	lsls	r4, r4, #30
 80133d8:	4610      	mov	r0, r2
 80133da:	d022      	beq.n	8013422 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80133dc:	f023 0401 	bic.w	r4, r3, #1
 80133e0:	440c      	add	r4, r1
 80133e2:	428c      	cmp	r4, r1
 80133e4:	4602      	mov	r2, r0
 80133e6:	d904      	bls.n	80133f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80133e8:	8812      	ldrh	r2, [r2, #0]
 80133ea:	f821 2b02 	strh.w	r2, [r1], #2
 80133ee:	3002      	adds	r0, #2
 80133f0:	e7f7      	b.n	80133e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80133f2:	f003 0301 	and.w	r3, r3, #1
 80133f6:	f023 0003 	bic.w	r0, r3, #3
 80133fa:	4408      	add	r0, r1
 80133fc:	4288      	cmp	r0, r1
 80133fe:	4614      	mov	r4, r2
 8013400:	d904      	bls.n	801340c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8013402:	6824      	ldr	r4, [r4, #0]
 8013404:	f841 4b04 	str.w	r4, [r1], #4
 8013408:	3204      	adds	r2, #4
 801340a:	e7f7      	b.n	80133fc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801340c:	f003 0303 	and.w	r3, r3, #3
 8013410:	440b      	add	r3, r1
 8013412:	3a01      	subs	r2, #1
 8013414:	428b      	cmp	r3, r1
 8013416:	d90c      	bls.n	8013432 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013418:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801341c:	f801 0b01 	strb.w	r0, [r1], #1
 8013420:	e7f8      	b.n	8013414 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8013422:	0790      	lsls	r0, r2, #30
 8013424:	d0e7      	beq.n	80133f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013426:	f832 0b02 	ldrh.w	r0, [r2], #2
 801342a:	f821 0b02 	strh.w	r0, [r1], #2
 801342e:	3b02      	subs	r3, #2
 8013430:	e7e1      	b.n	80133f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013432:	2001      	movs	r0, #1
 8013434:	bd10      	pop	{r4, pc}

08013436 <_ZN8touchgfx3HAL7noTouchEv>:
 8013436:	b510      	push	{r4, lr}
 8013438:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 801343c:	4604      	mov	r4, r0
 801343e:	b153      	cbz	r3, 8013456 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8013440:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8013444:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8013448:	2101      	movs	r1, #1
 801344a:	301c      	adds	r0, #28
 801344c:	f016 faa6 	bl	802999c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013450:	2300      	movs	r3, #0
 8013452:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8013456:	bd10      	pop	{r4, pc}

08013458 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8013458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801345c:	b085      	sub	sp, #20
 801345e:	ad04      	add	r5, sp, #16
 8013460:	4604      	mov	r4, r0
 8013462:	2000      	movs	r0, #0
 8013464:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013468:	69a0      	ldr	r0, [r4, #24]
 801346a:	6806      	ldr	r6, [r0, #0]
 801346c:	9501      	str	r5, [sp, #4]
 801346e:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8013472:	9500      	str	r5, [sp, #0]
 8013474:	6835      	ldr	r5, [r6, #0]
 8013476:	4699      	mov	r9, r3
 8013478:	460f      	mov	r7, r1
 801347a:	4690      	mov	r8, r2
 801347c:	47a8      	blx	r5
 801347e:	4d10      	ldr	r5, [pc, #64]	@ (80134c0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8013480:	4606      	mov	r6, r0
 8013482:	f8a5 9000 	strh.w	r9, [r5]
 8013486:	f7f9 f9c3 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 801348a:	6803      	ldr	r3, [r0, #0]
 801348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801348e:	4798      	blx	r3
 8013490:	b128      	cbz	r0, 801349e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8013492:	2801      	cmp	r0, #1
 8013494:	d00b      	beq.n	80134ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8013496:	4630      	mov	r0, r6
 8013498:	b005      	add	sp, #20
 801349a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801349e:	882b      	ldrh	r3, [r5, #0]
 80134a0:	fb08 7203 	mla	r2, r8, r3, r7
 80134a4:	9b03      	ldr	r3, [sp, #12]
 80134a6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80134aa:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80134ac:	e7f3      	b.n	8013496 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80134ae:	882a      	ldrh	r2, [r5, #0]
 80134b0:	9b03      	ldr	r3, [sp, #12]
 80134b2:	fb08 7202 	mla	r2, r8, r2, r7
 80134b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80134ba:	1a9a      	subs	r2, r3, r2
 80134bc:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80134be:	e7ea      	b.n	8013496 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80134c0:	200126da 	.word	0x200126da

080134c4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80134c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134c6:	b08b      	sub	sp, #44	@ 0x2c
 80134c8:	4617      	mov	r7, r2
 80134ca:	4604      	mov	r4, r0
 80134cc:	460e      	mov	r6, r1
 80134ce:	461d      	mov	r5, r3
 80134d0:	f7f9 f99e 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 80134d4:	6803      	ldr	r3, [r0, #0]
 80134d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134d8:	4798      	blx	r3
 80134da:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80134de:	9007      	str	r0, [sp, #28]
 80134e0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80134e4:	4b0d      	ldr	r3, [pc, #52]	@ (801351c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80134e6:	6822      	ldr	r2, [r4, #0]
 80134e8:	881b      	ldrh	r3, [r3, #0]
 80134ea:	9306      	str	r3, [sp, #24]
 80134ec:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80134f0:	9305      	str	r3, [sp, #20]
 80134f2:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 80134f6:	9304      	str	r3, [sp, #16]
 80134f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80134fc:	9303      	str	r3, [sp, #12]
 80134fe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8013502:	9302      	str	r3, [sp, #8]
 8013504:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8013508:	e9cd 5300 	strd	r5, r3, [sp]
 801350c:	4631      	mov	r1, r6
 801350e:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8013510:	463b      	mov	r3, r7
 8013512:	2200      	movs	r2, #0
 8013514:	4620      	mov	r0, r4
 8013516:	47a8      	blx	r5
 8013518:	b00b      	add	sp, #44	@ 0x2c
 801351a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801351c:	200126da 	.word	0x200126da

08013520 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8013520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013524:	4698      	mov	r8, r3
 8013526:	6803      	ldr	r3, [r0, #0]
 8013528:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 801352a:	4b15      	ldr	r3, [pc, #84]	@ (8013580 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801352c:	b08b      	sub	sp, #44	@ 0x2c
 801352e:	4617      	mov	r7, r2
 8013530:	f8b3 9000 	ldrh.w	r9, [r3]
 8013534:	460e      	mov	r6, r1
 8013536:	4604      	mov	r4, r0
 8013538:	f7f9 f96a 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 801353c:	6803      	ldr	r3, [r0, #0]
 801353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013540:	4798      	blx	r3
 8013542:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8013546:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801354a:	2302      	movs	r3, #2
 801354c:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8013550:	2301      	movs	r3, #1
 8013552:	9305      	str	r3, [sp, #20]
 8013554:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8013558:	9304      	str	r3, [sp, #16]
 801355a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 801355e:	9303      	str	r3, [sp, #12]
 8013560:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8013564:	9302      	str	r3, [sp, #8]
 8013566:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801356a:	2200      	movs	r2, #0
 801356c:	e9cd 8300 	strd	r8, r3, [sp]
 8013570:	4631      	mov	r1, r6
 8013572:	463b      	mov	r3, r7
 8013574:	4620      	mov	r0, r4
 8013576:	47a8      	blx	r5
 8013578:	b00b      	add	sp, #44	@ 0x2c
 801357a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801357e:	bf00      	nop
 8013580:	200126da 	.word	0x200126da

08013584 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8013584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013588:	4698      	mov	r8, r3
 801358a:	6803      	ldr	r3, [r0, #0]
 801358c:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 801358e:	4b11      	ldr	r3, [pc, #68]	@ (80135d4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8013590:	b087      	sub	sp, #28
 8013592:	f8b3 9000 	ldrh.w	r9, [r3]
 8013596:	460e      	mov	r6, r1
 8013598:	4617      	mov	r7, r2
 801359a:	4604      	mov	r4, r0
 801359c:	f7f9 f938 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 80135a0:	6803      	ldr	r3, [r0, #0]
 80135a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135a4:	4798      	blx	r3
 80135a6:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 80135aa:	f8cd 900c 	str.w	r9, [sp, #12]
 80135ae:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80135b2:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 80135b6:	9302      	str	r3, [sp, #8]
 80135b8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80135bc:	9301      	str	r3, [sp, #4]
 80135be:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80135c2:	9300      	str	r3, [sp, #0]
 80135c4:	463a      	mov	r2, r7
 80135c6:	4643      	mov	r3, r8
 80135c8:	4631      	mov	r1, r6
 80135ca:	4620      	mov	r0, r4
 80135cc:	47a8      	blx	r5
 80135ce:	b007      	add	sp, #28
 80135d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135d4:	200126da 	.word	0x200126da

080135d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80135d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135dc:	4604      	mov	r4, r0
 80135de:	b08f      	sub	sp, #60	@ 0x3c
 80135e0:	4610      	mov	r0, r2
 80135e2:	460d      	mov	r5, r1
 80135e4:	4691      	mov	r9, r2
 80135e6:	461e      	mov	r6, r3
 80135e8:	f008 fd52 	bl	801c090 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80135ec:	2800      	cmp	r0, #0
 80135ee:	f000 809d 	beq.w	801372c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80135f2:	6823      	ldr	r3, [r4, #0]
 80135f4:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8013790 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80135f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135fa:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8013794 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80135fe:	4f61      	ldr	r7, [pc, #388]	@ (8013784 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013600:	4620      	mov	r0, r4
 8013602:	4798      	blx	r3
 8013604:	6823      	ldr	r3, [r4, #0]
 8013606:	4620      	mov	r0, r4
 8013608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801360a:	4798      	blx	r3
 801360c:	f8bb 3000 	ldrh.w	r3, [fp]
 8013610:	9301      	str	r3, [sp, #4]
 8013612:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8013616:	f8ba 3000 	ldrh.w	r3, [sl]
 801361a:	9302      	str	r3, [sp, #8]
 801361c:	883b      	ldrh	r3, [r7, #0]
 801361e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8013622:	9303      	str	r3, [sp, #12]
 8013624:	4b58      	ldr	r3, [pc, #352]	@ (8013788 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013626:	9305      	str	r3, [sp, #20]
 8013628:	881a      	ldrh	r2, [r3, #0]
 801362a:	9204      	str	r2, [sp, #16]
 801362c:	4640      	mov	r0, r8
 801362e:	f008 fdc3 	bl	801c1b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013632:	8038      	strh	r0, [r7, #0]
 8013634:	4640      	mov	r0, r8
 8013636:	f008 fdf3 	bl	801c220 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801363a:	9b05      	ldr	r3, [sp, #20]
 801363c:	b280      	uxth	r0, r0
 801363e:	8018      	strh	r0, [r3, #0]
 8013640:	4b52      	ldr	r3, [pc, #328]	@ (801378c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d174      	bne.n	8013732 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8013648:	883b      	ldrh	r3, [r7, #0]
 801364a:	f8ab 3000 	strh.w	r3, [fp]
 801364e:	f8aa 0000 	strh.w	r0, [sl]
 8013652:	4648      	mov	r0, r9
 8013654:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8013658:	f008 fd1a 	bl	801c090 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801365c:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8013660:	2200      	movs	r2, #0
 8013662:	4611      	mov	r1, r2
 8013664:	4628      	mov	r0, r5
 8013666:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801366a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801366e:	f7f8 fef3 	bl	800c458 <_ZN8touchgfx8Drawable5setXYEss>
 8013672:	2301      	movs	r3, #1
 8013674:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8013678:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 801367c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013680:	2b00      	cmp	r3, #0
 8013682:	dd5c      	ble.n	801373e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013684:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013688:	2b00      	cmp	r3, #0
 801368a:	dd58      	ble.n	801373e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801368c:	462a      	mov	r2, r5
 801368e:	ab0a      	add	r3, sp, #40	@ 0x28
 8013690:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013694:	6851      	ldr	r1, [r2, #4]
 8013696:	c303      	stmia	r3!, {r0, r1}
 8013698:	4631      	mov	r1, r6
 801369a:	a80a      	add	r0, sp, #40	@ 0x28
 801369c:	f7ff fbf8 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 80136a0:	4b38      	ldr	r3, [pc, #224]	@ (8013784 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80136a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80136a6:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80136aa:	2100      	movs	r1, #0
 80136ac:	aa0a      	add	r2, sp, #40	@ 0x28
 80136ae:	4b36      	ldr	r3, [pc, #216]	@ (8013788 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80136b0:	910c      	str	r1, [sp, #48]	@ 0x30
 80136b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80136b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80136ba:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80136be:	ab08      	add	r3, sp, #32
 80136c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80136c4:	4618      	mov	r0, r3
 80136c6:	a90c      	add	r1, sp, #48	@ 0x30
 80136c8:	f7ff fbe2 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 80136cc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d13c      	bne.n	801374c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80136d2:	2000      	movs	r0, #0
 80136d4:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 80136d8:	2600      	movs	r6, #0
 80136da:	682a      	ldr	r2, [r5, #0]
 80136dc:	696b      	ldr	r3, [r5, #20]
 80136de:	616e      	str	r6, [r5, #20]
 80136e0:	9305      	str	r3, [sp, #20]
 80136e2:	6892      	ldr	r2, [r2, #8]
 80136e4:	a908      	add	r1, sp, #32
 80136e6:	4628      	mov	r0, r5
 80136e8:	4790      	blx	r2
 80136ea:	9b05      	ldr	r3, [sp, #20]
 80136ec:	616b      	str	r3, [r5, #20]
 80136ee:	4652      	mov	r2, sl
 80136f0:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 80136f4:	4649      	mov	r1, r9
 80136f6:	4628      	mov	r0, r5
 80136f8:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80136fc:	f7f8 feac 	bl	800c458 <_ZN8touchgfx8Drawable5setXYEss>
 8013700:	4b23      	ldr	r3, [pc, #140]	@ (8013790 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8013702:	9a01      	ldr	r2, [sp, #4]
 8013704:	801a      	strh	r2, [r3, #0]
 8013706:	4b23      	ldr	r3, [pc, #140]	@ (8013794 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8013708:	9a02      	ldr	r2, [sp, #8]
 801370a:	801a      	strh	r2, [r3, #0]
 801370c:	4b1d      	ldr	r3, [pc, #116]	@ (8013784 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801370e:	9a03      	ldr	r2, [sp, #12]
 8013710:	801a      	strh	r2, [r3, #0]
 8013712:	4b1d      	ldr	r3, [pc, #116]	@ (8013788 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013714:	9a04      	ldr	r2, [sp, #16]
 8013716:	801a      	strh	r2, [r3, #0]
 8013718:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 801371c:	6823      	ldr	r3, [r4, #0]
 801371e:	4620      	mov	r0, r4
 8013720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013722:	4798      	blx	r3
 8013724:	6823      	ldr	r3, [r4, #0]
 8013726:	4620      	mov	r0, r4
 8013728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801372a:	4798      	blx	r3
 801372c:	b00f      	add	sp, #60	@ 0x3c
 801372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013732:	883b      	ldrh	r3, [r7, #0]
 8013734:	f8ab 0000 	strh.w	r0, [fp]
 8013738:	f8aa 3000 	strh.w	r3, [sl]
 801373c:	e789      	b.n	8013652 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801373e:	462a      	mov	r2, r5
 8013740:	ab0a      	add	r3, sp, #40	@ 0x28
 8013742:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013746:	6851      	ldr	r1, [r2, #4]
 8013748:	c303      	stmia	r3!, {r0, r1}
 801374a:	e7a9      	b.n	80136a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801374c:	a807      	add	r0, sp, #28
 801374e:	f008 fea9 	bl	801c4a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013752:	4606      	mov	r6, r0
 8013754:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8013756:	6803      	ldr	r3, [r0, #0]
 8013758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801375a:	4798      	blx	r3
 801375c:	4286      	cmp	r6, r0
 801375e:	d1b8      	bne.n	80136d2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8013760:	f7f9 f856 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 8013764:	6803      	ldr	r3, [r0, #0]
 8013766:	4606      	mov	r6, r0
 8013768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801376a:	9305      	str	r3, [sp, #20]
 801376c:	a807      	add	r0, sp, #28
 801376e:	f008 fe99 	bl	801c4a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013772:	9b05      	ldr	r3, [sp, #20]
 8013774:	4601      	mov	r1, r0
 8013776:	4630      	mov	r0, r6
 8013778:	4798      	blx	r3
 801377a:	f080 0001 	eor.w	r0, r0, #1
 801377e:	b2c0      	uxtb	r0, r0
 8013780:	e7a8      	b.n	80136d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8013782:	bf00      	nop
 8013784:	200126d4 	.word	0x200126d4
 8013788:	200126d6 	.word	0x200126d6
 801378c:	200126d8 	.word	0x200126d8
 8013790:	200126da 	.word	0x200126da
 8013794:	200126dc 	.word	0x200126dc

08013798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8013798:	b510      	push	{r4, lr}
 801379a:	4b07      	ldr	r3, [pc, #28]	@ (80137b8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801379c:	781b      	ldrb	r3, [r3, #0]
 801379e:	4604      	mov	r4, r0
 80137a0:	b13b      	cbz	r3, 80137b2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80137a2:	6803      	ldr	r3, [r0, #0]
 80137a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80137a6:	4798      	blx	r3
 80137a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80137aa:	4283      	cmp	r3, r0
 80137ac:	d101      	bne.n	80137b2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80137ae:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80137b0:	bd10      	pop	{r4, pc}
 80137b2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80137b4:	e7fc      	b.n	80137b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80137b6:	bf00      	nop
 80137b8:	200126de 	.word	0x200126de

080137bc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80137bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137c0:	b08a      	sub	sp, #40	@ 0x28
 80137c2:	461d      	mov	r5, r3
 80137c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80137c8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80137cc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80137d0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80137d4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80137d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80137dc:	2400      	movs	r4, #0
 80137de:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80137e2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 80137e6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80137ea:	4690      	mov	r8, r2
 80137ec:	4607      	mov	r7, r0
 80137ee:	9404      	str	r4, [sp, #16]
 80137f0:	f88d 4020 	strb.w	r4, [sp, #32]
 80137f4:	f7ff ffd0 	bl	8013798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80137f8:	fb06 8505 	mla	r5, r6, r5, r8
 80137fc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013800:	6878      	ldr	r0, [r7, #4]
 8013802:	9505      	str	r5, [sp, #20]
 8013804:	f8ad 601e 	strh.w	r6, [sp, #30]
 8013808:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801380c:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8013810:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8013814:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8013818:	6803      	ldr	r3, [r0, #0]
 801381a:	a901      	add	r1, sp, #4
 801381c:	685b      	ldr	r3, [r3, #4]
 801381e:	4798      	blx	r3
 8013820:	b00a      	add	sp, #40	@ 0x28
 8013822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013826 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8013826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801382a:	b08b      	sub	sp, #44	@ 0x2c
 801382c:	2400      	movs	r4, #0
 801382e:	461d      	mov	r5, r3
 8013830:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013834:	4688      	mov	r8, r1
 8013836:	4691      	mov	r9, r2
 8013838:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801383c:	9404      	str	r4, [sp, #16]
 801383e:	4607      	mov	r7, r0
 8013840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013844:	f7ff ffa8 	bl	8013798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013848:	fb06 9505 	mla	r5, r6, r5, r9
 801384c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013850:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013854:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013858:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	9505      	str	r5, [sp, #20]
 8013860:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013864:	f8ad 401c 	strh.w	r4, [sp, #28]
 8013868:	f8ad 601e 	strh.w	r6, [sp, #30]
 801386c:	f8cd 8010 	str.w	r8, [sp, #16]
 8013870:	f8ad 4020 	strh.w	r4, [sp, #32]
 8013874:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8013878:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801387c:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8013880:	6803      	ldr	r3, [r0, #0]
 8013882:	a901      	add	r1, sp, #4
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	4798      	blx	r3
 8013888:	b00b      	add	sp, #44	@ 0x2c
 801388a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08013890 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8013890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013894:	b08a      	sub	sp, #40	@ 0x28
 8013896:	4698      	mov	r8, r3
 8013898:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801389c:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 80138a0:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 80138a4:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 80138a8:	2300      	movs	r3, #0
 80138aa:	2d0b      	cmp	r5, #11
 80138ac:	4606      	mov	r6, r0
 80138ae:	9304      	str	r3, [sp, #16]
 80138b0:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80138b4:	d138      	bne.n	8013928 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 80138b6:	2380      	movs	r3, #128	@ 0x80
 80138b8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80138bc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80138c0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80138c4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80138c8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80138cc:	f88d 0020 	strb.w	r0, [sp, #32]
 80138d0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80138d4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80138d8:	4630      	mov	r0, r6
 80138da:	9203      	str	r2, [sp, #12]
 80138dc:	f7ff ff5c 	bl	8013798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80138e0:	2c0b      	cmp	r4, #11
 80138e2:	bf98      	it	ls
 80138e4:	4b1b      	ldrls	r3, [pc, #108]	@ (8013954 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80138e6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80138ea:	bf98      	it	ls
 80138ec:	5d19      	ldrbls	r1, [r3, r4]
 80138ee:	f8ad 701e 	strh.w	r7, [sp, #30]
 80138f2:	bf88      	it	hi
 80138f4:	2100      	movhi	r1, #0
 80138f6:	fb02 8307 	mla	r3, r2, r7, r8
 80138fa:	10c9      	asrs	r1, r1, #3
 80138fc:	fb01 0003 	mla	r0, r1, r3, r0
 8013900:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8013904:	9005      	str	r0, [sp, #20]
 8013906:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801390a:	6870      	ldr	r0, [r6, #4]
 801390c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8013910:	2300      	movs	r3, #0
 8013912:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8013916:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801391a:	6803      	ldr	r3, [r0, #0]
 801391c:	a901      	add	r1, sp, #4
 801391e:	685b      	ldr	r3, [r3, #4]
 8013920:	4798      	blx	r3
 8013922:	b00a      	add	sp, #40	@ 0x28
 8013924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013928:	2d02      	cmp	r5, #2
 801392a:	d109      	bne.n	8013940 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 801392c:	28ff      	cmp	r0, #255	@ 0xff
 801392e:	d105      	bne.n	801393c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8013930:	f1bc 0f00 	cmp.w	ip, #0
 8013934:	bf14      	ite	ne
 8013936:	2340      	movne	r3, #64	@ 0x40
 8013938:	2320      	moveq	r3, #32
 801393a:	e7bd      	b.n	80138b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801393c:	2340      	movs	r3, #64	@ 0x40
 801393e:	e7bb      	b.n	80138b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013940:	28ff      	cmp	r0, #255	@ 0xff
 8013942:	d105      	bne.n	8013950 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8013944:	f1bc 0f00 	cmp.w	ip, #0
 8013948:	bf14      	ite	ne
 801394a:	2304      	movne	r3, #4
 801394c:	2301      	moveq	r3, #1
 801394e:	e7b3      	b.n	80138b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013950:	2304      	movs	r3, #4
 8013952:	e7b1      	b.n	80138b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013954:	0802e33c 	.word	0x0802e33c

08013958 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8013958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801395c:	b08b      	sub	sp, #44	@ 0x2c
 801395e:	461d      	mov	r5, r3
 8013960:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8013964:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8013968:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 801396c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8013970:	bf14      	ite	ne
 8013972:	2308      	movne	r3, #8
 8013974:	2302      	moveq	r3, #2
 8013976:	2400      	movs	r4, #0
 8013978:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801397c:	4688      	mov	r8, r1
 801397e:	4693      	mov	fp, r2
 8013980:	9404      	str	r4, [sp, #16]
 8013982:	4607      	mov	r7, r0
 8013984:	f7ff ff08 	bl	8013798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013988:	2e0b      	cmp	r6, #11
 801398a:	bf98      	it	ls
 801398c:	4b15      	ldrls	r3, [pc, #84]	@ (80139e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801398e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8013992:	bf98      	it	ls
 8013994:	5d9c      	ldrbls	r4, [r3, r6]
 8013996:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 801399a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801399e:	fb05 b50a 	mla	r5, r5, sl, fp
 80139a2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80139a6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80139aa:	10e4      	asrs	r4, r4, #3
 80139ac:	fb04 0405 	mla	r4, r4, r5, r0
 80139b0:	2300      	movs	r3, #0
 80139b2:	6878      	ldr	r0, [r7, #4]
 80139b4:	9405      	str	r4, [sp, #20]
 80139b6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80139ba:	f8ad a01e 	strh.w	sl, [sp, #30]
 80139be:	f8cd 8010 	str.w	r8, [sp, #16]
 80139c2:	f88d 9020 	strb.w	r9, [sp, #32]
 80139c6:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 80139ca:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80139ce:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 80139d2:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 80139d6:	6803      	ldr	r3, [r0, #0]
 80139d8:	a901      	add	r1, sp, #4
 80139da:	685b      	ldr	r3, [r3, #4]
 80139dc:	4798      	blx	r3
 80139de:	b00b      	add	sp, #44	@ 0x2c
 80139e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139e4:	0802e33c 	.word	0x0802e33c

080139e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80139e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139ec:	461e      	mov	r6, r3
 80139ee:	4b0a      	ldr	r3, [pc, #40]	@ (8013a18 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80139f0:	460f      	mov	r7, r1
 80139f2:	881d      	ldrh	r5, [r3, #0]
 80139f4:	4690      	mov	r8, r2
 80139f6:	f7f8 ff0b 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 80139fa:	6803      	ldr	r3, [r0, #0]
 80139fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139fe:	4798      	blx	r3
 8013a00:	280b      	cmp	r0, #11
 8013a02:	bf9a      	itte	ls
 8013a04:	4b05      	ldrls	r3, [pc, #20]	@ (8013a1c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8013a06:	5c1c      	ldrbls	r4, [r3, r0]
 8013a08:	2400      	movhi	r4, #0
 8013a0a:	fb08 7005 	mla	r0, r8, r5, r7
 8013a0e:	10e4      	asrs	r4, r4, #3
 8013a10:	fb04 6000 	mla	r0, r4, r0, r6
 8013a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a18:	200126da 	.word	0x200126da
 8013a1c:	0802e33c 	.word	0x0802e33c

08013a20 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8013a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a22:	b08b      	sub	sp, #44	@ 0x2c
 8013a24:	461f      	mov	r7, r3
 8013a26:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8013a2a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013a2e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8013a32:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013a36:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8013a3a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013a3e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013a42:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013a46:	2500      	movs	r5, #0
 8013a48:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8013a4c:	f88d 3020 	strb.w	r3, [sp, #32]
 8013a50:	4604      	mov	r4, r0
 8013a52:	4616      	mov	r6, r2
 8013a54:	9504      	str	r5, [sp, #16]
 8013a56:	f7ff fe9f 	bl	8013798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013a5a:	463a      	mov	r2, r7
 8013a5c:	4631      	mov	r1, r6
 8013a5e:	4603      	mov	r3, r0
 8013a60:	4620      	mov	r0, r4
 8013a62:	f7ff ffc1 	bl	80139e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013a66:	4b0e      	ldr	r3, [pc, #56]	@ (8013aa0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8013a68:	9005      	str	r0, [sp, #20]
 8013a6a:	881b      	ldrh	r3, [r3, #0]
 8013a6c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013a70:	f7f8 fece 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 8013a74:	6803      	ldr	r3, [r0, #0]
 8013a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a78:	4798      	blx	r3
 8013a7a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013a7c:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8013a80:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8013a84:	9304      	str	r3, [sp, #16]
 8013a86:	6860      	ldr	r0, [r4, #4]
 8013a88:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8013a8c:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8013a90:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8013a94:	6803      	ldr	r3, [r0, #0]
 8013a96:	a901      	add	r1, sp, #4
 8013a98:	685b      	ldr	r3, [r3, #4]
 8013a9a:	4798      	blx	r3
 8013a9c:	b00b      	add	sp, #44	@ 0x2c
 8013a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013aa0:	200126da 	.word	0x200126da

08013aa4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8013aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013aa6:	b08d      	sub	sp, #52	@ 0x34
 8013aa8:	466b      	mov	r3, sp
 8013aaa:	e883 0006 	stmia.w	r3, {r1, r2}
 8013aae:	2300      	movs	r3, #0
 8013ab0:	9306      	str	r3, [sp, #24]
 8013ab2:	6803      	ldr	r3, [r0, #0]
 8013ab4:	f8bd 6000 	ldrh.w	r6, [sp]
 8013ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013aba:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8013abe:	2501      	movs	r5, #1
 8013ac0:	9503      	str	r5, [sp, #12]
 8013ac2:	4604      	mov	r4, r0
 8013ac4:	4798      	blx	r3
 8013ac6:	463a      	mov	r2, r7
 8013ac8:	4631      	mov	r1, r6
 8013aca:	4603      	mov	r3, r0
 8013acc:	4620      	mov	r0, r4
 8013ace:	f7ff ff8b 	bl	80139e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013ad2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8013ad4:	9307      	str	r3, [sp, #28]
 8013ad6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013ada:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013ade:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013ae2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8013b24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8013ae8:	9004      	str	r0, [sp, #16]
 8013aea:	881b      	ldrh	r3, [r3, #0]
 8013aec:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8013af0:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8013af4:	f7f8 fe8c 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 8013af8:	6803      	ldr	r3, [r0, #0]
 8013afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013afc:	4798      	blx	r3
 8013afe:	23ff      	movs	r3, #255	@ 0xff
 8013b00:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8013b04:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8013b08:	6860      	ldr	r0, [r4, #4]
 8013b0a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8013b0e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8013b12:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8013b16:	6803      	ldr	r3, [r0, #0]
 8013b18:	a903      	add	r1, sp, #12
 8013b1a:	685b      	ldr	r3, [r3, #4]
 8013b1c:	4798      	blx	r3
 8013b1e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8013b20:	b00d      	add	sp, #52	@ 0x34
 8013b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b24:	200126da 	.word	0x200126da

08013b28 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b2c:	b08c      	sub	sp, #48	@ 0x30
 8013b2e:	461e      	mov	r6, r3
 8013b30:	466d      	mov	r5, sp
 8013b32:	2300      	movs	r3, #0
 8013b34:	e885 0006 	stmia.w	r5, {r1, r2}
 8013b38:	9306      	str	r3, [sp, #24]
 8013b3a:	6803      	ldr	r3, [r0, #0]
 8013b3c:	f8bd 7000 	ldrh.w	r7, [sp]
 8013b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b42:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8013b46:	2501      	movs	r5, #1
 8013b48:	9503      	str	r5, [sp, #12]
 8013b4a:	4604      	mov	r4, r0
 8013b4c:	4798      	blx	r3
 8013b4e:	4642      	mov	r2, r8
 8013b50:	4639      	mov	r1, r7
 8013b52:	4603      	mov	r3, r0
 8013b54:	4620      	mov	r0, r4
 8013b56:	f7ff ff47 	bl	80139e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013b5a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013b5e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013b62:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013b66:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013b6a:	4b11      	ldr	r3, [pc, #68]	@ (8013bb0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8013b6c:	9004      	str	r0, [sp, #16]
 8013b6e:	881b      	ldrh	r3, [r3, #0]
 8013b70:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8013b74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013b76:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8013b7a:	9607      	str	r6, [sp, #28]
 8013b7c:	f7f8 fe48 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 8013b80:	6803      	ldr	r3, [r0, #0]
 8013b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b84:	4798      	blx	r3
 8013b86:	23ff      	movs	r3, #255	@ 0xff
 8013b88:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8013b8c:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8013b90:	6860      	ldr	r0, [r4, #4]
 8013b92:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8013b96:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8013b9a:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8013b9e:	6803      	ldr	r3, [r0, #0]
 8013ba0:	a903      	add	r1, sp, #12
 8013ba2:	685b      	ldr	r3, [r3, #4]
 8013ba4:	4798      	blx	r3
 8013ba6:	4630      	mov	r0, r6
 8013ba8:	b00c      	add	sp, #48	@ 0x30
 8013baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bae:	bf00      	nop
 8013bb0:	200126da 	.word	0x200126da

08013bb4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8013bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bb6:	b085      	sub	sp, #20
 8013bb8:	ac02      	add	r4, sp, #8
 8013bba:	e884 0006 	stmia.w	r4, {r1, r2}
 8013bbe:	4605      	mov	r5, r0
 8013bc0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8013bc4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8013bc8:	f7ff fde6 	bl	8013798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013bcc:	463a      	mov	r2, r7
 8013bce:	4603      	mov	r3, r0
 8013bd0:	4631      	mov	r1, r6
 8013bd2:	4628      	mov	r0, r5
 8013bd4:	f7ff ff08 	bl	80139e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013bd8:	4a05      	ldr	r2, [pc, #20]	@ (8013bf0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8013bda:	682b      	ldr	r3, [r5, #0]
 8013bdc:	8812      	ldrh	r2, [r2, #0]
 8013bde:	9200      	str	r2, [sp, #0]
 8013be0:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8013be2:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013be6:	4603      	mov	r3, r0
 8013be8:	4628      	mov	r0, r5
 8013bea:	47b0      	blx	r6
 8013bec:	b005      	add	sp, #20
 8013bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bf0:	200126da 	.word	0x200126da

08013bf4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013bf4:	b570      	push	{r4, r5, r6, lr}
 8013bf6:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8013bfa:	4604      	mov	r4, r0
 8013bfc:	b19b      	cbz	r3, 8013c26 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8013bfe:	2002      	movs	r0, #2
 8013c00:	f7fc fc98 	bl	8010534 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013c04:	2300      	movs	r3, #0
 8013c06:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8013c0a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8013c0e:	6823      	ldr	r3, [r4, #0]
 8013c10:	4620      	mov	r0, r4
 8013c12:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8013c16:	f7ff fdbf 	bl	8013798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013c1a:	462b      	mov	r3, r5
 8013c1c:	4601      	mov	r1, r0
 8013c1e:	4620      	mov	r0, r4
 8013c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c24:	4718      	bx	r3
 8013c26:	bd70      	pop	{r4, r5, r6, pc}

08013c28 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8013c28:	b538      	push	{r3, r4, r5, lr}
 8013c2a:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8013c2e:	428b      	cmp	r3, r1
 8013c30:	4604      	mov	r4, r0
 8013c32:	460d      	mov	r5, r1
 8013c34:	d006      	beq.n	8013c44 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8013c36:	6803      	ldr	r3, [r0, #0]
 8013c38:	b929      	cbnz	r1, 8013c46 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8013c3a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8013c3e:	4798      	blx	r3
 8013c40:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8013c44:	bd38      	pop	{r3, r4, r5, pc}
 8013c46:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8013c4a:	e7f8      	b.n	8013c3e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08013c4c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013c4c:	b510      	push	{r4, lr}
 8013c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8013c84 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8013c50:	781b      	ldrb	r3, [r3, #0]
 8013c52:	4604      	mov	r4, r0
 8013c54:	b95b      	cbnz	r3, 8013c6e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013c56:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8013c5a:	2b02      	cmp	r3, #2
 8013c5c:	d007      	beq.n	8013c6e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013c5e:	6840      	ldr	r0, [r0, #4]
 8013c60:	f000 f928 	bl	8013eb4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013c64:	b118      	cbz	r0, 8013c6e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013c66:	6862      	ldr	r2, [r4, #4]
 8013c68:	7a53      	ldrb	r3, [r2, #9]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d0fc      	beq.n	8013c68 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8013c6e:	f7fc ff63 	bl	8010b38 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013c72:	4620      	mov	r0, r4
 8013c74:	2100      	movs	r1, #0
 8013c76:	f7ff ffd7 	bl	8013c28 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013c7a:	4620      	mov	r0, r4
 8013c7c:	f7ff fd8c 	bl	8013798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013c80:	bd10      	pop	{r4, pc}
 8013c82:	bf00      	nop
 8013c84:	200126de 	.word	0x200126de

08013c88 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8013c88:	b570      	push	{r4, r5, r6, lr}
 8013c8a:	4604      	mov	r4, r0
 8013c8c:	6803      	ldr	r3, [r0, #0]
 8013c8e:	b919      	cbnz	r1, 8013c98 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8013c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c96:	4718      	bx	r3
 8013c98:	2200      	movs	r2, #0
 8013c9a:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8013c9e:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8013ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ca4:	4798      	blx	r3
 8013ca6:	6863      	ldr	r3, [r4, #4]
 8013ca8:	2101      	movs	r1, #1
 8013caa:	4605      	mov	r5, r0
 8013cac:	7299      	strb	r1, [r3, #10]
 8013cae:	4620      	mov	r0, r4
 8013cb0:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8013cb4:	f7ff ffb8 	bl	8013c28 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013cb8:	4628      	mov	r0, r5
 8013cba:	bd70      	pop	{r4, r5, r6, pc}

08013cbc <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8013cbc:	4770      	bx	lr

08013cbe <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8013cbe:	2000      	movs	r0, #0
 8013cc0:	4770      	bx	lr

08013cc2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8013cc2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8013cc6:	1a13      	subs	r3, r2, r0
 8013cc8:	4258      	negs	r0, r3
 8013cca:	4158      	adcs	r0, r3
 8013ccc:	4770      	bx	lr

08013cce <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8013cce:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8013cd2:	1a9b      	subs	r3, r3, r2
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	bfdc      	itt	le
 8013cd8:	6882      	ldrle	r2, [r0, #8]
 8013cda:	189b      	addle	r3, r3, r2
 8013cdc:	2b01      	cmp	r3, #1
 8013cde:	bfcc      	ite	gt
 8013ce0:	2000      	movgt	r0, #0
 8013ce2:	2001      	movle	r0, #1
 8013ce4:	4770      	bx	lr

08013ce6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8013ce6:	6902      	ldr	r2, [r0, #16]
 8013ce8:	6843      	ldr	r3, [r0, #4]
 8013cea:	2024      	movs	r0, #36	@ 0x24
 8013cec:	fb00 3002 	mla	r0, r0, r2, r3
 8013cf0:	4770      	bx	lr

08013cf2 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013cf2:	6803      	ldr	r3, [r0, #0]
 8013cf4:	691b      	ldr	r3, [r3, #16]
 8013cf6:	4718      	bx	r3

08013cf8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013cf8:	b570      	push	{r4, r5, r6, lr}
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	7203      	strb	r3, [r0, #8]
 8013cfe:	4604      	mov	r4, r0
 8013d00:	6840      	ldr	r0, [r0, #4]
 8013d02:	6803      	ldr	r3, [r0, #0]
 8013d04:	699b      	ldr	r3, [r3, #24]
 8013d06:	4798      	blx	r3
 8013d08:	6803      	ldr	r3, [r0, #0]
 8013d0a:	2b40      	cmp	r3, #64	@ 0x40
 8013d0c:	4605      	mov	r5, r0
 8013d0e:	d00c      	beq.n	8013d2a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013d10:	d810      	bhi.n	8013d34 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013d12:	2b04      	cmp	r3, #4
 8013d14:	d01d      	beq.n	8013d52 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8013d16:	d804      	bhi.n	8013d22 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8013d18:	2b01      	cmp	r3, #1
 8013d1a:	d006      	beq.n	8013d2a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013d1c:	2b02      	cmp	r3, #2
 8013d1e:	d02c      	beq.n	8013d7a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013d20:	bd70      	pop	{r4, r5, r6, pc}
 8013d22:	2b08      	cmp	r3, #8
 8013d24:	d01d      	beq.n	8013d62 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8013d26:	2b20      	cmp	r3, #32
 8013d28:	d1fa      	bne.n	8013d20 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8013d2a:	6823      	ldr	r3, [r4, #0]
 8013d2c:	4620      	mov	r0, r4
 8013d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013d30:	4798      	blx	r3
 8013d32:	e013      	b.n	8013d5c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013d38:	d0f7      	beq.n	8013d2a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013d3a:	d804      	bhi.n	8013d46 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8013d3c:	2b80      	cmp	r3, #128	@ 0x80
 8013d3e:	d0f4      	beq.n	8013d2a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013d44:	e7f0      	b.n	8013d28 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013d4a:	d0ee      	beq.n	8013d2a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013d50:	e7e5      	b.n	8013d1e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8013d52:	6823      	ldr	r3, [r4, #0]
 8013d54:	7f01      	ldrb	r1, [r0, #28]
 8013d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d58:	4620      	mov	r0, r4
 8013d5a:	4798      	blx	r3
 8013d5c:	6823      	ldr	r3, [r4, #0]
 8013d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d60:	e006      	b.n	8013d70 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013d62:	6823      	ldr	r3, [r4, #0]
 8013d64:	7f01      	ldrb	r1, [r0, #28]
 8013d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d68:	4620      	mov	r0, r4
 8013d6a:	4798      	blx	r3
 8013d6c:	6823      	ldr	r3, [r4, #0]
 8013d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d70:	4629      	mov	r1, r5
 8013d72:	4620      	mov	r0, r4
 8013d74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d78:	4718      	bx	r3
 8013d7a:	6823      	ldr	r3, [r4, #0]
 8013d7c:	4620      	mov	r0, r4
 8013d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013d80:	4798      	blx	r3
 8013d82:	e7f3      	b.n	8013d6c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08013d84 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013d84:	4770      	bx	lr

08013d86 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013d86:	4770      	bx	lr

08013d88 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013d88:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8013d8c:	1ad2      	subs	r2, r2, r3
 8013d8e:	2a00      	cmp	r2, #0
 8013d90:	b510      	push	{r4, lr}
 8013d92:	bfdc      	itt	le
 8013d94:	6884      	ldrle	r4, [r0, #8]
 8013d96:	1912      	addle	r2, r2, r4
 8013d98:	2a01      	cmp	r2, #1
 8013d9a:	dd16      	ble.n	8013dca <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8013d9c:	6842      	ldr	r2, [r0, #4]
 8013d9e:	2424      	movs	r4, #36	@ 0x24
 8013da0:	fb04 2303 	mla	r3, r4, r3, r2
 8013da4:	f101 0220 	add.w	r2, r1, #32
 8013da8:	f851 4b04 	ldr.w	r4, [r1], #4
 8013dac:	f843 4b04 	str.w	r4, [r3], #4
 8013db0:	4291      	cmp	r1, r2
 8013db2:	d1f9      	bne.n	8013da8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8013db4:	780a      	ldrb	r2, [r1, #0]
 8013db6:	701a      	strb	r2, [r3, #0]
 8013db8:	68c3      	ldr	r3, [r0, #12]
 8013dba:	6882      	ldr	r2, [r0, #8]
 8013dbc:	f3bf 8f5b 	dmb	ish
 8013dc0:	3301      	adds	r3, #1
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	bfd8      	it	le
 8013dc6:	1a9b      	suble	r3, r3, r2
 8013dc8:	60c3      	str	r3, [r0, #12]
 8013dca:	bd10      	pop	{r4, pc}

08013dcc <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8013dcc:	6903      	ldr	r3, [r0, #16]
 8013dce:	6882      	ldr	r2, [r0, #8]
 8013dd0:	f3bf 8f5b 	dmb	ish
 8013dd4:	3301      	adds	r3, #1
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	bfd8      	it	le
 8013dda:	1a9b      	suble	r3, r3, r2
 8013ddc:	6103      	str	r3, [r0, #16]
 8013dde:	4770      	bx	lr

08013de0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8013de0:	b570      	push	{r4, r5, r6, lr}
 8013de2:	4604      	mov	r4, r0
 8013de4:	460e      	mov	r6, r1
 8013de6:	6860      	ldr	r0, [r4, #4]
 8013de8:	6803      	ldr	r3, [r0, #0]
 8013dea:	685b      	ldr	r3, [r3, #4]
 8013dec:	4798      	blx	r3
 8013dee:	2800      	cmp	r0, #0
 8013df0:	d1f9      	bne.n	8013de6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8013df2:	4d0d      	ldr	r5, [pc, #52]	@ (8013e28 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013df4:	6828      	ldr	r0, [r5, #0]
 8013df6:	6803      	ldr	r3, [r0, #0]
 8013df8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013dfa:	4798      	blx	r3
 8013dfc:	f7fc feb6 	bl	8010b6c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013e00:	6828      	ldr	r0, [r5, #0]
 8013e02:	2101      	movs	r1, #1
 8013e04:	f7ff ff10 	bl	8013c28 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013e08:	6860      	ldr	r0, [r4, #4]
 8013e0a:	6803      	ldr	r3, [r0, #0]
 8013e0c:	4631      	mov	r1, r6
 8013e0e:	689b      	ldr	r3, [r3, #8]
 8013e10:	4798      	blx	r3
 8013e12:	6823      	ldr	r3, [r4, #0]
 8013e14:	4620      	mov	r0, r4
 8013e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e18:	4798      	blx	r3
 8013e1a:	6828      	ldr	r0, [r5, #0]
 8013e1c:	6803      	ldr	r3, [r0, #0]
 8013e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013e24:	4718      	bx	r3
 8013e26:	bf00      	nop
 8013e28:	200126e0 	.word	0x200126e0

08013e2c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013e2c:	b508      	push	{r3, lr}
 8013e2e:	f7fc fe83 	bl	8010b38 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013e32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013e36:	f7fc be8d 	b.w	8010b54 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013e3a <_ZN8touchgfx13DMA_Interface5startEv>:
 8013e3a:	b510      	push	{r4, lr}
 8013e3c:	4604      	mov	r4, r0
 8013e3e:	6840      	ldr	r0, [r0, #4]
 8013e40:	6803      	ldr	r3, [r0, #0]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	4798      	blx	r3
 8013e46:	b948      	cbnz	r0, 8013e5c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013e48:	7a63      	ldrb	r3, [r4, #9]
 8013e4a:	b13b      	cbz	r3, 8013e5c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013e4c:	7a23      	ldrb	r3, [r4, #8]
 8013e4e:	b92b      	cbnz	r3, 8013e5c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013e50:	6823      	ldr	r3, [r4, #0]
 8013e52:	4620      	mov	r0, r4
 8013e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e5a:	4718      	bx	r3
 8013e5c:	bd10      	pop	{r4, pc}

08013e5e <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8013e5e:	b570      	push	{r4, r5, r6, lr}
 8013e60:	4604      	mov	r4, r0
 8013e62:	6840      	ldr	r0, [r0, #4]
 8013e64:	6803      	ldr	r3, [r0, #0]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	4798      	blx	r3
 8013e6a:	4605      	mov	r5, r0
 8013e6c:	b930      	cbnz	r0, 8013e7c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013e6e:	7a23      	ldrb	r3, [r4, #8]
 8013e70:	b123      	cbz	r3, 8013e7c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013e72:	6860      	ldr	r0, [r4, #4]
 8013e74:	6803      	ldr	r3, [r0, #0]
 8013e76:	695b      	ldr	r3, [r3, #20]
 8013e78:	4798      	blx	r3
 8013e7a:	7225      	strb	r5, [r4, #8]
 8013e7c:	6860      	ldr	r0, [r4, #4]
 8013e7e:	6803      	ldr	r3, [r0, #0]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	4798      	blx	r3
 8013e84:	b928      	cbnz	r0, 8013e92 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8013e86:	6823      	ldr	r3, [r4, #0]
 8013e88:	4620      	mov	r0, r4
 8013e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e90:	4718      	bx	r3
 8013e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e96:	f7fc be75 	b.w	8010b84 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08013e9c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8013e9c:	b510      	push	{r4, lr}
 8013e9e:	4c04      	ldr	r4, [pc, #16]	@ (8013eb0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8013ea0:	6082      	str	r2, [r0, #8]
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	e9c0 4100 	strd	r4, r1, [r0]
 8013ea8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013eac:	bd10      	pop	{r4, pc}
 8013eae:	bf00      	nop
 8013eb0:	0802e478 	.word	0x0802e478

08013eb4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8013eb4:	6840      	ldr	r0, [r0, #4]
 8013eb6:	6803      	ldr	r3, [r0, #0]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	4718      	bx	r3
 8013ebc:	0000      	movs	r0, r0
	...

08013ec0 <_ZN8touchgfxL10applyNoiseEiihhh>:
 8013ec0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8013ec4:	4f20      	ldr	r7, [pc, #128]	@ (8013f48 <_ZN8touchgfxL10applyNoiseEiihhh+0x88>)
 8013ec6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8013eca:	fb80 0101 	smull	r0, r1, r0, r1
 8013ece:	fba0 bc07 	umull	fp, ip, r0, r7
 8013ed2:	fb07 cc01 	mla	ip, r7, r1, ip
 8013ed6:	fb0b f70c 	mul.w	r7, fp, ip
 8013eda:	fbab 010b 	umull	r0, r1, fp, fp
 8013ede:	461c      	mov	r4, r3
 8013ee0:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8013ee4:	fb00 f30c 	mul.w	r3, r0, ip
 8013ee8:	fb0b 3301 	mla	r3, fp, r1, r3
 8013eec:	fba0 010b 	umull	r0, r1, r0, fp
 8013ef0:	4616      	mov	r6, r2
 8013ef2:	4419      	add	r1, r3
 8013ef4:	a312      	add	r3, pc, #72	@ (adr r3, 8013f40 <_ZN8touchgfxL10applyNoiseEiihhh+0x80>)
 8013ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013efa:	f7ec f9c9 	bl	8000290 <__aeabi_ldivmod>
 8013efe:	2ef7      	cmp	r6, #247	@ 0xf7
 8013f00:	b290      	uxth	r0, r2
 8013f02:	bf9e      	ittt	ls
 8013f04:	f002 0207 	andls.w	r2, r2, #7
 8013f08:	18b6      	addls	r6, r6, r2
 8013f0a:	b2f6      	uxtbls	r6, r6
 8013f0c:	2cfb      	cmp	r4, #251	@ 0xfb
 8013f0e:	bf9e      	ittt	ls
 8013f10:	f3c0 03c1 	ubfxls	r3, r0, #3, #2
 8013f14:	18e4      	addls	r4, r4, r3
 8013f16:	b2e4      	uxtbls	r4, r4
 8013f18:	2df7      	cmp	r5, #247	@ 0xf7
 8013f1a:	bf9c      	itt	ls
 8013f1c:	f3c0 1042 	ubfxls	r0, r0, #5, #3
 8013f20:	182d      	addls	r5, r5, r0
 8013f22:	480a      	ldr	r0, [pc, #40]	@ (8013f4c <_ZN8touchgfxL10applyNoiseEiihhh+0x8c>)
 8013f24:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8013f28:	ea00 2006 	and.w	r0, r0, r6, lsl #8
 8013f2c:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8013f30:	bf98      	it	ls
 8013f32:	b2ed      	uxtbls	r5, r5
 8013f34:	4304      	orrs	r4, r0
 8013f36:	ea44 00d5 	orr.w	r0, r4, r5, lsr #3
 8013f3a:	b280      	uxth	r0, r0
 8013f3c:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8013f40:	797a8d77 	.word	0x797a8d77
 8013f44:	00000000 	.word	0x00000000
 8013f48:	00ec4ba7 	.word	0x00ec4ba7
 8013f4c:	fffff800 	.word	0xfffff800

08013f50 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh>:
 8013f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f54:	ed2d 8b02 	vpush	{d8}
 8013f58:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8013f5c:	b087      	sub	sp, #28
 8013f5e:	7c41      	ldrb	r1, [r0, #17]
 8013f60:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	@ 0x48
 8013f64:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	@ 0x4c
 8013f68:	f89d a050 	ldrb.w	sl, [sp, #80]	@ 0x50
 8013f6c:	4605      	mov	r5, r0
 8013f6e:	2900      	cmp	r1, #0
 8013f70:	f000 809a 	beq.w	80140a8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x158>
 8013f74:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8013f78:	ed90 7a08 	vldr	s14, [r0, #32]
 8013f7c:	68c0      	ldr	r0, [r0, #12]
 8013f7e:	454a      	cmp	r2, r9
 8013f80:	db25      	blt.n	8013fce <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x7e>
 8013f82:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f8a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8013f8e:	bfc8      	it	gt
 8013f90:	2200      	movgt	r2, #0
 8013f92:	5882      	ldr	r2, [r0, r2]
 8013f94:	2100      	movs	r1, #0
 8013f96:	7c2d      	ldrb	r5, [r5, #16]
 8013f98:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8013f9c:	0950      	lsrs	r0, r2, #5
 8013f9e:	f408 4e78 	and.w	lr, r8, #63488	@ 0xf800
 8013fa2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8013fa6:	f3c2 0cc4 	ubfx	ip, r2, #3, #5
 8013faa:	eb04 0746 	add.w	r7, r4, r6, lsl #1
 8013fae:	2d00      	cmp	r5, #0
 8013fb0:	d044      	beq.n	801403c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 8013fb2:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8013fb6:	d141      	bne.n	801403c <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 8013fb8:	bb61      	cbnz	r1, 8014014 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xc4>
 8013fba:	ea4e 0000 	orr.w	r0, lr, r0
 8013fbe:	ea4c 0500 	orr.w	r5, ip, r0
 8013fc2:	42bc      	cmp	r4, r7
 8013fc4:	f080 8217 	bcs.w	80143f6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a6>
 8013fc8:	f824 5b02 	strh.w	r5, [r4], #2
 8013fcc:	e7f9      	b.n	8013fc2 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x72>
 8013fce:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 8013fd2:	454f      	cmp	r7, r9
 8013fd4:	dc08      	bgt.n	8013fe8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x98>
 8013fd6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fde:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8013fe2:	bfd8      	it	le
 8013fe4:	2200      	movle	r2, #0
 8013fe6:	e7d4      	b.n	8013f92 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x42>
 8013fe8:	eba9 0202 	sub.w	r2, r9, r2
 8013fec:	ee07 2a90 	vmov	s15, r2
 8013ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ff4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014004:	ee17 2a90 	vmov	r2, s15
 8014008:	bfd8      	it	le
 801400a:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 801400e:	0092      	lsls	r2, r2, #2
 8014010:	5882      	ldr	r2, [r0, r2]
 8014012:	e7c0      	b.n	8013f96 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x46>
 8014014:	b2d5      	uxtb	r5, r2
 8014016:	fa5f f888 	uxtb.w	r8, r8
 801401a:	f3c2 4a07 	ubfx	sl, r2, #16, #8
 801401e:	461e      	mov	r6, r3
 8014020:	42bc      	cmp	r4, r7
 8014022:	f080 81e8 	bcs.w	80143f6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a6>
 8014026:	4630      	mov	r0, r6
 8014028:	9500      	str	r5, [sp, #0]
 801402a:	4643      	mov	r3, r8
 801402c:	4652      	mov	r2, sl
 801402e:	4649      	mov	r1, r9
 8014030:	f7ff ff46 	bl	8013ec0 <_ZN8touchgfxL10applyNoiseEiihhh>
 8014034:	3601      	adds	r6, #1
 8014036:	f824 0b02 	strh.w	r0, [r4], #2
 801403a:	e7f1      	b.n	8014020 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xd0>
 801403c:	0e12      	lsrs	r2, r2, #24
 801403e:	fb02 f20a 	mul.w	r2, r2, sl
 8014042:	1c53      	adds	r3, r2, #1
 8014044:	eb03 2222 	add.w	r2, r3, r2, asr #8
 8014048:	1212      	asrs	r2, r2, #8
 801404a:	fb02 f50c 	mul.w	r5, r2, ip
 801404e:	fb02 f10e 	mul.w	r1, r2, lr
 8014052:	4350      	muls	r0, r2
 8014054:	f8df c3b0 	ldr.w	ip, [pc, #944]	@ 8014408 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 8014058:	43d2      	mvns	r2, r2
 801405a:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801405e:	26ff      	movs	r6, #255	@ 0xff
 8014060:	42bc      	cmp	r4, r7
 8014062:	f080 81c8 	bcs.w	80143f6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a6>
 8014066:	f8b4 e000 	ldrh.w	lr, [r4]
 801406a:	ea0e 030c 	and.w	r3, lr, ip
 801406e:	f40e 68fc 	and.w	r8, lr, #2016	@ 0x7e0
 8014072:	fb02 1303 	mla	r3, r2, r3, r1
 8014076:	fb02 0808 	mla	r8, r2, r8, r0
 801407a:	fb93 f3f6 	sdiv	r3, r3, r6
 801407e:	fb98 f8f6 	sdiv	r8, r8, r6
 8014082:	ea03 030c 	and.w	r3, r3, ip
 8014086:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801408a:	f00e 0e1f 	and.w	lr, lr, #31
 801408e:	ea43 0308 	orr.w	r3, r3, r8
 8014092:	fb02 5e0e 	mla	lr, r2, lr, r5
 8014096:	fb9e fef6 	sdiv	lr, lr, r6
 801409a:	f00e 0e1f 	and.w	lr, lr, #31
 801409e:	ea43 030e 	orr.w	r3, r3, lr
 80140a2:	f824 3b02 	strh.w	r3, [r4], #2
 80140a6:	e7db      	b.n	8014060 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x110>
 80140a8:	7c82      	ldrb	r2, [r0, #18]
 80140aa:	2a00      	cmp	r2, #0
 80140ac:	d04f      	beq.n	801414e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x1fe>
 80140ae:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80140b2:	ee07 2a90 	vmov	s15, r2
 80140b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140ba:	ee07 3a10 	vmov	s14, r3
 80140be:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80140c2:	461f      	mov	r7, r3
 80140c4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80140c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140cc:	f200 8095 	bhi.w	80141fa <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2aa>
 80140d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80140d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80140d8:	f640 71fc 	movw	r1, #4092	@ 0xffc
 80140dc:	ee37 7a66 	vsub.f32	s14, s14, s13
 80140e0:	ee06 6a90 	vmov	s13, r6
 80140e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80140e8:	68ea      	ldr	r2, [r5, #12]
 80140ea:	f895 c010 	ldrb.w	ip, [r5, #16]
 80140ee:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80140f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140f6:	bf4a      	itet	mi
 80140f8:	eebd 7ac7 	vcvtmi.s32.f32	s14, s14
 80140fc:	9602      	strpl	r6, [sp, #8]
 80140fe:	ed8d 7a02 	vstrmi	s14, [sp, #8]
 8014102:	ed95 7a08 	vldr	s14, [r5, #32]
 8014106:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801410a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801410e:	bfc8      	it	gt
 8014110:	2100      	movgt	r1, #0
 8014112:	5852      	ldr	r2, [r2, r1]
 8014114:	9902      	ldr	r1, [sp, #8]
 8014116:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 801411a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801411e:	0950      	lsrs	r0, r2, #5
 8014120:	9103      	str	r1, [sp, #12]
 8014122:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 8014126:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801412a:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 801412e:	f1bc 0f00 	cmp.w	ip, #0
 8014132:	d024      	beq.n	801417e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x22e>
 8014134:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8014138:	d121      	bne.n	801417e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x22e>
 801413a:	ea4b 0b00 	orr.w	fp, fp, r0
 801413e:	ea41 010b 	orr.w	r1, r1, fp
 8014142:	9a03      	ldr	r2, [sp, #12]
 8014144:	4294      	cmp	r4, r2
 8014146:	d255      	bcs.n	80141f4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a4>
 8014148:	f824 1b02 	strh.w	r1, [r4], #2
 801414c:	e7f9      	b.n	8014142 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x1f2>
 801414e:	ee07 9a10 	vmov	s14, r9
 8014152:	edd0 7a06 	vldr	s15, [r0, #24]
 8014156:	edd0 6a05 	vldr	s13, [r0, #20]
 801415a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801415e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014162:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014166:	ed90 7a08 	vldr	s14, [r0, #32]
 801416a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801416e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014172:	bf44      	itt	mi
 8014174:	ed90 7a07 	vldrmi	s14, [r0, #28]
 8014178:	ee77 7ac7 	vsubmi.f32	s15, s15, s14
 801417c:	e79d      	b.n	80140ba <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x16a>
 801417e:	0e12      	lsrs	r2, r2, #24
 8014180:	fb02 f20a 	mul.w	r2, r2, sl
 8014184:	f102 0c01 	add.w	ip, r2, #1
 8014188:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801418c:	1212      	asrs	r2, r2, #8
 801418e:	4350      	muls	r0, r2
 8014190:	4351      	muls	r1, r2
 8014192:	fb02 fb0b 	mul.w	fp, r2, fp
 8014196:	f8df 8270 	ldr.w	r8, [pc, #624]	@ 8014408 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 801419a:	9004      	str	r0, [sp, #16]
 801419c:	43d2      	mvns	r2, r2
 801419e:	9105      	str	r1, [sp, #20]
 80141a0:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80141a4:	f04f 0eff 	mov.w	lr, #255	@ 0xff
 80141a8:	9903      	ldr	r1, [sp, #12]
 80141aa:	428c      	cmp	r4, r1
 80141ac:	d222      	bcs.n	80141f4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a4>
 80141ae:	8820      	ldrh	r0, [r4, #0]
 80141b0:	f400 61fc 	and.w	r1, r0, #2016	@ 0x7e0
 80141b4:	460f      	mov	r7, r1
 80141b6:	9904      	ldr	r1, [sp, #16]
 80141b8:	ea00 0c08 	and.w	ip, r0, r8
 80141bc:	fb02 bc0c 	mla	ip, r2, ip, fp
 80141c0:	fb02 1107 	mla	r1, r2, r7, r1
 80141c4:	fb9c fcfe 	sdiv	ip, ip, lr
 80141c8:	fb91 f1fe 	sdiv	r1, r1, lr
 80141cc:	ea0c 0c08 	and.w	ip, ip, r8
 80141d0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80141d4:	ea4c 0101 	orr.w	r1, ip, r1
 80141d8:	f000 0c1f 	and.w	ip, r0, #31
 80141dc:	9805      	ldr	r0, [sp, #20]
 80141de:	fb02 0c0c 	mla	ip, r2, ip, r0
 80141e2:	fb9c fcfe 	sdiv	ip, ip, lr
 80141e6:	f00c 0c1f 	and.w	ip, ip, #31
 80141ea:	ea41 010c 	orr.w	r1, r1, ip
 80141ee:	f824 1b02 	strh.w	r1, [r4], #2
 80141f2:	e7d9      	b.n	80141a8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x258>
 80141f4:	9a02      	ldr	r2, [sp, #8]
 80141f6:	441a      	add	r2, r3
 80141f8:	4617      	mov	r7, r2
 80141fa:	441e      	add	r6, r3
 80141fc:	b236      	sxth	r6, r6
 80141fe:	42be      	cmp	r6, r7
 8014200:	f340 80f9 	ble.w	80143f6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a6>
 8014204:	ed95 7a07 	vldr	s14, [r5, #28]
 8014208:	ee06 7a90 	vmov	s13, r7
 801420c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014210:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014214:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801421c:	f340 80b5 	ble.w	801438a <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x43a>
 8014220:	ee06 6a10 	vmov	s12, r6
 8014224:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014228:	ed9f 8a75 	vldr	s16, [pc, #468]	@ 8014400 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b0>
 801422c:	7c2b      	ldrb	r3, [r5, #16]
 801422e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8014232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014236:	bfd8      	it	le
 8014238:	eebd 7ac7 	vcvtle.s32.f32	s14, s14
 801423c:	ed9f 6a71 	vldr	s12, [pc, #452]	@ 8014404 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b4>
 8014240:	bfd8      	it	le
 8014242:	ee17 8a10 	vmovle	r8, s14
 8014246:	ed95 7a08 	vldr	s14, [r5, #32]
 801424a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801424e:	bfc8      	it	gt
 8014250:	46b0      	movgt	r8, r6
 8014252:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8014256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801425a:	eba8 0707 	sub.w	r7, r8, r7
 801425e:	bfd8      	it	le
 8014260:	eeb0 8a46 	vmovle.f32	s16, s12
 8014264:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8014268:	eea7 8a27 	vfma.f32	s16, s14, s15
 801426c:	b1db      	cbz	r3, 80142a6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x356>
 801426e:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8014272:	d118      	bne.n	80142a6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x356>
 8014274:	42bc      	cmp	r4, r7
 8014276:	d262      	bcs.n	801433e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3ee>
 8014278:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801427c:	68eb      	ldr	r3, [r5, #12]
 801427e:	ee17 0a90 	vmov	r0, s15
 8014282:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8014286:	b2d3      	uxtb	r3, r2
 8014288:	9300      	str	r3, [sp, #0]
 801428a:	4649      	mov	r1, r9
 801428c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8014290:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8014294:	f7ff fe14 	bl	8013ec0 <_ZN8touchgfxL10applyNoiseEiihhh>
 8014298:	f824 0b02 	strh.w	r0, [r4], #2
 801429c:	edd5 7a08 	vldr	s15, [r5, #32]
 80142a0:	ee38 8a27 	vadd.f32	s16, s16, s15
 80142a4:	e7e6      	b.n	8014274 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x324>
 80142a6:	f8df b160 	ldr.w	fp, [pc, #352]	@ 8014408 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 80142aa:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 80142ae:	42bc      	cmp	r4, r7
 80142b0:	d245      	bcs.n	801433e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3ee>
 80142b2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80142b6:	68eb      	ldr	r3, [r5, #12]
 80142b8:	f8b4 e000 	ldrh.w	lr, [r4]
 80142bc:	ee17 2a90 	vmov	r2, s15
 80142c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80142c4:	0e13      	lsrs	r3, r2, #24
 80142c6:	fb03 f30a 	mul.w	r3, r3, sl
 80142ca:	1c58      	adds	r0, r3, #1
 80142cc:	eb00 2023 	add.w	r0, r0, r3, asr #8
 80142d0:	1200      	asrs	r0, r0, #8
 80142d2:	ea6f 0c00 	mvn.w	ip, r0
 80142d6:	fa5f fc8c 	uxtb.w	ip, ip
 80142da:	ea0b 2112 	and.w	r1, fp, r2, lsr #8
 80142de:	ea0e 030b 	and.w	r3, lr, fp
 80142e2:	fb0c f303 	mul.w	r3, ip, r3
 80142e6:	b289      	uxth	r1, r1
 80142e8:	fb00 3101 	mla	r1, r0, r1, r3
 80142ec:	fb91 f1f9 	sdiv	r1, r1, r9
 80142f0:	ea01 030b 	and.w	r3, r1, fp
 80142f4:	9302      	str	r3, [sp, #8]
 80142f6:	0953      	lsrs	r3, r2, #5
 80142f8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80142fc:	4619      	mov	r1, r3
 80142fe:	f40e 63fc 	and.w	r3, lr, #2016	@ 0x7e0
 8014302:	fb0c f303 	mul.w	r3, ip, r3
 8014306:	fb00 3301 	mla	r3, r0, r1, r3
 801430a:	f00e 0e1f 	and.w	lr, lr, #31
 801430e:	9902      	ldr	r1, [sp, #8]
 8014310:	fb93 f3f9 	sdiv	r3, r3, r9
 8014314:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8014318:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801431c:	fb0c fc0e 	mul.w	ip, ip, lr
 8014320:	4319      	orrs	r1, r3
 8014322:	fb00 c002 	mla	r0, r0, r2, ip
 8014326:	fb90 f0f9 	sdiv	r0, r0, r9
 801432a:	f000 001f 	and.w	r0, r0, #31
 801432e:	4301      	orrs	r1, r0
 8014330:	f824 1b02 	strh.w	r1, [r4], #2
 8014334:	edd5 7a08 	vldr	s15, [r5, #32]
 8014338:	ee38 8a27 	vadd.f32	s16, s16, s15
 801433c:	e7b7      	b.n	80142ae <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x35e>
 801433e:	4546      	cmp	r6, r8
 8014340:	dd59      	ble.n	80143f6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a6>
 8014342:	edd5 7a08 	vldr	s15, [r5, #32]
 8014346:	68ea      	ldr	r2, [r5, #12]
 8014348:	7c29      	ldrb	r1, [r5, #16]
 801434a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801434e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014352:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8014356:	bfd8      	it	le
 8014358:	2300      	movle	r3, #0
 801435a:	eba6 0608 	sub.w	r6, r6, r8
 801435e:	58d2      	ldr	r2, [r2, r3]
 8014360:	0a10      	lsrs	r0, r2, #8
 8014362:	0953      	lsrs	r3, r2, #5
 8014364:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8014368:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801436c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8014370:	f3c2 07c4 	ubfx	r7, r2, #3, #5
 8014374:	b159      	cbz	r1, 801438e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x43e>
 8014376:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801437a:	d108      	bne.n	801438e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x43e>
 801437c:	4318      	orrs	r0, r3
 801437e:	4338      	orrs	r0, r7
 8014380:	42b4      	cmp	r4, r6
 8014382:	d238      	bcs.n	80143f6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a6>
 8014384:	f824 0b02 	strh.w	r0, [r4], #2
 8014388:	e7fa      	b.n	8014380 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x430>
 801438a:	46b8      	mov	r8, r7
 801438c:	e7d9      	b.n	8014342 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3f2>
 801438e:	0e12      	lsrs	r2, r2, #24
 8014390:	fb02 f10a 	mul.w	r1, r2, sl
 8014394:	1c4a      	adds	r2, r1, #1
 8014396:	eb02 2221 	add.w	r2, r2, r1, asr #8
 801439a:	1212      	asrs	r2, r2, #8
 801439c:	fb02 f507 	mul.w	r5, r2, r7
 80143a0:	4350      	muls	r0, r2
 80143a2:	4353      	muls	r3, r2
 80143a4:	f8df c060 	ldr.w	ip, [pc, #96]	@ 8014408 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b8>
 80143a8:	43d2      	mvns	r2, r2
 80143aa:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80143ae:	27ff      	movs	r7, #255	@ 0xff
 80143b0:	42b4      	cmp	r4, r6
 80143b2:	d220      	bcs.n	80143f6 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a6>
 80143b4:	f8b4 e000 	ldrh.w	lr, [r4]
 80143b8:	ea0e 010c 	and.w	r1, lr, ip
 80143bc:	f40e 68fc 	and.w	r8, lr, #2016	@ 0x7e0
 80143c0:	fb02 0101 	mla	r1, r2, r1, r0
 80143c4:	fb02 3808 	mla	r8, r2, r8, r3
 80143c8:	fb91 f1f7 	sdiv	r1, r1, r7
 80143cc:	fb98 f8f7 	sdiv	r8, r8, r7
 80143d0:	ea01 010c 	and.w	r1, r1, ip
 80143d4:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80143d8:	f00e 0e1f 	and.w	lr, lr, #31
 80143dc:	ea41 0108 	orr.w	r1, r1, r8
 80143e0:	fb02 5e0e 	mla	lr, r2, lr, r5
 80143e4:	fb9e fef7 	sdiv	lr, lr, r7
 80143e8:	f00e 0e1f 	and.w	lr, lr, #31
 80143ec:	ea41 010e 	orr.w	r1, r1, lr
 80143f0:	f824 1b02 	strh.w	r1, [r4], #2
 80143f4:	e7dc      	b.n	80143b0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x460>
 80143f6:	b007      	add	sp, #28
 80143f8:	ecbd 8b02 	vpop	{d8}
 80143fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014400:	00000000 	.word	0x00000000
 8014404:	447ffffe 	.word	0x447ffffe
 8014408:	fffff800 	.word	0xfffff800

0801440c <_ZNK8touchgfx27PainterRGB565LinearGradient8tearDownEv>:
 801440c:	4770      	bx	lr
	...

08014410 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8014410:	4b06      	ldr	r3, [pc, #24]	@ (801442c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 8014412:	60c1      	str	r1, [r0, #12]
 8014414:	094a      	lsrs	r2, r1, #5
 8014416:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 801441a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801441e:	4313      	orrs	r3, r2
 8014420:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8014424:	4319      	orrs	r1, r3
 8014426:	8201      	strh	r1, [r0, #16]
 8014428:	4770      	bx	lr
 801442a:	bf00      	nop
 801442c:	fffff800 	.word	0xfffff800

08014430 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8014430:	f1a0 0008 	sub.w	r0, r0, #8
 8014434:	e7ec      	b.n	8014410 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 8014436:	bf00      	nop

08014438 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8014438:	b508      	push	{r3, lr}
 801443a:	4b05      	ldr	r3, [pc, #20]	@ (8014450 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 801443c:	6818      	ldr	r0, [r3, #0]
 801443e:	6803      	ldr	r3, [r0, #0]
 8014440:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014444:	4798      	blx	r3
 8014446:	1e43      	subs	r3, r0, #1
 8014448:	4258      	negs	r0, r3
 801444a:	4158      	adcs	r0, r3
 801444c:	bd08      	pop	{r3, pc}
 801444e:	bf00      	nop
 8014450:	200126e0 	.word	0x200126e0

08014454 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 8014454:	b430      	push	{r4, r5}
 8014456:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 801445a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801445e:	8a02      	ldrh	r2, [r0, #16]
 8014460:	9202      	str	r2, [sp, #8]
 8014462:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014466:	68c2      	ldr	r2, [r0, #12]
 8014468:	4629      	mov	r1, r5
 801446a:	4620      	mov	r0, r4
 801446c:	bc30      	pop	{r4, r5}
 801446e:	f7fc bfdd 	b.w	801142c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08014472 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8014472:	f7fc bfc3 	b.w	80113fc <_ZN8touchgfx5paint8tearDownEv>

08014476 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8014476:	2300      	movs	r3, #0
 8014478:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801447a:	8503      	strh	r3, [r0, #40]	@ 0x28
 801447c:	8543      	strh	r3, [r0, #42]	@ 0x2a
 801447e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014480:	6980      	ldr	r0, [r0, #24]
 8014482:	b110      	cbz	r0, 801448a <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8014484:	6803      	ldr	r3, [r0, #0]
 8014486:	691b      	ldr	r3, [r3, #16]
 8014488:	4718      	bx	r3
 801448a:	4770      	bx	lr

0801448c <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 801448c:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8014490:	4770      	bx	lr

08014492 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8014492:	b538      	push	{r3, r4, r5, lr}
 8014494:	0e0b      	lsrs	r3, r1, #24
 8014496:	7783      	strb	r3, [r0, #30]
 8014498:	6803      	ldr	r3, [r0, #0]
 801449a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801449c:	4604      	mov	r4, r0
 801449e:	460d      	mov	r5, r1
 80144a0:	4798      	blx	r3
 80144a2:	6803      	ldr	r3, [r0, #0]
 80144a4:	4629      	mov	r1, r5
 80144a6:	689b      	ldr	r3, [r3, #8]
 80144a8:	4798      	blx	r3
 80144aa:	6823      	ldr	r3, [r4, #0]
 80144ac:	4620      	mov	r0, r4
 80144ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80144b0:	4798      	blx	r3
 80144b2:	61a0      	str	r0, [r4, #24]
 80144b4:	bd38      	pop	{r3, r4, r5, pc}

080144b6 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 80144b6:	7741      	strb	r1, [r0, #29]
 80144b8:	4770      	bx	lr

080144ba <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 80144ba:	b530      	push	{r4, r5, lr}
 80144bc:	460d      	mov	r5, r1
 80144be:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 80144c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80144c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80144c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80144c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80144ca:	682b      	ldr	r3, [r5, #0]
 80144cc:	6023      	str	r3, [r4, #0]
 80144ce:	bd30      	pop	{r4, r5, pc}

080144d0 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 80144d0:	b538      	push	{r3, r4, r5, lr}
 80144d2:	4604      	mov	r4, r0
 80144d4:	1d03      	adds	r3, r0, #4
 80144d6:	6808      	ldr	r0, [r1, #0]
 80144d8:	6849      	ldr	r1, [r1, #4]
 80144da:	c303      	stmia	r3!, {r0, r1}
 80144dc:	6813      	ldr	r3, [r2, #0]
 80144de:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 80144e2:	6853      	ldr	r3, [r2, #4]
 80144e4:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 80144e8:	2500      	movs	r5, #0
 80144ea:	61a5      	str	r5, [r4, #24]
 80144ec:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80144f0:	f005 fe36 	bl	801a160 <_ZN8touchgfx9Matrix3x35resetEv>
 80144f4:	23ff      	movs	r3, #255	@ 0xff
 80144f6:	7763      	strb	r3, [r4, #29]
 80144f8:	77a3      	strb	r3, [r4, #30]
 80144fa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80144fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8014500:	2301      	movs	r3, #1
 8014502:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8014506:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 801450a:	bd38      	pop	{r3, r4, r5, pc}

0801450c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 801450c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014510:	ed2d 8b0a 	vpush	{d8-d12}
 8014514:	ee70 7a41 	vsub.f32	s15, s0, s2
 8014518:	b086      	sub	sp, #24
 801451a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801451e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014522:	4605      	mov	r5, r0
 8014524:	eeb0 ba40 	vmov.f32	s22, s0
 8014528:	eef0 ba60 	vmov.f32	s23, s1
 801452c:	eef0 aa41 	vmov.f32	s21, s2
 8014530:	eeb0 aa61 	vmov.f32	s20, s3
 8014534:	eeb0 ca42 	vmov.f32	s24, s4
 8014538:	eef0 ca62 	vmov.f32	s25, s5
 801453c:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 8014540:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8014542:	6802      	ldr	r2, [r0, #0]
 8014544:	d112      	bne.n	801456c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8014546:	ee70 7ae1 	vsub.f32	s15, s1, s3
 801454a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014552:	d10b      	bne.n	801456c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8014554:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8014558:	3901      	subs	r1, #1
 801455a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 801455c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014560:	b006      	add	sp, #24
 8014562:	ecbd 8b0a 	vpop	{d8-d12}
 8014566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801456a:	4710      	bx	r2
 801456c:	23ff      	movs	r3, #255	@ 0xff
 801456e:	77ab      	strb	r3, [r5, #30]
 8014570:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8014572:	4628      	mov	r0, r5
 8014574:	4798      	blx	r3
 8014576:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 801457a:	eef0 0a6b 	vmov.f32	s1, s23
 801457e:	eeb0 0a4b 	vmov.f32	s0, s22
 8014582:	4604      	mov	r4, r0
 8014584:	4640      	mov	r0, r8
 8014586:	f005 fe9a 	bl	801a2be <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801458a:	4640      	mov	r0, r8
 801458c:	eef0 8a40 	vmov.f32	s17, s0
 8014590:	eef0 9a60 	vmov.f32	s19, s1
 8014594:	ed8d 0a00 	vstr	s0, [sp]
 8014598:	edcd 0a01 	vstr	s1, [sp, #4]
 801459c:	eeb0 0a6a 	vmov.f32	s0, s21
 80145a0:	eef0 0a4a 	vmov.f32	s1, s20
 80145a4:	f005 fe8b 	bl	801a2be <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80145a8:	eef4 8a40 	vcmp.f32	s17, s0
 80145ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145b0:	eef4 9a60 	vcmp.f32	s19, s1
 80145b4:	bf0c      	ite	eq
 80145b6:	2301      	moveq	r3, #1
 80145b8:	2300      	movne	r3, #0
 80145ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145be:	eef4 8a40 	vcmp.f32	s17, s0
 80145c2:	7463      	strb	r3, [r4, #17]
 80145c4:	bf0c      	ite	eq
 80145c6:	2301      	moveq	r3, #1
 80145c8:	2300      	movne	r3, #0
 80145ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ce:	eeb0 8a40 	vmov.f32	s16, s0
 80145d2:	eeb0 9a60 	vmov.f32	s18, s1
 80145d6:	ed8d 0a02 	vstr	s0, [sp, #8]
 80145da:	edcd 0a03 	vstr	s1, [sp, #12]
 80145de:	74a3      	strb	r3, [r4, #18]
 80145e0:	d024      	beq.n	801462c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 80145e2:	eef4 9a60 	vcmp.f32	s19, s1
 80145e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ea:	d01f      	beq.n	801462c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 80145ec:	ee7a aacb 	vsub.f32	s21, s21, s22
 80145f0:	ee3a aa6b 	vsub.f32	s20, s20, s23
 80145f4:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 80145f8:	4640      	mov	r0, r8
 80145fa:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 80145fe:	eef0 0a6b 	vmov.f32	s1, s23
 8014602:	eeb0 0a4b 	vmov.f32	s0, s22
 8014606:	eea7 0acc 	vfms.f32	s0, s15, s24
 801460a:	eeec 0a87 	vfma.f32	s1, s25, s14
 801460e:	f005 fe56 	bl	801a2be <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014612:	ed8d 0a04 	vstr	s0, [sp, #16]
 8014616:	ee30 0a68 	vsub.f32	s0, s0, s17
 801461a:	edcd 0a05 	vstr	s1, [sp, #20]
 801461e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014626:	d120      	bne.n	801466a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x15e>
 8014628:	2301      	movs	r3, #1
 801462a:	74a3      	strb	r3, [r4, #18]
 801462c:	7c63      	ldrb	r3, [r4, #17]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d050      	beq.n	80146d4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1c8>
 8014632:	ee39 7a69 	vsub.f32	s14, s18, s19
 8014636:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8014728 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x21c>
 801463a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801463e:	eef4 9ac9 	vcmpe.f32	s19, s18
 8014642:	edc4 7a08 	vstr	s15, [r4, #32]
 8014646:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 801464a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801464e:	ee17 3a90 	vmov	r3, s15
 8014652:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 8014656:	b21a      	sxth	r2, r3
 8014658:	ee17 3a90 	vmov	r3, s15
 801465c:	b21b      	sxth	r3, r3
 801465e:	bf47      	ittee	mi
 8014660:	80e3      	strhmi	r3, [r4, #6]
 8014662:	8122      	strhmi	r2, [r4, #8]
 8014664:	80e2      	strhpl	r2, [r4, #6]
 8014666:	8123      	strhpl	r3, [r4, #8]
 8014668:	e02c      	b.n	80146c4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1b8>
 801466a:	ee70 0ae9 	vsub.f32	s1, s1, s19
 801466e:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8014672:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801467a:	edc4 7a05 	vstr	s15, [r4, #20]
 801467e:	d102      	bne.n	8014686 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17a>
 8014680:	2301      	movs	r3, #1
 8014682:	7463      	strb	r3, [r4, #17]
 8014684:	e7d2      	b.n	801462c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8014686:	eeb0 7a69 	vmov.f32	s14, s19
 801468a:	eea8 7ae7 	vfms.f32	s14, s17, s15
 801468e:	ee39 9a69 	vsub.f32	s18, s18, s19
 8014692:	ed84 7a06 	vstr	s14, [r4, #24]
 8014696:	ee89 7a27 	vdiv.f32	s14, s18, s15
 801469a:	ee38 8a68 	vsub.f32	s16, s16, s17
 801469e:	ee38 8a47 	vsub.f32	s16, s16, s14
 80146a2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 801472c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 80146a6:	ed84 8a07 	vstr	s16, [r4, #28]
 80146aa:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80146ae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80146b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146b6:	edc4 7a08 	vstr	s15, [r4, #32]
 80146ba:	d503      	bpl.n	80146c4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1b8>
 80146bc:	eeb1 8a48 	vneg.f32	s16, s16
 80146c0:	ed84 8a07 	vstr	s16, [r4, #28]
 80146c4:	60e7      	str	r7, [r4, #12]
 80146c6:	7426      	strb	r6, [r4, #16]
 80146c8:	61ac      	str	r4, [r5, #24]
 80146ca:	b006      	add	sp, #24
 80146cc:	ecbd 8b0a 	vpop	{d8-d12}
 80146d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146d4:	7ca3      	ldrb	r3, [r4, #18]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d0f4      	beq.n	80146c4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1b8>
 80146da:	ee38 7a68 	vsub.f32	s14, s16, s17
 80146de:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8014728 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x21c>
 80146e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80146e6:	eef4 8ac8 	vcmpe.f32	s17, s16
 80146ea:	edc4 7a08 	vstr	s15, [r4, #32]
 80146ee:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80146f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f6:	ee17 3a90 	vmov	r3, s15
 80146fa:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 80146fe:	b21a      	sxth	r2, r3
 8014700:	ee17 3a90 	vmov	r3, s15
 8014704:	b21b      	sxth	r3, r3
 8014706:	bf47      	ittee	mi
 8014708:	80e3      	strhmi	r3, [r4, #6]
 801470a:	8122      	strhmi	r2, [r4, #8]
 801470c:	80e2      	strhpl	r2, [r4, #6]
 801470e:	8123      	strhpl	r3, [r4, #8]
 8014710:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8014714:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014718:	1a9b      	subs	r3, r3, r2
 801471a:	ee07 3a90 	vmov	s15, r3
 801471e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014722:	edc4 7a07 	vstr	s15, [r4, #28]
 8014726:	e7cd      	b.n	80146c4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1b8>
 8014728:	447ffffe 	.word	0x447ffffe
 801472c:	44800000 	.word	0x44800000

08014730 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8014730:	b510      	push	{r4, lr}
 8014732:	2100      	movs	r1, #0
 8014734:	ed2d 8b02 	vpush	{d8}
 8014738:	eef0 8a62 	vmov.f32	s17, s5
 801473c:	4604      	mov	r4, r0
 801473e:	eeb0 8a42 	vmov.f32	s16, s4
 8014742:	f015 fc6d 	bl	802a020 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8014746:	eef0 7a68 	vmov.f32	s15, s17
 801474a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801474e:	6823      	ldr	r3, [r4, #0]
 8014750:	ee17 2a90 	vmov	r2, s15
 8014754:	eef0 7a48 	vmov.f32	s15, s16
 8014758:	ecbd 8b02 	vpop	{d8}
 801475c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014760:	4620      	mov	r0, r4
 8014762:	689b      	ldr	r3, [r3, #8]
 8014764:	ee17 1a90 	vmov	r1, s15
 8014768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801476c:	4718      	bx	r3

0801476e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 801476e:	b510      	push	{r4, lr}
 8014770:	2100      	movs	r1, #0
 8014772:	ed2d 8b02 	vpush	{d8}
 8014776:	eef0 8a63 	vmov.f32	s17, s7
 801477a:	4604      	mov	r4, r0
 801477c:	eeb0 8a43 	vmov.f32	s16, s6
 8014780:	f015 fd10 	bl	802a1a4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8014784:	eef0 7a68 	vmov.f32	s15, s17
 8014788:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801478c:	6823      	ldr	r3, [r4, #0]
 801478e:	ee17 2a90 	vmov	r2, s15
 8014792:	eef0 7a48 	vmov.f32	s15, s16
 8014796:	ecbd 8b02 	vpop	{d8}
 801479a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801479e:	4620      	mov	r0, r4
 80147a0:	689b      	ldr	r3, [r3, #8]
 80147a2:	ee17 1a90 	vmov	r1, s15
 80147a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147aa:	4718      	bx	r3

080147ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 80147ac:	b513      	push	{r0, r1, r4, lr}
 80147ae:	4604      	mov	r4, r0
 80147b0:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80147b2:	f005 fd84 	bl	801a2be <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80147b6:	eef0 7a60 	vmov.f32	s15, s1
 80147ba:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80147be:	4620      	mov	r0, r4
 80147c0:	ee17 2a90 	vmov	r2, s15
 80147c4:	eef0 7a40 	vmov.f32	s15, s0
 80147c8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80147cc:	ee17 1a90 	vmov	r1, s15
 80147d0:	b002      	add	sp, #8
 80147d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147d6:	f015 bb7d 	b.w	8029ed4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

080147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 80147da:	b513      	push	{r0, r1, r4, lr}
 80147dc:	4604      	mov	r4, r0
 80147de:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80147e0:	f005 fd6d 	bl	801a2be <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80147e4:	eef0 7a60 	vmov.f32	s15, s1
 80147e8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80147ec:	4620      	mov	r0, r4
 80147ee:	ee17 2a90 	vmov	r2, s15
 80147f2:	eef0 7a40 	vmov.f32	s15, s0
 80147f6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80147fa:	ee17 1a90 	vmov	r1, s15
 80147fe:	b002      	add	sp, #8
 8014800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014804:	f015 bbb3 	b.w	8029f6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

08014808 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 8014808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801480a:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 801480e:	2400      	movs	r4, #0
 8014810:	9f07      	ldr	r7, [sp, #28]
 8014812:	4463      	add	r3, ip
 8014814:	4626      	mov	r6, r4
 8014816:	f04f 0e01 	mov.w	lr, #1
 801481a:	4563      	cmp	r3, ip
 801481c:	d02d      	beq.n	801487a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 801481e:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8014822:	2d06      	cmp	r5, #6
 8014824:	d8f9      	bhi.n	801481a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8014826:	fa0e f505 	lsl.w	r5, lr, r5
 801482a:	f015 0f66 	tst.w	r5, #102	@ 0x66
 801482e:	d10d      	bne.n	801484c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8014830:	f015 0f10 	tst.w	r5, #16
 8014834:	d117      	bne.n	8014866 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 8014836:	072d      	lsls	r5, r5, #28
 8014838:	d5ef      	bpl.n	801481a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801483a:	3801      	subs	r0, #1
 801483c:	b91e      	cbnz	r6, 8014846 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 801483e:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8014842:	682d      	ldr	r5, [r5, #0]
 8014844:	600d      	str	r5, [r1, #0]
 8014846:	b96c      	cbnz	r4, 8014864 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8014848:	2601      	movs	r6, #1
 801484a:	e7e6      	b.n	801481a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801484c:	b926      	cbnz	r6, 8014858 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 801484e:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8014852:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8014856:	600b      	str	r3, [r1, #0]
 8014858:	b924      	cbnz	r4, 8014864 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801485a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801485e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014862:	6013      	str	r3, [r2, #0]
 8014864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014866:	3801      	subs	r0, #1
 8014868:	b91c      	cbnz	r4, 8014872 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 801486a:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 801486e:	6824      	ldr	r4, [r4, #0]
 8014870:	6014      	str	r4, [r2, #0]
 8014872:	2e00      	cmp	r6, #0
 8014874:	d1f6      	bne.n	8014864 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8014876:	2401      	movs	r4, #1
 8014878:	e7cf      	b.n	801481a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801487a:	b90e      	cbnz	r6, 8014880 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 801487c:	2300      	movs	r3, #0
 801487e:	600b      	str	r3, [r1, #0]
 8014880:	2c00      	cmp	r4, #0
 8014882:	d1ef      	bne.n	8014864 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8014884:	2300      	movs	r3, #0
 8014886:	e7ec      	b.n	8014862 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08014888 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8014888:	b538      	push	{r3, r4, r5, lr}
 801488a:	4604      	mov	r4, r0
 801488c:	ed2d 8b0a 	vpush	{d8-d12}
 8014890:	460d      	mov	r5, r1
 8014892:	eef0 ba40 	vmov.f32	s23, s0
 8014896:	eeb0 ca60 	vmov.f32	s24, s1
 801489a:	eef0 aa41 	vmov.f32	s21, s2
 801489e:	eeb0 ba61 	vmov.f32	s22, s3
 80148a2:	eeb0 9a42 	vmov.f32	s18, s4
 80148a6:	eef0 9a62 	vmov.f32	s19, s5
 80148aa:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 80148ae:	ee7b 8a29 	vadd.f32	s17, s22, s19
 80148b2:	ee3a 8a89 	vadd.f32	s16, s21, s18
 80148b6:	ee68 8a8a 	vmul.f32	s17, s17, s20
 80148ba:	ee28 8a0a 	vmul.f32	s16, s16, s20
 80148be:	ee3c 0a68 	vsub.f32	s0, s24, s17
 80148c2:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 80148c6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80148ca:	eea7 0aa7 	vfma.f32	s0, s15, s15
 80148ce:	f015 fe43 	bl	802a558 <sqrtf>
 80148d2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80148d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148da:	d12e      	bne.n	801493a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 80148dc:	ee79 7a6a 	vsub.f32	s15, s18, s21
 80148e0:	ee39 7acb 	vsub.f32	s14, s19, s22
 80148e4:	eeb0 8a6a 	vmov.f32	s16, s21
 80148e8:	eef0 8a4b 	vmov.f32	s17, s22
 80148ec:	eea7 8a8a 	vfma.f32	s16, s15, s20
 80148f0:	eee7 8a0a 	vfma.f32	s17, s14, s20
 80148f4:	eea7 8a0a 	vfma.f32	s16, s14, s20
 80148f8:	eee7 8aca 	vfms.f32	s17, s15, s20
 80148fc:	2d02      	cmp	r5, #2
 80148fe:	dc2f      	bgt.n	8014960 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 8014900:	3501      	adds	r5, #1
 8014902:	eef0 1a4b 	vmov.f32	s3, s22
 8014906:	eeb0 1a6a 	vmov.f32	s2, s21
 801490a:	4629      	mov	r1, r5
 801490c:	eef0 2a68 	vmov.f32	s5, s17
 8014910:	eeb0 2a48 	vmov.f32	s4, s16
 8014914:	eef0 0a4c 	vmov.f32	s1, s24
 8014918:	eeb0 0a6b 	vmov.f32	s0, s23
 801491c:	4620      	mov	r0, r4
 801491e:	f7ff ffb3 	bl	8014888 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8014922:	eef0 0a68 	vmov.f32	s1, s17
 8014926:	eeb0 0a48 	vmov.f32	s0, s16
 801492a:	4620      	mov	r0, r4
 801492c:	f7ff ff55 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014930:	eeb0 ba68 	vmov.f32	s22, s17
 8014934:	eef0 aa48 	vmov.f32	s21, s16
 8014938:	e7b9      	b.n	80148ae <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 801493a:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801493e:	ee38 8a6b 	vsub.f32	s16, s16, s23
 8014942:	ee78 8acc 	vsub.f32	s17, s17, s24
 8014946:	ee28 7a27 	vmul.f32	s14, s16, s15
 801494a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801494e:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8014952:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8014956:	ee3b 8a88 	vadd.f32	s16, s23, s16
 801495a:	ee7c 8a28 	vadd.f32	s17, s24, s17
 801495e:	e7cd      	b.n	80148fc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8014960:	eef0 0a68 	vmov.f32	s1, s17
 8014964:	eeb0 0a48 	vmov.f32	s0, s16
 8014968:	4620      	mov	r0, r4
 801496a:	f7ff ff36 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801496e:	ecbd 8b0a 	vpop	{d8-d12}
 8014972:	bd38      	pop	{r3, r4, r5, pc}

08014974 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8014974:	b510      	push	{r4, lr}
 8014976:	ed2d 8b0a 	vpush	{d8-d12}
 801497a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 801497e:	2b02      	cmp	r3, #2
 8014980:	4604      	mov	r4, r0
 8014982:	eeb0 ca40 	vmov.f32	s24, s0
 8014986:	eeb0 9a60 	vmov.f32	s18, s1
 801498a:	eef0 9a41 	vmov.f32	s19, s2
 801498e:	eef0 8a61 	vmov.f32	s17, s3
 8014992:	eeb0 ba42 	vmov.f32	s22, s4
 8014996:	eef0 ba62 	vmov.f32	s23, s5
 801499a:	eeb0 aa43 	vmov.f32	s20, s6
 801499e:	eef0 aa63 	vmov.f32	s21, s7
 80149a2:	eeb0 8a44 	vmov.f32	s16, s8
 80149a6:	eef0 ca64 	vmov.f32	s25, s9
 80149aa:	d12c      	bne.n	8014a06 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 80149ac:	eef0 0a62 	vmov.f32	s1, s5
 80149b0:	eeb0 0a42 	vmov.f32	s0, s4
 80149b4:	f7ff ff11 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80149b8:	ee79 9acb 	vsub.f32	s19, s19, s22
 80149bc:	ee7a caec 	vsub.f32	s25, s21, s25
 80149c0:	ee78 8aeb 	vsub.f32	s17, s17, s23
 80149c4:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80149c8:	ee69 9aac 	vmul.f32	s19, s19, s25
 80149cc:	ee28 8a88 	vmul.f32	s16, s17, s16
 80149d0:	eef4 9ac8 	vcmpe.f32	s19, s16
 80149d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149d8:	db0f      	blt.n	80149fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 80149da:	2101      	movs	r1, #1
 80149dc:	eef0 2a6a 	vmov.f32	s5, s21
 80149e0:	eeb0 2a4a 	vmov.f32	s4, s20
 80149e4:	eef0 1a6b 	vmov.f32	s3, s23
 80149e8:	eeb0 1a4b 	vmov.f32	s2, s22
 80149ec:	eef0 0a49 	vmov.f32	s1, s18
 80149f0:	eeb0 0a4c 	vmov.f32	s0, s24
 80149f4:	4620      	mov	r0, r4
 80149f6:	f7ff ff47 	bl	8014888 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80149fa:	eef0 0a6a 	vmov.f32	s1, s21
 80149fe:	eeb0 0a4a 	vmov.f32	s0, s20
 8014a02:	4620      	mov	r0, r4
 8014a04:	e035      	b.n	8014a72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 8014a06:	2b01      	cmp	r3, #1
 8014a08:	d138      	bne.n	8014a7c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8014a0a:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8014a0e:	ee33 6a48 	vsub.f32	s12, s6, s16
 8014a12:	ee71 7a42 	vsub.f32	s15, s2, s4
 8014a16:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8014a1a:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8014a1e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014a22:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a2a:	d027      	beq.n	8014a7c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8014a2c:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8014a30:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8014a34:	eea4 8a83 	vfma.f32	s16, s9, s6
 8014a38:	eee1 8a22 	vfma.f32	s17, s2, s5
 8014a3c:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8014a40:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8014a44:	eee6 7a28 	vfma.f32	s15, s12, s17
 8014a48:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8014a4c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8014a50:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8014a54:	ee3c ca40 	vsub.f32	s24, s24, s0
 8014a58:	ee39 9a60 	vsub.f32	s18, s18, s1
 8014a5c:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8014a60:	ee29 9a09 	vmul.f32	s18, s18, s18
 8014a64:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8014a68:	eef4 7ac9 	vcmpe.f32	s15, s18
 8014a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a70:	db04      	blt.n	8014a7c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8014a72:	f7ff feb2 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014a76:	ecbd 8b0a 	vpop	{d8-d12}
 8014a7a:	bd10      	pop	{r4, pc}
 8014a7c:	eef0 0a6b 	vmov.f32	s1, s23
 8014a80:	eeb0 0a4b 	vmov.f32	s0, s22
 8014a84:	4620      	mov	r0, r4
 8014a86:	f7ff fea8 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014a8a:	e7b6      	b.n	80149fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08014a8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8014a8c:	b510      	push	{r4, lr}
 8014a8e:	ed2d 8b0c 	vpush	{d8-d13}
 8014a92:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8014a96:	4604      	mov	r4, r0
 8014a98:	eeb0 9a40 	vmov.f32	s18, s0
 8014a9c:	eef0 9a60 	vmov.f32	s19, s1
 8014aa0:	eef0 aa41 	vmov.f32	s21, s2
 8014aa4:	eeb0 ba61 	vmov.f32	s22, s3
 8014aa8:	b933      	cbnz	r3, 8014ab8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 8014aaa:	f7ff fe96 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014aae:	eef0 0a4b 	vmov.f32	s1, s22
 8014ab2:	eeb0 0a6a 	vmov.f32	s0, s21
 8014ab6:	e015      	b.n	8014ae4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8014ab8:	ee71 8a40 	vsub.f32	s17, s2, s0
 8014abc:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8014ac0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014ac4:	2b02      	cmp	r3, #2
 8014ac6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014aca:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014ace:	d10f      	bne.n	8014af0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8014ad0:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8014ad4:	ee30 0a08 	vadd.f32	s0, s0, s16
 8014ad8:	f7ff fe7f 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014adc:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8014ae0:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	f7ff fe78 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014aea:	ecbd 8b0c 	vpop	{d8-d13}
 8014aee:	bd10      	pop	{r4, pc}
 8014af0:	f7ff fe73 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014af4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8014c2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 8014af8:	eddf ba4d 	vldr	s23, [pc, #308]	@ 8014c30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8014afc:	ed9f ca4d 	vldr	s24, [pc, #308]	@ 8014c34 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 8014b00:	eddf ca4d 	vldr	s25, [pc, #308]	@ 8014c38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8014b04:	ed9f da4d 	vldr	s26, [pc, #308]	@ 8014c3c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8014b08:	eef0 0a69 	vmov.f32	s1, s19
 8014b0c:	eeb0 0a49 	vmov.f32	s0, s18
 8014b10:	eee8 0a27 	vfma.f32	s1, s16, s15
 8014b14:	4620      	mov	r0, r4
 8014b16:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8014b1a:	eeb1 aa68 	vneg.f32	s20, s17
 8014b1e:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8014b22:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8014b26:	f7ff fe58 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014b2a:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8014c40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8014b2e:	eef0 0a69 	vmov.f32	s1, s19
 8014b32:	eeb0 0a49 	vmov.f32	s0, s18
 8014b36:	eee8 0a27 	vfma.f32	s1, s16, s15
 8014b3a:	4620      	mov	r0, r4
 8014b3c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8014b40:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8014b44:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8014b48:	f7ff fe47 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014b4c:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 8014c44 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8014b50:	eef0 0a69 	vmov.f32	s1, s19
 8014b54:	eeb0 0a49 	vmov.f32	s0, s18
 8014b58:	eee8 0a27 	vfma.f32	s1, s16, s15
 8014b5c:	4620      	mov	r0, r4
 8014b5e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8014b62:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8014b66:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8014b6a:	f7ff fe36 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014b6e:	eddf 7a36 	vldr	s15, [pc, #216]	@ 8014c48 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 8014b72:	eef0 0a69 	vmov.f32	s1, s19
 8014b76:	eeb0 0a49 	vmov.f32	s0, s18
 8014b7a:	eee8 0a27 	vfma.f32	s1, s16, s15
 8014b7e:	4620      	mov	r0, r4
 8014b80:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8014b84:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8014b88:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8014b8c:	f7ff fe25 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014b90:	ee79 0a88 	vadd.f32	s1, s19, s16
 8014b94:	ee39 0a28 	vadd.f32	s0, s18, s17
 8014b98:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8014b9c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	f7ff fe1a 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014ba6:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8014c4c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8014baa:	eef0 0a69 	vmov.f32	s1, s19
 8014bae:	eeb0 0a49 	vmov.f32	s0, s18
 8014bb2:	eee8 0a27 	vfma.f32	s1, s16, s15
 8014bb6:	4620      	mov	r0, r4
 8014bb8:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8014bbc:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8014bc0:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8014bc4:	f7ff fe09 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014bc8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8014c50 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8014bcc:	eef0 0a69 	vmov.f32	s1, s19
 8014bd0:	eeb0 0a49 	vmov.f32	s0, s18
 8014bd4:	eee8 0a27 	vfma.f32	s1, s16, s15
 8014bd8:	4620      	mov	r0, r4
 8014bda:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8014bde:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8014be2:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8014be6:	f7ff fdf8 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014bea:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8014c54 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 8014bee:	eef0 0a69 	vmov.f32	s1, s19
 8014bf2:	eeb0 0a49 	vmov.f32	s0, s18
 8014bf6:	eee8 0a27 	vfma.f32	s1, s16, s15
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8014c00:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8014c04:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8014c08:	f7ff fde7 	bl	80147da <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014c0c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8014c58 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8014c10:	eef0 0a69 	vmov.f32	s1, s19
 8014c14:	eeb0 0a49 	vmov.f32	s0, s18
 8014c18:	eee8 0a27 	vfma.f32	s1, s16, s15
 8014c1c:	4620      	mov	r0, r4
 8014c1e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8014c22:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8014c26:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8014c2a:	e73e      	b.n	8014aaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8014c2c:	3d23d70a 	.word	0x3d23d70a
 8014c30:	3e8f5c29 	.word	0x3e8f5c29
 8014c34:	3f19999a 	.word	0x3f19999a
 8014c38:	3f4ccccd 	.word	0x3f4ccccd
 8014c3c:	3f75c28f 	.word	0x3f75c28f
 8014c40:	3e4ccccd 	.word	0x3e4ccccd
 8014c44:	3ecccccd 	.word	0x3ecccccd
 8014c48:	3f3851ec 	.word	0x3f3851ec
 8014c4c:	3fa3d70a 	.word	0x3fa3d70a
 8014c50:	3fcccccd 	.word	0x3fcccccd
 8014c54:	3fe66666 	.word	0x3fe66666
 8014c58:	3ffae148 	.word	0x3ffae148

08014c5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8014c5c:	b570      	push	{r4, r5, r6, lr}
 8014c5e:	ed2d 8b06 	vpush	{d8-d10}
 8014c62:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8014c66:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8014c6a:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8014c6e:	ee30 9a49 	vsub.f32	s18, s0, s18
 8014c72:	eef0 aa40 	vmov.f32	s21, s0
 8014c76:	ee28 0a08 	vmul.f32	s0, s16, s16
 8014c7a:	4604      	mov	r4, r0
 8014c7c:	eea9 0a09 	vfma.f32	s0, s18, s18
 8014c80:	eeb0 aa60 	vmov.f32	s20, s1
 8014c84:	f015 fc68 	bl	802a558 <sqrtf>
 8014c88:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c90:	dd36      	ble.n	8014d00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8014c92:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8014c96:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8014c9a:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8014c9e:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8014ca2:	2600      	movs	r6, #0
 8014ca4:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8014ca8:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8014cac:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8014cb0:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8014cb4:	ee70 9a28 	vadd.f32	s19, s0, s17
 8014cb8:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8014cbc:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8014cc0:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8014cc4:	b1fd      	cbz	r5, 8014d06 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 8014cc6:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 8014cca:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8014cce:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8014cd2:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 8014cd6:	eef0 0a49 	vmov.f32	s1, s18
 8014cda:	eeb0 0a69 	vmov.f32	s0, s19
 8014cde:	4620      	mov	r0, r4
 8014ce0:	f7ff fd64 	bl	80147ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8014ce4:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8014ce8:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8014cec:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8014cf0:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8014cf4:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 8014cf8:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8014cfc:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8014d00:	ecbd 8b06 	vpop	{d8-d10}
 8014d04:	bd70      	pop	{r4, r5, r6, pc}
 8014d06:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8014d0a:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8014d0e:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8014d12:	b16b      	cbz	r3, 8014d30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8014d14:	eef0 1a49 	vmov.f32	s3, s18
 8014d18:	eeb0 1a69 	vmov.f32	s2, s19
 8014d1c:	eef0 0a62 	vmov.f32	s1, s5
 8014d20:	eeb0 0a42 	vmov.f32	s0, s4
 8014d24:	4620      	mov	r0, r4
 8014d26:	f7ff feb1 	bl	8014a8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8014d2a:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8014d2e:	e7db      	b.n	8014ce8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8014d30:	eef0 4a48 	vmov.f32	s9, s16
 8014d34:	eeb0 4a68 	vmov.f32	s8, s17
 8014d38:	eef0 3a49 	vmov.f32	s7, s18
 8014d3c:	eeb0 3a69 	vmov.f32	s6, s19
 8014d40:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8014d44:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8014d48:	4620      	mov	r0, r4
 8014d4a:	f7ff fe13 	bl	8014974 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8014d4e:	e7cb      	b.n	8014ce8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08014d50 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8014d50:	ee07 2a90 	vmov	s15, r2
 8014d54:	ee07 1a10 	vmov	s14, r1
 8014d58:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8014d5c:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8014d60:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8014d70 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8014d64:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8014d68:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014d6c:	f7ff bf76 	b.w	8014c5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8014d70:	3d000000 	.word	0x3d000000

08014d74 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8014d74:	b538      	push	{r3, r4, r5, lr}
 8014d76:	ed2d 8b02 	vpush	{d8}
 8014d7a:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8014d7e:	4604      	mov	r4, r0
 8014d80:	b31d      	cbz	r5, 8014dca <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8014d82:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8014d86:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8014d8a:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8014d8e:	ee78 8a67 	vsub.f32	s17, s16, s15
 8014d92:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014d96:	eef0 0a68 	vmov.f32	s1, s17
 8014d9a:	f7ff fd07 	bl	80147ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8014d9e:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8014da2:	eef0 1a48 	vmov.f32	s3, s16
 8014da6:	eeb0 0a41 	vmov.f32	s0, s2
 8014daa:	eef0 0a68 	vmov.f32	s1, s17
 8014dae:	4620      	mov	r0, r4
 8014db0:	f7ff fe6c 	bl	8014a8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8014db4:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8014db8:	eef0 1a68 	vmov.f32	s3, s17
 8014dbc:	eef0 0a48 	vmov.f32	s1, s16
 8014dc0:	eeb0 0a41 	vmov.f32	s0, s2
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	f7ff fe61 	bl	8014a8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8014dca:	ecbd 8b02 	vpop	{d8}
 8014dce:	4628      	mov	r0, r5
 8014dd0:	bd38      	pop	{r3, r4, r5, pc}

08014dd2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8014dd2:	b510      	push	{r4, lr}
 8014dd4:	ed2d 8b02 	vpush	{d8}
 8014dd8:	4604      	mov	r4, r0
 8014dda:	eeb0 8a40 	vmov.f32	s16, s0
 8014dde:	eef0 8a60 	vmov.f32	s17, s1
 8014de2:	f7ff ffc7 	bl	8014d74 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8014de6:	b9d0      	cbnz	r0, 8014e1e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8014de8:	4620      	mov	r0, r4
 8014dea:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8014dee:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8014df2:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 8014df6:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 8014dfa:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8014dfe:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8014e02:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8014e06:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8014e0a:	eef0 0a68 	vmov.f32	s1, s17
 8014e0e:	eeb0 0a48 	vmov.f32	s0, s16
 8014e12:	f7ff fdaf 	bl	8014974 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8014e16:	2001      	movs	r0, #1
 8014e18:	ecbd 8b02 	vpop	{d8}
 8014e1c:	bd10      	pop	{r4, pc}
 8014e1e:	2000      	movs	r0, #0
 8014e20:	e7fa      	b.n	8014e18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08014e22 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8014e22:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 8014e26:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 8014e2a:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8014e2e:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8014e32:	f7ff be2b 	b.w	8014a8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08014e38 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8014e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e3c:	b089      	sub	sp, #36	@ 0x24
 8014e3e:	461c      	mov	r4, r3
 8014e40:	f10d 0820 	add.w	r8, sp, #32
 8014e44:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8014e48:	9304      	str	r3, [sp, #16]
 8014e4a:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8014e4c:	9105      	str	r1, [sp, #20]
 8014e4e:	2300      	movs	r3, #0
 8014e50:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8014e54:	9306      	str	r3, [sp, #24]
 8014e56:	f848 3d04 	str.w	r3, [r8, #-4]!
 8014e5a:	9b04      	ldr	r3, [sp, #16]
 8014e5c:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8014e60:	4682      	mov	sl, r0
 8014e62:	4615      	mov	r5, r2
 8014e64:	9b05      	ldr	r3, [sp, #20]
 8014e66:	429d      	cmp	r5, r3
 8014e68:	d96d      	bls.n	8014f46 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 8014e6a:	3d01      	subs	r5, #1
 8014e6c:	f819 3005 	ldrb.w	r3, [r9, r5]
 8014e70:	2b06      	cmp	r3, #6
 8014e72:	d8f7      	bhi.n	8014e64 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8014e74:	a201      	add	r2, pc, #4	@ (adr r2, 8014e7c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8014e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e7a:	bf00      	nop
 8014e7c:	08014e9b 	.word	0x08014e9b
 8014e80:	08014e65 	.word	0x08014e65
 8014e84:	08014e99 	.word	0x08014e99
 8014e88:	08014ebd 	.word	0x08014ebd
 8014e8c:	08014ebd 	.word	0x08014ebd
 8014e90:	08014ec1 	.word	0x08014ec1
 8014e94:	08014f01 	.word	0x08014f01
 8014e98:	3c02      	subs	r4, #2
 8014e9a:	4650      	mov	r0, sl
 8014e9c:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8014ea0:	9400      	str	r4, [sp, #0]
 8014ea2:	462b      	mov	r3, r5
 8014ea4:	4642      	mov	r2, r8
 8014ea6:	a906      	add	r1, sp, #24
 8014ea8:	f7ff fcae 	bl	8014808 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8014eac:	eddd 0a07 	vldr	s1, [sp, #28]
 8014eb0:	ed9d 0a06 	vldr	s0, [sp, #24]
 8014eb4:	4630      	mov	r0, r6
 8014eb6:	f7ff fed1 	bl	8014c5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8014eba:	e7d3      	b.n	8014e64 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8014ebc:	3c01      	subs	r4, #1
 8014ebe:	e7ec      	b.n	8014e9a <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8014ec0:	f1a4 0b04 	sub.w	fp, r4, #4
 8014ec4:	3c02      	subs	r4, #2
 8014ec6:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8014eca:	4650      	mov	r0, sl
 8014ecc:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8014ed0:	f8cd b000 	str.w	fp, [sp]
 8014ed4:	462b      	mov	r3, r5
 8014ed6:	4642      	mov	r2, r8
 8014ed8:	a906      	add	r1, sp, #24
 8014eda:	f7ff fc95 	bl	8014808 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8014ede:	eddd 2a07 	vldr	s5, [sp, #28]
 8014ee2:	ed9d 2a06 	vldr	s4, [sp, #24]
 8014ee6:	ed54 1a01 	vldr	s3, [r4, #-4]
 8014eea:	ed14 1a02 	vldr	s2, [r4, #-8]
 8014eee:	edd4 0a01 	vldr	s1, [r4, #4]
 8014ef2:	ed94 0a00 	vldr	s0, [r4]
 8014ef6:	4630      	mov	r0, r6
 8014ef8:	f7ff fc1a 	bl	8014730 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8014efc:	465c      	mov	r4, fp
 8014efe:	e7b1      	b.n	8014e64 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8014f00:	f1a4 0b06 	sub.w	fp, r4, #6
 8014f04:	3c02      	subs	r4, #2
 8014f06:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8014f0a:	4650      	mov	r0, sl
 8014f0c:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8014f10:	f8cd b000 	str.w	fp, [sp]
 8014f14:	462b      	mov	r3, r5
 8014f16:	4642      	mov	r2, r8
 8014f18:	a906      	add	r1, sp, #24
 8014f1a:	f7ff fc75 	bl	8014808 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8014f1e:	eddd 3a07 	vldr	s7, [sp, #28]
 8014f22:	ed9d 3a06 	vldr	s6, [sp, #24]
 8014f26:	ed54 2a03 	vldr	s5, [r4, #-12]
 8014f2a:	ed14 2a04 	vldr	s4, [r4, #-16]
 8014f2e:	ed54 1a01 	vldr	s3, [r4, #-4]
 8014f32:	ed14 1a02 	vldr	s2, [r4, #-8]
 8014f36:	edd4 0a01 	vldr	s1, [r4, #4]
 8014f3a:	ed94 0a00 	vldr	s0, [r4]
 8014f3e:	4630      	mov	r0, r6
 8014f40:	f7ff fc15 	bl	801476e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8014f44:	e7da      	b.n	8014efc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8014f46:	9b04      	ldr	r3, [sp, #16]
 8014f48:	b113      	cbz	r3, 8014f50 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8014f4a:	4630      	mov	r0, r6
 8014f4c:	f7ff ff69 	bl	8014e22 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8014f50:	b009      	add	sp, #36	@ 0x24
 8014f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f56:	bf00      	nop

08014f58 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8014f58:	eef0 7a60 	vmov.f32	s15, s1
 8014f5c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014f60:	6803      	ldr	r3, [r0, #0]
 8014f62:	ee17 2a90 	vmov	r2, s15
 8014f66:	eef0 7a40 	vmov.f32	s15, s0
 8014f6a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014f6e:	689b      	ldr	r3, [r3, #8]
 8014f70:	ee17 1a90 	vmov	r1, s15
 8014f74:	4718      	bx	r3
	...

08014f78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8014f78:	b510      	push	{r4, lr}
 8014f7a:	4b04      	ldr	r3, [pc, #16]	@ (8014f8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 8014f7c:	4604      	mov	r4, r0
 8014f7e:	f840 3b14 	str.w	r3, [r0], #20
 8014f82:	f001 fa01 	bl	8016388 <_ZN8touchgfx7OutlineD1Ev>
 8014f86:	4620      	mov	r0, r4
 8014f88:	bd10      	pop	{r4, pc}
 8014f8a:	bf00      	nop
 8014f8c:	0802ee0c 	.word	0x0802ee0c

08014f90 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8014f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f94:	ed2d 8b04 	vpush	{d8-d9}
 8014f98:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8014f9c:	b0b5      	sub	sp, #212	@ 0xd4
 8014f9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fa6:	4605      	mov	r5, r0
 8014fa8:	468b      	mov	fp, r1
 8014faa:	9206      	str	r2, [sp, #24]
 8014fac:	461e      	mov	r6, r3
 8014fae:	f04f 0400 	mov.w	r4, #0
 8014fb2:	f240 814e 	bls.w	8015252 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8014fb6:	23ff      	movs	r3, #255	@ 0xff
 8014fb8:	9300      	str	r3, [sp, #0]
 8014fba:	1d02      	adds	r2, r0, #4
 8014fbc:	6981      	ldr	r1, [r0, #24]
 8014fbe:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8014fc0:	ed9f 9aa5 	vldr	s18, [pc, #660]	@ 8015258 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8014fc4:	a808      	add	r0, sp, #32
 8014fc6:	f014 fe39 	bl	8029c3c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8014fca:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8014fce:	4ba3      	ldr	r3, [pc, #652]	@ (801525c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8014fd0:	edd5 6a08 	vldr	s13, [r5, #32]
 8014fd4:	9308      	str	r3, [sp, #32]
 8014fd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fde:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8014fe2:	bf48      	it	mi
 8014fe4:	eef1 7a67 	vnegmi.f32	s15, s15
 8014fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014fec:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8014ff0:	2201      	movs	r2, #1
 8014ff2:	9325      	str	r3, [sp, #148]	@ 0x94
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8014ffa:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8014ffe:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8015002:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8015006:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801500a:	7f6a      	ldrb	r2, [r5, #29]
 801500c:	7fab      	ldrb	r3, [r5, #30]
 801500e:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8015012:	435a      	muls	r2, r3
 8015014:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015018:	1c53      	adds	r3, r2, #1
 801501a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801501e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015022:	f04f 0800 	mov.w	r8, #0
 8015026:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 801502a:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 801502e:	942a      	str	r4, [sp, #168]	@ 0xa8
 8015030:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015034:	942b      	str	r4, [sp, #172]	@ 0xac
 8015036:	942c      	str	r4, [sp, #176]	@ 0xb0
 8015038:	942d      	str	r4, [sp, #180]	@ 0xb4
 801503a:	942e      	str	r4, [sp, #184]	@ 0xb8
 801503c:	942f      	str	r4, [sp, #188]	@ 0xbc
 801503e:	9430      	str	r4, [sp, #192]	@ 0xc0
 8015040:	9431      	str	r4, [sp, #196]	@ 0xc4
 8015042:	9432      	str	r4, [sp, #200]	@ 0xc8
 8015044:	9433      	str	r4, [sp, #204]	@ 0xcc
 8015046:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 801504a:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 801504e:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8015052:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8015056:	eef0 9a49 	vmov.f32	s19, s18
 801505a:	eeb0 8a49 	vmov.f32	s16, s18
 801505e:	eef0 8a49 	vmov.f32	s17, s18
 8015062:	4644      	mov	r4, r8
 8015064:	46c1      	mov	r9, r8
 8015066:	af08      	add	r7, sp, #32
 8015068:	f04f 0a01 	mov.w	sl, #1
 801506c:	9b06      	ldr	r3, [sp, #24]
 801506e:	454b      	cmp	r3, r9
 8015070:	f000 80cc 	beq.w	801520c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8015074:	f109 0301 	add.w	r3, r9, #1
 8015078:	9305      	str	r3, [sp, #20]
 801507a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801507e:	2b06      	cmp	r3, #6
 8015080:	d839      	bhi.n	80150f6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8015082:	e8df f003 	tbb	[pc, r3]
 8015086:	3b04      	.short	0x3b04
 8015088:	817c6f60 	.word	0x817c6f60
 801508c:	a0          	.byte	0xa0
 801508d:	00          	.byte	0x00
 801508e:	45c1      	cmp	r9, r8
 8015090:	d92b      	bls.n	80150ea <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8015092:	eef0 0a49 	vmov.f32	s1, s18
 8015096:	eeb0 0a69 	vmov.f32	s0, s19
 801509a:	4638      	mov	r0, r7
 801509c:	f7ff fdde 	bl	8014c5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80150a0:	4638      	mov	r0, r7
 80150a2:	f7ff fe67 	bl	8014d74 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80150a6:	4681      	mov	r9, r0
 80150a8:	b9f8      	cbnz	r0, 80150ea <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 80150aa:	eef0 0a49 	vmov.f32	s1, s18
 80150ae:	eeb0 0a69 	vmov.f32	s0, s19
 80150b2:	4638      	mov	r0, r7
 80150b4:	f7ff fe8d 	bl	8014dd2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80150b8:	4628      	mov	r0, r5
 80150ba:	e9cd 9702 	strd	r9, r7, [sp, #8]
 80150be:	e9cd b600 	strd	fp, r6, [sp]
 80150c2:	4623      	mov	r3, r4
 80150c4:	9a05      	ldr	r2, [sp, #20]
 80150c6:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 80150ca:	4641      	mov	r1, r8
 80150cc:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 80150d0:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 80150d4:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 80150d8:	f7ff feae 	bl	8014e38 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80150dc:	eef0 0a49 	vmov.f32	s1, s18
 80150e0:	eeb0 0a69 	vmov.f32	s0, s19
 80150e4:	4638      	mov	r0, r7
 80150e6:	f7ff fe74 	bl	8014dd2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80150ea:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80150ee:	eeb0 8a49 	vmov.f32	s16, s18
 80150f2:	eef0 8a69 	vmov.f32	s17, s19
 80150f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80150fa:	e7b7      	b.n	801506c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 80150fc:	45c1      	cmp	r9, r8
 80150fe:	d90d      	bls.n	801511c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8015100:	4638      	mov	r0, r7
 8015102:	f7ff fe37 	bl	8014d74 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8015106:	b948      	cbnz	r0, 801511c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8015108:	e9cd a702 	strd	sl, r7, [sp, #8]
 801510c:	e9cd b600 	strd	fp, r6, [sp]
 8015110:	4623      	mov	r3, r4
 8015112:	464a      	mov	r2, r9
 8015114:	4641      	mov	r1, r8
 8015116:	4628      	mov	r0, r5
 8015118:	f7ff fe8e 	bl	8014e38 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 801511c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015120:	edd3 8a00 	vldr	s17, [r3]
 8015124:	ed93 8a01 	vldr	s16, [r3, #4]
 8015128:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 801512c:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8015130:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8015134:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8015138:	3402      	adds	r4, #2
 801513a:	46c8      	mov	r8, r9
 801513c:	eeb0 9a48 	vmov.f32	s18, s16
 8015140:	eef0 9a68 	vmov.f32	s19, s17
 8015144:	e7d7      	b.n	80150f6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8015146:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801514a:	edd3 8a00 	vldr	s17, [r3]
 801514e:	ed93 8a01 	vldr	s16, [r3, #4]
 8015152:	eeb0 0a68 	vmov.f32	s0, s17
 8015156:	eef0 0a48 	vmov.f32	s1, s16
 801515a:	4638      	mov	r0, r7
 801515c:	f7ff fd7e 	bl	8014c5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8015160:	3402      	adds	r4, #2
 8015162:	e7c8      	b.n	80150f6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8015164:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015168:	edd3 8a00 	vldr	s17, [r3]
 801516c:	eef0 0a48 	vmov.f32	s1, s16
 8015170:	eeb0 0a68 	vmov.f32	s0, s17
 8015174:	4638      	mov	r0, r7
 8015176:	f7ff fd71 	bl	8014c5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801517a:	3401      	adds	r4, #1
 801517c:	e7bb      	b.n	80150f6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801517e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015182:	ed93 8a00 	vldr	s16, [r3]
 8015186:	e7f1      	b.n	801516c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8015188:	00a3      	lsls	r3, r4, #2
 801518a:	f103 0208 	add.w	r2, r3, #8
 801518e:	f103 090c 	add.w	r9, r3, #12
 8015192:	4432      	add	r2, r6
 8015194:	4433      	add	r3, r6
 8015196:	44b1      	add	r9, r6
 8015198:	ed92 2a00 	vldr	s4, [r2]
 801519c:	edd9 2a00 	vldr	s5, [r9]
 80151a0:	edd3 1a01 	vldr	s3, [r3, #4]
 80151a4:	ed93 1a00 	vldr	s2, [r3]
 80151a8:	9207      	str	r2, [sp, #28]
 80151aa:	eef0 0a48 	vmov.f32	s1, s16
 80151ae:	eeb0 0a68 	vmov.f32	s0, s17
 80151b2:	4638      	mov	r0, r7
 80151b4:	f7ff fabc 	bl	8014730 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80151b8:	9a07      	ldr	r2, [sp, #28]
 80151ba:	ed99 8a00 	vldr	s16, [r9]
 80151be:	edd2 8a00 	vldr	s17, [r2]
 80151c2:	3404      	adds	r4, #4
 80151c4:	e797      	b.n	80150f6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80151c6:	00a3      	lsls	r3, r4, #2
 80151c8:	f103 0210 	add.w	r2, r3, #16
 80151cc:	f103 0914 	add.w	r9, r3, #20
 80151d0:	4432      	add	r2, r6
 80151d2:	4433      	add	r3, r6
 80151d4:	44b1      	add	r9, r6
 80151d6:	ed92 3a00 	vldr	s6, [r2]
 80151da:	edd9 3a00 	vldr	s7, [r9]
 80151de:	edd3 2a03 	vldr	s5, [r3, #12]
 80151e2:	ed93 2a02 	vldr	s4, [r3, #8]
 80151e6:	edd3 1a01 	vldr	s3, [r3, #4]
 80151ea:	ed93 1a00 	vldr	s2, [r3]
 80151ee:	9207      	str	r2, [sp, #28]
 80151f0:	eef0 0a48 	vmov.f32	s1, s16
 80151f4:	eeb0 0a68 	vmov.f32	s0, s17
 80151f8:	4638      	mov	r0, r7
 80151fa:	f7ff fab8 	bl	801476e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80151fe:	9a07      	ldr	r2, [sp, #28]
 8015200:	ed99 8a00 	vldr	s16, [r9]
 8015204:	edd2 8a00 	vldr	s17, [r2]
 8015208:	3406      	adds	r4, #6
 801520a:	e774      	b.n	80150f6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801520c:	9b06      	ldr	r3, [sp, #24]
 801520e:	4543      	cmp	r3, r8
 8015210:	af08      	add	r7, sp, #32
 8015212:	d90f      	bls.n	8015234 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8015214:	4638      	mov	r0, r7
 8015216:	f7ff fdad 	bl	8014d74 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801521a:	b958      	cbnz	r0, 8015234 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 801521c:	2301      	movs	r3, #1
 801521e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8015222:	9703      	str	r7, [sp, #12]
 8015224:	f8cd b000 	str.w	fp, [sp]
 8015228:	4623      	mov	r3, r4
 801522a:	9a06      	ldr	r2, [sp, #24]
 801522c:	4641      	mov	r1, r8
 801522e:	4628      	mov	r0, r5
 8015230:	f7ff fe02 	bl	8014e38 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8015234:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8015238:	4638      	mov	r0, r7
 801523a:	f014 fd93 	bl	8029d64 <_ZN8touchgfx6Canvas6renderEh>
 801523e:	4604      	mov	r4, r0
 8015240:	4638      	mov	r0, r7
 8015242:	f7ff fe99 	bl	8014f78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8015246:	4620      	mov	r0, r4
 8015248:	b035      	add	sp, #212	@ 0xd4
 801524a:	ecbd 8b04 	vpop	{d8-d9}
 801524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015252:	2401      	movs	r4, #1
 8015254:	e7f7      	b.n	8015246 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8015256:	bf00      	nop
 8015258:	00000000 	.word	0x00000000
 801525c:	0802e4f4 	.word	0x0802e4f4

08015260 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8015260:	b510      	push	{r4, lr}
 8015262:	4604      	mov	r4, r0
 8015264:	f7ff fe88 	bl	8014f78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8015268:	4620      	mov	r0, r4
 801526a:	21b0      	movs	r1, #176	@ 0xb0
 801526c:	f015 f949 	bl	802a502 <_ZdlPvj>
 8015270:	4620      	mov	r0, r4
 8015272:	bd10      	pop	{r4, pc}

08015274 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8015274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015278:	ed2d 8b06 	vpush	{d8-d10}
 801527c:	b0aa      	sub	sp, #168	@ 0xa8
 801527e:	4698      	mov	r8, r3
 8015280:	23ff      	movs	r3, #255	@ 0xff
 8015282:	4607      	mov	r7, r0
 8015284:	9300      	str	r3, [sp, #0]
 8015286:	4689      	mov	r9, r1
 8015288:	4692      	mov	sl, r2
 801528a:	6981      	ldr	r1, [r0, #24]
 801528c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801528e:	ed9f 8a82 	vldr	s16, [pc, #520]	@ 8015498 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8015292:	1d02      	adds	r2, r0, #4
 8015294:	a80d      	add	r0, sp, #52	@ 0x34
 8015296:	f014 fcd1 	bl	8029c3c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801529a:	7f3b      	ldrb	r3, [r7, #28]
 801529c:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8015498 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 80152a0:	1e5a      	subs	r2, r3, #1
 80152a2:	4253      	negs	r3, r2
 80152a4:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 80152a8:	4153      	adcs	r3, r2
 80152aa:	eeb0 0a60 	vmov.f32	s0, s1
 80152ae:	4628      	mov	r0, r5
 80152b0:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 80152b4:	f005 f803 	bl	801a2be <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80152b8:	44ca      	add	sl, r9
 80152ba:	eeb0 9a40 	vmov.f32	s18, s0
 80152be:	eef0 9a60 	vmov.f32	s19, s1
 80152c2:	eef0 8a48 	vmov.f32	s17, s16
 80152c6:	2400      	movs	r4, #0
 80152c8:	45ca      	cmp	sl, r9
 80152ca:	f000 80cd 	beq.w	8015468 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 80152ce:	f819 3b01 	ldrb.w	r3, [r9], #1
 80152d2:	2b06      	cmp	r3, #6
 80152d4:	d8f8      	bhi.n	80152c8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80152d6:	e8df f003 	tbb	[pc, r3]
 80152da:	0804      	.short	0x0804
 80152dc:	58533f2a 	.word	0x58533f2a
 80152e0:	8a          	.byte	0x8a
 80152e1:	00          	.byte	0x00
 80152e2:	a80d      	add	r0, sp, #52	@ 0x34
 80152e4:	f014 fd1c 	bl	8029d20 <_ZN8touchgfx6Canvas5closeEv>
 80152e8:	e7ee      	b.n	80152c8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80152ea:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80152ee:	edd3 8a00 	vldr	s17, [r3]
 80152f2:	ed93 8a01 	vldr	s16, [r3, #4]
 80152f6:	eeb0 0a68 	vmov.f32	s0, s17
 80152fa:	eef0 0a48 	vmov.f32	s1, s16
 80152fe:	4628      	mov	r0, r5
 8015300:	f004 ffdd 	bl	801a2be <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015304:	eef0 7a60 	vmov.f32	s15, s1
 8015308:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801530c:	a80d      	add	r0, sp, #52	@ 0x34
 801530e:	ee17 2a90 	vmov	r2, s15
 8015312:	eef0 7a40 	vmov.f32	s15, s0
 8015316:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801531a:	eeb0 9a40 	vmov.f32	s18, s0
 801531e:	ee17 1a90 	vmov	r1, s15
 8015322:	eef0 9a60 	vmov.f32	s19, s1
 8015326:	f014 fdd5 	bl	8029ed4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801532a:	3402      	adds	r4, #2
 801532c:	e7cc      	b.n	80152c8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801532e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8015332:	edd3 8a00 	vldr	s17, [r3]
 8015336:	ed93 8a01 	vldr	s16, [r3, #4]
 801533a:	eeb0 0a68 	vmov.f32	s0, s17
 801533e:	eef0 0a48 	vmov.f32	s1, s16
 8015342:	4628      	mov	r0, r5
 8015344:	f004 ffbb 	bl	801a2be <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015348:	a80d      	add	r0, sp, #52	@ 0x34
 801534a:	eeb0 9a40 	vmov.f32	s18, s0
 801534e:	eef0 9a60 	vmov.f32	s19, s1
 8015352:	f7ff fe01 	bl	8014f58 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8015356:	e7e8      	b.n	801532a <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8015358:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801535c:	edd3 8a00 	vldr	s17, [r3]
 8015360:	eef0 0a48 	vmov.f32	s1, s16
 8015364:	eeb0 0a68 	vmov.f32	s0, s17
 8015368:	4628      	mov	r0, r5
 801536a:	f004 ffa8 	bl	801a2be <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801536e:	a80d      	add	r0, sp, #52	@ 0x34
 8015370:	eeb0 9a40 	vmov.f32	s18, s0
 8015374:	eef0 9a60 	vmov.f32	s19, s1
 8015378:	3401      	adds	r4, #1
 801537a:	f7ff fded 	bl	8014f58 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801537e:	e7a3      	b.n	80152c8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8015380:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8015384:	ed93 8a00 	vldr	s16, [r3]
 8015388:	e7ea      	b.n	8015360 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 801538a:	1ca3      	adds	r3, r4, #2
 801538c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8015390:	ed53 0a01 	vldr	s1, [r3, #-4]
 8015394:	ed13 0a02 	vldr	s0, [r3, #-8]
 8015398:	edd3 8a00 	vldr	s17, [r3]
 801539c:	ed93 8a01 	vldr	s16, [r3, #4]
 80153a0:	4628      	mov	r0, r5
 80153a2:	f004 ff8c 	bl	801a2be <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80153a6:	4628      	mov	r0, r5
 80153a8:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 80153ac:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 80153b0:	eeb0 0a68 	vmov.f32	s0, s17
 80153b4:	eef0 0a48 	vmov.f32	s1, s16
 80153b8:	f004 ff81 	bl	801a2be <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80153bc:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 80153c0:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 80153c4:	eef0 2a60 	vmov.f32	s5, s1
 80153c8:	eeb0 2a40 	vmov.f32	s4, s0
 80153cc:	eeb0 aa40 	vmov.f32	s20, s0
 80153d0:	eef0 aa60 	vmov.f32	s21, s1
 80153d4:	eeb0 0a49 	vmov.f32	s0, s18
 80153d8:	eef0 0a69 	vmov.f32	s1, s19
 80153dc:	a80d      	add	r0, sp, #52	@ 0x34
 80153de:	f7ff f9a7 	bl	8014730 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80153e2:	3404      	adds	r4, #4
 80153e4:	eef0 9a6a 	vmov.f32	s19, s21
 80153e8:	eeb0 9a4a 	vmov.f32	s18, s20
 80153ec:	e76c      	b.n	80152c8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80153ee:	1d26      	adds	r6, r4, #4
 80153f0:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80153f4:	ed56 0a03 	vldr	s1, [r6, #-12]
 80153f8:	ed16 0a04 	vldr	s0, [r6, #-16]
 80153fc:	edd6 8a00 	vldr	s17, [r6]
 8015400:	ed96 8a01 	vldr	s16, [r6, #4]
 8015404:	4628      	mov	r0, r5
 8015406:	f004 ff5a 	bl	801a2be <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801540a:	4628      	mov	r0, r5
 801540c:	ed8d 0a07 	vstr	s0, [sp, #28]
 8015410:	edcd 0a08 	vstr	s1, [sp, #32]
 8015414:	ed16 0a02 	vldr	s0, [r6, #-8]
 8015418:	ed56 0a01 	vldr	s1, [r6, #-4]
 801541c:	f004 ff4f 	bl	801a2be <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015420:	4628      	mov	r0, r5
 8015422:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8015426:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 801542a:	eeb0 0a68 	vmov.f32	s0, s17
 801542e:	eef0 0a48 	vmov.f32	s1, s16
 8015432:	f004 ff44 	bl	801a2be <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015436:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 801543a:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 801543e:	eddd 1a08 	vldr	s3, [sp, #32]
 8015442:	ed9d 1a07 	vldr	s2, [sp, #28]
 8015446:	eef0 3a60 	vmov.f32	s7, s1
 801544a:	eeb0 3a40 	vmov.f32	s6, s0
 801544e:	eeb0 aa40 	vmov.f32	s20, s0
 8015452:	eef0 aa60 	vmov.f32	s21, s1
 8015456:	eeb0 0a49 	vmov.f32	s0, s18
 801545a:	eef0 0a69 	vmov.f32	s1, s19
 801545e:	a80d      	add	r0, sp, #52	@ 0x34
 8015460:	f7ff f985 	bl	801476e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8015464:	3406      	adds	r4, #6
 8015466:	e7bd      	b.n	80153e4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8015468:	7f7b      	ldrb	r3, [r7, #29]
 801546a:	7fb9      	ldrb	r1, [r7, #30]
 801546c:	4359      	muls	r1, r3
 801546e:	1c4b      	adds	r3, r1, #1
 8015470:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8015474:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015478:	a80d      	add	r0, sp, #52	@ 0x34
 801547a:	f014 fc73 	bl	8029d64 <_ZN8touchgfx6Canvas6renderEh>
 801547e:	4b07      	ldr	r3, [pc, #28]	@ (801549c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8015480:	930d      	str	r3, [sp, #52]	@ 0x34
 8015482:	4604      	mov	r4, r0
 8015484:	a812      	add	r0, sp, #72	@ 0x48
 8015486:	f000 ff7f 	bl	8016388 <_ZN8touchgfx7OutlineD1Ev>
 801548a:	4620      	mov	r0, r4
 801548c:	b02a      	add	sp, #168	@ 0xa8
 801548e:	ecbd 8b06 	vpop	{d8-d10}
 8015492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015496:	bf00      	nop
 8015498:	00000000 	.word	0x00000000
 801549c:	0802ee0c 	.word	0x0802ee0c

080154a0 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 80154a0:	b410      	push	{r4}
 80154a2:	7f04      	ldrb	r4, [r0, #28]
 80154a4:	b11c      	cbz	r4, 80154ae <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 80154a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154aa:	f7ff bee3 	b.w	8015274 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 80154ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154b2:	f7ff bd6d 	b.w	8014f90 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

080154b6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 80154b6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80154ba:	4691      	mov	r9, r2
 80154bc:	4602      	mov	r2, r0
 80154be:	4606      	mov	r6, r0
 80154c0:	f852 0f26 	ldr.w	r0, [r2, #38]!
 80154c4:	4688      	mov	r8, r1
 80154c6:	6851      	ldr	r1, [r2, #4]
 80154c8:	469a      	mov	sl, r3
 80154ca:	ab02      	add	r3, sp, #8
 80154cc:	c303      	stmia	r3!, {r0, r1}
 80154ce:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	af02      	add	r7, sp, #8
 80154d6:	dd2f      	ble.n	8015538 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 80154d8:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 80154dc:	2c00      	cmp	r4, #0
 80154de:	dd2b      	ble.n	8015538 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 80154e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80154e4:	441c      	add	r4, r3
 80154e6:	b2a4      	uxth	r4, r4
 80154e8:	b225      	sxth	r5, r4
 80154ea:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80154ee:	42ab      	cmp	r3, r5
 80154f0:	da22      	bge.n	8015538 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 80154f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80154f4:	9300      	str	r3, [sp, #0]
 80154f6:	9701      	str	r7, [sp, #4]
 80154f8:	4653      	mov	r3, sl
 80154fa:	464a      	mov	r2, r9
 80154fc:	4641      	mov	r1, r8
 80154fe:	4630      	mov	r0, r6
 8015500:	f7ff ffce 	bl	80154a0 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8015504:	b940      	cbnz	r0, 8015518 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8015506:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801550a:	2b01      	cmp	r3, #1
 801550c:	d004      	beq.n	8015518 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 801550e:	3301      	adds	r3, #1
 8015510:	105b      	asrs	r3, r3, #1
 8015512:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015516:	e7ec      	b.n	80154f2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 8015518:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801551c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015520:	4413      	add	r3, r2
 8015522:	b29b      	uxth	r3, r3
 8015524:	441a      	add	r2, r3
 8015526:	b212      	sxth	r2, r2
 8015528:	4295      	cmp	r5, r2
 801552a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801552e:	dadc      	bge.n	80154ea <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8015530:	1ae3      	subs	r3, r4, r3
 8015532:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015536:	e7d8      	b.n	80154ea <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8015538:	b004      	add	sp, #16
 801553a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08015540 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8015540:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015542:	6803      	ldr	r3, [r0, #0]
 8015544:	460d      	mov	r5, r1
 8015546:	4604      	mov	r4, r0
 8015548:	4601      	mov	r1, r0
 801554a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801554c:	a802      	add	r0, sp, #8
 801554e:	4798      	blx	r3
 8015550:	6828      	ldr	r0, [r5, #0]
 8015552:	6869      	ldr	r1, [r5, #4]
 8015554:	466b      	mov	r3, sp
 8015556:	c303      	stmia	r3!, {r0, r1}
 8015558:	4668      	mov	r0, sp
 801555a:	4619      	mov	r1, r3
 801555c:	f7fd fc98 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 8015560:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015562:	b188      	cbz	r0, 8015588 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015564:	6803      	ldr	r3, [r0, #0]
 8015566:	1d21      	adds	r1, r4, #4
 8015568:	68db      	ldr	r3, [r3, #12]
 801556a:	4798      	blx	r3
 801556c:	b160      	cbz	r0, 8015588 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801556e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8015572:	2b00      	cmp	r3, #0
 8015574:	dd08      	ble.n	8015588 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015576:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801557a:	2d00      	cmp	r5, #0
 801557c:	dd04      	ble.n	8015588 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801557e:	4a2b      	ldr	r2, [pc, #172]	@ (801562c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8015580:	7812      	ldrb	r2, [r2, #0]
 8015582:	b11a      	cbz	r2, 801558c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8015584:	2a01      	cmp	r2, #1
 8015586:	d029      	beq.n	80155dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8015588:	b004      	add	sp, #16
 801558a:	bd70      	pop	{r4, r5, r6, pc}
 801558c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015590:	441d      	add	r5, r3
 8015592:	b2ad      	uxth	r5, r5
 8015594:	b22e      	sxth	r6, r5
 8015596:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801559a:	42b3      	cmp	r3, r6
 801559c:	daf4      	bge.n	8015588 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801559e:	6823      	ldr	r3, [r4, #0]
 80155a0:	4669      	mov	r1, sp
 80155a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80155a4:	4620      	mov	r0, r4
 80155a6:	4798      	blx	r3
 80155a8:	b940      	cbnz	r0, 80155bc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80155aa:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80155ae:	2b01      	cmp	r3, #1
 80155b0:	d004      	beq.n	80155bc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80155b2:	3301      	adds	r3, #1
 80155b4:	105b      	asrs	r3, r3, #1
 80155b6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80155ba:	e7f0      	b.n	801559e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80155bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80155c0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80155c4:	4413      	add	r3, r2
 80155c6:	b29b      	uxth	r3, r3
 80155c8:	441a      	add	r2, r3
 80155ca:	b212      	sxth	r2, r2
 80155cc:	4296      	cmp	r6, r2
 80155ce:	f8ad 3002 	strh.w	r3, [sp, #2]
 80155d2:	dae0      	bge.n	8015596 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80155d4:	1aeb      	subs	r3, r5, r3
 80155d6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80155da:	e7dc      	b.n	8015596 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80155dc:	f8bd 5000 	ldrh.w	r5, [sp]
 80155e0:	441d      	add	r5, r3
 80155e2:	b2ad      	uxth	r5, r5
 80155e4:	b22e      	sxth	r6, r5
 80155e6:	f9bd 3000 	ldrsh.w	r3, [sp]
 80155ea:	42b3      	cmp	r3, r6
 80155ec:	dacc      	bge.n	8015588 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80155ee:	6823      	ldr	r3, [r4, #0]
 80155f0:	4669      	mov	r1, sp
 80155f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80155f4:	4620      	mov	r0, r4
 80155f6:	4798      	blx	r3
 80155f8:	b940      	cbnz	r0, 801560c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80155fa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80155fe:	2b01      	cmp	r3, #1
 8015600:	d004      	beq.n	801560c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8015602:	3301      	adds	r3, #1
 8015604:	105b      	asrs	r3, r3, #1
 8015606:	f8ad 3004 	strh.w	r3, [sp, #4]
 801560a:	e7f0      	b.n	80155ee <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801560c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8015610:	f8bd 3000 	ldrh.w	r3, [sp]
 8015614:	4413      	add	r3, r2
 8015616:	b29b      	uxth	r3, r3
 8015618:	441a      	add	r2, r3
 801561a:	b212      	sxth	r2, r2
 801561c:	4296      	cmp	r6, r2
 801561e:	f8ad 3000 	strh.w	r3, [sp]
 8015622:	dae0      	bge.n	80155e6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8015624:	1aeb      	subs	r3, r5, r3
 8015626:	f8ad 3004 	strh.w	r3, [sp, #4]
 801562a:	e7dc      	b.n	80155e6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 801562c:	200126d8 	.word	0x200126d8

08015630 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8015630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015632:	6803      	ldr	r3, [r0, #0]
 8015634:	4604      	mov	r4, r0
 8015636:	4601      	mov	r1, r0
 8015638:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801563a:	4668      	mov	r0, sp
 801563c:	4798      	blx	r3
 801563e:	2100      	movs	r1, #0
 8015640:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8015644:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015648:	9102      	str	r1, [sp, #8]
 801564a:	4668      	mov	r0, sp
 801564c:	a902      	add	r1, sp, #8
 801564e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8015652:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015656:	f7fd fc1b 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 801565a:	6823      	ldr	r3, [r4, #0]
 801565c:	4669      	mov	r1, sp
 801565e:	691b      	ldr	r3, [r3, #16]
 8015660:	4620      	mov	r0, r4
 8015662:	4798      	blx	r3
 8015664:	b004      	add	sp, #16
 8015666:	bd10      	pop	{r4, pc}

08015668 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8015668:	2101      	movs	r1, #1
 801566a:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801566e:	490b      	ldr	r1, [pc, #44]	@ (801569c <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8015670:	6001      	str	r1, [r0, #0]
 8015672:	2200      	movs	r2, #0
 8015674:	21ff      	movs	r1, #255	@ 0xff
 8015676:	8082      	strh	r2, [r0, #4]
 8015678:	80c2      	strh	r2, [r0, #6]
 801567a:	8102      	strh	r2, [r0, #8]
 801567c:	8142      	strh	r2, [r0, #10]
 801567e:	8182      	strh	r2, [r0, #12]
 8015680:	81c2      	strh	r2, [r0, #14]
 8015682:	8202      	strh	r2, [r0, #16]
 8015684:	8242      	strh	r2, [r0, #18]
 8015686:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801568a:	61c2      	str	r2, [r0, #28]
 801568c:	8402      	strh	r2, [r0, #32]
 801568e:	8442      	strh	r2, [r0, #34]	@ 0x22
 8015690:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8015694:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8015698:	6282      	str	r2, [r0, #40]	@ 0x28
 801569a:	4770      	bx	lr
 801569c:	0802e554 	.word	0x0802e554

080156a0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80156a0:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80156a4:	4770      	bx	lr

080156a6 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80156a6:	b510      	push	{r4, lr}
 80156a8:	4604      	mov	r4, r0
 80156aa:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80156ac:	b150      	cbz	r0, 80156c4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80156ae:	6803      	ldr	r3, [r0, #0]
 80156b0:	68db      	ldr	r3, [r3, #12]
 80156b2:	4798      	blx	r3
 80156b4:	b130      	cbz	r0, 80156c4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80156b6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80156b8:	6803      	ldr	r3, [r0, #0]
 80156ba:	4621      	mov	r1, r4
 80156bc:	689b      	ldr	r3, [r3, #8]
 80156be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156c2:	4718      	bx	r3
 80156c4:	bd10      	pop	{r4, pc}

080156c6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80156c6:	b570      	push	{r4, r5, r6, lr}
 80156c8:	790b      	ldrb	r3, [r1, #4]
 80156ca:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	bf0c      	ite	eq
 80156d2:	2301      	moveq	r3, #1
 80156d4:	2300      	movne	r3, #0
 80156d6:	4604      	mov	r4, r0
 80156d8:	460e      	mov	r6, r1
 80156da:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80156de:	d109      	bne.n	80156f4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80156e0:	b14d      	cbz	r5, 80156f6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80156e2:	7933      	ldrb	r3, [r6, #4]
 80156e4:	2b01      	cmp	r3, #1
 80156e6:	d10c      	bne.n	8015702 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80156e8:	6823      	ldr	r3, [r4, #0]
 80156ea:	4620      	mov	r0, r4
 80156ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80156ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80156f2:	4718      	bx	r3
 80156f4:	b12d      	cbz	r5, 8015702 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80156f6:	6823      	ldr	r3, [r4, #0]
 80156f8:	4620      	mov	r0, r4
 80156fa:	695b      	ldr	r3, [r3, #20]
 80156fc:	4798      	blx	r3
 80156fe:	2d00      	cmp	r5, #0
 8015700:	d1ef      	bne.n	80156e2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8015702:	bd70      	pop	{r4, r5, r6, pc}

08015704 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
 8015704:	b508      	push	{r3, lr}
 8015706:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 801570a:	b10b      	cbz	r3, 8015710 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
 801570c:	f7f6 fe2e 	bl	800c36c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8015710:	bd08      	pop	{r3, pc}

08015712 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 8015712:	6803      	ldr	r3, [r0, #0]
 8015714:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 8015718:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801571a:	4718      	bx	r3

0801571c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801571c:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8015720:	2bff      	cmp	r3, #255	@ 0xff
 8015722:	b510      	push	{r4, lr}
 8015724:	d104      	bne.n	8015730 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8015726:	8cca      	ldrh	r2, [r1, #38]	@ 0x26
 8015728:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801572c:	429a      	cmp	r2, r3
 801572e:	d105      	bne.n	801573c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8015730:	2300      	movs	r3, #0
 8015732:	8003      	strh	r3, [r0, #0]
 8015734:	8043      	strh	r3, [r0, #2]
 8015736:	8083      	strh	r3, [r0, #4]
 8015738:	80c3      	strh	r3, [r0, #6]
 801573a:	bd10      	pop	{r4, pc}
 801573c:	2300      	movs	r3, #0
 801573e:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8015742:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8015746:	8003      	strh	r3, [r0, #0]
 8015748:	8043      	strh	r3, [r0, #2]
 801574a:	8084      	strh	r4, [r0, #4]
 801574c:	80c2      	strh	r2, [r0, #6]
 801574e:	e7f4      	b.n	801573a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08015750 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8015750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015754:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8015758:	b087      	sub	sp, #28
 801575a:	4604      	mov	r4, r0
 801575c:	4689      	mov	r9, r1
 801575e:	b363      	cbz	r3, 80157ba <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8015760:	8cc2      	ldrh	r2, [r0, #38]	@ 0x26
 8015762:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015766:	429a      	cmp	r2, r3
 8015768:	d027      	beq.n	80157ba <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801576a:	ad06      	add	r5, sp, #24
 801576c:	2700      	movs	r7, #0
 801576e:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8015772:	4628      	mov	r0, r5
 8015774:	f006 fd20 	bl	801c1b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015778:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801577c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015780:	6823      	ldr	r3, [r4, #0]
 8015782:	f8ad 0014 	strh.w	r0, [sp, #20]
 8015786:	a904      	add	r1, sp, #16
 8015788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801578a:	9704      	str	r7, [sp, #16]
 801578c:	4620      	mov	r0, r4
 801578e:	4798      	blx	r3
 8015790:	f7f7 f83e 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 8015794:	6803      	ldr	r3, [r0, #0]
 8015796:	4606      	mov	r6, r0
 8015798:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801579c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 801579e:	f8ad 300c 	strh.w	r3, [sp, #12]
 80157a2:	4628      	mov	r0, r5
 80157a4:	f006 fdfa 	bl	801c39c <_ZNK8touchgfx6Bitmap7getDataEv>
 80157a8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80157ac:	9300      	str	r3, [sp, #0]
 80157ae:	4601      	mov	r1, r0
 80157b0:	9701      	str	r7, [sp, #4]
 80157b2:	464b      	mov	r3, r9
 80157b4:	aa04      	add	r2, sp, #16
 80157b6:	4630      	mov	r0, r6
 80157b8:	47c0      	blx	r8
 80157ba:	b007      	add	sp, #28
 80157bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080157c0 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 80157c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80157c2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80157c6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80157ca:	6803      	ldr	r3, [r0, #0]
 80157cc:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80157d0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80157d4:	460d      	mov	r5, r1
 80157d6:	2100      	movs	r1, #0
 80157d8:	4604      	mov	r4, r0
 80157da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80157dc:	9100      	str	r1, [sp, #0]
 80157de:	4669      	mov	r1, sp
 80157e0:	4798      	blx	r3
 80157e2:	4621      	mov	r1, r4
 80157e4:	a802      	add	r0, sp, #8
 80157e6:	f004 fa57 	bl	8019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80157ea:	f7f7 f811 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 80157ee:	6803      	ldr	r3, [r0, #0]
 80157f0:	aa02      	add	r2, sp, #8
 80157f2:	695e      	ldr	r6, [r3, #20]
 80157f4:	4669      	mov	r1, sp
 80157f6:	462b      	mov	r3, r5
 80157f8:	47b0      	blx	r6
 80157fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80157fe:	2800      	cmp	r0, #0
 8015800:	bf08      	it	eq
 8015802:	461d      	moveq	r5, r3
 8015804:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8015806:	b004      	add	sp, #16
 8015808:	bd70      	pop	{r4, r5, r6, pc}
	...

0801580c <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801580c:	2200      	movs	r2, #0
 801580e:	8082      	strh	r2, [r0, #4]
 8015810:	80c2      	strh	r2, [r0, #6]
 8015812:	8102      	strh	r2, [r0, #8]
 8015814:	8142      	strh	r2, [r0, #10]
 8015816:	8182      	strh	r2, [r0, #12]
 8015818:	81c2      	strh	r2, [r0, #14]
 801581a:	8202      	strh	r2, [r0, #16]
 801581c:	8242      	strh	r2, [r0, #18]
 801581e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015822:	61c2      	str	r2, [r0, #28]
 8015824:	8402      	strh	r2, [r0, #32]
 8015826:	8442      	strh	r2, [r0, #34]	@ 0x22
 8015828:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 801582c:	2201      	movs	r2, #1
 801582e:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 8015832:	4a04      	ldr	r2, [pc, #16]	@ (8015844 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 8015834:	6002      	str	r2, [r0, #0]
 8015836:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801583a:	84c2      	strh	r2, [r0, #38]	@ 0x26
 801583c:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
 8015840:	4770      	bx	lr
 8015842:	bf00      	nop
 8015844:	0802e63c 	.word	0x0802e63c

08015848 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8015848:	2000      	movs	r0, #0
 801584a:	4770      	bx	lr

0801584c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801584c:	4b07      	ldr	r3, [pc, #28]	@ (801586c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801584e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8015850:	881b      	ldrh	r3, [r3, #0]
 8015852:	4293      	cmp	r3, r2
 8015854:	bf81      	itttt	hi
 8015856:	4b06      	ldrhi	r3, [pc, #24]	@ (8015870 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8015858:	681b      	ldrhi	r3, [r3, #0]
 801585a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801585e:	7858      	ldrbhi	r0, [r3, #1]
 8015860:	bf8c      	ite	hi
 8015862:	f000 0003 	andhi.w	r0, r0, #3
 8015866:	2000      	movls	r0, #0
 8015868:	4770      	bx	lr
 801586a:	bf00      	nop
 801586c:	2001273c 	.word	0x2001273c
 8015870:	20012738 	.word	0x20012738

08015874 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8015874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015878:	4b10      	ldr	r3, [pc, #64]	@ (80158bc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801587a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 801587c:	881b      	ldrh	r3, [r3, #0]
 801587e:	428b      	cmp	r3, r1
 8015880:	4604      	mov	r4, r0
 8015882:	d918      	bls.n	80158b6 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8015884:	6803      	ldr	r3, [r0, #0]
 8015886:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8015888:	4b0d      	ldr	r3, [pc, #52]	@ (80158c0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801588a:	6818      	ldr	r0, [r3, #0]
 801588c:	f7fa f894 	bl	800f9b8 <_ZNK8touchgfx5Texts7getTextEt>
 8015890:	6823      	ldr	r3, [r4, #0]
 8015892:	4606      	mov	r6, r0
 8015894:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015896:	4620      	mov	r0, r4
 8015898:	4798      	blx	r3
 801589a:	6823      	ldr	r3, [r4, #0]
 801589c:	4607      	mov	r7, r0
 801589e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80158a2:	4620      	mov	r0, r4
 80158a4:	4798      	blx	r3
 80158a6:	463a      	mov	r2, r7
 80158a8:	4603      	mov	r3, r0
 80158aa:	4631      	mov	r1, r6
 80158ac:	4620      	mov	r0, r4
 80158ae:	46ac      	mov	ip, r5
 80158b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158b4:	4760      	bx	ip
 80158b6:	2000      	movs	r0, #0
 80158b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158bc:	2001273c 	.word	0x2001273c
 80158c0:	20012744 	.word	0x20012744

080158c4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80158c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80158c8:	4b17      	ldr	r3, [pc, #92]	@ (8015928 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80158ca:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80158cc:	881b      	ldrh	r3, [r3, #0]
 80158ce:	428b      	cmp	r3, r1
 80158d0:	4604      	mov	r4, r0
 80158d2:	d926      	bls.n	8015922 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 80158d4:	4b15      	ldr	r3, [pc, #84]	@ (801592c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80158dc:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80158e0:	4b13      	ldr	r3, [pc, #76]	@ (8015930 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80158e2:	7855      	ldrb	r5, [r2, #1]
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80158ea:	6833      	ldr	r3, [r6, #0]
 80158ec:	69df      	ldr	r7, [r3, #28]
 80158ee:	4b11      	ldr	r3, [pc, #68]	@ (8015934 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80158f0:	6818      	ldr	r0, [r3, #0]
 80158f2:	f7fa f861 	bl	800f9b8 <_ZNK8touchgfx5Texts7getTextEt>
 80158f6:	6823      	ldr	r3, [r4, #0]
 80158f8:	4680      	mov	r8, r0
 80158fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80158fc:	4620      	mov	r0, r4
 80158fe:	4798      	blx	r3
 8015900:	6823      	ldr	r3, [r4, #0]
 8015902:	4681      	mov	r9, r0
 8015904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015908:	4620      	mov	r0, r4
 801590a:	4798      	blx	r3
 801590c:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8015910:	9000      	str	r0, [sp, #0]
 8015912:	464b      	mov	r3, r9
 8015914:	4642      	mov	r2, r8
 8015916:	4629      	mov	r1, r5
 8015918:	4630      	mov	r0, r6
 801591a:	47b8      	blx	r7
 801591c:	b003      	add	sp, #12
 801591e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015922:	2000      	movs	r0, #0
 8015924:	e7fa      	b.n	801591c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8015926:	bf00      	nop
 8015928:	2001273c 	.word	0x2001273c
 801592c:	20012738 	.word	0x20012738
 8015930:	20012740 	.word	0x20012740
 8015934:	20012744 	.word	0x20012744

08015938 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015938:	b40e      	push	{r1, r2, r3}
 801593a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801593e:	4b2f      	ldr	r3, [pc, #188]	@ (80159fc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8015940:	881a      	ldrh	r2, [r3, #0]
 8015942:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8015944:	429a      	cmp	r2, r3
 8015946:	b09d      	sub	sp, #116	@ 0x74
 8015948:	4604      	mov	r4, r0
 801594a:	d954      	bls.n	80159f6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801594c:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8015a00 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8015950:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8015a04 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8015954:	aa26      	add	r2, sp, #152	@ 0x98
 8015956:	9202      	str	r2, [sp, #8]
 8015958:	f8d9 2000 	ldr.w	r2, [r9]
 801595c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015960:	f8d8 3000 	ldr.w	r3, [r8]
 8015964:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015968:	682b      	ldr	r3, [r5, #0]
 801596a:	4628      	mov	r0, r5
 801596c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801596e:	4798      	blx	r3
 8015970:	b207      	sxth	r7, r0
 8015972:	4606      	mov	r6, r0
 8015974:	a803      	add	r0, sp, #12
 8015976:	f005 f894 	bl	801aaa2 <_ZN8touchgfx12TextProviderC1Ev>
 801597a:	682b      	ldr	r3, [r5, #0]
 801597c:	4628      	mov	r0, r5
 801597e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015980:	4798      	blx	r3
 8015982:	682b      	ldr	r3, [r5, #0]
 8015984:	4682      	mov	sl, r0
 8015986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015988:	4628      	mov	r0, r5
 801598a:	4798      	blx	r3
 801598c:	4653      	mov	r3, sl
 801598e:	9000      	str	r0, [sp, #0]
 8015990:	9a02      	ldr	r2, [sp, #8]
 8015992:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8015994:	a803      	add	r0, sp, #12
 8015996:	f005 f8df 	bl	801ab58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801599a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 801599c:	f8d9 3000 	ldr.w	r3, [r9]
 80159a0:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 80159a4:	8925      	ldrh	r5, [r4, #8]
 80159a6:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80159aa:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80159ae:	eba5 050c 	sub.w	r5, r5, ip
 80159b2:	784a      	ldrb	r2, [r1, #1]
 80159b4:	f8d8 3000 	ldr.w	r3, [r8]
 80159b8:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 80159bc:	b22d      	sxth	r5, r5
 80159be:	9500      	str	r5, [sp, #0]
 80159c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80159c4:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80159c8:	a803      	add	r0, sp, #12
 80159ca:	f002 fbcb 	bl	8018164 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80159ce:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 80159d2:	18b9      	adds	r1, r7, r2
 80159d4:	2900      	cmp	r1, #0
 80159d6:	b203      	sxth	r3, r0
 80159d8:	dd0b      	ble.n	80159f2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80159da:	3b01      	subs	r3, #1
 80159dc:	fb13 f302 	smulbb	r3, r3, r2
 80159e0:	fb16 3300 	smlabb	r3, r6, r0, r3
 80159e4:	b21f      	sxth	r7, r3
 80159e6:	4638      	mov	r0, r7
 80159e8:	b01d      	add	sp, #116	@ 0x74
 80159ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159ee:	b003      	add	sp, #12
 80159f0:	4770      	bx	lr
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	dcf7      	bgt.n	80159e6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80159f6:	2700      	movs	r7, #0
 80159f8:	e7f5      	b.n	80159e6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80159fa:	bf00      	nop
 80159fc:	2001273c 	.word	0x2001273c
 8015a00:	20012738 	.word	0x20012738
 8015a04:	20012740 	.word	0x20012740

08015a08 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8015a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a0c:	4bbc      	ldr	r3, [pc, #752]	@ (8015d00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8015a0e:	460c      	mov	r4, r1
 8015a10:	881b      	ldrh	r3, [r3, #0]
 8015a12:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8015a14:	428b      	cmp	r3, r1
 8015a16:	b0a9      	sub	sp, #164	@ 0xa4
 8015a18:	4680      	mov	r8, r0
 8015a1a:	d809      	bhi.n	8015a30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8015a22:	e9c0 3200 	strd	r3, r2, [r0]
 8015a26:	6083      	str	r3, [r0, #8]
 8015a28:	4640      	mov	r0, r8
 8015a2a:	b029      	add	sp, #164	@ 0xa4
 8015a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a30:	4eb4      	ldr	r6, [pc, #720]	@ (8015d04 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8015a32:	6833      	ldr	r3, [r6, #0]
 8015a34:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8015a38:	4bb3      	ldr	r3, [pc, #716]	@ (8015d08 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015a40:	4bb2      	ldr	r3, [pc, #712]	@ (8015d0c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8015a42:	6818      	ldr	r0, [r3, #0]
 8015a44:	f7f9 ffb8 	bl	800f9b8 <_ZNK8touchgfx5Texts7getTextEt>
 8015a48:	682b      	ldr	r3, [r5, #0]
 8015a4a:	4681      	mov	r9, r0
 8015a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a4e:	4628      	mov	r0, r5
 8015a50:	4798      	blx	r3
 8015a52:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8015a54:	b203      	sxth	r3, r0
 8015a56:	4407      	add	r7, r0
 8015a58:	9304      	str	r3, [sp, #16]
 8015a5a:	b2bb      	uxth	r3, r7
 8015a5c:	9303      	str	r3, [sp, #12]
 8015a5e:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8015a62:	4682      	mov	sl, r0
 8015a64:	a80f      	add	r0, sp, #60	@ 0x3c
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	f040 80a6 	bne.w	8015bb8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b0>
 8015a6c:	f005 f819 	bl	801aaa2 <_ZN8touchgfx12TextProviderC1Ev>
 8015a70:	682b      	ldr	r3, [r5, #0]
 8015a72:	4628      	mov	r0, r5
 8015a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015a76:	4798      	blx	r3
 8015a78:	682b      	ldr	r3, [r5, #0]
 8015a7a:	4606      	mov	r6, r0
 8015a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a7e:	4628      	mov	r0, r5
 8015a80:	4798      	blx	r3
 8015a82:	6823      	ldr	r3, [r4, #0]
 8015a84:	4607      	mov	r7, r0
 8015a86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015a88:	4620      	mov	r0, r4
 8015a8a:	4798      	blx	r3
 8015a8c:	6823      	ldr	r3, [r4, #0]
 8015a8e:	4683      	mov	fp, r0
 8015a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015a94:	4620      	mov	r0, r4
 8015a96:	4798      	blx	r3
 8015a98:	463b      	mov	r3, r7
 8015a9a:	e9cd b000 	strd	fp, r0, [sp]
 8015a9e:	4649      	mov	r1, r9
 8015aa0:	4632      	mov	r2, r6
 8015aa2:	a80f      	add	r0, sp, #60	@ 0x3c
 8015aa4:	f005 f86d 	bl	801ab82 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8015aa8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8015aac:	f8df b254 	ldr.w	fp, [pc, #596]	@ 8015d04 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8015ab0:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8015ab4:	f04f 0600 	mov.w	r6, #0
 8015ab8:	bf0c      	ite	eq
 8015aba:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8015abe:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8015ac2:	4637      	mov	r7, r6
 8015ac4:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8015ac6:	f8db 3000 	ldr.w	r3, [fp]
 8015aca:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8015ace:	4629      	mov	r1, r5
 8015ad0:	785b      	ldrb	r3, [r3, #1]
 8015ad2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015ad6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015ada:	a80f      	add	r0, sp, #60	@ 0x3c
 8015adc:	f002 f849 	bl	8017b72 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015ae0:	9b03      	ldr	r3, [sp, #12]
 8015ae2:	4286      	cmp	r6, r0
 8015ae4:	bfb8      	it	lt
 8015ae6:	4606      	movlt	r6, r0
 8015ae8:	3701      	adds	r7, #1
 8015aea:	eba9 0903 	sub.w	r9, r9, r3
 8015aee:	a80f      	add	r0, sp, #60	@ 0x3c
 8015af0:	b236      	sxth	r6, r6
 8015af2:	b2bf      	uxth	r7, r7
 8015af4:	fa0f f989 	sxth.w	r9, r9
 8015af8:	f004 fffa 	bl	801aaf0 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8015afc:	b918      	cbnz	r0, 8015b06 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8015afe:	7a2b      	ldrb	r3, [r5, #8]
 8015b00:	444b      	add	r3, r9
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	dcde      	bgt.n	8015ac4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xbc>
 8015b06:	9b03      	ldr	r3, [sp, #12]
 8015b08:	9a04      	ldr	r2, [sp, #16]
 8015b0a:	f895 9009 	ldrb.w	r9, [r5, #9]
 8015b0e:	fb13 f707 	smulbb	r7, r3, r7
 8015b12:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8015b14:	1aff      	subs	r7, r7, r3
 8015b16:	b2bf      	uxth	r7, r7
 8015b18:	b23b      	sxth	r3, r7
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	bfa8      	it	ge
 8015b1e:	4657      	movge	r7, sl
 8015b20:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8015b24:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8015b28:	6823      	ldr	r3, [r4, #0]
 8015b2a:	bf08      	it	eq
 8015b2c:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8015b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015b32:	bf18      	it	ne
 8015b34:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8015b38:	4620      	mov	r0, r4
 8015b3a:	4798      	blx	r3
 8015b3c:	444f      	add	r7, r9
 8015b3e:	fa1f f987 	uxth.w	r9, r7
 8015b42:	2801      	cmp	r0, #1
 8015b44:	fa0f f789 	sxth.w	r7, r9
 8015b48:	b2b3      	uxth	r3, r6
 8015b4a:	f000 80e1 	beq.w	8015d10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8015b4e:	2802      	cmp	r0, #2
 8015b50:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8015b54:	f000 80e2 	beq.w	8015d1c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8015b58:	7aea      	ldrb	r2, [r5, #11]
 8015b5a:	7b2d      	ldrb	r5, [r5, #12]
 8015b5c:	b236      	sxth	r6, r6
 8015b5e:	1ab6      	subs	r6, r6, r2
 8015b60:	442a      	add	r2, r5
 8015b62:	4413      	add	r3, r2
 8015b64:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8015b68:	fa1f fa86 	uxth.w	sl, r6
 8015b6c:	b29b      	uxth	r3, r3
 8015b6e:	2a02      	cmp	r2, #2
 8015b70:	fa0f fb8a 	sxth.w	fp, sl
 8015b74:	b21e      	sxth	r6, r3
 8015b76:	f000 80d5 	beq.w	8015d24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8015b7a:	2a03      	cmp	r2, #3
 8015b7c:	f000 80dd 	beq.w	8015d3a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8015b80:	2a01      	cmp	r2, #1
 8015b82:	f040 80e5 	bne.w	8015d50 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8015b86:	8925      	ldrh	r5, [r4, #8]
 8015b88:	4633      	mov	r3, r6
 8015b8a:	eba5 0909 	sub.w	r9, r5, r9
 8015b8e:	463e      	mov	r6, r7
 8015b90:	465d      	mov	r5, fp
 8015b92:	461f      	mov	r7, r3
 8015b94:	fa0f fb89 	sxth.w	fp, r9
 8015b98:	4b5c      	ldr	r3, [pc, #368]	@ (8015d0c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8015b9a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8015b9c:	6818      	ldr	r0, [r3, #0]
 8015b9e:	f7f9 ff0b 	bl	800f9b8 <_ZNK8touchgfx5Texts7getTextEt>
 8015ba2:	f8a8 b000 	strh.w	fp, [r8]
 8015ba6:	f8a8 5002 	strh.w	r5, [r8, #2]
 8015baa:	f8a8 6004 	strh.w	r6, [r8, #4]
 8015bae:	f8a8 7006 	strh.w	r7, [r8, #6]
 8015bb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8015bb6:	e737      	b.n	8015a28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8015bb8:	f004 ff73 	bl	801aaa2 <_ZN8touchgfx12TextProviderC1Ev>
 8015bbc:	682b      	ldr	r3, [r5, #0]
 8015bbe:	4628      	mov	r0, r5
 8015bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015bc2:	4798      	blx	r3
 8015bc4:	682b      	ldr	r3, [r5, #0]
 8015bc6:	4607      	mov	r7, r0
 8015bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015bca:	4628      	mov	r0, r5
 8015bcc:	4798      	blx	r3
 8015bce:	6823      	ldr	r3, [r4, #0]
 8015bd0:	4683      	mov	fp, r0
 8015bd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015bd4:	4620      	mov	r0, r4
 8015bd6:	4798      	blx	r3
 8015bd8:	6822      	ldr	r2, [r4, #0]
 8015bda:	9005      	str	r0, [sp, #20]
 8015bdc:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8015be0:	4620      	mov	r0, r4
 8015be2:	4790      	blx	r2
 8015be4:	9b05      	ldr	r3, [sp, #20]
 8015be6:	9001      	str	r0, [sp, #4]
 8015be8:	463a      	mov	r2, r7
 8015bea:	4649      	mov	r1, r9
 8015bec:	9300      	str	r3, [sp, #0]
 8015bee:	a80f      	add	r0, sp, #60	@ 0x3c
 8015bf0:	465b      	mov	r3, fp
 8015bf2:	f004 ffc6 	bl	801ab82 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8015bf6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8015bfa:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8015bfe:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8015c00:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8015c04:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8015c08:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015c0c:	bf0a      	itet	eq
 8015c0e:	464a      	moveq	r2, r9
 8015c10:	461a      	movne	r2, r3
 8015c12:	4699      	moveq	r9, r3
 8015c14:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8015c18:	1ad2      	subs	r2, r2, r3
 8015c1a:	6833      	ldr	r3, [r6, #0]
 8015c1c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8015c20:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8015c24:	af0f      	add	r7, sp, #60	@ 0x3c
 8015c26:	7859      	ldrb	r1, [r3, #1]
 8015c28:	9707      	str	r7, [sp, #28]
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8015c30:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015c34:	f88d 1020 	strb.w	r1, [sp, #32]
 8015c38:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8015c3c:	9509      	str	r5, [sp, #36]	@ 0x24
 8015c3e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8015c42:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8015c46:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8015c4a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8015c4e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8015c52:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015c56:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8015c5a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015c5e:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8015c62:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8015c66:	b350      	cbz	r0, 8015cbe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8015c68:	682b      	ldr	r3, [r5, #0]
 8015c6a:	4628      	mov	r0, r5
 8015c6c:	695b      	ldr	r3, [r3, #20]
 8015c6e:	4798      	blx	r3
 8015c70:	4607      	mov	r7, r0
 8015c72:	b320      	cbz	r0, 8015cbe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8015c74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015c76:	6803      	ldr	r3, [r0, #0]
 8015c78:	4639      	mov	r1, r7
 8015c7a:	68db      	ldr	r3, [r3, #12]
 8015c7c:	4798      	blx	r3
 8015c7e:	4606      	mov	r6, r0
 8015c80:	b1e8      	cbz	r0, 8015cbe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8015c82:	7b43      	ldrb	r3, [r0, #13]
 8015c84:	7a82      	ldrb	r2, [r0, #10]
 8015c86:	005b      	lsls	r3, r3, #1
 8015c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015c8c:	4313      	orrs	r3, r2
 8015c8e:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8015c92:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8015c96:	2b06      	cmp	r3, #6
 8015c98:	d111      	bne.n	8015cbe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 8015c9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015c9c:	6803      	ldr	r3, [r0, #0]
 8015c9e:	4632      	mov	r2, r6
 8015ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ca2:	4639      	mov	r1, r7
 8015ca4:	4798      	blx	r3
 8015ca6:	7b73      	ldrb	r3, [r6, #13]
 8015ca8:	005b      	lsls	r3, r3, #1
 8015caa:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015cae:	7ab3      	ldrb	r3, [r6, #10]
 8015cb0:	4313      	orrs	r3, r2
 8015cb2:	4418      	add	r0, r3
 8015cb4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015cb8:	4418      	add	r0, r3
 8015cba:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8015cbe:	2600      	movs	r6, #0
 8015cc0:	4637      	mov	r7, r6
 8015cc2:	a806      	add	r0, sp, #24
 8015cc4:	f002 f94a 	bl	8017f5c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015cc8:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8015ccc:	9b03      	ldr	r3, [sp, #12]
 8015cce:	4286      	cmp	r6, r0
 8015cd0:	eba9 0903 	sub.w	r9, r9, r3
 8015cd4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8015cd8:	bfb8      	it	lt
 8015cda:	4606      	movlt	r6, r0
 8015cdc:	3701      	adds	r7, #1
 8015cde:	b236      	sxth	r6, r6
 8015ce0:	b2bf      	uxth	r7, r7
 8015ce2:	fa0f f989 	sxth.w	r9, r9
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	f43f af0d 	beq.w	8015b06 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8015cec:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	f47f af08 	bne.w	8015b06 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8015cf6:	7a2b      	ldrb	r3, [r5, #8]
 8015cf8:	444b      	add	r3, r9
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	dce1      	bgt.n	8015cc2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ba>
 8015cfe:	e702      	b.n	8015b06 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 8015d00:	2001273c 	.word	0x2001273c
 8015d04:	20012738 	.word	0x20012738
 8015d08:	20012740 	.word	0x20012740
 8015d0c:	20012744 	.word	0x20012744
 8015d10:	ebaa 0606 	sub.w	r6, sl, r6
 8015d14:	2002      	movs	r0, #2
 8015d16:	fb96 f6f0 	sdiv	r6, r6, r0
 8015d1a:	e71d      	b.n	8015b58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 8015d1c:	441e      	add	r6, r3
 8015d1e:	ebaa 0606 	sub.w	r6, sl, r6
 8015d22:	e719      	b.n	8015b58 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 8015d24:	8925      	ldrh	r5, [r4, #8]
 8015d26:	1aed      	subs	r5, r5, r3
 8015d28:	eba5 050a 	sub.w	r5, r5, sl
 8015d2c:	fa0f fb85 	sxth.w	fp, r5
 8015d30:	8965      	ldrh	r5, [r4, #10]
 8015d32:	eba5 0509 	sub.w	r5, r5, r9
 8015d36:	b22d      	sxth	r5, r5
 8015d38:	e72e      	b.n	8015b98 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 8015d3a:	8965      	ldrh	r5, [r4, #10]
 8015d3c:	1aed      	subs	r5, r5, r3
 8015d3e:	eba5 050a 	sub.w	r5, r5, sl
 8015d42:	4633      	mov	r3, r6
 8015d44:	b22d      	sxth	r5, r5
 8015d46:	463e      	mov	r6, r7
 8015d48:	f04f 0b00 	mov.w	fp, #0
 8015d4c:	461f      	mov	r7, r3
 8015d4e:	e723      	b.n	8015b98 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 8015d50:	2500      	movs	r5, #0
 8015d52:	e721      	b.n	8015b98 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>

08015d54 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8015d54:	b513      	push	{r0, r1, r4, lr}
 8015d56:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8015d5a:	4604      	mov	r4, r0
 8015d5c:	b1fb      	cbz	r3, 8015d9e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015d5e:	4b16      	ldr	r3, [pc, #88]	@ (8015db8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8015d60:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8015d62:	881b      	ldrh	r3, [r3, #0]
 8015d64:	428b      	cmp	r3, r1
 8015d66:	d91a      	bls.n	8015d9e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015d68:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	dd16      	ble.n	8015d9e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015d70:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	dd12      	ble.n	8015d9e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015d78:	4b10      	ldr	r3, [pc, #64]	@ (8015dbc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8015d7a:	6818      	ldr	r0, [r3, #0]
 8015d7c:	f7f9 fe1c 	bl	800f9b8 <_ZNK8touchgfx5Texts7getTextEt>
 8015d80:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8015d84:	6822      	ldr	r2, [r4, #0]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	db06      	blt.n	8015d98 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8015d8a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	db02      	blt.n	8015d98 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8015d92:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8015d94:	4298      	cmp	r0, r3
 8015d96:	d004      	beq.n	8015da2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8015d98:	6953      	ldr	r3, [r2, #20]
 8015d9a:	4620      	mov	r0, r4
 8015d9c:	4798      	blx	r3
 8015d9e:	b002      	add	sp, #8
 8015da0:	bd10      	pop	{r4, pc}
 8015da2:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8015da6:	c903      	ldmia	r1, {r0, r1}
 8015da8:	466b      	mov	r3, sp
 8015daa:	e883 0003 	stmia.w	r3, {r0, r1}
 8015dae:	6912      	ldr	r2, [r2, #16]
 8015db0:	4619      	mov	r1, r3
 8015db2:	4620      	mov	r0, r4
 8015db4:	4790      	blx	r2
 8015db6:	e7f2      	b.n	8015d9e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015db8:	2001273c 	.word	0x2001273c
 8015dbc:	20012744 	.word	0x20012744

08015dc0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8015dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dc4:	4b44      	ldr	r3, [pc, #272]	@ (8015ed8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8015dc6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8015dc8:	881b      	ldrh	r3, [r3, #0]
 8015dca:	4293      	cmp	r3, r2
 8015dcc:	b08e      	sub	sp, #56	@ 0x38
 8015dce:	4604      	mov	r4, r0
 8015dd0:	d97e      	bls.n	8015ed0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015dd2:	6808      	ldr	r0, [r1, #0]
 8015dd4:	4d41      	ldr	r5, [pc, #260]	@ (8015edc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8015dd6:	6849      	ldr	r1, [r1, #4]
 8015dd8:	ab05      	add	r3, sp, #20
 8015dda:	c303      	stmia	r3!, {r0, r1}
 8015ddc:	4611      	mov	r1, r2
 8015dde:	6828      	ldr	r0, [r5, #0]
 8015de0:	f7f9 fdea 	bl	800f9b8 <_ZNK8touchgfx5Texts7getTextEt>
 8015de4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	db11      	blt.n	8015e10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015dec:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	db0d      	blt.n	8015e10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015df4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8015df6:	4298      	cmp	r0, r3
 8015df8:	d10a      	bne.n	8015e10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015dfa:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8015dfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e02:	ab09      	add	r3, sp, #36	@ 0x24
 8015e04:	e883 0003 	stmia.w	r3, {r0, r1}
 8015e08:	4619      	mov	r1, r3
 8015e0a:	a805      	add	r0, sp, #20
 8015e0c:	f7fd f840 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 8015e10:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	dd5b      	ble.n	8015ed0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015e18:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	dd57      	ble.n	8015ed0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015e20:	4f2f      	ldr	r7, [pc, #188]	@ (8015ee0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8015e22:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8015e24:	683b      	ldr	r3, [r7, #0]
 8015e26:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8015e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8015ee4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8015e32:	2e00      	cmp	r6, #0
 8015e34:	d04c      	beq.n	8015ed0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015e36:	6823      	ldr	r3, [r4, #0]
 8015e38:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 8015e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015e3e:	4620      	mov	r0, r4
 8015e40:	4798      	blx	r3
 8015e42:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8015e44:	683b      	ldr	r3, [r7, #0]
 8015e46:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 8015e4a:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 8015e4e:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 8015e52:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015e54:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8015e58:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 8015e5c:	785b      	ldrb	r3, [r3, #1]
 8015e5e:	9609      	str	r6, [sp, #36]	@ 0x24
 8015e60:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015e64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015e68:	4b1f      	ldr	r3, [pc, #124]	@ (8015ee8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8015e6a:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 8015e74:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015e76:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 8015e7a:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8015e7e:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 8015e82:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 8015e86:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8015e8a:	b10a      	cbz	r2, 8015e90 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8015e8c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8015e8e:	b906      	cbnz	r6, 8015e92 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8015e90:	689e      	ldr	r6, [r3, #8]
 8015e92:	af07      	add	r7, sp, #28
 8015e94:	4621      	mov	r1, r4
 8015e96:	4638      	mov	r0, r7
 8015e98:	f003 fefe 	bl	8019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015e9c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8015e9e:	6828      	ldr	r0, [r5, #0]
 8015ea0:	f7f9 fd8a 	bl	800f9b8 <_ZNK8touchgfx5Texts7getTextEt>
 8015ea4:	6823      	ldr	r3, [r4, #0]
 8015ea6:	4605      	mov	r5, r0
 8015ea8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015eaa:	4620      	mov	r0, r4
 8015eac:	4798      	blx	r3
 8015eae:	6823      	ldr	r3, [r4, #0]
 8015eb0:	4680      	mov	r8, r0
 8015eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	4798      	blx	r3
 8015eba:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8015ebe:	ab09      	add	r3, sp, #36	@ 0x24
 8015ec0:	9300      	str	r3, [sp, #0]
 8015ec2:	9501      	str	r5, [sp, #4]
 8015ec4:	ab05      	add	r3, sp, #20
 8015ec6:	e897 0006 	ldmia.w	r7, {r1, r2}
 8015eca:	4630      	mov	r0, r6
 8015ecc:	f7f9 fd05 	bl	800f8da <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015ed0:	b00e      	add	sp, #56	@ 0x38
 8015ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ed6:	bf00      	nop
 8015ed8:	2001273c 	.word	0x2001273c
 8015edc:	20012744 	.word	0x20012744
 8015ee0:	20012738 	.word	0x20012738
 8015ee4:	20012740 	.word	0x20012740
 8015ee8:	200126e0 	.word	0x200126e0

08015eec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8015eec:	b538      	push	{r3, r4, r5, lr}
 8015eee:	4b0e      	ldr	r3, [pc, #56]	@ (8015f28 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8015ef0:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8015ef2:	881b      	ldrh	r3, [r3, #0]
 8015ef4:	429a      	cmp	r2, r3
 8015ef6:	4604      	mov	r4, r0
 8015ef8:	d214      	bcs.n	8015f24 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8015efa:	6803      	ldr	r3, [r0, #0]
 8015efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015efe:	4798      	blx	r3
 8015f00:	6823      	ldr	r3, [r4, #0]
 8015f02:	4605      	mov	r5, r0
 8015f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f06:	4620      	mov	r0, r4
 8015f08:	4798      	blx	r3
 8015f0a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8015f0e:	b22d      	sxth	r5, r5
 8015f10:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8015f14:	4601      	mov	r1, r0
 8015f16:	bf06      	itte	eq
 8015f18:	4602      	moveq	r2, r0
 8015f1a:	4629      	moveq	r1, r5
 8015f1c:	462a      	movne	r2, r5
 8015f1e:	4620      	mov	r0, r4
 8015f20:	f7f6 faf6 	bl	800c510 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015f24:	bd38      	pop	{r3, r4, r5, pc}
 8015f26:	bf00      	nop
 8015f28:	2001273c 	.word	0x2001273c

08015f2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8015f2c:	b530      	push	{r4, r5, lr}
 8015f2e:	888b      	ldrh	r3, [r1, #4]
 8015f30:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8015f32:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8015f36:	b085      	sub	sp, #20
 8015f38:	4604      	mov	r4, r0
 8015f3a:	b923      	cbnz	r3, 8015f46 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8015f3c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015f40:	b90b      	cbnz	r3, 8015f46 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8015f42:	f7ff ffd3 	bl	8015eec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8015f46:	6823      	ldr	r3, [r4, #0]
 8015f48:	466d      	mov	r5, sp
 8015f4a:	4621      	mov	r1, r4
 8015f4c:	4628      	mov	r0, r5
 8015f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f52:	4798      	blx	r3
 8015f54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015f58:	343c      	adds	r4, #60	@ 0x3c
 8015f5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015f5e:	b005      	add	sp, #20
 8015f60:	bd30      	pop	{r4, r5, pc}

08015f62 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8015f62:	2300      	movs	r3, #0
 8015f64:	8083      	strh	r3, [r0, #4]
 8015f66:	80c3      	strh	r3, [r0, #6]
 8015f68:	8003      	strh	r3, [r0, #0]
 8015f6a:	8043      	strh	r3, [r0, #2]
 8015f6c:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8015f70:	2bff      	cmp	r3, #255	@ 0xff
 8015f72:	bf01      	itttt	eq
 8015f74:	890b      	ldrheq	r3, [r1, #8]
 8015f76:	8083      	strheq	r3, [r0, #4]
 8015f78:	894b      	ldrheq	r3, [r1, #10]
 8015f7a:	80c3      	strheq	r3, [r0, #6]
 8015f7c:	4770      	bx	lr
	...

08015f80 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8015f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f82:	4604      	mov	r4, r0
 8015f84:	6808      	ldr	r0, [r1, #0]
 8015f86:	6849      	ldr	r1, [r1, #4]
 8015f88:	466b      	mov	r3, sp
 8015f8a:	c303      	stmia	r3!, {r0, r1}
 8015f8c:	6823      	ldr	r3, [r4, #0]
 8015f8e:	4669      	mov	r1, sp
 8015f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f92:	4620      	mov	r0, r4
 8015f94:	4798      	blx	r3
 8015f96:	4b08      	ldr	r3, [pc, #32]	@ (8015fb8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8015f9e:	b10a      	cbz	r2, 8015fa4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8015fa0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8015fa2:	b900      	cbnz	r0, 8015fa6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8015fa4:	6898      	ldr	r0, [r3, #8]
 8015fa6:	6803      	ldr	r3, [r0, #0]
 8015fa8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8015faa:	6a1d      	ldr	r5, [r3, #32]
 8015fac:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8015fb0:	4669      	mov	r1, sp
 8015fb2:	47a8      	blx	r5
 8015fb4:	b003      	add	sp, #12
 8015fb6:	bd30      	pop	{r4, r5, pc}
 8015fb8:	200126e0 	.word	0x200126e0

08015fbc <_ZNK8touchgfx3Box17invalidateContentEv>:
 8015fbc:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8015fc0:	b12a      	cbz	r2, 8015fce <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015fc2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8015fc6:	b112      	cbz	r2, 8015fce <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015fc8:	6803      	ldr	r3, [r0, #0]
 8015fca:	695b      	ldr	r3, [r3, #20]
 8015fcc:	4718      	bx	r3
 8015fce:	4770      	bx	lr

08015fd0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8015fd0:	b570      	push	{r4, r5, r6, lr}
 8015fd2:	880b      	ldrh	r3, [r1, #0]
 8015fd4:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8015fd6:	4605      	mov	r5, r0
 8015fd8:	8813      	ldrh	r3, [r2, #0]
 8015fda:	f825 3f30 	strh.w	r3, [r5, #48]!
 8015fde:	4604      	mov	r4, r0
 8015fe0:	4628      	mov	r0, r5
 8015fe2:	f006 f8e9 	bl	801c1b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015fe6:	4606      	mov	r6, r0
 8015fe8:	4628      	mov	r0, r5
 8015fea:	f006 f919 	bl	801c220 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015fee:	6823      	ldr	r3, [r4, #0]
 8015ff0:	4605      	mov	r5, r0
 8015ff2:	4631      	mov	r1, r6
 8015ff4:	4620      	mov	r0, r4
 8015ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ff8:	4798      	blx	r3
 8015ffa:	6823      	ldr	r3, [r4, #0]
 8015ffc:	4629      	mov	r1, r5
 8015ffe:	4620      	mov	r0, r4
 8016000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016006:	4718      	bx	r3

08016008 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8016008:	b510      	push	{r4, lr}
 801600a:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 801600e:	2bff      	cmp	r3, #255	@ 0xff
 8016010:	4604      	mov	r4, r0
 8016012:	d006      	beq.n	8016022 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8016014:	2300      	movs	r3, #0
 8016016:	8003      	strh	r3, [r0, #0]
 8016018:	8043      	strh	r3, [r0, #2]
 801601a:	8083      	strh	r3, [r0, #4]
 801601c:	80c3      	strh	r3, [r0, #6]
 801601e:	4620      	mov	r0, r4
 8016020:	bd10      	pop	{r4, pc}
 8016022:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8016026:	b11b      	cbz	r3, 8016030 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8016028:	3130      	adds	r1, #48	@ 0x30
 801602a:	f006 f92d 	bl	801c288 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801602e:	e7f6      	b.n	801601e <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8016030:	312e      	adds	r1, #46	@ 0x2e
 8016032:	e7fa      	b.n	801602a <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08016034 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8016034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016038:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801603c:	b08a      	sub	sp, #40	@ 0x28
 801603e:	4604      	mov	r4, r0
 8016040:	4688      	mov	r8, r1
 8016042:	2b00      	cmp	r3, #0
 8016044:	d066      	beq.n	8016114 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8016046:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8016048:	f8ad 3014 	strh.w	r3, [sp, #20]
 801604c:	a805      	add	r0, sp, #20
 801604e:	f006 f8b3 	bl	801c1b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016052:	4607      	mov	r7, r0
 8016054:	a805      	add	r0, sp, #20
 8016056:	f006 f8e3 	bl	801c220 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801605a:	f9b8 6000 	ldrsh.w	r6, [r8]
 801605e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8016062:	4432      	add	r2, r6
 8016064:	b292      	uxth	r2, r2
 8016066:	2300      	movs	r3, #0
 8016068:	fa0f fc82 	sxth.w	ip, r2
 801606c:	459c      	cmp	ip, r3
 801606e:	9306      	str	r3, [sp, #24]
 8016070:	dd52      	ble.n	8016118 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8016072:	42b7      	cmp	r7, r6
 8016074:	dd50      	ble.n	8016118 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8016076:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801607a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801607e:	442b      	add	r3, r5
 8016080:	b29b      	uxth	r3, r3
 8016082:	b219      	sxth	r1, r3
 8016084:	2900      	cmp	r1, #0
 8016086:	dd47      	ble.n	8016118 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8016088:	42a8      	cmp	r0, r5
 801608a:	dd45      	ble.n	8016118 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801608c:	4567      	cmp	r7, ip
 801608e:	bfb8      	it	lt
 8016090:	b2ba      	uxthlt	r2, r7
 8016092:	4288      	cmp	r0, r1
 8016094:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8016098:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801609c:	bfb8      	it	lt
 801609e:	b283      	uxthlt	r3, r0
 80160a0:	1b92      	subs	r2, r2, r6
 80160a2:	1b5b      	subs	r3, r3, r5
 80160a4:	f8ad 201c 	strh.w	r2, [sp, #28]
 80160a8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80160ac:	f8ad 6018 	strh.w	r6, [sp, #24]
 80160b0:	f8ad 501a 	strh.w	r5, [sp, #26]
 80160b4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80160b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80160bc:	429a      	cmp	r2, r3
 80160be:	d026      	beq.n	801610e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80160c0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	dd22      	ble.n	801610e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80160c8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	dd1e      	ble.n	801610e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80160d0:	2300      	movs	r3, #0
 80160d2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80160d6:	6823      	ldr	r3, [r4, #0]
 80160d8:	a908      	add	r1, sp, #32
 80160da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160dc:	4620      	mov	r0, r4
 80160de:	4798      	blx	r3
 80160e0:	4b0f      	ldr	r3, [pc, #60]	@ (8016120 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80160e8:	b10a      	cbz	r2, 80160ee <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 80160ea:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80160ec:	b900      	cbnz	r0, 80160f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 80160ee:	6898      	ldr	r0, [r3, #8]
 80160f0:	6801      	ldr	r1, [r0, #0]
 80160f2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80160f6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80160fa:	2501      	movs	r5, #1
 80160fc:	9502      	str	r5, [sp, #8]
 80160fe:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8016102:	9401      	str	r4, [sp, #4]
 8016104:	ac06      	add	r4, sp, #24
 8016106:	9400      	str	r4, [sp, #0]
 8016108:	688c      	ldr	r4, [r1, #8]
 801610a:	a905      	add	r1, sp, #20
 801610c:	47a0      	blx	r4
 801610e:	b00a      	add	sp, #40	@ 0x28
 8016110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016114:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8016116:	e797      	b.n	8016048 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8016118:	2300      	movs	r3, #0
 801611a:	9307      	str	r3, [sp, #28]
 801611c:	e7ca      	b.n	80160b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801611e:	bf00      	nop
 8016120:	200126e0 	.word	0x200126e0

08016124 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8016124:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8016128:	b12a      	cbz	r2, 8016136 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801612a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801612e:	b112      	cbz	r2, 8016136 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8016130:	6803      	ldr	r3, [r0, #0]
 8016132:	695b      	ldr	r3, [r3, #20]
 8016134:	4718      	bx	r3
 8016136:	4770      	bx	lr

08016138 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8016138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801613c:	4b2f      	ldr	r3, [pc, #188]	@ (80161fc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 801613e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8016140:	881b      	ldrh	r3, [r3, #0]
 8016142:	4293      	cmp	r3, r2
 8016144:	b08d      	sub	sp, #52	@ 0x34
 8016146:	4604      	mov	r4, r0
 8016148:	460f      	mov	r7, r1
 801614a:	d954      	bls.n	80161f6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801614c:	4b2c      	ldr	r3, [pc, #176]	@ (8016200 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801614e:	6819      	ldr	r1, [r3, #0]
 8016150:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8016154:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8016158:	4a2a      	ldr	r2, [pc, #168]	@ (8016204 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801615a:	6812      	ldr	r2, [r2, #0]
 801615c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8016160:	2900      	cmp	r1, #0
 8016162:	d048      	beq.n	80161f6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8016164:	785a      	ldrb	r2, [r3, #1]
 8016166:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801616a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801616e:	4b26      	ldr	r3, [pc, #152]	@ (8016208 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8016170:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8016174:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8016178:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 801617c:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801617e:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 8016182:	9107      	str	r1, [sp, #28]
 8016184:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8016188:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801618c:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8016190:	681a      	ldr	r2, [r3, #0]
 8016192:	f88d 8020 	strb.w	r8, [sp, #32]
 8016196:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 801619a:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 801619e:	9609      	str	r6, [sp, #36]	@ 0x24
 80161a0:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 80161a4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80161a8:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 80161ac:	b10b      	cbz	r3, 80161b2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 80161ae:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 80161b0:	b905      	cbnz	r5, 80161b4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 80161b2:	6895      	ldr	r5, [r2, #8]
 80161b4:	ae05      	add	r6, sp, #20
 80161b6:	4621      	mov	r1, r4
 80161b8:	4630      	mov	r0, r6
 80161ba:	f003 fd6d 	bl	8019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80161be:	4b13      	ldr	r3, [pc, #76]	@ (801620c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 80161c0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80161c2:	6818      	ldr	r0, [r3, #0]
 80161c4:	f7f9 fbf8 	bl	800f9b8 <_ZNK8touchgfx5Texts7getTextEt>
 80161c8:	6823      	ldr	r3, [r4, #0]
 80161ca:	4680      	mov	r8, r0
 80161cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80161ce:	4620      	mov	r0, r4
 80161d0:	4798      	blx	r3
 80161d2:	6823      	ldr	r3, [r4, #0]
 80161d4:	4681      	mov	r9, r0
 80161d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80161da:	4620      	mov	r0, r4
 80161dc:	4798      	blx	r3
 80161de:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80161e2:	ab07      	add	r3, sp, #28
 80161e4:	9300      	str	r3, [sp, #0]
 80161e6:	f8cd 8004 	str.w	r8, [sp, #4]
 80161ea:	463b      	mov	r3, r7
 80161ec:	e896 0006 	ldmia.w	r6, {r1, r2}
 80161f0:	4628      	mov	r0, r5
 80161f2:	f7f9 fb72 	bl	800f8da <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80161f6:	b00d      	add	sp, #52	@ 0x34
 80161f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161fc:	2001273c 	.word	0x2001273c
 8016200:	20012738 	.word	0x20012738
 8016204:	20012740 	.word	0x20012740
 8016208:	200126e0 	.word	0x200126e0
 801620c:	20012744 	.word	0x20012744

08016210 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_>:
 8016210:	4770      	bx	lr

08016212 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 8016212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016216:	461c      	mov	r4, r3
 8016218:	4606      	mov	r6, r0
 801621a:	9f06      	ldr	r7, [sp, #24]
 801621c:	f7ff fed8 	bl	8015fd0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8016220:	8823      	ldrh	r3, [r4, #0]
 8016222:	86b3      	strh	r3, [r6, #52]	@ 0x34
 8016224:	883b      	ldrh	r3, [r7, #0]
 8016226:	86f3      	strh	r3, [r6, #54]	@ 0x36
 8016228:	4638      	mov	r0, r7
 801622a:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 801622e:	f005 ffc3 	bl	801c1b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016232:	f04f 0802 	mov.w	r8, #2
 8016236:	fb95 f5f8 	sdiv	r5, r5, r8
 801623a:	b2ad      	uxth	r5, r5
 801623c:	fb90 f0f8 	sdiv	r0, r0, r8
 8016240:	1a2d      	subs	r5, r5, r0
 8016242:	8735      	strh	r5, [r6, #56]	@ 0x38
 8016244:	4638      	mov	r0, r7
 8016246:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 801624a:	fb94 f4f8 	sdiv	r4, r4, r8
 801624e:	f005 ffe7 	bl	801c220 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016252:	b2a4      	uxth	r4, r4
 8016254:	fb90 f0f8 	sdiv	r0, r0, r8
 8016258:	1a24      	subs	r4, r4, r0
 801625a:	8774      	strh	r4, [r6, #58]	@ 0x3a
 801625c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016260 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 8016260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016264:	4604      	mov	r4, r0
 8016266:	b08c      	sub	sp, #48	@ 0x30
 8016268:	460d      	mov	r5, r1
 801626a:	f7ff fee3 	bl	8016034 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801626e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016272:	2b00      	cmp	r3, #0
 8016274:	d05d      	beq.n	8016332 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd2>
 8016276:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016278:	f8ad 3014 	strh.w	r3, [sp, #20]
 801627c:	a805      	add	r0, sp, #20
 801627e:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	@ 0x38
 8016282:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	@ 0x3a
 8016286:	f005 ff97 	bl	801c1b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801628a:	4606      	mov	r6, r0
 801628c:	a805      	add	r0, sp, #20
 801628e:	f005 ffc7 	bl	801c220 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016292:	6869      	ldr	r1, [r5, #4]
 8016294:	f8ad 001e 	strh.w	r0, [sp, #30]
 8016298:	6828      	ldr	r0, [r5, #0]
 801629a:	f8ad 8018 	strh.w	r8, [sp, #24]
 801629e:	ab08      	add	r3, sp, #32
 80162a0:	ad08      	add	r5, sp, #32
 80162a2:	c303      	stmia	r3!, {r0, r1}
 80162a4:	a906      	add	r1, sp, #24
 80162a6:	4628      	mov	r0, r5
 80162a8:	f8ad 701a 	strh.w	r7, [sp, #26]
 80162ac:	f8ad 601c 	strh.w	r6, [sp, #28]
 80162b0:	f7fc fdee 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 80162b4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80162b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80162bc:	429a      	cmp	r2, r3
 80162be:	d035      	beq.n	801632c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 80162c0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	dd31      	ble.n	801632c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 80162c8:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	dd2d      	ble.n	801632c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xcc>
 80162d0:	2300      	movs	r3, #0
 80162d2:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 80162d6:	6823      	ldr	r3, [r4, #0]
 80162d8:	a90a      	add	r1, sp, #40	@ 0x28
 80162da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162dc:	4620      	mov	r0, r4
 80162de:	4798      	blx	r3
 80162e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80162e4:	8f22      	ldrh	r2, [r4, #56]	@ 0x38
 80162e6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80162ea:	1a9b      	subs	r3, r3, r2
 80162ec:	f8ad 3020 	strh.w	r3, [sp, #32]
 80162f0:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 80162f2:	1ac9      	subs	r1, r1, r3
 80162f4:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 80162f8:	490f      	ldr	r1, [pc, #60]	@ (8016338 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xd8>)
 80162fa:	6809      	ldr	r1, [r1, #0]
 80162fc:	f891 0058 	ldrb.w	r0, [r1, #88]	@ 0x58
 8016300:	b108      	cbz	r0, 8016306 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa6>
 8016302:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
 8016304:	b900      	cbnz	r0, 8016308 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa8>
 8016306:	6888      	ldr	r0, [r1, #8]
 8016308:	f8bd 102a 	ldrh.w	r1, [sp, #42]	@ 0x2a
 801630c:	440b      	add	r3, r1
 801630e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8016312:	2601      	movs	r6, #1
 8016314:	440a      	add	r2, r1
 8016316:	6801      	ldr	r1, [r0, #0]
 8016318:	9602      	str	r6, [sp, #8]
 801631a:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 801631e:	e9cd 5400 	strd	r5, r4, [sp]
 8016322:	b21b      	sxth	r3, r3
 8016324:	688c      	ldr	r4, [r1, #8]
 8016326:	b212      	sxth	r2, r2
 8016328:	a905      	add	r1, sp, #20
 801632a:	47a0      	blx	r4
 801632c:	b00c      	add	sp, #48	@ 0x30
 801632e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016332:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8016334:	e7a0      	b.n	8016278 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x18>
 8016336:	bf00      	nop
 8016338:	200126e0 	.word	0x200126e0

0801633c <_ZN8touchgfx14ButtonWithIconC1Ev>:
 801633c:	b510      	push	{r4, lr}
 801633e:	2101      	movs	r1, #1
 8016340:	2200      	movs	r2, #0
 8016342:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8016346:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 801634a:	4c0e      	ldr	r4, [pc, #56]	@ (8016384 <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 801634c:	8082      	strh	r2, [r0, #4]
 801634e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016352:	80c2      	strh	r2, [r0, #6]
 8016354:	8102      	strh	r2, [r0, #8]
 8016356:	8142      	strh	r2, [r0, #10]
 8016358:	8182      	strh	r2, [r0, #12]
 801635a:	81c2      	strh	r2, [r0, #14]
 801635c:	8202      	strh	r2, [r0, #16]
 801635e:	8242      	strh	r2, [r0, #18]
 8016360:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016364:	61c2      	str	r2, [r0, #28]
 8016366:	8402      	strh	r2, [r0, #32]
 8016368:	8442      	strh	r2, [r0, #34]	@ 0x22
 801636a:	6282      	str	r2, [r0, #40]	@ 0x28
 801636c:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 8016370:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8016372:	8601      	strh	r1, [r0, #48]	@ 0x30
 8016374:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 8016378:	6004      	str	r4, [r0, #0]
 801637a:	8681      	strh	r1, [r0, #52]	@ 0x34
 801637c:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801637e:	8702      	strh	r2, [r0, #56]	@ 0x38
 8016380:	8742      	strh	r2, [r0, #58]	@ 0x3a
 8016382:	bd10      	pop	{r4, pc}
 8016384:	0802e8a8 	.word	0x0802e8a8

08016388 <_ZN8touchgfx7OutlineD1Ev>:
 8016388:	4770      	bx	lr

0801638a <_ZN8touchgfx7OutlineD0Ev>:
 801638a:	b510      	push	{r4, lr}
 801638c:	2130      	movs	r1, #48	@ 0x30
 801638e:	4604      	mov	r4, r0
 8016390:	f014 f8b7 	bl	802a502 <_ZdlPvj>
 8016394:	4620      	mov	r0, r4
 8016396:	bd10      	pop	{r4, pc}

08016398 <_ZN8touchgfx7Outline5resetEv>:
 8016398:	b510      	push	{r4, lr}
 801639a:	4604      	mov	r4, r0
 801639c:	f000 fe82 	bl	80170a4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80163a0:	60e0      	str	r0, [r4, #12]
 80163a2:	f000 fe85 	bl	80170b0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80163a6:	68e3      	ldr	r3, [r4, #12]
 80163a8:	6123      	str	r3, [r4, #16]
 80163aa:	08c0      	lsrs	r0, r0, #3
 80163ac:	2200      	movs	r2, #0
 80163ae:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80163b2:	3801      	subs	r0, #1
 80163b4:	6060      	str	r0, [r4, #4]
 80163b6:	60a2      	str	r2, [r4, #8]
 80163b8:	8019      	strh	r1, [r3, #0]
 80163ba:	8059      	strh	r1, [r3, #2]
 80163bc:	809a      	strh	r2, [r3, #4]
 80163be:	80da      	strh	r2, [r3, #6]
 80163c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80163c2:	f023 0301 	bic.w	r3, r3, #1
 80163c6:	f043 0302 	orr.w	r3, r3, #2
 80163ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80163cc:	bd10      	pop	{r4, pc}
	...

080163d0 <_ZN8touchgfx7OutlineC1Ev>:
 80163d0:	b510      	push	{r4, lr}
 80163d2:	4b0a      	ldr	r3, [pc, #40]	@ (80163fc <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 80163d4:	6003      	str	r3, [r0, #0]
 80163d6:	2300      	movs	r3, #0
 80163d8:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80163dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80163e0:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80163e4:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80163e8:	6243      	str	r3, [r0, #36]	@ 0x24
 80163ea:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80163ee:	4604      	mov	r4, r0
 80163f0:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 80163f4:	f7ff ffd0 	bl	8016398 <_ZN8touchgfx7Outline5resetEv>
 80163f8:	4620      	mov	r0, r4
 80163fa:	bd10      	pop	{r4, pc}
 80163fc:	0802e920 	.word	0x0802e920

08016400 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8016400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016404:	b093      	sub	sp, #76	@ 0x4c
 8016406:	1156      	asrs	r6, r2, #5
 8016408:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801640a:	9305      	str	r3, [sp, #20]
 801640c:	f004 051f 	and.w	r5, r4, #31
 8016410:	1153      	asrs	r3, r2, #5
 8016412:	9504      	str	r5, [sp, #16]
 8016414:	1165      	asrs	r5, r4, #5
 8016416:	9303      	str	r3, [sp, #12]
 8016418:	42ae      	cmp	r6, r5
 801641a:	ea4f 1364 	mov.w	r3, r4, asr #5
 801641e:	9306      	str	r3, [sp, #24]
 8016420:	f002 031f 	and.w	r3, r2, #31
 8016424:	f040 80f8 	bne.w	8016618 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 8016428:	9c04      	ldr	r4, [sp, #16]
 801642a:	9a05      	ldr	r2, [sp, #20]
 801642c:	42a3      	cmp	r3, r4
 801642e:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8016432:	6902      	ldr	r2, [r0, #16]
 8016434:	d125      	bne.n	8016482 <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 8016436:	f9b2 3000 	ldrsh.w	r3, [r2]
 801643a:	459e      	cmp	lr, r3
 801643c:	d103      	bne.n	8016446 <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 801643e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8016442:	429e      	cmp	r6, r3
 8016444:	d035      	beq.n	80164b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016446:	88d1      	ldrh	r1, [r2, #6]
 8016448:	8893      	ldrh	r3, [r2, #4]
 801644a:	430b      	orrs	r3, r1
 801644c:	d010      	beq.n	8016470 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801644e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8016452:	2b00      	cmp	r3, #0
 8016454:	db0c      	blt.n	8016470 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 8016456:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8016458:	428b      	cmp	r3, r1
 801645a:	da09      	bge.n	8016470 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801645c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8016460:	428b      	cmp	r3, r1
 8016462:	bf38      	it	cc
 8016464:	3208      	addcc	r2, #8
 8016466:	f103 0301 	add.w	r3, r3, #1
 801646a:	bf38      	it	cc
 801646c:	6102      	strcc	r2, [r0, #16]
 801646e:	6083      	str	r3, [r0, #8]
 8016470:	6903      	ldr	r3, [r0, #16]
 8016472:	9a03      	ldr	r2, [sp, #12]
 8016474:	f8a3 e000 	strh.w	lr, [r3]
 8016478:	805a      	strh	r2, [r3, #2]
 801647a:	2200      	movs	r2, #0
 801647c:	809a      	strh	r2, [r3, #4]
 801647e:	80da      	strh	r2, [r3, #6]
 8016480:	e017      	b.n	80164b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016482:	9c05      	ldr	r4, [sp, #20]
 8016484:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8016488:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801648c:	f004 041f 	and.w	r4, r4, #31
 8016490:	114e      	asrs	r6, r1, #5
 8016492:	9402      	str	r4, [sp, #8]
 8016494:	9c04      	ldr	r4, [sp, #16]
 8016496:	4576      	cmp	r6, lr
 8016498:	f001 0c1f 	and.w	ip, r1, #31
 801649c:	eba4 0403 	sub.w	r4, r4, r3
 80164a0:	d10a      	bne.n	80164b8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 80164a2:	9b02      	ldr	r3, [sp, #8]
 80164a4:	449c      	add	ip, r3
 80164a6:	44a0      	add	r8, r4
 80164a8:	fb04 a40c 	mla	r4, r4, ip, sl
 80164ac:	f8a2 8004 	strh.w	r8, [r2, #4]
 80164b0:	80d4      	strh	r4, [r2, #6]
 80164b2:	b013      	add	sp, #76	@ 0x4c
 80164b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164b8:	9d05      	ldr	r5, [sp, #20]
 80164ba:	1a69      	subs	r1, r5, r1
 80164bc:	bf5b      	ittet	pl
 80164be:	f1cc 0520 	rsbpl	r5, ip, #32
 80164c2:	436c      	mulpl	r4, r5
 80164c4:	2500      	movmi	r5, #0
 80164c6:	2520      	movpl	r5, #32
 80164c8:	bf44      	itt	mi
 80164ca:	fb04 f40c 	mulmi.w	r4, r4, ip
 80164ce:	4249      	negmi	r1, r1
 80164d0:	9501      	str	r5, [sp, #4]
 80164d2:	9f01      	ldr	r7, [sp, #4]
 80164d4:	fb94 f5f1 	sdiv	r5, r4, r1
 80164d8:	fb01 4415 	mls	r4, r1, r5, r4
 80164dc:	bf54      	ite	pl
 80164de:	f04f 0901 	movpl.w	r9, #1
 80164e2:	f04f 39ff 	movmi.w	r9, #4294967295
 80164e6:	2c00      	cmp	r4, #0
 80164e8:	bfb8      	it	lt
 80164ea:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80164ee:	44bc      	add	ip, r7
 80164f0:	44a8      	add	r8, r5
 80164f2:	fb05 ac0c 	mla	ip, r5, ip, sl
 80164f6:	f8a2 8004 	strh.w	r8, [r2, #4]
 80164fa:	f8a2 c006 	strh.w	ip, [r2, #6]
 80164fe:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016502:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8016506:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801650a:	bfb8      	it	lt
 801650c:	1864      	addlt	r4, r4, r1
 801650e:	ea58 0202 	orrs.w	r2, r8, r2
 8016512:	444e      	add	r6, r9
 8016514:	d011      	beq.n	801653a <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8016516:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801651a:	f1b8 0f00 	cmp.w	r8, #0
 801651e:	db0c      	blt.n	801653a <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8016520:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8016522:	4590      	cmp	r8, r2
 8016524:	da09      	bge.n	801653a <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 8016526:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 801652a:	4590      	cmp	r8, r2
 801652c:	bf3c      	itt	cc
 801652e:	f10c 0208 	addcc.w	r2, ip, #8
 8016532:	6102      	strcc	r2, [r0, #16]
 8016534:	f108 0201 	add.w	r2, r8, #1
 8016538:	6082      	str	r2, [r0, #8]
 801653a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801653e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8016542:	f8ac 6000 	strh.w	r6, [ip]
 8016546:	2700      	movs	r7, #0
 8016548:	45b6      	cmp	lr, r6
 801654a:	f8ac 2002 	strh.w	r2, [ip, #2]
 801654e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8016552:	f8ac 7006 	strh.w	r7, [ip, #6]
 8016556:	442b      	add	r3, r5
 8016558:	d04d      	beq.n	80165f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 801655a:	9f04      	ldr	r7, [sp, #16]
 801655c:	1aff      	subs	r7, r7, r3
 801655e:	443d      	add	r5, r7
 8016560:	016d      	lsls	r5, r5, #5
 8016562:	fb95 f8f1 	sdiv	r8, r5, r1
 8016566:	fb01 5518 	mls	r5, r1, r8, r5
 801656a:	2d00      	cmp	r5, #0
 801656c:	bfb8      	it	lt
 801656e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8016572:	f108 0701 	add.w	r7, r8, #1
 8016576:	bfb8      	it	lt
 8016578:	186d      	addlt	r5, r5, r1
 801657a:	1a64      	subs	r4, r4, r1
 801657c:	9703      	str	r7, [sp, #12]
 801657e:	f04f 0a00 	mov.w	sl, #0
 8016582:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016586:	1964      	adds	r4, r4, r5
 8016588:	bf58      	it	pl
 801658a:	9f03      	ldrpl	r7, [sp, #12]
 801658c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8016590:	bf48      	it	mi
 8016592:	4647      	movmi	r7, r8
 8016594:	44bb      	add	fp, r7
 8016596:	f8ac b004 	strh.w	fp, [ip, #4]
 801659a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801659e:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80165a2:	f8ac b006 	strh.w	fp, [ip, #6]
 80165a6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80165aa:	443b      	add	r3, r7
 80165ac:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80165b0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80165b4:	bf58      	it	pl
 80165b6:	1a64      	subpl	r4, r4, r1
 80165b8:	ea5b 0707 	orrs.w	r7, fp, r7
 80165bc:	444e      	add	r6, r9
 80165be:	d011      	beq.n	80165e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 80165c0:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80165c4:	f1bb 0f00 	cmp.w	fp, #0
 80165c8:	db0c      	blt.n	80165e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 80165ca:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80165cc:	45bb      	cmp	fp, r7
 80165ce:	da09      	bge.n	80165e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 80165d0:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80165d4:	45bb      	cmp	fp, r7
 80165d6:	bf3c      	itt	cc
 80165d8:	f10c 0708 	addcc.w	r7, ip, #8
 80165dc:	6107      	strcc	r7, [r0, #16]
 80165de:	f10b 0701 	add.w	r7, fp, #1
 80165e2:	6087      	str	r7, [r0, #8]
 80165e4:	6907      	ldr	r7, [r0, #16]
 80165e6:	45b6      	cmp	lr, r6
 80165e8:	803e      	strh	r6, [r7, #0]
 80165ea:	807a      	strh	r2, [r7, #2]
 80165ec:	f8a7 a004 	strh.w	sl, [r7, #4]
 80165f0:	f8a7 a006 	strh.w	sl, [r7, #6]
 80165f4:	d1c5      	bne.n	8016582 <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 80165f6:	9a04      	ldr	r2, [sp, #16]
 80165f8:	1ad3      	subs	r3, r2, r3
 80165fa:	6902      	ldr	r2, [r0, #16]
 80165fc:	8891      	ldrh	r1, [r2, #4]
 80165fe:	88d6      	ldrh	r6, [r2, #6]
 8016600:	4419      	add	r1, r3
 8016602:	8091      	strh	r1, [r2, #4]
 8016604:	9902      	ldr	r1, [sp, #8]
 8016606:	f101 0c20 	add.w	ip, r1, #32
 801660a:	9901      	ldr	r1, [sp, #4]
 801660c:	ebac 0c01 	sub.w	ip, ip, r1
 8016610:	fb03 630c 	mla	r3, r3, ip, r6
 8016614:	80d3      	strh	r3, [r2, #6]
 8016616:	e74c      	b.n	80164b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016618:	9d05      	ldr	r5, [sp, #20]
 801661a:	1aa2      	subs	r2, r4, r2
 801661c:	eba5 0501 	sub.w	r5, r5, r1
 8016620:	9508      	str	r5, [sp, #32]
 8016622:	9202      	str	r2, [sp, #8]
 8016624:	f140 8128 	bpl.w	8016878 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 8016628:	9a03      	ldr	r2, [sp, #12]
 801662a:	2a00      	cmp	r2, #0
 801662c:	f6ff af41 	blt.w	80164b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016630:	9a02      	ldr	r2, [sp, #8]
 8016632:	4252      	negs	r2, r2
 8016634:	9202      	str	r2, [sp, #8]
 8016636:	9a06      	ldr	r2, [sp, #24]
 8016638:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801663c:	f04f 34ff 	mov.w	r4, #4294967295
 8016640:	9206      	str	r2, [sp, #24]
 8016642:	462a      	mov	r2, r5
 8016644:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016646:	435a      	muls	r2, r3
 8016648:	2400      	movs	r4, #0
 801664a:	9d02      	ldr	r5, [sp, #8]
 801664c:	9401      	str	r4, [sp, #4]
 801664e:	9c02      	ldr	r4, [sp, #8]
 8016650:	fb92 f4f4 	sdiv	r4, r2, r4
 8016654:	fb05 2214 	mls	r2, r5, r4, r2
 8016658:	2a00      	cmp	r2, #0
 801665a:	9207      	str	r2, [sp, #28]
 801665c:	bfbc      	itt	lt
 801665e:	1952      	addlt	r2, r2, r5
 8016660:	9207      	strlt	r2, [sp, #28]
 8016662:	9a01      	ldr	r2, [sp, #4]
 8016664:	6905      	ldr	r5, [r0, #16]
 8016666:	bfb8      	it	lt
 8016668:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801666c:	eb04 0901 	add.w	r9, r4, r1
 8016670:	429a      	cmp	r2, r3
 8016672:	ea4f 1669 	mov.w	r6, r9, asr #5
 8016676:	f040 8112 	bne.w	801689e <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 801667a:	f9b5 3000 	ldrsh.w	r3, [r5]
 801667e:	429e      	cmp	r6, r3
 8016680:	d104      	bne.n	801668c <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 8016682:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016686:	9a03      	ldr	r2, [sp, #12]
 8016688:	429a      	cmp	r2, r3
 801668a:	d01b      	beq.n	80166c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 801668c:	88ea      	ldrh	r2, [r5, #6]
 801668e:	88ab      	ldrh	r3, [r5, #4]
 8016690:	4313      	orrs	r3, r2
 8016692:	d010      	beq.n	80166b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8016694:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016698:	2a00      	cmp	r2, #0
 801669a:	db0c      	blt.n	80166b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 801669c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801669e:	429a      	cmp	r2, r3
 80166a0:	da09      	bge.n	80166b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 80166a2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80166a6:	429a      	cmp	r2, r3
 80166a8:	bf38      	it	cc
 80166aa:	3508      	addcc	r5, #8
 80166ac:	f102 0201 	add.w	r2, r2, #1
 80166b0:	bf38      	it	cc
 80166b2:	6105      	strcc	r5, [r0, #16]
 80166b4:	6082      	str	r2, [r0, #8]
 80166b6:	6903      	ldr	r3, [r0, #16]
 80166b8:	9a03      	ldr	r2, [sp, #12]
 80166ba:	805a      	strh	r2, [r3, #2]
 80166bc:	2200      	movs	r2, #0
 80166be:	801e      	strh	r6, [r3, #0]
 80166c0:	809a      	strh	r2, [r3, #4]
 80166c2:	80da      	strh	r2, [r3, #6]
 80166c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80166c6:	9a03      	ldr	r2, [sp, #12]
 80166c8:	6901      	ldr	r1, [r0, #16]
 80166ca:	441a      	add	r2, r3
 80166cc:	f9b1 3000 	ldrsh.w	r3, [r1]
 80166d0:	42b3      	cmp	r3, r6
 80166d2:	d103      	bne.n	80166dc <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 80166d4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80166d8:	429a      	cmp	r2, r3
 80166da:	d01a      	beq.n	8016712 <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 80166dc:	88cc      	ldrh	r4, [r1, #6]
 80166de:	888b      	ldrh	r3, [r1, #4]
 80166e0:	4323      	orrs	r3, r4
 80166e2:	d010      	beq.n	8016706 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80166e4:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80166e8:	2c00      	cmp	r4, #0
 80166ea:	db0c      	blt.n	8016706 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80166ec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80166ee:	429c      	cmp	r4, r3
 80166f0:	da09      	bge.n	8016706 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80166f2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80166f6:	429c      	cmp	r4, r3
 80166f8:	bf38      	it	cc
 80166fa:	3108      	addcc	r1, #8
 80166fc:	f104 0401 	add.w	r4, r4, #1
 8016700:	bf38      	it	cc
 8016702:	6101      	strcc	r1, [r0, #16]
 8016704:	6084      	str	r4, [r0, #8]
 8016706:	6903      	ldr	r3, [r0, #16]
 8016708:	2100      	movs	r1, #0
 801670a:	801e      	strh	r6, [r3, #0]
 801670c:	805a      	strh	r2, [r3, #2]
 801670e:	8099      	strh	r1, [r3, #4]
 8016710:	80d9      	strh	r1, [r3, #6]
 8016712:	9b06      	ldr	r3, [sp, #24]
 8016714:	4293      	cmp	r3, r2
 8016716:	f000 8082 	beq.w	801681e <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 801671a:	9b08      	ldr	r3, [sp, #32]
 801671c:	9c02      	ldr	r4, [sp, #8]
 801671e:	9902      	ldr	r1, [sp, #8]
 8016720:	015b      	lsls	r3, r3, #5
 8016722:	fb93 f1f1 	sdiv	r1, r3, r1
 8016726:	fb04 3311 	mls	r3, r4, r1, r3
 801672a:	2b00      	cmp	r3, #0
 801672c:	9103      	str	r1, [sp, #12]
 801672e:	9308      	str	r3, [sp, #32]
 8016730:	da04      	bge.n	801673c <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 8016732:	1e4b      	subs	r3, r1, #1
 8016734:	9303      	str	r3, [sp, #12]
 8016736:	9b08      	ldr	r3, [sp, #32]
 8016738:	4423      	add	r3, r4
 801673a:	9308      	str	r3, [sp, #32]
 801673c:	9b07      	ldr	r3, [sp, #28]
 801673e:	9902      	ldr	r1, [sp, #8]
 8016740:	1a5b      	subs	r3, r3, r1
 8016742:	9307      	str	r3, [sp, #28]
 8016744:	9b01      	ldr	r3, [sp, #4]
 8016746:	f1c3 0320 	rsb	r3, r3, #32
 801674a:	930e      	str	r3, [sp, #56]	@ 0x38
 801674c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801674e:	9b01      	ldr	r3, [sp, #4]
 8016750:	1a5b      	subs	r3, r3, r1
 8016752:	464f      	mov	r7, r9
 8016754:	930a      	str	r3, [sp, #40]	@ 0x28
 8016756:	2600      	movs	r6, #0
 8016758:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801675c:	185b      	adds	r3, r3, r1
 801675e:	bf58      	it	pl
 8016760:	9902      	ldrpl	r1, [sp, #8]
 8016762:	9307      	str	r3, [sp, #28]
 8016764:	bf5d      	ittte	pl
 8016766:	1a5b      	subpl	r3, r3, r1
 8016768:	9307      	strpl	r3, [sp, #28]
 801676a:	9b03      	ldrpl	r3, [sp, #12]
 801676c:	9903      	ldrmi	r1, [sp, #12]
 801676e:	bf58      	it	pl
 8016770:	1c59      	addpl	r1, r3, #1
 8016772:	4489      	add	r9, r1
 8016774:	2a00      	cmp	r2, #0
 8016776:	ea4f 1a69 	mov.w	sl, r9, asr #5
 801677a:	db2e      	blt.n	80167da <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801677c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801677e:	4293      	cmp	r3, r2
 8016780:	dd2b      	ble.n	80167da <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8016782:	9c01      	ldr	r4, [sp, #4]
 8016784:	6905      	ldr	r5, [r0, #16]
 8016786:	46a0      	mov	r8, r4
 8016788:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801678a:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 801678e:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8016792:	45a0      	cmp	r8, r4
 8016794:	f040 814f 	bne.w	8016a36 <_ZN8touchgfx7Outline10renderLineEiiii+0x636>
 8016798:	f9b5 1000 	ldrsh.w	r1, [r5]
 801679c:	4551      	cmp	r1, sl
 801679e:	d103      	bne.n	80167a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 80167a0:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80167a4:	4291      	cmp	r1, r2
 80167a6:	d018      	beq.n	80167da <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80167a8:	ea5c 010e 	orrs.w	r1, ip, lr
 80167ac:	d00f      	beq.n	80167ce <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 80167ae:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80167b2:	2900      	cmp	r1, #0
 80167b4:	db0b      	blt.n	80167ce <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 80167b6:	428b      	cmp	r3, r1
 80167b8:	dd09      	ble.n	80167ce <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 80167ba:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80167be:	4299      	cmp	r1, r3
 80167c0:	bf38      	it	cc
 80167c2:	3508      	addcc	r5, #8
 80167c4:	f101 0101 	add.w	r1, r1, #1
 80167c8:	bf38      	it	cc
 80167ca:	6105      	strcc	r5, [r0, #16]
 80167cc:	6081      	str	r1, [r0, #8]
 80167ce:	6903      	ldr	r3, [r0, #16]
 80167d0:	f8a3 a000 	strh.w	sl, [r3]
 80167d4:	805a      	strh	r2, [r3, #2]
 80167d6:	809e      	strh	r6, [r3, #4]
 80167d8:	80de      	strh	r6, [r3, #6]
 80167da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80167dc:	6901      	ldr	r1, [r0, #16]
 80167de:	441a      	add	r2, r3
 80167e0:	88cc      	ldrh	r4, [r1, #6]
 80167e2:	888b      	ldrh	r3, [r1, #4]
 80167e4:	4323      	orrs	r3, r4
 80167e6:	d010      	beq.n	801680a <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 80167e8:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80167ec:	2c00      	cmp	r4, #0
 80167ee:	db0c      	blt.n	801680a <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 80167f0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80167f2:	429c      	cmp	r4, r3
 80167f4:	da09      	bge.n	801680a <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 80167f6:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80167fa:	429c      	cmp	r4, r3
 80167fc:	bf38      	it	cc
 80167fe:	3108      	addcc	r1, #8
 8016800:	f104 0401 	add.w	r4, r4, #1
 8016804:	bf38      	it	cc
 8016806:	6101      	strcc	r1, [r0, #16]
 8016808:	6084      	str	r4, [r0, #8]
 801680a:	6903      	ldr	r3, [r0, #16]
 801680c:	f8a3 a000 	strh.w	sl, [r3]
 8016810:	805a      	strh	r2, [r3, #2]
 8016812:	809e      	strh	r6, [r3, #4]
 8016814:	80de      	strh	r6, [r3, #6]
 8016816:	9b06      	ldr	r3, [sp, #24]
 8016818:	4293      	cmp	r3, r2
 801681a:	464f      	mov	r7, r9
 801681c:	d19c      	bne.n	8016758 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 801681e:	9b01      	ldr	r3, [sp, #4]
 8016820:	6907      	ldr	r7, [r0, #16]
 8016822:	f1c3 0620 	rsb	r6, r3, #32
 8016826:	9b05      	ldr	r3, [sp, #20]
 8016828:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801682c:	9b04      	ldr	r3, [sp, #16]
 801682e:	429e      	cmp	r6, r3
 8016830:	f040 81cc 	bne.w	8016bcc <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 8016834:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016838:	459e      	cmp	lr, r3
 801683a:	d104      	bne.n	8016846 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 801683c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016840:	429a      	cmp	r2, r3
 8016842:	f43f ae36 	beq.w	80164b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016846:	88f9      	ldrh	r1, [r7, #6]
 8016848:	88bb      	ldrh	r3, [r7, #4]
 801684a:	430b      	orrs	r3, r1
 801684c:	d010      	beq.n	8016870 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 801684e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016852:	2b00      	cmp	r3, #0
 8016854:	db0c      	blt.n	8016870 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 8016856:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8016858:	428b      	cmp	r3, r1
 801685a:	da09      	bge.n	8016870 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 801685c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8016860:	428b      	cmp	r3, r1
 8016862:	bf38      	it	cc
 8016864:	3708      	addcc	r7, #8
 8016866:	f103 0301 	add.w	r3, r3, #1
 801686a:	bf38      	it	cc
 801686c:	6107      	strcc	r7, [r0, #16]
 801686e:	6083      	str	r3, [r0, #8]
 8016870:	6903      	ldr	r3, [r0, #16]
 8016872:	f8a3 e000 	strh.w	lr, [r3]
 8016876:	e5ff      	b.n	8016478 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 8016878:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801687a:	9c03      	ldr	r4, [sp, #12]
 801687c:	42a2      	cmp	r2, r4
 801687e:	f6ff ae18 	blt.w	80164b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016882:	9c06      	ldr	r4, [sp, #24]
 8016884:	42a2      	cmp	r2, r4
 8016886:	bfb8      	it	lt
 8016888:	3201      	addlt	r2, #1
 801688a:	9c08      	ldr	r4, [sp, #32]
 801688c:	bfb8      	it	lt
 801688e:	9206      	strlt	r2, [sp, #24]
 8016890:	f1c3 0220 	rsb	r2, r3, #32
 8016894:	4362      	muls	r2, r4
 8016896:	2401      	movs	r4, #1
 8016898:	940b      	str	r4, [sp, #44]	@ 0x2c
 801689a:	2420      	movs	r4, #32
 801689c:	e6d5      	b.n	801664a <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 801689e:	f009 021f 	and.w	r2, r9, #31
 80168a2:	ea4f 1861 	mov.w	r8, r1, asr #5
 80168a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80168a8:	9a01      	ldr	r2, [sp, #4]
 80168aa:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80168ae:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80168b2:	45b0      	cmp	r8, r6
 80168b4:	f001 011f 	and.w	r1, r1, #31
 80168b8:	eba2 0203 	sub.w	r2, r2, r3
 80168bc:	d108      	bne.n	80168d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 80168be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80168c0:	4419      	add	r1, r3
 80168c2:	4496      	add	lr, r2
 80168c4:	fb02 a101 	mla	r1, r2, r1, sl
 80168c8:	f8a5 e004 	strh.w	lr, [r5, #4]
 80168cc:	80e9      	strh	r1, [r5, #6]
 80168ce:	e6f9      	b.n	80166c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 80168d0:	2c00      	cmp	r4, #0
 80168d2:	f2c0 80a9 	blt.w	8016a28 <_ZN8touchgfx7Outline10renderLineEiiii+0x628>
 80168d6:	2701      	movs	r7, #1
 80168d8:	f1c1 0c20 	rsb	ip, r1, #32
 80168dc:	970a      	str	r7, [sp, #40]	@ 0x28
 80168de:	fb02 f20c 	mul.w	r2, r2, ip
 80168e2:	2720      	movs	r7, #32
 80168e4:	9709      	str	r7, [sp, #36]	@ 0x24
 80168e6:	fb92 fcf4 	sdiv	ip, r2, r4
 80168ea:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80168ec:	fb04 221c 	mls	r2, r4, ip, r2
 80168f0:	2a00      	cmp	r2, #0
 80168f2:	bfb8      	it	lt
 80168f4:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80168f8:	4439      	add	r1, r7
 80168fa:	fb0c a101 	mla	r1, ip, r1, sl
 80168fe:	80e9      	strh	r1, [r5, #6]
 8016900:	44e6      	add	lr, ip
 8016902:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016904:	f8a5 e004 	strh.w	lr, [r5, #4]
 8016908:	eb08 0501 	add.w	r5, r8, r1
 801690c:	6901      	ldr	r1, [r0, #16]
 801690e:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8016912:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8016916:	bfb8      	it	lt
 8016918:	1912      	addlt	r2, r2, r4
 801691a:	ea58 070e 	orrs.w	r7, r8, lr
 801691e:	d010      	beq.n	8016942 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8016920:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8016924:	f1be 0f00 	cmp.w	lr, #0
 8016928:	db0b      	blt.n	8016942 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 801692a:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801692c:	45be      	cmp	lr, r7
 801692e:	da08      	bge.n	8016942 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8016930:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8016934:	45be      	cmp	lr, r7
 8016936:	bf3c      	itt	cc
 8016938:	3108      	addcc	r1, #8
 801693a:	6101      	strcc	r1, [r0, #16]
 801693c:	f10e 0101 	add.w	r1, lr, #1
 8016940:	6081      	str	r1, [r0, #8]
 8016942:	6901      	ldr	r1, [r0, #16]
 8016944:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8016948:	800d      	strh	r5, [r1, #0]
 801694a:	f04f 0e00 	mov.w	lr, #0
 801694e:	42ae      	cmp	r6, r5
 8016950:	f8a1 8002 	strh.w	r8, [r1, #2]
 8016954:	f8a1 e004 	strh.w	lr, [r1, #4]
 8016958:	f8a1 e006 	strh.w	lr, [r1, #6]
 801695c:	4463      	add	r3, ip
 801695e:	d054      	beq.n	8016a0a <_ZN8touchgfx7Outline10renderLineEiiii+0x60a>
 8016960:	9901      	ldr	r1, [sp, #4]
 8016962:	1ac9      	subs	r1, r1, r3
 8016964:	4461      	add	r1, ip
 8016966:	0149      	lsls	r1, r1, #5
 8016968:	fb91 fef4 	sdiv	lr, r1, r4
 801696c:	fb04 111e 	mls	r1, r4, lr, r1
 8016970:	2900      	cmp	r1, #0
 8016972:	bfb8      	it	lt
 8016974:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8016978:	f10e 0701 	add.w	r7, lr, #1
 801697c:	bfb8      	it	lt
 801697e:	1909      	addlt	r1, r1, r4
 8016980:	1b12      	subs	r2, r2, r4
 8016982:	970d      	str	r7, [sp, #52]	@ 0x34
 8016984:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8016988:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801698a:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801698e:	1852      	adds	r2, r2, r1
 8016990:	bf54      	ite	pl
 8016992:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8016996:	46f4      	movmi	ip, lr
 8016998:	44e3      	add	fp, ip
 801699a:	f8aa b004 	strh.w	fp, [sl, #4]
 801699e:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80169a2:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80169a6:	f8aa b006 	strh.w	fp, [sl, #6]
 80169aa:	4463      	add	r3, ip
 80169ac:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80169b0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80169b4:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80169b8:	bf58      	it	pl
 80169ba:	1b12      	subpl	r2, r2, r4
 80169bc:	443d      	add	r5, r7
 80169be:	ea5b 070a 	orrs.w	r7, fp, sl
 80169c2:	d014      	beq.n	80169ee <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 80169c4:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80169c8:	f1ba 0f00 	cmp.w	sl, #0
 80169cc:	db0f      	blt.n	80169ee <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 80169ce:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80169d0:	45ba      	cmp	sl, r7
 80169d2:	da0c      	bge.n	80169ee <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 80169d4:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80169d8:	45ba      	cmp	sl, r7
 80169da:	bf38      	it	cc
 80169dc:	f10c 0c08 	addcc.w	ip, ip, #8
 80169e0:	f10a 0a01 	add.w	sl, sl, #1
 80169e4:	bf38      	it	cc
 80169e6:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80169ea:	f8c0 a008 	str.w	sl, [r0, #8]
 80169ee:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80169f2:	f04f 0700 	mov.w	r7, #0
 80169f6:	42ae      	cmp	r6, r5
 80169f8:	f8ac 5000 	strh.w	r5, [ip]
 80169fc:	f8ac 8002 	strh.w	r8, [ip, #2]
 8016a00:	f8ac 7004 	strh.w	r7, [ip, #4]
 8016a04:	f8ac 7006 	strh.w	r7, [ip, #6]
 8016a08:	d1bc      	bne.n	8016984 <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 8016a0a:	6904      	ldr	r4, [r0, #16]
 8016a0c:	9a01      	ldr	r2, [sp, #4]
 8016a0e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016a10:	1ad3      	subs	r3, r2, r3
 8016a12:	88a2      	ldrh	r2, [r4, #4]
 8016a14:	441a      	add	r2, r3
 8016a16:	80a2      	strh	r2, [r4, #4]
 8016a18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016a1a:	3120      	adds	r1, #32
 8016a1c:	1a89      	subs	r1, r1, r2
 8016a1e:	88e2      	ldrh	r2, [r4, #6]
 8016a20:	fb03 2301 	mla	r3, r3, r1, r2
 8016a24:	80e3      	strh	r3, [r4, #6]
 8016a26:	e64d      	b.n	80166c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8016a28:	f04f 37ff 	mov.w	r7, #4294967295
 8016a2c:	970a      	str	r7, [sp, #40]	@ 0x28
 8016a2e:	434a      	muls	r2, r1
 8016a30:	4264      	negs	r4, r4
 8016a32:	2700      	movs	r7, #0
 8016a34:	e756      	b.n	80168e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 8016a36:	ea4f 1867 	mov.w	r8, r7, asr #5
 8016a3a:	f009 031f 	and.w	r3, r9, #31
 8016a3e:	45d0      	cmp	r8, sl
 8016a40:	f007 071f 	and.w	r7, r7, #31
 8016a44:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016a46:	fa1f fc8c 	uxth.w	ip, ip
 8016a4a:	fa1f fe8e 	uxth.w	lr, lr
 8016a4e:	d10a      	bne.n	8016a66 <_ZN8touchgfx7Outline10renderLineEiiii+0x666>
 8016a50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016a52:	449c      	add	ip, r3
 8016a54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016a56:	f8a5 c004 	strh.w	ip, [r5, #4]
 8016a5a:	441f      	add	r7, r3
 8016a5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016a5e:	fb03 e707 	mla	r7, r3, r7, lr
 8016a62:	80ef      	strh	r7, [r5, #6]
 8016a64:	e6b9      	b.n	80167da <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8016a66:	2900      	cmp	r1, #0
 8016a68:	f2c0 80a8 	blt.w	8016bbc <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 8016a6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8016a6e:	f1c7 0320 	rsb	r3, r7, #32
 8016a72:	4363      	muls	r3, r4
 8016a74:	2401      	movs	r4, #1
 8016a76:	940d      	str	r4, [sp, #52]	@ 0x34
 8016a78:	2420      	movs	r4, #32
 8016a7a:	940c      	str	r4, [sp, #48]	@ 0x30
 8016a7c:	fb93 f4f1 	sdiv	r4, r3, r1
 8016a80:	fb01 3b14 	mls	fp, r1, r4, r3
 8016a84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a86:	f1bb 0f00 	cmp.w	fp, #0
 8016a8a:	bfb8      	it	lt
 8016a8c:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8016a90:	441f      	add	r7, r3
 8016a92:	fb04 e707 	mla	r7, r4, r7, lr
 8016a96:	44a4      	add	ip, r4
 8016a98:	f8a5 c004 	strh.w	ip, [r5, #4]
 8016a9c:	80ef      	strh	r7, [r5, #6]
 8016a9e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016aa2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016aa4:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8016aa8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016aac:	bfb8      	it	lt
 8016aae:	448b      	addlt	fp, r1
 8016ab0:	eb08 0503 	add.w	r5, r8, r3
 8016ab4:	ea5e 0307 	orrs.w	r3, lr, r7
 8016ab8:	d011      	beq.n	8016ade <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 8016aba:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8016abe:	f1be 0f00 	cmp.w	lr, #0
 8016ac2:	db0c      	blt.n	8016ade <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 8016ac4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8016ac6:	45be      	cmp	lr, r7
 8016ac8:	da09      	bge.n	8016ade <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 8016aca:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8016ace:	45be      	cmp	lr, r7
 8016ad0:	bf3c      	itt	cc
 8016ad2:	f10c 0708 	addcc.w	r7, ip, #8
 8016ad6:	6107      	strcc	r7, [r0, #16]
 8016ad8:	f10e 0701 	add.w	r7, lr, #1
 8016adc:	6087      	str	r7, [r0, #8]
 8016ade:	6907      	ldr	r7, [r0, #16]
 8016ae0:	b213      	sxth	r3, r2
 8016ae2:	9310      	str	r3, [sp, #64]	@ 0x40
 8016ae4:	807b      	strh	r3, [r7, #2]
 8016ae6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ae8:	803d      	strh	r5, [r7, #0]
 8016aea:	4555      	cmp	r5, sl
 8016aec:	80be      	strh	r6, [r7, #4]
 8016aee:	80fe      	strh	r6, [r7, #6]
 8016af0:	eb04 0c03 	add.w	ip, r4, r3
 8016af4:	d051      	beq.n	8016b9a <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 8016af6:	9b01      	ldr	r3, [sp, #4]
 8016af8:	eba3 070c 	sub.w	r7, r3, ip
 8016afc:	443c      	add	r4, r7
 8016afe:	0164      	lsls	r4, r4, #5
 8016b00:	fb94 f8f1 	sdiv	r8, r4, r1
 8016b04:	fb01 4418 	mls	r4, r1, r8, r4
 8016b08:	2c00      	cmp	r4, #0
 8016b0a:	bfb8      	it	lt
 8016b0c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8016b10:	ebab 0301 	sub.w	r3, fp, r1
 8016b14:	f108 0701 	add.w	r7, r8, #1
 8016b18:	bfb8      	it	lt
 8016b1a:	1864      	addlt	r4, r4, r1
 8016b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b1e:	9711      	str	r7, [sp, #68]	@ 0x44
 8016b20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b22:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8016b26:	191b      	adds	r3, r3, r4
 8016b28:	bf58      	it	pl
 8016b2a:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8016b2c:	f8be b004 	ldrh.w	fp, [lr, #4]
 8016b30:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b32:	bf48      	it	mi
 8016b34:	4647      	movmi	r7, r8
 8016b36:	44bb      	add	fp, r7
 8016b38:	f8ae b004 	strh.w	fp, [lr, #4]
 8016b3c:	f8be b006 	ldrh.w	fp, [lr, #6]
 8016b40:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8016b44:	f8ae b006 	strh.w	fp, [lr, #6]
 8016b48:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8016b4c:	44bc      	add	ip, r7
 8016b4e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8016b50:	f8be b006 	ldrh.w	fp, [lr, #6]
 8016b54:	443d      	add	r5, r7
 8016b56:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8016b5a:	bf5c      	itt	pl
 8016b5c:	1a5b      	subpl	r3, r3, r1
 8016b5e:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8016b60:	ea5b 0307 	orrs.w	r3, fp, r7
 8016b64:	d011      	beq.n	8016b8a <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8016b66:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8016b6a:	f1bb 0f00 	cmp.w	fp, #0
 8016b6e:	db0c      	blt.n	8016b8a <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8016b70:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8016b72:	45bb      	cmp	fp, r7
 8016b74:	da09      	bge.n	8016b8a <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8016b76:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8016b7a:	45bb      	cmp	fp, r7
 8016b7c:	bf3c      	itt	cc
 8016b7e:	f10e 0708 	addcc.w	r7, lr, #8
 8016b82:	6107      	strcc	r7, [r0, #16]
 8016b84:	f10b 0701 	add.w	r7, fp, #1
 8016b88:	6087      	str	r7, [r0, #8]
 8016b8a:	6907      	ldr	r7, [r0, #16]
 8016b8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016b8e:	803d      	strh	r5, [r7, #0]
 8016b90:	4555      	cmp	r5, sl
 8016b92:	807b      	strh	r3, [r7, #2]
 8016b94:	80be      	strh	r6, [r7, #4]
 8016b96:	80fe      	strh	r6, [r7, #6]
 8016b98:	d1c2      	bne.n	8016b20 <_ZN8touchgfx7Outline10renderLineEiiii+0x720>
 8016b9a:	9b01      	ldr	r3, [sp, #4]
 8016b9c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8016b9e:	eba3 0c0c 	sub.w	ip, r3, ip
 8016ba2:	6903      	ldr	r3, [r0, #16]
 8016ba4:	8899      	ldrh	r1, [r3, #4]
 8016ba6:	4461      	add	r1, ip
 8016ba8:	8099      	strh	r1, [r3, #4]
 8016baa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016bac:	3720      	adds	r7, #32
 8016bae:	1a7f      	subs	r7, r7, r1
 8016bb0:	88d9      	ldrh	r1, [r3, #6]
 8016bb2:	fb0c 1c07 	mla	ip, ip, r7, r1
 8016bb6:	f8a3 c006 	strh.w	ip, [r3, #6]
 8016bba:	e60e      	b.n	80167da <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8016bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016bbe:	f04f 34ff 	mov.w	r4, #4294967295
 8016bc2:	940d      	str	r4, [sp, #52]	@ 0x34
 8016bc4:	437b      	muls	r3, r7
 8016bc6:	4249      	negs	r1, r1
 8016bc8:	2400      	movs	r4, #0
 8016bca:	e756      	b.n	8016a7a <_ZN8touchgfx7Outline10renderLineEiiii+0x67a>
 8016bcc:	9905      	ldr	r1, [sp, #20]
 8016bce:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8016bd2:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8016bd6:	f001 011f 	and.w	r1, r1, #31
 8016bda:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8016bde:	9102      	str	r1, [sp, #8]
 8016be0:	9904      	ldr	r1, [sp, #16]
 8016be2:	45f3      	cmp	fp, lr
 8016be4:	f009 0c1f 	and.w	ip, r9, #31
 8016be8:	eba1 0406 	sub.w	r4, r1, r6
 8016bec:	d108      	bne.n	8016c00 <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 8016bee:	9b02      	ldr	r3, [sp, #8]
 8016bf0:	449c      	add	ip, r3
 8016bf2:	44a0      	add	r8, r4
 8016bf4:	fb04 a40c 	mla	r4, r4, ip, sl
 8016bf8:	f8a7 8004 	strh.w	r8, [r7, #4]
 8016bfc:	80fc      	strh	r4, [r7, #6]
 8016bfe:	e458      	b.n	80164b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8016c00:	9905      	ldr	r1, [sp, #20]
 8016c02:	ebb1 0109 	subs.w	r1, r1, r9
 8016c06:	bf5b      	ittet	pl
 8016c08:	f1cc 0520 	rsbpl	r5, ip, #32
 8016c0c:	436c      	mulpl	r4, r5
 8016c0e:	2500      	movmi	r5, #0
 8016c10:	2520      	movpl	r5, #32
 8016c12:	bf44      	itt	mi
 8016c14:	fb04 f40c 	mulmi.w	r4, r4, ip
 8016c18:	4249      	negmi	r1, r1
 8016c1a:	9501      	str	r5, [sp, #4]
 8016c1c:	9b01      	ldr	r3, [sp, #4]
 8016c1e:	fb94 f5f1 	sdiv	r5, r4, r1
 8016c22:	fb01 4415 	mls	r4, r1, r5, r4
 8016c26:	bf54      	ite	pl
 8016c28:	f04f 0901 	movpl.w	r9, #1
 8016c2c:	f04f 39ff 	movmi.w	r9, #4294967295
 8016c30:	2c00      	cmp	r4, #0
 8016c32:	bfb8      	it	lt
 8016c34:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8016c38:	449c      	add	ip, r3
 8016c3a:	44a8      	add	r8, r5
 8016c3c:	fb05 ac0c 	mla	ip, r5, ip, sl
 8016c40:	f8a7 8004 	strh.w	r8, [r7, #4]
 8016c44:	f8a7 c006 	strh.w	ip, [r7, #6]
 8016c48:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016c4c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8016c50:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016c54:	bfb8      	it	lt
 8016c56:	1864      	addlt	r4, r4, r1
 8016c58:	ea58 0707 	orrs.w	r7, r8, r7
 8016c5c:	eb0b 0309 	add.w	r3, fp, r9
 8016c60:	d011      	beq.n	8016c86 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8016c62:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8016c66:	f1b8 0f00 	cmp.w	r8, #0
 8016c6a:	db0c      	blt.n	8016c86 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8016c6c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8016c6e:	45b8      	cmp	r8, r7
 8016c70:	da09      	bge.n	8016c86 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8016c72:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8016c76:	45b8      	cmp	r8, r7
 8016c78:	bf3c      	itt	cc
 8016c7a:	f10c 0708 	addcc.w	r7, ip, #8
 8016c7e:	6107      	strcc	r7, [r0, #16]
 8016c80:	f108 0701 	add.w	r7, r8, #1
 8016c84:	6087      	str	r7, [r0, #8]
 8016c86:	6907      	ldr	r7, [r0, #16]
 8016c88:	f04f 0c00 	mov.w	ip, #0
 8016c8c:	b212      	sxth	r2, r2
 8016c8e:	459e      	cmp	lr, r3
 8016c90:	803b      	strh	r3, [r7, #0]
 8016c92:	807a      	strh	r2, [r7, #2]
 8016c94:	f8a7 c004 	strh.w	ip, [r7, #4]
 8016c98:	f8a7 c006 	strh.w	ip, [r7, #6]
 8016c9c:	442e      	add	r6, r5
 8016c9e:	d04d      	beq.n	8016d3c <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 8016ca0:	9f04      	ldr	r7, [sp, #16]
 8016ca2:	1bbf      	subs	r7, r7, r6
 8016ca4:	443d      	add	r5, r7
 8016ca6:	016d      	lsls	r5, r5, #5
 8016ca8:	fb95 f8f1 	sdiv	r8, r5, r1
 8016cac:	fb01 5518 	mls	r5, r1, r8, r5
 8016cb0:	4565      	cmp	r5, ip
 8016cb2:	bfb8      	it	lt
 8016cb4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8016cb8:	f108 0701 	add.w	r7, r8, #1
 8016cbc:	bfb8      	it	lt
 8016cbe:	186d      	addlt	r5, r5, r1
 8016cc0:	1a64      	subs	r4, r4, r1
 8016cc2:	9703      	str	r7, [sp, #12]
 8016cc4:	f04f 0a00 	mov.w	sl, #0
 8016cc8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016ccc:	1964      	adds	r4, r4, r5
 8016cce:	bf58      	it	pl
 8016cd0:	9f03      	ldrpl	r7, [sp, #12]
 8016cd2:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8016cd6:	bf48      	it	mi
 8016cd8:	4647      	movmi	r7, r8
 8016cda:	44bb      	add	fp, r7
 8016cdc:	f8ac b004 	strh.w	fp, [ip, #4]
 8016ce0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016ce4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8016ce8:	f8ac b006 	strh.w	fp, [ip, #6]
 8016cec:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016cf0:	443e      	add	r6, r7
 8016cf2:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016cf6:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016cfa:	bf58      	it	pl
 8016cfc:	1a64      	subpl	r4, r4, r1
 8016cfe:	ea5b 0707 	orrs.w	r7, fp, r7
 8016d02:	444b      	add	r3, r9
 8016d04:	d011      	beq.n	8016d2a <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8016d06:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8016d0a:	f1bb 0f00 	cmp.w	fp, #0
 8016d0e:	db0c      	blt.n	8016d2a <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8016d10:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8016d12:	45bb      	cmp	fp, r7
 8016d14:	da09      	bge.n	8016d2a <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8016d16:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8016d1a:	45bb      	cmp	fp, r7
 8016d1c:	bf3c      	itt	cc
 8016d1e:	f10c 0708 	addcc.w	r7, ip, #8
 8016d22:	6107      	strcc	r7, [r0, #16]
 8016d24:	f10b 0701 	add.w	r7, fp, #1
 8016d28:	6087      	str	r7, [r0, #8]
 8016d2a:	6907      	ldr	r7, [r0, #16]
 8016d2c:	459e      	cmp	lr, r3
 8016d2e:	803b      	strh	r3, [r7, #0]
 8016d30:	807a      	strh	r2, [r7, #2]
 8016d32:	f8a7 a004 	strh.w	sl, [r7, #4]
 8016d36:	f8a7 a006 	strh.w	sl, [r7, #6]
 8016d3a:	d1c5      	bne.n	8016cc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 8016d3c:	9b04      	ldr	r3, [sp, #16]
 8016d3e:	1b9e      	subs	r6, r3, r6
 8016d40:	6903      	ldr	r3, [r0, #16]
 8016d42:	889a      	ldrh	r2, [r3, #4]
 8016d44:	4432      	add	r2, r6
 8016d46:	809a      	strh	r2, [r3, #4]
 8016d48:	9a02      	ldr	r2, [sp, #8]
 8016d4a:	f102 0c20 	add.w	ip, r2, #32
 8016d4e:	9a01      	ldr	r2, [sp, #4]
 8016d50:	ebac 0c02 	sub.w	ip, ip, r2
 8016d54:	88da      	ldrh	r2, [r3, #6]
 8016d56:	fb06 260c 	mla	r6, r6, ip, r2
 8016d5a:	80de      	strh	r6, [r3, #6]
 8016d5c:	f7ff bba9 	b.w	80164b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

08016d60 <_ZN8touchgfx7Outline6lineToEii>:
 8016d60:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016d62:	079b      	lsls	r3, r3, #30
 8016d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d66:	460e      	mov	r6, r1
 8016d68:	4615      	mov	r5, r2
 8016d6a:	d511      	bpl.n	8016d90 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8016d6c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8016d70:	ea86 0701 	eor.w	r7, r6, r1
 8016d74:	ea85 0302 	eor.w	r3, r5, r2
 8016d78:	433b      	orrs	r3, r7
 8016d7a:	d009      	beq.n	8016d90 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8016d7c:	4633      	mov	r3, r6
 8016d7e:	9500      	str	r5, [sp, #0]
 8016d80:	f7ff fb3e 	bl	8016400 <_ZN8touchgfx7Outline10renderLineEiiii>
 8016d84:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016d86:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8016d8a:	f043 0301 	orr.w	r3, r3, #1
 8016d8e:	6243      	str	r3, [r0, #36]	@ 0x24
 8016d90:	b003      	add	sp, #12
 8016d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016d94 <_ZN8touchgfx7Outline6moveToEii>:
 8016d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d96:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016d98:	4615      	mov	r5, r2
 8016d9a:	079a      	lsls	r2, r3, #30
 8016d9c:	4604      	mov	r4, r0
 8016d9e:	460e      	mov	r6, r1
 8016da0:	d401      	bmi.n	8016da6 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8016da2:	f7ff faf9 	bl	8016398 <_ZN8touchgfx7Outline5resetEv>
 8016da6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8016da8:	07db      	lsls	r3, r3, #31
 8016daa:	d504      	bpl.n	8016db6 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8016dac:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8016db0:	4620      	mov	r0, r4
 8016db2:	f7ff ffd5 	bl	8016d60 <_ZN8touchgfx7Outline6lineToEii>
 8016db6:	6923      	ldr	r3, [r4, #16]
 8016db8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016dbc:	1170      	asrs	r0, r6, #5
 8016dbe:	4290      	cmp	r0, r2
 8016dc0:	ea4f 1165 	mov.w	r1, r5, asr #5
 8016dc4:	d103      	bne.n	8016dce <_ZN8touchgfx7Outline6moveToEii+0x3a>
 8016dc6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016dca:	4291      	cmp	r1, r2
 8016dcc:	d01a      	beq.n	8016e04 <_ZN8touchgfx7Outline6moveToEii+0x70>
 8016dce:	88df      	ldrh	r7, [r3, #6]
 8016dd0:	889a      	ldrh	r2, [r3, #4]
 8016dd2:	433a      	orrs	r2, r7
 8016dd4:	d010      	beq.n	8016df8 <_ZN8touchgfx7Outline6moveToEii+0x64>
 8016dd6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016dda:	2a00      	cmp	r2, #0
 8016ddc:	db0c      	blt.n	8016df8 <_ZN8touchgfx7Outline6moveToEii+0x64>
 8016dde:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8016de0:	42ba      	cmp	r2, r7
 8016de2:	da09      	bge.n	8016df8 <_ZN8touchgfx7Outline6moveToEii+0x64>
 8016de4:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8016de8:	42ba      	cmp	r2, r7
 8016dea:	bf38      	it	cc
 8016dec:	3308      	addcc	r3, #8
 8016dee:	f102 0201 	add.w	r2, r2, #1
 8016df2:	bf38      	it	cc
 8016df4:	6123      	strcc	r3, [r4, #16]
 8016df6:	60a2      	str	r2, [r4, #8]
 8016df8:	6923      	ldr	r3, [r4, #16]
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	8018      	strh	r0, [r3, #0]
 8016dfe:	8059      	strh	r1, [r3, #2]
 8016e00:	809a      	strh	r2, [r3, #4]
 8016e02:	80da      	strh	r2, [r3, #6]
 8016e04:	6166      	str	r6, [r4, #20]
 8016e06:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016e0a:	6225      	str	r5, [r4, #32]
 8016e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016e0e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8016e0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e12:	b0d0      	sub	sp, #320	@ 0x140
 8016e14:	466c      	mov	r4, sp
 8016e16:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8016e1a:	4627      	mov	r7, r4
 8016e1c:	1a0d      	subs	r5, r1, r0
 8016e1e:	2d48      	cmp	r5, #72	@ 0x48
 8016e20:	f100 0308 	add.w	r3, r0, #8
 8016e24:	f340 80d5 	ble.w	8016fd2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8016e28:	112d      	asrs	r5, r5, #4
 8016e2a:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8016e2e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016e32:	6816      	ldr	r6, [r2, #0]
 8016e34:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8016e38:	6006      	str	r6, [r0, #0]
 8016e3a:	6856      	ldr	r6, [r2, #4]
 8016e3c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8016e40:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8016e44:	6046      	str	r6, [r0, #4]
 8016e46:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8016e4a:	f8a2 8002 	strh.w	r8, [r2, #2]
 8016e4e:	f8a2 e004 	strh.w	lr, [r2, #4]
 8016e52:	f8a2 c006 	strh.w	ip, [r2, #6]
 8016e56:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8016e5a:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8016e5e:	4565      	cmp	r5, ip
 8016e60:	f1a1 0208 	sub.w	r2, r1, #8
 8016e64:	db06      	blt.n	8016e74 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8016e66:	d119      	bne.n	8016e9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8016e68:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8016e6c:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8016e70:	42ae      	cmp	r6, r5
 8016e72:	dd13      	ble.n	8016e9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8016e74:	460e      	mov	r6, r1
 8016e76:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8016e7a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8016e7e:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8016e82:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8016e86:	601d      	str	r5, [r3, #0]
 8016e88:	6875      	ldr	r5, [r6, #4]
 8016e8a:	605d      	str	r5, [r3, #4]
 8016e8c:	f821 9c08 	strh.w	r9, [r1, #-8]
 8016e90:	f821 cc06 	strh.w	ip, [r1, #-6]
 8016e94:	f821 8c04 	strh.w	r8, [r1, #-4]
 8016e98:	f821 ec02 	strh.w	lr, [r1, #-2]
 8016e9c:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016ea0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8016ea4:	42ae      	cmp	r6, r5
 8016ea6:	db06      	blt.n	8016eb6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8016ea8:	d116      	bne.n	8016ed8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8016eaa:	f9b0 c000 	ldrsh.w	ip, [r0]
 8016eae:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8016eb2:	45ac      	cmp	ip, r5
 8016eb4:	da10      	bge.n	8016ed8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8016eb6:	681d      	ldr	r5, [r3, #0]
 8016eb8:	f9b0 8000 	ldrsh.w	r8, [r0]
 8016ebc:	6005      	str	r5, [r0, #0]
 8016ebe:	685d      	ldr	r5, [r3, #4]
 8016ec0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8016ec4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8016ec8:	f8a0 8008 	strh.w	r8, [r0, #8]
 8016ecc:	6045      	str	r5, [r0, #4]
 8016ece:	8146      	strh	r6, [r0, #10]
 8016ed0:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8016ed4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016ed8:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8016edc:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8016ee0:	4565      	cmp	r5, ip
 8016ee2:	db06      	blt.n	8016ef2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8016ee4:	d119      	bne.n	8016f1a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016ee6:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8016eea:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016eee:	42ae      	cmp	r6, r5
 8016ef0:	da13      	bge.n	8016f1a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016ef2:	460e      	mov	r6, r1
 8016ef4:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016ef8:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8016efc:	6005      	str	r5, [r0, #0]
 8016efe:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8016f02:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8016f06:	6875      	ldr	r5, [r6, #4]
 8016f08:	6045      	str	r5, [r0, #4]
 8016f0a:	f821 9c08 	strh.w	r9, [r1, #-8]
 8016f0e:	f821 cc06 	strh.w	ip, [r1, #-6]
 8016f12:	f821 8c04 	strh.w	r8, [r1, #-4]
 8016f16:	f821 ec02 	strh.w	lr, [r1, #-2]
 8016f1a:	3308      	adds	r3, #8
 8016f1c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8016f20:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8016f24:	45e6      	cmp	lr, ip
 8016f26:	dbf8      	blt.n	8016f1a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016f28:	d105      	bne.n	8016f36 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8016f2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016f2e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016f32:	42ae      	cmp	r6, r5
 8016f34:	dbf1      	blt.n	8016f1a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016f36:	4615      	mov	r5, r2
 8016f38:	3a08      	subs	r2, #8
 8016f3a:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8016f3e:	45b4      	cmp	ip, r6
 8016f40:	dbf9      	blt.n	8016f36 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8016f42:	d105      	bne.n	8016f50 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8016f44:	f9b0 8000 	ldrsh.w	r8, [r0]
 8016f48:	f9b2 6000 	ldrsh.w	r6, [r2]
 8016f4c:	45b0      	cmp	r8, r6
 8016f4e:	dbf2      	blt.n	8016f36 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8016f50:	4293      	cmp	r3, r2
 8016f52:	f1a5 0608 	sub.w	r6, r5, #8
 8016f56:	d816      	bhi.n	8016f86 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8016f58:	f8d6 c000 	ldr.w	ip, [r6]
 8016f5c:	f9b3 a000 	ldrsh.w	sl, [r3]
 8016f60:	f8c3 c000 	str.w	ip, [r3]
 8016f64:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8016f68:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8016f6c:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8016f70:	f8c3 c004 	str.w	ip, [r3, #4]
 8016f74:	f825 ac08 	strh.w	sl, [r5, #-8]
 8016f78:	f825 ec06 	strh.w	lr, [r5, #-6]
 8016f7c:	f825 9c04 	strh.w	r9, [r5, #-4]
 8016f80:	f825 8c02 	strh.w	r8, [r5, #-2]
 8016f84:	e7c9      	b.n	8016f1a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016f86:	f8d6 e000 	ldr.w	lr, [r6]
 8016f8a:	f9b0 a000 	ldrsh.w	sl, [r0]
 8016f8e:	f8c0 e000 	str.w	lr, [r0]
 8016f92:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8016f96:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8016f9a:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8016f9e:	f8c0 e004 	str.w	lr, [r0, #4]
 8016fa2:	f825 ac08 	strh.w	sl, [r5, #-8]
 8016fa6:	f825 cc06 	strh.w	ip, [r5, #-6]
 8016faa:	f825 9c04 	strh.w	r9, [r5, #-4]
 8016fae:	f825 8c02 	strh.w	r8, [r5, #-2]
 8016fb2:	1acd      	subs	r5, r1, r3
 8016fb4:	1a16      	subs	r6, r2, r0
 8016fb6:	10ed      	asrs	r5, r5, #3
 8016fb8:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8016fbc:	bfb5      	itete	lt
 8016fbe:	e9c4 0200 	strdlt	r0, r2, [r4]
 8016fc2:	e9c4 3100 	strdge	r3, r1, [r4]
 8016fc6:	460a      	movlt	r2, r1
 8016fc8:	4603      	movge	r3, r0
 8016fca:	3408      	adds	r4, #8
 8016fcc:	4618      	mov	r0, r3
 8016fce:	4611      	mov	r1, r2
 8016fd0:	e724      	b.n	8016e1c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8016fd2:	4299      	cmp	r1, r3
 8016fd4:	d928      	bls.n	8017028 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 8016fd6:	f1a3 0210 	sub.w	r2, r3, #16
 8016fda:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8016fde:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8016fe2:	45ac      	cmp	ip, r5
 8016fe4:	db06      	blt.n	8016ff4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8016fe6:	d11d      	bne.n	8017024 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8016fe8:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8016fec:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8016ff0:	42ae      	cmp	r6, r5
 8016ff2:	da17      	bge.n	8017024 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8016ff4:	4615      	mov	r5, r2
 8016ff6:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8016ffa:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8016ffe:	6116      	str	r6, [r2, #16]
 8017000:	686e      	ldr	r6, [r5, #4]
 8017002:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8017006:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 801700a:	f8a2 9008 	strh.w	r9, [r2, #8]
 801700e:	42a8      	cmp	r0, r5
 8017010:	6156      	str	r6, [r2, #20]
 8017012:	f8a2 c00a 	strh.w	ip, [r2, #10]
 8017016:	f8a2 800c 	strh.w	r8, [r2, #12]
 801701a:	f8a2 e00e 	strh.w	lr, [r2, #14]
 801701e:	f1a2 0208 	sub.w	r2, r2, #8
 8017022:	d1da      	bne.n	8016fda <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8017024:	3308      	adds	r3, #8
 8017026:	e7d4      	b.n	8016fd2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8017028:	42bc      	cmp	r4, r7
 801702a:	d903      	bls.n	8017034 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 801702c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8017030:	3c08      	subs	r4, #8
 8017032:	e6f3      	b.n	8016e1c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8017034:	b050      	add	sp, #320	@ 0x140
 8017036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801703a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801703a:	b510      	push	{r4, lr}
 801703c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801703e:	07da      	lsls	r2, r3, #31
 8017040:	4604      	mov	r4, r0
 8017042:	d507      	bpl.n	8017054 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8017044:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8017048:	f7ff fe8a 	bl	8016d60 <_ZN8touchgfx7Outline6lineToEii>
 801704c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801704e:	f023 0301 	bic.w	r3, r3, #1
 8017052:	6243      	str	r3, [r0, #36]	@ 0x24
 8017054:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8017056:	079b      	lsls	r3, r3, #30
 8017058:	d521      	bpl.n	801709e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801705a:	6923      	ldr	r3, [r4, #16]
 801705c:	88d9      	ldrh	r1, [r3, #6]
 801705e:	889a      	ldrh	r2, [r3, #4]
 8017060:	430a      	orrs	r2, r1
 8017062:	d010      	beq.n	8017086 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8017064:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017068:	2a00      	cmp	r2, #0
 801706a:	db0c      	blt.n	8017086 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801706c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801706e:	428a      	cmp	r2, r1
 8017070:	da09      	bge.n	8017086 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8017072:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8017076:	4291      	cmp	r1, r2
 8017078:	bf88      	it	hi
 801707a:	3308      	addhi	r3, #8
 801707c:	f102 0201 	add.w	r2, r2, #1
 8017080:	bf88      	it	hi
 8017082:	6123      	strhi	r3, [r4, #16]
 8017084:	60a2      	str	r2, [r4, #8]
 8017086:	68a1      	ldr	r1, [r4, #8]
 8017088:	b129      	cbz	r1, 8017096 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801708a:	6863      	ldr	r3, [r4, #4]
 801708c:	4299      	cmp	r1, r3
 801708e:	d802      	bhi.n	8017096 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8017090:	68e0      	ldr	r0, [r4, #12]
 8017092:	f7ff febc 	bl	8016e0e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8017096:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8017098:	f023 0302 	bic.w	r3, r3, #2
 801709c:	6263      	str	r3, [r4, #36]	@ 0x24
 801709e:	68e0      	ldr	r0, [r4, #12]
 80170a0:	bd10      	pop	{r4, pc}
	...

080170a4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80170a4:	4b01      	ldr	r3, [pc, #4]	@ (80170ac <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80170a6:	6818      	ldr	r0, [r3, #0]
 80170a8:	4770      	bx	lr
 80170aa:	bf00      	nop
 80170ac:	200126e8 	.word	0x200126e8

080170b0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80170b0:	4b01      	ldr	r3, [pc, #4]	@ (80170b8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80170b2:	6818      	ldr	r0, [r3, #0]
 80170b4:	4770      	bx	lr
 80170b6:	bf00      	nop
 80170b8:	200126ec 	.word	0x200126ec

080170bc <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80170bc:	b510      	push	{r4, lr}
 80170be:	6803      	ldr	r3, [r0, #0]
 80170c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80170c2:	460c      	mov	r4, r1
 80170c4:	4798      	blx	r3
 80170c6:	1b03      	subs	r3, r0, r4
 80170c8:	4258      	negs	r0, r3
 80170ca:	4158      	adcs	r0, r3
 80170cc:	bd10      	pop	{r4, pc}
	...

080170d0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80170d0:	4b01      	ldr	r3, [pc, #4]	@ (80170d8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80170d2:	6019      	str	r1, [r3, #0]
 80170d4:	4770      	bx	lr
 80170d6:	bf00      	nop
 80170d8:	200126f0 	.word	0x200126f0

080170dc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80170dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170e0:	4696      	mov	lr, r2
 80170e2:	4605      	mov	r5, r0
 80170e4:	4614      	mov	r4, r2
 80170e6:	460e      	mov	r6, r1
 80170e8:	461f      	mov	r7, r3
 80170ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80170ee:	b097      	sub	sp, #92	@ 0x5c
 80170f0:	f10d 0c1c 	add.w	ip, sp, #28
 80170f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170f8:	f8de 3000 	ldr.w	r3, [lr]
 80170fc:	f8cc 3000 	str.w	r3, [ip]
 8017100:	f104 0e14 	add.w	lr, r4, #20
 8017104:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017108:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801710c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017110:	f8de 3000 	ldr.w	r3, [lr]
 8017114:	f8cc 3000 	str.w	r3, [ip]
 8017118:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801711c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017120:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8017124:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017128:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 801712c:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8017130:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8017134:	f8de 3000 	ldr.w	r3, [lr]
 8017138:	f8cc 3000 	str.w	r3, [ip]
 801713c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801713e:	682b      	ldr	r3, [r5, #0]
 8017140:	9201      	str	r2, [sp, #4]
 8017142:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017146:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017148:	9200      	str	r2, [sp, #0]
 801714a:	f8cd 8008 	str.w	r8, [sp, #8]
 801714e:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8017152:	aa07      	add	r2, sp, #28
 8017154:	463b      	mov	r3, r7
 8017156:	4631      	mov	r1, r6
 8017158:	4628      	mov	r0, r5
 801715a:	47d8      	blx	fp
 801715c:	46a6      	mov	lr, r4
 801715e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017162:	f10d 0c1c 	add.w	ip, sp, #28
 8017166:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801716a:	f8de 3000 	ldr.w	r3, [lr]
 801716e:	f8cc 3000 	str.w	r3, [ip]
 8017172:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8017176:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801717a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801717e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017182:	343c      	adds	r4, #60	@ 0x3c
 8017184:	f8de 3000 	ldr.w	r3, [lr]
 8017188:	f8cc 3000 	str.w	r3, [ip]
 801718c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801718e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8017192:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017196:	6823      	ldr	r3, [r4, #0]
 8017198:	f8cc 3000 	str.w	r3, [ip]
 801719c:	682b      	ldr	r3, [r5, #0]
 801719e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80171a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80171a4:	9201      	str	r2, [sp, #4]
 80171a6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80171a8:	9200      	str	r2, [sp, #0]
 80171aa:	f8cd 8008 	str.w	r8, [sp, #8]
 80171ae:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80171b0:	aa07      	add	r2, sp, #28
 80171b2:	463b      	mov	r3, r7
 80171b4:	4631      	mov	r1, r6
 80171b6:	4628      	mov	r0, r5
 80171b8:	47a0      	blx	r4
 80171ba:	b017      	add	sp, #92	@ 0x5c
 80171bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080171c0 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80171c0:	2000      	movs	r0, #0
 80171c2:	4770      	bx	lr

080171c4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80171c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171c8:	b08d      	sub	sp, #52	@ 0x34
 80171ca:	4688      	mov	r8, r1
 80171cc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80171ce:	f8d3 c000 	ldr.w	ip, [r3]
 80171d2:	680f      	ldr	r7, [r1, #0]
 80171d4:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 80171d8:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 80171dc:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 80171e0:	edd3 6a07 	vldr	s13, [r3, #28]
 80171e4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80171e6:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80171ea:	f9b1 9000 	ldrsh.w	r9, [r1]
 80171ee:	f9ba 1000 	ldrsh.w	r1, [sl]
 80171f2:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80171f6:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80171fa:	eba7 070c 	sub.w	r7, r7, ip
 80171fe:	42bc      	cmp	r4, r7
 8017200:	bfa8      	it	ge
 8017202:	463c      	movge	r4, r7
 8017204:	ee07 4a90 	vmov	s15, r4
 8017208:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801720c:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8017210:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017214:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017218:	ee25 5a27 	vmul.f32	s10, s10, s15
 801721c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017220:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017224:	eb09 0e0c 	add.w	lr, r9, ip
 8017228:	4571      	cmp	r1, lr
 801722a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801722e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017232:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017236:	ee61 1a87 	vmul.f32	s3, s3, s14
 801723a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801723e:	f340 808d 	ble.w	801735c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 8017242:	eba1 060e 	sub.w	r6, r1, lr
 8017246:	fb96 f5f4 	sdiv	r5, r6, r4
 801724a:	ee07 5a10 	vmov	s14, r5
 801724e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017252:	2d00      	cmp	r5, #0
 8017254:	fb04 6615 	mls	r6, r4, r5, r6
 8017258:	eea7 0a04 	vfma.f32	s0, s14, s8
 801725c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017260:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017264:	dd13      	ble.n	801728e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 8017266:	ee70 6a44 	vsub.f32	s13, s0, s8
 801726a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801726e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017276:	bf18      	it	ne
 8017278:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801727c:	ee31 2a45 	vsub.f32	s4, s2, s10
 8017280:	bf08      	it	eq
 8017282:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017286:	ee61 1a87 	vmul.f32	s3, s3, s14
 801728a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801728e:	fb05 f204 	mul.w	r2, r5, r4
 8017292:	1abf      	subs	r7, r7, r2
 8017294:	4494      	add	ip, r2
 8017296:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801729a:	4411      	add	r1, r2
 801729c:	eb09 020c 	add.w	r2, r9, ip
 80172a0:	443a      	add	r2, r7
 80172a2:	b209      	sxth	r1, r1
 80172a4:	428a      	cmp	r2, r1
 80172a6:	bfc4      	itt	gt
 80172a8:	eba1 0209 	subgt.w	r2, r1, r9
 80172ac:	eba2 070c 	subgt.w	r7, r2, ip
 80172b0:	2f00      	cmp	r7, #0
 80172b2:	dd50      	ble.n	8017356 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 80172b4:	fb97 f1f4 	sdiv	r1, r7, r4
 80172b8:	fb04 7211 	mls	r2, r4, r1, r7
 80172bc:	b90a      	cbnz	r2, 80172c2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 80172be:	3901      	subs	r1, #1
 80172c0:	4622      	mov	r2, r4
 80172c2:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80172c6:	6840      	ldr	r0, [r0, #4]
 80172c8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80172ca:	f8d0 a000 	ldr.w	sl, [r0]
 80172ce:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80172d0:	9008      	str	r0, [sp, #32]
 80172d2:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 80172d6:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80172d8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80172dc:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80172e0:	695b      	ldr	r3, [r3, #20]
 80172e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80172e4:	445b      	add	r3, fp
 80172e6:	eef0 6a42 	vmov.f32	s13, s4
 80172ea:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80172ee:	ee21 3a23 	vmul.f32	s6, s2, s7
 80172f2:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80172f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80172fa:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80172fe:	9307      	str	r3, [sp, #28]
 8017300:	ee17 7a90 	vmov	r7, s15
 8017304:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017308:	eeb0 7a61 	vmov.f32	s14, s3
 801730c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017310:	ee16 3a90 	vmov	r3, s13
 8017314:	fb97 f7f4 	sdiv	r7, r7, r4
 8017318:	ee17 ca90 	vmov	ip, s15
 801731c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017320:	fb9c fcf4 	sdiv	ip, ip, r4
 8017324:	fb0c 3306 	mla	r3, ip, r6, r3
 8017328:	9302      	str	r3, [sp, #8]
 801732a:	ee17 3a10 	vmov	r3, s14
 801732e:	44b6      	add	lr, r6
 8017330:	fb04 e505 	mla	r5, r4, r5, lr
 8017334:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8017338:	fb07 3706 	mla	r7, r7, r6, r3
 801733c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8017340:	e9cd 4700 	strd	r4, r7, [sp]
 8017344:	2900      	cmp	r1, #0
 8017346:	bfcc      	ite	gt
 8017348:	46a1      	movgt	r9, r4
 801734a:	4691      	movle	r9, r2
 801734c:	eba9 0306 	sub.w	r3, r9, r6
 8017350:	f8da 4008 	ldr.w	r4, [sl, #8]
 8017354:	47a0      	blx	r4
 8017356:	b00d      	add	sp, #52	@ 0x34
 8017358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801735c:	2500      	movs	r5, #0
 801735e:	462e      	mov	r6, r5
 8017360:	e799      	b.n	8017296 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

08017364 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017368:	b0db      	sub	sp, #364	@ 0x16c
 801736a:	461d      	mov	r5, r3
 801736c:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8017370:	930a      	str	r3, [sp, #40]	@ 0x28
 8017372:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8017376:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017378:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 801737c:	9310      	str	r3, [sp, #64]	@ 0x40
 801737e:	6803      	ldr	r3, [r0, #0]
 8017380:	910f      	str	r1, [sp, #60]	@ 0x3c
 8017382:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8017384:	9009      	str	r0, [sp, #36]	@ 0x24
 8017386:	4614      	mov	r4, r2
 8017388:	4629      	mov	r1, r5
 801738a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801738e:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8017392:	47b8      	blx	r7
 8017394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017396:	6058      	str	r0, [r3, #4]
 8017398:	2800      	cmp	r0, #0
 801739a:	f000 83a1 	beq.w	8017ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801739e:	682b      	ldr	r3, [r5, #0]
 80173a0:	9314      	str	r3, [sp, #80]	@ 0x50
 80173a2:	686b      	ldr	r3, [r5, #4]
 80173a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80173a6:	4bc4      	ldr	r3, [pc, #784]	@ (80176b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80173a8:	ed94 7a02 	vldr	s14, [r4, #8]
 80173ac:	7819      	ldrb	r1, [r3, #0]
 80173ae:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80173b2:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80173b6:	2900      	cmp	r1, #0
 80173b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80173bc:	bf16      	itet	ne
 80173be:	4619      	movne	r1, r3
 80173c0:	4611      	moveq	r1, r2
 80173c2:	4613      	movne	r3, r2
 80173c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173c8:	9116      	str	r1, [sp, #88]	@ 0x58
 80173ca:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 80173ce:	f240 8387 	bls.w	8017ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80173d2:	ed94 7a07 	vldr	s14, [r4, #28]
 80173d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80173da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173de:	f240 837f 	bls.w	8017ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80173e2:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 80173e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80173ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173ee:	f240 8377 	bls.w	8017ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80173f2:	6822      	ldr	r2, [r4, #0]
 80173f4:	4bb1      	ldr	r3, [pc, #708]	@ (80176bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80173f6:	429a      	cmp	r2, r3
 80173f8:	f2c0 8372 	blt.w	8017ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80173fc:	49b0      	ldr	r1, [pc, #704]	@ (80176c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80173fe:	6963      	ldr	r3, [r4, #20]
 8017400:	428a      	cmp	r2, r1
 8017402:	f300 836d 	bgt.w	8017ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017406:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801740a:	48ae      	ldr	r0, [pc, #696]	@ (80176c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801740c:	33ff      	adds	r3, #255	@ 0xff
 801740e:	4283      	cmp	r3, r0
 8017410:	f200 8366 	bhi.w	8017ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017414:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8017416:	4dac      	ldr	r5, [pc, #688]	@ (80176c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8017418:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801741c:	33ff      	adds	r3, #255	@ 0xff
 801741e:	42ab      	cmp	r3, r5
 8017420:	f200 835e 	bhi.w	8017ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017424:	6862      	ldr	r2, [r4, #4]
 8017426:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 801742a:	33ff      	adds	r3, #255	@ 0xff
 801742c:	4283      	cmp	r3, r0
 801742e:	f200 8357 	bhi.w	8017ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017432:	69a1      	ldr	r1, [r4, #24]
 8017434:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8017438:	33ff      	adds	r3, #255	@ 0xff
 801743a:	4283      	cmp	r3, r0
 801743c:	f200 8350 	bhi.w	8017ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017440:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8017442:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8017446:	30ff      	adds	r0, #255	@ 0xff
 8017448:	42a8      	cmp	r0, r5
 801744a:	f200 8349 	bhi.w	8017ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801744e:	428a      	cmp	r2, r1
 8017450:	f280 8110 	bge.w	8017674 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8017454:	429a      	cmp	r2, r3
 8017456:	f300 8119 	bgt.w	801768c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801745a:	4299      	cmp	r1, r3
 801745c:	f280 811d 	bge.w	801769a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8017460:	2502      	movs	r5, #2
 8017462:	2701      	movs	r7, #1
 8017464:	46a9      	mov	r9, r5
 8017466:	46b8      	mov	r8, r7
 8017468:	f04f 0a00 	mov.w	sl, #0
 801746c:	4621      	mov	r1, r4
 801746e:	a849      	add	r0, sp, #292	@ 0x124
 8017470:	f004 f85e 	bl	801b530 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8017474:	4622      	mov	r2, r4
 8017476:	4653      	mov	r3, sl
 8017478:	a949      	add	r1, sp, #292	@ 0x124
 801747a:	f8cd 9000 	str.w	r9, [sp]
 801747e:	a819      	add	r0, sp, #100	@ 0x64
 8017480:	f004 f986 	bl	801b790 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017484:	4622      	mov	r2, r4
 8017486:	4653      	mov	r3, sl
 8017488:	a949      	add	r1, sp, #292	@ 0x124
 801748a:	f8cd 8000 	str.w	r8, [sp]
 801748e:	a829      	add	r0, sp, #164	@ 0xa4
 8017490:	f004 f97e 	bl	801b790 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017494:	4643      	mov	r3, r8
 8017496:	4622      	mov	r2, r4
 8017498:	a949      	add	r1, sp, #292	@ 0x124
 801749a:	f8cd 9000 	str.w	r9, [sp]
 801749e:	a839      	add	r0, sp, #228	@ 0xe4
 80174a0:	f004 f976 	bl	801b790 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80174a4:	42af      	cmp	r7, r5
 80174a6:	bfb5      	itete	lt
 80174a8:	2300      	movlt	r3, #0
 80174aa:	2301      	movge	r3, #1
 80174ac:	930e      	strlt	r3, [sp, #56]	@ 0x38
 80174ae:	930e      	strge	r3, [sp, #56]	@ 0x38
 80174b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80174b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80174b6:	af12      	add	r7, sp, #72	@ 0x48
 80174b8:	bfb9      	ittee	lt
 80174ba:	ad29      	addlt	r5, sp, #164	@ 0xa4
 80174bc:	ac19      	addlt	r4, sp, #100	@ 0x64
 80174be:	ad19      	addge	r5, sp, #100	@ 0x64
 80174c0:	ac29      	addge	r4, sp, #164	@ 0xa4
 80174c2:	e887 0003 	stmia.w	r7, {r0, r1}
 80174c6:	b928      	cbnz	r0, 80174d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80174c8:	4b80      	ldr	r3, [pc, #512]	@ (80176cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80174ca:	6818      	ldr	r0, [r3, #0]
 80174cc:	6803      	ldr	r3, [r0, #0]
 80174ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174d0:	4798      	blx	r3
 80174d2:	6038      	str	r0, [r7, #0]
 80174d4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80174d6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80174da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80174de:	930c      	str	r3, [sp, #48]	@ 0x30
 80174e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80174e2:	6963      	ldr	r3, [r4, #20]
 80174e4:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80174e6:	440b      	add	r3, r1
 80174e8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80174ec:	4408      	add	r0, r1
 80174ee:	b200      	sxth	r0, r0
 80174f0:	4283      	cmp	r3, r0
 80174f2:	900d      	str	r0, [sp, #52]	@ 0x34
 80174f4:	f280 80dd 	bge.w	80176b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80174f8:	428b      	cmp	r3, r1
 80174fa:	da08      	bge.n	801750e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80174fc:	2a00      	cmp	r2, #0
 80174fe:	dd06      	ble.n	801750e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017500:	1acb      	subs	r3, r1, r3
 8017502:	429a      	cmp	r2, r3
 8017504:	f2c0 80e4 	blt.w	80176d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8017508:	2b00      	cmp	r3, #0
 801750a:	f300 80e2 	bgt.w	80176d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801750e:	6967      	ldr	r7, [r4, #20]
 8017510:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017512:	443b      	add	r3, r7
 8017514:	461f      	mov	r7, r3
 8017516:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017518:	1bdf      	subs	r7, r3, r7
 801751a:	4297      	cmp	r7, r2
 801751c:	bfa8      	it	ge
 801751e:	4617      	movge	r7, r2
 8017520:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8017524:	2f00      	cmp	r7, #0
 8017526:	f340 8166 	ble.w	80177f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801752a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801752c:	6829      	ldr	r1, [r5, #0]
 801752e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017532:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017536:	6820      	ldr	r0, [r4, #0]
 8017538:	4411      	add	r1, r2
 801753a:	4299      	cmp	r1, r3
 801753c:	dd1a      	ble.n	8017574 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801753e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017542:	440b      	add	r3, r1
 8017544:	4402      	add	r2, r0
 8017546:	b21b      	sxth	r3, r3
 8017548:	429a      	cmp	r2, r3
 801754a:	dc13      	bgt.n	8017574 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801754c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801754e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	9206      	str	r2, [sp, #24]
 8017554:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017556:	9205      	str	r2, [sp, #20]
 8017558:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801755a:	9500      	str	r5, [sp, #0]
 801755c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017560:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8017562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017564:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017568:	a912      	add	r1, sp, #72	@ 0x48
 801756a:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801756e:	aa49      	add	r2, sp, #292	@ 0x124
 8017570:	4623      	mov	r3, r4
 8017572:	47c8      	blx	r9
 8017574:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017578:	441a      	add	r2, r3
 801757a:	6963      	ldr	r3, [r4, #20]
 801757c:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8017580:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8017584:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8017588:	68a1      	ldr	r1, [r4, #8]
 801758a:	ed94 6a08 	vldr	s12, [r4, #32]
 801758e:	6022      	str	r2, [r4, #0]
 8017590:	3301      	adds	r3, #1
 8017592:	6163      	str	r3, [r4, #20]
 8017594:	69a3      	ldr	r3, [r4, #24]
 8017596:	ee37 7a27 	vadd.f32	s14, s14, s15
 801759a:	3b01      	subs	r3, #1
 801759c:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80175a0:	61a3      	str	r3, [r4, #24]
 80175a2:	6923      	ldr	r3, [r4, #16]
 80175a4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80175a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80175ac:	edd4 6a07 	vldr	s13, [r4, #28]
 80175b0:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80175b4:	440b      	add	r3, r1
 80175b6:	68e1      	ldr	r1, [r4, #12]
 80175b8:	6123      	str	r3, [r4, #16]
 80175ba:	ee76 6a86 	vadd.f32	s13, s13, s12
 80175be:	428b      	cmp	r3, r1
 80175c0:	edc4 6a07 	vstr	s13, [r4, #28]
 80175c4:	db15      	blt.n	80175f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80175c6:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80175ca:	ee76 6a26 	vadd.f32	s13, s12, s13
 80175ce:	3201      	adds	r2, #1
 80175d0:	edc4 6a07 	vstr	s13, [r4, #28]
 80175d4:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80175d8:	6022      	str	r2, [r4, #0]
 80175da:	ee36 7a87 	vadd.f32	s14, s13, s14
 80175de:	1a5b      	subs	r3, r3, r1
 80175e0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80175e4:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80175e8:	6123      	str	r3, [r4, #16]
 80175ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80175ee:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80175f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80175f6:	441a      	add	r2, r3
 80175f8:	696b      	ldr	r3, [r5, #20]
 80175fa:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80175fe:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8017602:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8017606:	68a9      	ldr	r1, [r5, #8]
 8017608:	ed95 6a08 	vldr	s12, [r5, #32]
 801760c:	602a      	str	r2, [r5, #0]
 801760e:	3301      	adds	r3, #1
 8017610:	616b      	str	r3, [r5, #20]
 8017612:	69ab      	ldr	r3, [r5, #24]
 8017614:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017618:	3b01      	subs	r3, #1
 801761a:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801761e:	61ab      	str	r3, [r5, #24]
 8017620:	692b      	ldr	r3, [r5, #16]
 8017622:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8017626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801762a:	edd5 6a07 	vldr	s13, [r5, #28]
 801762e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8017632:	440b      	add	r3, r1
 8017634:	68e9      	ldr	r1, [r5, #12]
 8017636:	612b      	str	r3, [r5, #16]
 8017638:	ee76 6a86 	vadd.f32	s13, s13, s12
 801763c:	428b      	cmp	r3, r1
 801763e:	edc5 6a07 	vstr	s13, [r5, #28]
 8017642:	db15      	blt.n	8017670 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8017644:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8017648:	ee76 6a26 	vadd.f32	s13, s12, s13
 801764c:	3201      	adds	r2, #1
 801764e:	edc5 6a07 	vstr	s13, [r5, #28]
 8017652:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8017656:	602a      	str	r2, [r5, #0]
 8017658:	ee36 7a87 	vadd.f32	s14, s13, s14
 801765c:	1a5b      	subs	r3, r3, r1
 801765e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8017662:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8017666:	612b      	str	r3, [r5, #16]
 8017668:	ee77 7a27 	vadd.f32	s15, s14, s15
 801766c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8017670:	3f01      	subs	r7, #1
 8017672:	e757      	b.n	8017524 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8017674:	4299      	cmp	r1, r3
 8017676:	dc13      	bgt.n	80176a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8017678:	429a      	cmp	r2, r3
 801767a:	da14      	bge.n	80176a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801767c:	2502      	movs	r5, #2
 801767e:	2703      	movs	r7, #3
 8017680:	46a9      	mov	r9, r5
 8017682:	f04f 0800 	mov.w	r8, #0
 8017686:	f04f 0a01 	mov.w	sl, #1
 801768a:	e6ef      	b.n	801746c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801768c:	2501      	movs	r5, #1
 801768e:	2700      	movs	r7, #0
 8017690:	46a9      	mov	r9, r5
 8017692:	46b8      	mov	r8, r7
 8017694:	f04f 0a02 	mov.w	sl, #2
 8017698:	e6e8      	b.n	801746c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801769a:	2501      	movs	r5, #1
 801769c:	2702      	movs	r7, #2
 801769e:	e6e1      	b.n	8017464 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80176a0:	2500      	movs	r5, #0
 80176a2:	2701      	movs	r7, #1
 80176a4:	e7f4      	b.n	8017690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80176a6:	2702      	movs	r7, #2
 80176a8:	2503      	movs	r5, #3
 80176aa:	f04f 0900 	mov.w	r9, #0
 80176ae:	46b8      	mov	r8, r7
 80176b0:	e7e9      	b.n	8017686 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80176b2:	4613      	mov	r3, r2
 80176b4:	e728      	b.n	8017508 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80176b6:	bf00      	nop
 80176b8:	200126d8 	.word	0x200126d8
 80176bc:	fffd8f01 	.word	0xfffd8f01
 80176c0:	00027100 	.word	0x00027100
 80176c4:	0004e1ff 	.word	0x0004e1ff
 80176c8:	0004e1fe 	.word	0x0004e1fe
 80176cc:	200126e0 	.word	0x200126e0
 80176d0:	4613      	mov	r3, r2
 80176d2:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80176d4:	9111      	str	r1, [sp, #68]	@ 0x44
 80176d6:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 80176da:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 80176de:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80176e0:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 80176e4:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 80176e8:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 80176ec:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 80176f0:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 80176f4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80176f8:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 80176fc:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8017700:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8017704:	469e      	mov	lr, r3
 8017706:	469c      	mov	ip, r3
 8017708:	f04f 0900 	mov.w	r9, #0
 801770c:	f1bc 0f00 	cmp.w	ip, #0
 8017710:	d147      	bne.n	80177a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8017712:	eb03 0c07 	add.w	ip, r3, r7
 8017716:	1ad7      	subs	r7, r2, r3
 8017718:	f1b9 0f00 	cmp.w	r9, #0
 801771c:	d009      	beq.n	8017732 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801771e:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8017722:	9029      	str	r0, [sp, #164]	@ 0xa4
 8017724:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8017728:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801772c:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8017730:	912d      	str	r1, [sp, #180]	@ 0xb4
 8017732:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8017734:	9111      	str	r1, [sp, #68]	@ 0x44
 8017736:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801773a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801773e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8017742:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8017746:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801774a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801774e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8017752:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8017756:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801775a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801775e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8017762:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8017766:	f04f 0800 	mov.w	r8, #0
 801776a:	f1be 0f00 	cmp.w	lr, #0
 801776e:	d031      	beq.n	80177d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8017770:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8017772:	4431      	add	r1, r6
 8017774:	4549      	cmp	r1, r9
 8017776:	4450      	add	r0, sl
 8017778:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801777c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017780:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017784:	db08      	blt.n	8017798 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8017786:	ee77 7a85 	vadd.f32	s15, s15, s10
 801778a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801778e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017792:	3001      	adds	r0, #1
 8017794:	eba1 0109 	sub.w	r1, r1, r9
 8017798:	f10e 3eff 	add.w	lr, lr, #4294967295
 801779c:	f04f 0801 	mov.w	r8, #1
 80177a0:	e7e3      	b.n	801776a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80177a2:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80177a4:	4431      	add	r1, r6
 80177a6:	4541      	cmp	r1, r8
 80177a8:	4450      	add	r0, sl
 80177aa:	ee37 7a24 	vadd.f32	s14, s14, s9
 80177ae:	ee77 7a84 	vadd.f32	s15, s15, s8
 80177b2:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80177b6:	db08      	blt.n	80177ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80177b8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80177bc:	ee37 7a25 	vadd.f32	s14, s14, s11
 80177c0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80177c4:	3001      	adds	r0, #1
 80177c6:	eba1 0108 	sub.w	r1, r1, r8
 80177ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 80177ce:	f04f 0901 	mov.w	r9, #1
 80177d2:	e79b      	b.n	801770c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80177d4:	449c      	add	ip, r3
 80177d6:	1aff      	subs	r7, r7, r3
 80177d8:	f1b8 0f00 	cmp.w	r8, #0
 80177dc:	d009      	beq.n	80177f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80177de:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80177e2:	9019      	str	r0, [sp, #100]	@ 0x64
 80177e4:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80177e8:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80177ec:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80177f0:	911d      	str	r1, [sp, #116]	@ 0x74
 80177f2:	1ad2      	subs	r2, r2, r3
 80177f4:	e68b      	b.n	801750e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80177f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80177f8:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	f000 80d1 	beq.w	80179a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017800:	ad19      	add	r5, sp, #100	@ 0x64
 8017802:	ac39      	add	r4, sp, #228	@ 0xe4
 8017804:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8017806:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801780a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801780e:	930c      	str	r3, [sp, #48]	@ 0x30
 8017810:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017812:	6963      	ldr	r3, [r4, #20]
 8017814:	440b      	add	r3, r1
 8017816:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801781a:	4408      	add	r0, r1
 801781c:	b200      	sxth	r0, r0
 801781e:	4283      	cmp	r3, r0
 8017820:	900d      	str	r0, [sp, #52]	@ 0x34
 8017822:	f280 80c1 	bge.w	80179a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8017826:	428b      	cmp	r3, r1
 8017828:	da08      	bge.n	801783c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801782a:	2a00      	cmp	r2, #0
 801782c:	dd06      	ble.n	801783c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801782e:	1acb      	subs	r3, r1, r3
 8017830:	429a      	cmp	r2, r3
 8017832:	f2c0 80bb 	blt.w	80179ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8017836:	2b00      	cmp	r3, #0
 8017838:	f300 80b9 	bgt.w	80179ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801783c:	6967      	ldr	r7, [r4, #20]
 801783e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017840:	443b      	add	r3, r7
 8017842:	461f      	mov	r7, r3
 8017844:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017846:	1bdf      	subs	r7, r3, r7
 8017848:	4297      	cmp	r7, r2
 801784a:	bfa8      	it	ge
 801784c:	4617      	movge	r7, r2
 801784e:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8017852:	2f00      	cmp	r7, #0
 8017854:	f340 813c 	ble.w	8017ad0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8017858:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801785a:	6829      	ldr	r1, [r5, #0]
 801785c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017860:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017864:	6820      	ldr	r0, [r4, #0]
 8017866:	4411      	add	r1, r2
 8017868:	4299      	cmp	r1, r3
 801786a:	dd1a      	ble.n	80178a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801786c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017870:	440b      	add	r3, r1
 8017872:	4402      	add	r2, r0
 8017874:	b21b      	sxth	r3, r3
 8017876:	429a      	cmp	r2, r3
 8017878:	dc13      	bgt.n	80178a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801787a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801787c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	9206      	str	r2, [sp, #24]
 8017882:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017884:	9205      	str	r2, [sp, #20]
 8017886:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017888:	9500      	str	r5, [sp, #0]
 801788a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801788e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8017890:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017892:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017896:	a912      	add	r1, sp, #72	@ 0x48
 8017898:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801789c:	aa49      	add	r2, sp, #292	@ 0x124
 801789e:	4623      	mov	r3, r4
 80178a0:	47c8      	blx	r9
 80178a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80178a6:	441a      	add	r2, r3
 80178a8:	6963      	ldr	r3, [r4, #20]
 80178aa:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80178ae:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80178b2:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80178b6:	68a1      	ldr	r1, [r4, #8]
 80178b8:	ed94 6a08 	vldr	s12, [r4, #32]
 80178bc:	6022      	str	r2, [r4, #0]
 80178be:	3301      	adds	r3, #1
 80178c0:	6163      	str	r3, [r4, #20]
 80178c2:	69a3      	ldr	r3, [r4, #24]
 80178c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80178c8:	3b01      	subs	r3, #1
 80178ca:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80178ce:	61a3      	str	r3, [r4, #24]
 80178d0:	6923      	ldr	r3, [r4, #16]
 80178d2:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80178d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80178da:	edd4 6a07 	vldr	s13, [r4, #28]
 80178de:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80178e2:	440b      	add	r3, r1
 80178e4:	68e1      	ldr	r1, [r4, #12]
 80178e6:	6123      	str	r3, [r4, #16]
 80178e8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80178ec:	428b      	cmp	r3, r1
 80178ee:	edc4 6a07 	vstr	s13, [r4, #28]
 80178f2:	db15      	blt.n	8017920 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80178f4:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80178f8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80178fc:	3201      	adds	r2, #1
 80178fe:	edc4 6a07 	vstr	s13, [r4, #28]
 8017902:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8017906:	6022      	str	r2, [r4, #0]
 8017908:	ee36 7a87 	vadd.f32	s14, s13, s14
 801790c:	1a5b      	subs	r3, r3, r1
 801790e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8017912:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8017916:	6123      	str	r3, [r4, #16]
 8017918:	ee77 7a27 	vadd.f32	s15, s14, s15
 801791c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8017920:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017924:	441a      	add	r2, r3
 8017926:	696b      	ldr	r3, [r5, #20]
 8017928:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801792c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8017930:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8017934:	68a9      	ldr	r1, [r5, #8]
 8017936:	ed95 6a08 	vldr	s12, [r5, #32]
 801793a:	602a      	str	r2, [r5, #0]
 801793c:	3301      	adds	r3, #1
 801793e:	616b      	str	r3, [r5, #20]
 8017940:	69ab      	ldr	r3, [r5, #24]
 8017942:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017946:	3b01      	subs	r3, #1
 8017948:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801794c:	61ab      	str	r3, [r5, #24]
 801794e:	692b      	ldr	r3, [r5, #16]
 8017950:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8017954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017958:	edd5 6a07 	vldr	s13, [r5, #28]
 801795c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8017960:	440b      	add	r3, r1
 8017962:	68e9      	ldr	r1, [r5, #12]
 8017964:	612b      	str	r3, [r5, #16]
 8017966:	ee76 6a86 	vadd.f32	s13, s13, s12
 801796a:	428b      	cmp	r3, r1
 801796c:	edc5 6a07 	vstr	s13, [r5, #28]
 8017970:	db15      	blt.n	801799e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8017972:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8017976:	ee76 6a26 	vadd.f32	s13, s12, s13
 801797a:	3201      	adds	r2, #1
 801797c:	edc5 6a07 	vstr	s13, [r5, #28]
 8017980:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8017984:	602a      	str	r2, [r5, #0]
 8017986:	ee36 7a87 	vadd.f32	s14, s13, s14
 801798a:	1a5b      	subs	r3, r3, r1
 801798c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8017990:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8017994:	612b      	str	r3, [r5, #16]
 8017996:	ee77 7a27 	vadd.f32	s15, s14, s15
 801799a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801799e:	3f01      	subs	r7, #1
 80179a0:	e757      	b.n	8017852 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80179a2:	ad39      	add	r5, sp, #228	@ 0xe4
 80179a4:	ac19      	add	r4, sp, #100	@ 0x64
 80179a6:	e72d      	b.n	8017804 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80179a8:	4613      	mov	r3, r2
 80179aa:	e744      	b.n	8017836 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80179ac:	4613      	mov	r3, r2
 80179ae:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 80179b2:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 80179b4:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80179b8:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 80179bc:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 80179c0:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 80179c4:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 80179c8:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 80179cc:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 80179d0:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80179d2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 80179d6:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 80179da:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 80179de:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 80179e2:	960e      	str	r6, [sp, #56]	@ 0x38
 80179e4:	469e      	mov	lr, r3
 80179e6:	461f      	mov	r7, r3
 80179e8:	f04f 0900 	mov.w	r9, #0
 80179ec:	2f00      	cmp	r7, #0
 80179ee:	d146      	bne.n	8017a7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80179f0:	449c      	add	ip, r3
 80179f2:	1ad7      	subs	r7, r2, r3
 80179f4:	f1b9 0f00 	cmp.w	r9, #0
 80179f8:	d009      	beq.n	8017a0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80179fa:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 80179fe:	9039      	str	r0, [sp, #228]	@ 0xe4
 8017a00:	913d      	str	r1, [sp, #244]	@ 0xf4
 8017a02:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8017a06:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8017a0a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8017a0e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8017a10:	910e      	str	r1, [sp, #56]	@ 0x38
 8017a12:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8017a16:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8017a1a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8017a1e:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8017a22:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8017a26:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8017a2a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8017a2e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8017a32:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8017a36:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8017a3a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8017a3e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8017a42:	f04f 0800 	mov.w	r8, #0
 8017a46:	f1be 0f00 	cmp.w	lr, #0
 8017a4a:	d030      	beq.n	8017aae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8017a4c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8017a4e:	4431      	add	r1, r6
 8017a50:	4549      	cmp	r1, r9
 8017a52:	4450      	add	r0, sl
 8017a54:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017a58:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017a5c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017a60:	db08      	blt.n	8017a74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8017a62:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017a66:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017a6a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017a6e:	3001      	adds	r0, #1
 8017a70:	eba1 0109 	sub.w	r1, r1, r9
 8017a74:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017a78:	f04f 0801 	mov.w	r8, #1
 8017a7c:	e7e3      	b.n	8017a46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8017a7e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8017a80:	4431      	add	r1, r6
 8017a82:	4541      	cmp	r1, r8
 8017a84:	4450      	add	r0, sl
 8017a86:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017a8a:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017a8e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017a92:	db08      	blt.n	8017aa6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8017a94:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017a98:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017a9c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017aa0:	3001      	adds	r0, #1
 8017aa2:	eba1 0108 	sub.w	r1, r1, r8
 8017aa6:	3f01      	subs	r7, #1
 8017aa8:	f04f 0901 	mov.w	r9, #1
 8017aac:	e79e      	b.n	80179ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8017aae:	449c      	add	ip, r3
 8017ab0:	1aff      	subs	r7, r7, r3
 8017ab2:	f1b8 0f00 	cmp.w	r8, #0
 8017ab6:	d009      	beq.n	8017acc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8017ab8:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8017abc:	9019      	str	r0, [sp, #100]	@ 0x64
 8017abe:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8017ac2:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8017ac6:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8017aca:	911d      	str	r1, [sp, #116]	@ 0x74
 8017acc:	1ad2      	subs	r2, r2, r3
 8017ace:	e6b5      	b.n	801783c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	b923      	cbnz	r3, 8017ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017ad6:	4b04      	ldr	r3, [pc, #16]	@ (8017ae8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8017ad8:	6818      	ldr	r0, [r3, #0]
 8017ada:	6803      	ldr	r3, [r0, #0]
 8017adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ade:	4798      	blx	r3
 8017ae0:	b05b      	add	sp, #364	@ 0x16c
 8017ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ae6:	bf00      	nop
 8017ae8:	200126e0 	.word	0x200126e0

08017aec <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8017aec:	b570      	push	{r4, r5, r6, lr}
 8017aee:	4604      	mov	r4, r0
 8017af0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8017af4:	9805      	ldr	r0, [sp, #20]
 8017af6:	6061      	str	r1, [r4, #4]
 8017af8:	2500      	movs	r5, #0
 8017afa:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8017afe:	8263      	strh	r3, [r4, #18]
 8017b00:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017b04:	8025      	strh	r5, [r4, #0]
 8017b06:	7221      	strb	r1, [r4, #8]
 8017b08:	7266      	strb	r6, [r4, #9]
 8017b0a:	60e0      	str	r0, [r4, #12]
 8017b0c:	8222      	strh	r2, [r4, #16]
 8017b0e:	82a3      	strh	r3, [r4, #20]
 8017b10:	82e5      	strh	r5, [r4, #22]
 8017b12:	8325      	strh	r5, [r4, #24]
 8017b14:	8365      	strh	r5, [r4, #26]
 8017b16:	83a5      	strh	r5, [r4, #28]
 8017b18:	83e5      	strh	r5, [r4, #30]
 8017b1a:	8425      	strh	r5, [r4, #32]
 8017b1c:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8017b20:	b32e      	cbz	r6, 8017b6e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8017b22:	6803      	ldr	r3, [r0, #0]
 8017b24:	695b      	ldr	r3, [r3, #20]
 8017b26:	4798      	blx	r3
 8017b28:	4606      	mov	r6, r0
 8017b2a:	b300      	cbz	r0, 8017b6e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8017b2c:	68e0      	ldr	r0, [r4, #12]
 8017b2e:	6803      	ldr	r3, [r0, #0]
 8017b30:	4631      	mov	r1, r6
 8017b32:	68db      	ldr	r3, [r3, #12]
 8017b34:	4798      	blx	r3
 8017b36:	4605      	mov	r5, r0
 8017b38:	b1c8      	cbz	r0, 8017b6e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8017b3a:	7b43      	ldrb	r3, [r0, #13]
 8017b3c:	7a82      	ldrb	r2, [r0, #10]
 8017b3e:	005b      	lsls	r3, r3, #1
 8017b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017b44:	4313      	orrs	r3, r2
 8017b46:	8423      	strh	r3, [r4, #32]
 8017b48:	7a63      	ldrb	r3, [r4, #9]
 8017b4a:	2b06      	cmp	r3, #6
 8017b4c:	d10f      	bne.n	8017b6e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8017b4e:	68e0      	ldr	r0, [r4, #12]
 8017b50:	6803      	ldr	r3, [r0, #0]
 8017b52:	462a      	mov	r2, r5
 8017b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017b56:	4631      	mov	r1, r6
 8017b58:	4798      	blx	r3
 8017b5a:	7b6b      	ldrb	r3, [r5, #13]
 8017b5c:	005b      	lsls	r3, r3, #1
 8017b5e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017b62:	7aab      	ldrb	r3, [r5, #10]
 8017b64:	4313      	orrs	r3, r2
 8017b66:	4418      	add	r0, r3
 8017b68:	8c23      	ldrh	r3, [r4, #32]
 8017b6a:	4418      	add	r0, r3
 8017b6c:	8420      	strh	r0, [r4, #32]
 8017b6e:	4620      	mov	r0, r4
 8017b70:	bd70      	pop	{r4, r5, r6, pc}

08017b72 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8017b72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b76:	2400      	movs	r4, #0
 8017b78:	b085      	sub	sp, #20
 8017b7a:	4681      	mov	r9, r0
 8017b7c:	4688      	mov	r8, r1
 8017b7e:	4692      	mov	sl, r2
 8017b80:	469b      	mov	fp, r3
 8017b82:	4627      	mov	r7, r4
 8017b84:	4625      	mov	r5, r4
 8017b86:	4626      	mov	r6, r4
 8017b88:	4554      	cmp	r4, sl
 8017b8a:	da2a      	bge.n	8017be2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	9303      	str	r3, [sp, #12]
 8017b90:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017b94:	429d      	cmp	r5, r3
 8017b96:	d004      	beq.n	8017ba2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8017b98:	f242 030b 	movw	r3, #8203	@ 0x200b
 8017b9c:	429d      	cmp	r5, r3
 8017b9e:	bf18      	it	ne
 8017ba0:	462f      	movne	r7, r5
 8017ba2:	ab03      	add	r3, sp, #12
 8017ba4:	4642      	mov	r2, r8
 8017ba6:	4659      	mov	r1, fp
 8017ba8:	4648      	mov	r0, r9
 8017baa:	f003 fad7 	bl	801b15c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017bae:	4605      	mov	r5, r0
 8017bb0:	b1b8      	cbz	r0, 8017be2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017bb2:	280a      	cmp	r0, #10
 8017bb4:	d015      	beq.n	8017be2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017bb6:	9a03      	ldr	r2, [sp, #12]
 8017bb8:	b18a      	cbz	r2, 8017bde <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8017bba:	7b50      	ldrb	r0, [r2, #13]
 8017bbc:	7a93      	ldrb	r3, [r2, #10]
 8017bbe:	8895      	ldrh	r5, [r2, #4]
 8017bc0:	0040      	lsls	r0, r0, #1
 8017bc2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8017bc6:	4303      	orrs	r3, r0
 8017bc8:	9301      	str	r3, [sp, #4]
 8017bca:	f8d8 3000 	ldr.w	r3, [r8]
 8017bce:	4639      	mov	r1, r7
 8017bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017bd2:	4640      	mov	r0, r8
 8017bd4:	4798      	blx	r3
 8017bd6:	9b01      	ldr	r3, [sp, #4]
 8017bd8:	4418      	add	r0, r3
 8017bda:	4406      	add	r6, r0
 8017bdc:	b2b6      	uxth	r6, r6
 8017bde:	3401      	adds	r4, #1
 8017be0:	e7d2      	b.n	8017b88 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8017be2:	4630      	mov	r0, r6
 8017be4:	b005      	add	sp, #20
 8017be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017bea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017bea:	2a02      	cmp	r2, #2
 8017bec:	b530      	push	{r4, r5, lr}
 8017bee:	d011      	beq.n	8017c14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8017bf0:	2a03      	cmp	r2, #3
 8017bf2:	d01c      	beq.n	8017c2e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8017bf4:	2a01      	cmp	r2, #1
 8017bf6:	d10c      	bne.n	8017c12 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017bf8:	888b      	ldrh	r3, [r1, #4]
 8017bfa:	8801      	ldrh	r1, [r0, #0]
 8017bfc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017c00:	8844      	ldrh	r4, [r0, #2]
 8017c02:	8004      	strh	r4, [r0, #0]
 8017c04:	1a5b      	subs	r3, r3, r1
 8017c06:	1a9b      	subs	r3, r3, r2
 8017c08:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017c0c:	8043      	strh	r3, [r0, #2]
 8017c0e:	8081      	strh	r1, [r0, #4]
 8017c10:	80c2      	strh	r2, [r0, #6]
 8017c12:	bd30      	pop	{r4, r5, pc}
 8017c14:	88cb      	ldrh	r3, [r1, #6]
 8017c16:	8842      	ldrh	r2, [r0, #2]
 8017c18:	1a9b      	subs	r3, r3, r2
 8017c1a:	88c2      	ldrh	r2, [r0, #6]
 8017c1c:	1a9b      	subs	r3, r3, r2
 8017c1e:	888a      	ldrh	r2, [r1, #4]
 8017c20:	8801      	ldrh	r1, [r0, #0]
 8017c22:	8043      	strh	r3, [r0, #2]
 8017c24:	1a52      	subs	r2, r2, r1
 8017c26:	8881      	ldrh	r1, [r0, #4]
 8017c28:	1a52      	subs	r2, r2, r1
 8017c2a:	8002      	strh	r2, [r0, #0]
 8017c2c:	e7f1      	b.n	8017c12 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017c2e:	88cb      	ldrh	r3, [r1, #6]
 8017c30:	8841      	ldrh	r1, [r0, #2]
 8017c32:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017c36:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017c3a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017c3e:	8045      	strh	r5, [r0, #2]
 8017c40:	1a5b      	subs	r3, r3, r1
 8017c42:	1a9b      	subs	r3, r3, r2
 8017c44:	8003      	strh	r3, [r0, #0]
 8017c46:	8082      	strh	r2, [r0, #4]
 8017c48:	80c4      	strh	r4, [r0, #6]
 8017c4a:	e7e2      	b.n	8017c12 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08017c4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8017c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c50:	b09f      	sub	sp, #124	@ 0x7c
 8017c52:	920f      	str	r2, [sp, #60]	@ 0x3c
 8017c54:	9312      	str	r3, [sp, #72]	@ 0x48
 8017c56:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8017c58:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8017c5a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8017c5c:	8812      	ldrh	r2, [r2, #0]
 8017c5e:	889b      	ldrh	r3, [r3, #4]
 8017c60:	900e      	str	r0, [sp, #56]	@ 0x38
 8017c62:	4413      	add	r3, r2
 8017c64:	6828      	ldr	r0, [r5, #0]
 8017c66:	9117      	str	r1, [sp, #92]	@ 0x5c
 8017c68:	b21b      	sxth	r3, r3
 8017c6a:	9311      	str	r3, [sp, #68]	@ 0x44
 8017c6c:	6803      	ldr	r3, [r0, #0]
 8017c6e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8017c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017c74:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8017c78:	4798      	blx	r3
 8017c7a:	682b      	ldr	r3, [r5, #0]
 8017c7c:	9013      	str	r0, [sp, #76]	@ 0x4c
 8017c7e:	7b1a      	ldrb	r2, [r3, #12]
 8017c80:	7adb      	ldrb	r3, [r3, #11]
 8017c82:	9215      	str	r2, [sp, #84]	@ 0x54
 8017c84:	9316      	str	r3, [sp, #88]	@ 0x58
 8017c86:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8017c8a:	2c00      	cmp	r4, #0
 8017c8c:	d067      	beq.n	8017d5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8017c8e:	7c2b      	ldrb	r3, [r5, #16]
 8017c90:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8017c92:	2b06      	cmp	r3, #6
 8017c94:	bf14      	ite	ne
 8017c96:	2301      	movne	r3, #1
 8017c98:	2302      	moveq	r3, #2
 8017c9a:	4413      	add	r3, r2
 8017c9c:	f04f 0900 	mov.w	r9, #0
 8017ca0:	9310      	str	r3, [sp, #64]	@ 0x40
 8017ca2:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8017ca6:	464c      	mov	r4, r9
 8017ca8:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8017cac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017cae:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017cb0:	4293      	cmp	r3, r2
 8017cb2:	f280 808b 	bge.w	8017dcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8017cbc:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8017cc0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017cc4:	429c      	cmp	r4, r3
 8017cc6:	d006      	beq.n	8017cd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8017cc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017cca:	f242 020b 	movw	r2, #8203	@ 0x200b
 8017cce:	4294      	cmp	r4, r2
 8017cd0:	bf18      	it	ne
 8017cd2:	4623      	movne	r3, r4
 8017cd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8017cd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017cd8:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8017cda:	682a      	ldr	r2, [r5, #0]
 8017cdc:	428b      	cmp	r3, r1
 8017cde:	db40      	blt.n	8017d62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8017ce0:	6813      	ldr	r3, [r2, #0]
 8017ce2:	4610      	mov	r0, r2
 8017ce4:	695b      	ldr	r3, [r3, #20]
 8017ce6:	4798      	blx	r3
 8017ce8:	4604      	mov	r4, r0
 8017cea:	6828      	ldr	r0, [r5, #0]
 8017cec:	6803      	ldr	r3, [r0, #0]
 8017cee:	aa1d      	add	r2, sp, #116	@ 0x74
 8017cf0:	689f      	ldr	r7, [r3, #8]
 8017cf2:	4621      	mov	r1, r4
 8017cf4:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8017cf8:	47b8      	blx	r7
 8017cfa:	901c      	str	r0, [sp, #112]	@ 0x70
 8017cfc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017d00:	429c      	cmp	r4, r3
 8017d02:	f000 80ea 	beq.w	8017eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017d06:	f242 030b 	movw	r3, #8203	@ 0x200b
 8017d0a:	429c      	cmp	r4, r3
 8017d0c:	f000 80e5 	beq.w	8017eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017d10:	2c00      	cmp	r4, #0
 8017d12:	f000 810c 	beq.w	8017f2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 8017d16:	2c0a      	cmp	r4, #10
 8017d18:	d05e      	beq.n	8017dd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8017d1a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8017d1c:	b36a      	cbz	r2, 8017d7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8017d1e:	8894      	ldrh	r4, [r2, #4]
 8017d20:	f1bb 0f00 	cmp.w	fp, #0
 8017d24:	d03a      	beq.n	8017d9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8017d26:	f892 900d 	ldrb.w	r9, [r2, #13]
 8017d2a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8017d2e:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8017d32:	f892 900a 	ldrb.w	r9, [r2, #10]
 8017d36:	f1bb 0f01 	cmp.w	fp, #1
 8017d3a:	ea49 0903 	orr.w	r9, r9, r3
 8017d3e:	d133      	bne.n	8017da8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8017d40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017d42:	eba6 0609 	sub.w	r6, r6, r9
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d14d      	bne.n	8017de6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8017d4a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017d4c:	eb09 0306 	add.w	r3, r9, r6
 8017d50:	4413      	add	r3, r2
 8017d52:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8017d54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017d58:	4293      	cmp	r3, r2
 8017d5a:	da4e      	bge.n	8017dfa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8017d5c:	e036      	b.n	8017dcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8017d5e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8017d60:	e79c      	b.n	8017c9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8017d62:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8017d66:	9301      	str	r3, [sp, #4]
 8017d68:	ab1d      	add	r3, sp, #116	@ 0x74
 8017d6a:	9300      	str	r3, [sp, #0]
 8017d6c:	4659      	mov	r1, fp
 8017d6e:	ab1c      	add	r3, sp, #112	@ 0x70
 8017d70:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8017d72:	f003 fa3c 	bl	801b1ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8017d76:	4604      	mov	r4, r0
 8017d78:	e7c0      	b.n	8017cfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8017d7a:	6828      	ldr	r0, [r5, #0]
 8017d7c:	6803      	ldr	r3, [r0, #0]
 8017d7e:	691b      	ldr	r3, [r3, #16]
 8017d80:	4798      	blx	r3
 8017d82:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017d86:	4298      	cmp	r0, r3
 8017d88:	f000 80a7 	beq.w	8017eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017d8c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8017d90:	4298      	cmp	r0, r3
 8017d92:	f000 80a2 	beq.w	8017eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017d96:	f1bb 0f00 	cmp.w	fp, #0
 8017d9a:	d100      	bne.n	8017d9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8017d9c:	444e      	add	r6, r9
 8017d9e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8017da0:	2a00      	cmp	r2, #0
 8017da2:	d1c0      	bne.n	8017d26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8017da4:	4691      	mov	r9, r2
 8017da6:	e098      	b.n	8017eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017da8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	f000 80c1 	beq.w	8017f32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e6>
 8017db0:	f1bb 0f00 	cmp.w	fp, #0
 8017db4:	d117      	bne.n	8017de6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8017db6:	6828      	ldr	r0, [r5, #0]
 8017db8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017dba:	6803      	ldr	r3, [r0, #0]
 8017dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017dbe:	4798      	blx	r3
 8017dc0:	4406      	add	r6, r0
 8017dc2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017dc4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017dc6:	1af3      	subs	r3, r6, r3
 8017dc8:	4293      	cmp	r3, r2
 8017dca:	dd16      	ble.n	8017dfa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8017dcc:	2c00      	cmp	r4, #0
 8017dce:	f000 80ae 	beq.w	8017f2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 8017dd2:	2c0a      	cmp	r4, #10
 8017dd4:	f040 809c 	bne.w	8017f10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>
 8017dd8:	240a      	movs	r4, #10
 8017dda:	fab4 f084 	clz	r0, r4
 8017dde:	0940      	lsrs	r0, r0, #5
 8017de0:	b01f      	add	sp, #124	@ 0x7c
 8017de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017de6:	6828      	ldr	r0, [r5, #0]
 8017de8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017dea:	6803      	ldr	r3, [r0, #0]
 8017dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017dee:	4798      	blx	r3
 8017df0:	f1bb 0f01 	cmp.w	fp, #1
 8017df4:	eba6 0600 	sub.w	r6, r6, r0
 8017df8:	d0a7      	beq.n	8017d4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8017dfa:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8017dfc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8017dfe:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8017e02:	f9b3 8000 	ldrsh.w	r8, [r3]
 8017e06:	7b43      	ldrb	r3, [r0, #13]
 8017e08:	015b      	lsls	r3, r3, #5
 8017e0a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017e0e:	7983      	ldrb	r3, [r0, #6]
 8017e10:	4431      	add	r1, r6
 8017e12:	4313      	orrs	r3, r2
 8017e14:	440b      	add	r3, r1
 8017e16:	4543      	cmp	r3, r8
 8017e18:	db5f      	blt.n	8017eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017e1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017e1c:	4299      	cmp	r1, r3
 8017e1e:	da5c      	bge.n	8017eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017e20:	6828      	ldr	r0, [r5, #0]
 8017e22:	6803      	ldr	r3, [r0, #0]
 8017e24:	45b0      	cmp	r8, r6
 8017e26:	bfc8      	it	gt
 8017e28:	eba8 0806 	subgt.w	r8, r8, r6
 8017e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017e2e:	bfcc      	ite	gt
 8017e30:	fa1f f888 	uxthgt.w	r8, r8
 8017e34:	f04f 0800 	movle.w	r8, #0
 8017e38:	4798      	blx	r3
 8017e3a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8017e3c:	7b53      	ldrb	r3, [r2, #13]
 8017e3e:	00d9      	lsls	r1, r3, #3
 8017e40:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8017e44:	7a11      	ldrb	r1, [r2, #8]
 8017e46:	4339      	orrs	r1, r7
 8017e48:	065f      	lsls	r7, r3, #25
 8017e4a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8017e4c:	bf44      	itt	mi
 8017e4e:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8017e52:	b209      	sxthmi	r1, r1
 8017e54:	19c7      	adds	r7, r0, r7
 8017e56:	1a7f      	subs	r7, r7, r1
 8017e58:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8017e5a:	b2bf      	uxth	r7, r7
 8017e5c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8017e60:	fa0f fa87 	sxth.w	sl, r7
 8017e64:	4551      	cmp	r1, sl
 8017e66:	dd3c      	ble.n	8017ee2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8017e68:	011b      	lsls	r3, r3, #4
 8017e6a:	79d0      	ldrb	r0, [r2, #7]
 8017e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017e70:	4303      	orrs	r3, r0
 8017e72:	449a      	add	sl, r3
 8017e74:	4551      	cmp	r1, sl
 8017e76:	dc30      	bgt.n	8017eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017e78:	1bcf      	subs	r7, r1, r7
 8017e7a:	b23f      	sxth	r7, r7
 8017e7c:	468a      	mov	sl, r1
 8017e7e:	9219      	str	r2, [sp, #100]	@ 0x64
 8017e80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017e82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017e84:	6828      	ldr	r0, [r5, #0]
 8017e86:	2a00      	cmp	r2, #0
 8017e88:	d12d      	bne.n	8017ee6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8017e8a:	9318      	str	r3, [sp, #96]	@ 0x60
 8017e8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017e8e:	6819      	ldr	r1, [r3, #0]
 8017e90:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8017e92:	6801      	ldr	r1, [r0, #0]
 8017e94:	9314      	str	r3, [sp, #80]	@ 0x50
 8017e96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8017e98:	4788      	blx	r1
 8017e9a:	79a9      	ldrb	r1, [r5, #6]
 8017e9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017e9e:	7ba9      	ldrb	r1, [r5, #14]
 8017ea0:	910a      	str	r1, [sp, #40]	@ 0x28
 8017ea2:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8017ea6:	9109      	str	r1, [sp, #36]	@ 0x24
 8017ea8:	68a9      	ldr	r1, [r5, #8]
 8017eaa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017eac:	9306      	str	r3, [sp, #24]
 8017eae:	b2bf      	uxth	r7, r7
 8017eb0:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8017eb4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8017eb6:	9304      	str	r3, [sp, #16]
 8017eb8:	44b0      	add	r8, r6
 8017eba:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8017ebe:	fa0f f388 	sxth.w	r3, r8
 8017ec2:	9300      	str	r3, [sp, #0]
 8017ec4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017ec6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ec8:	9205      	str	r2, [sp, #20]
 8017eca:	f8cd a004 	str.w	sl, [sp, #4]
 8017ece:	681a      	ldr	r2, [r3, #0]
 8017ed0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8017ed2:	685b      	ldr	r3, [r3, #4]
 8017ed4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8017ed6:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8017ed8:	47b8      	blx	r7
 8017eda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017edc:	3301      	adds	r3, #1
 8017ede:	930d      	str	r3, [sp, #52]	@ 0x34
 8017ee0:	e6e4      	b.n	8017cac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8017ee2:	2700      	movs	r7, #0
 8017ee4:	e7cb      	b.n	8017e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8017ee6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017ee8:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8017eec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017eee:	f8dc 1000 	ldr.w	r1, [ip]
 8017ef2:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8017ef6:	79aa      	ldrb	r2, [r5, #6]
 8017ef8:	9203      	str	r2, [sp, #12]
 8017efa:	7baa      	ldrb	r2, [r5, #14]
 8017efc:	9202      	str	r2, [sp, #8]
 8017efe:	68aa      	ldr	r2, [r5, #8]
 8017f00:	e9cd 0200 	strd	r0, r2, [sp]
 8017f04:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8017f06:	688f      	ldr	r7, [r1, #8]
 8017f08:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017f0a:	4660      	mov	r0, ip
 8017f0c:	47b8      	blx	r7
 8017f0e:	e7e4      	b.n	8017eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017f10:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8017f12:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8017f14:	3501      	adds	r5, #1
 8017f16:	429d      	cmp	r5, r3
 8017f18:	f6bf af5f 	bge.w	8017dda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8017f1c:	4659      	mov	r1, fp
 8017f1e:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8017f20:	f7f7 fc2a 	bl	800f778 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017f24:	4604      	mov	r4, r0
 8017f26:	b110      	cbz	r0, 8017f2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 8017f28:	280a      	cmp	r0, #10
 8017f2a:	d1f2      	bne.n	8017f12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8017f2c:	e754      	b.n	8017dd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8017f2e:	2400      	movs	r4, #0
 8017f30:	e753      	b.n	8017dda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8017f32:	f1bb 0f00 	cmp.w	fp, #0
 8017f36:	f43f af44 	beq.w	8017dc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8017f3a:	e75e      	b.n	8017dfa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08017f3c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8017f3c:	b530      	push	{r4, r5, lr}
 8017f3e:	8ac4      	ldrh	r4, [r0, #22]
 8017f40:	8b45      	ldrh	r5, [r0, #26]
 8017f42:	8343      	strh	r3, [r0, #26]
 8017f44:	442c      	add	r4, r5
 8017f46:	1ae4      	subs	r4, r4, r3
 8017f48:	82c4      	strh	r4, [r0, #22]
 8017f4a:	8b83      	ldrh	r3, [r0, #28]
 8017f4c:	8b04      	ldrh	r4, [r0, #24]
 8017f4e:	4422      	add	r2, r4
 8017f50:	440c      	add	r4, r1
 8017f52:	1a59      	subs	r1, r3, r1
 8017f54:	83c2      	strh	r2, [r0, #30]
 8017f56:	8304      	strh	r4, [r0, #24]
 8017f58:	8381      	strh	r1, [r0, #28]
 8017f5a:	bd30      	pop	{r4, r5, pc}

08017f5c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8017f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f60:	4604      	mov	r4, r0
 8017f62:	8a47      	ldrh	r7, [r0, #18]
 8017f64:	68c0      	ldr	r0, [r0, #12]
 8017f66:	6803      	ldr	r3, [r0, #0]
 8017f68:	b085      	sub	sp, #20
 8017f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017f6c:	4798      	blx	r3
 8017f6e:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8017f72:	7a63      	ldrb	r3, [r4, #9]
 8017f74:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8017f78:	42b7      	cmp	r7, r6
 8017f7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8017f7e:	bfac      	ite	ge
 8017f80:	f04f 0900 	movge.w	r9, #0
 8017f84:	f04f 0901 	movlt.w	r9, #1
 8017f88:	2b05      	cmp	r3, #5
 8017f8a:	d804      	bhi.n	8017f96 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 8017f8c:	e8df f003 	tbb	[pc, r3]
 8017f90:	470e0854 	.word	0x470e0854
 8017f94:	4c4c      	.short	0x4c4c
 8017f96:	2500      	movs	r5, #0
 8017f98:	46a9      	mov	r9, r5
 8017f9a:	462e      	mov	r6, r5
 8017f9c:	462f      	mov	r7, r5
 8017f9e:	e00d      	b.n	8017fbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8017fa0:	42b7      	cmp	r7, r6
 8017fa2:	bfb4      	ite	lt
 8017fa4:	2600      	movlt	r6, #0
 8017fa6:	2601      	movge	r6, #1
 8017fa8:	2500      	movs	r5, #0
 8017faa:	e7f7      	b.n	8017f9c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 8017fac:	42b7      	cmp	r7, r6
 8017fae:	464d      	mov	r5, r9
 8017fb0:	f04f 0900 	mov.w	r9, #0
 8017fb4:	bfb4      	ite	lt
 8017fb6:	2600      	movlt	r6, #0
 8017fb8:	2601      	movge	r6, #1
 8017fba:	464f      	mov	r7, r9
 8017fbc:	f04f 0800 	mov.w	r8, #0
 8017fc0:	f8a4 8016 	strh.w	r8, [r4, #22]
 8017fc4:	f8a4 8018 	strh.w	r8, [r4, #24]
 8017fc8:	f8cd 8004 	str.w	r8, [sp, #4]
 8017fcc:	2300      	movs	r3, #0
 8017fce:	9303      	str	r3, [sp, #12]
 8017fd0:	8823      	ldrh	r3, [r4, #0]
 8017fd2:	2b20      	cmp	r3, #32
 8017fd4:	d034      	beq.n	8018040 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 8017fd6:	f242 010b 	movw	r1, #8203	@ 0x200b
 8017fda:	1a5a      	subs	r2, r3, r1
 8017fdc:	f1d2 0a00 	rsbs	sl, r2, #0
 8017fe0:	eb4a 0a02 	adc.w	sl, sl, r2
 8017fe4:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8017fe8:	4293      	cmp	r3, r2
 8017fea:	d009      	beq.n	8018000 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 8017fec:	428b      	cmp	r3, r1
 8017fee:	9a01      	ldr	r2, [sp, #4]
 8017ff0:	bf18      	it	ne
 8017ff2:	461a      	movne	r2, r3
 8017ff4:	9201      	str	r2, [sp, #4]
 8017ff6:	bf0c      	ite	eq
 8017ff8:	f04f 0a01 	moveq.w	sl, #1
 8017ffc:	f04f 0a00 	movne.w	sl, #0
 8018000:	ab03      	add	r3, sp, #12
 8018002:	68e2      	ldr	r2, [r4, #12]
 8018004:	7a21      	ldrb	r1, [r4, #8]
 8018006:	6860      	ldr	r0, [r4, #4]
 8018008:	f003 f8a8 	bl	801b15c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801800c:	8020      	strh	r0, [r4, #0]
 801800e:	b9d8      	cbnz	r0, 8018048 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 8018010:	8ba2      	ldrh	r2, [r4, #28]
 8018012:	2300      	movs	r3, #0
 8018014:	4611      	mov	r1, r2
 8018016:	4620      	mov	r0, r4
 8018018:	f7ff ff90 	bl	8017f3c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801801c:	e06e      	b.n	80180fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 801801e:	2500      	movs	r5, #0
 8018020:	46a9      	mov	r9, r5
 8018022:	462e      	mov	r6, r5
 8018024:	2701      	movs	r7, #1
 8018026:	e7c9      	b.n	8017fbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8018028:	42b7      	cmp	r7, r6
 801802a:	f04f 0500 	mov.w	r5, #0
 801802e:	bfb4      	ite	lt
 8018030:	2700      	movlt	r7, #0
 8018032:	2701      	movge	r7, #1
 8018034:	462e      	mov	r6, r5
 8018036:	e7c1      	b.n	8017fbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8018038:	2500      	movs	r5, #0
 801803a:	46a9      	mov	r9, r5
 801803c:	2601      	movs	r6, #1
 801803e:	e7ad      	b.n	8017f9c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 8018040:	9301      	str	r3, [sp, #4]
 8018042:	f04f 0a01 	mov.w	sl, #1
 8018046:	e7db      	b.n	8018000 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 8018048:	8b63      	ldrh	r3, [r4, #26]
 801804a:	280a      	cmp	r0, #10
 801804c:	f103 0301 	add.w	r3, r3, #1
 8018050:	8363      	strh	r3, [r4, #26]
 8018052:	d0dd      	beq.n	8018010 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 8018054:	9a03      	ldr	r2, [sp, #12]
 8018056:	bb62      	cbnz	r2, 80180b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 8018058:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801805c:	4298      	cmp	r0, r3
 801805e:	d003      	beq.n	8018068 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 8018060:	f242 030b 	movw	r3, #8203	@ 0x200b
 8018064:	4298      	cmp	r0, r3
 8018066:	d1b1      	bne.n	8017fcc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018068:	8823      	ldrh	r3, [r4, #0]
 801806a:	8ba1      	ldrh	r1, [r4, #28]
 801806c:	2b20      	cmp	r3, #32
 801806e:	d003      	beq.n	8018078 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 8018070:	f242 000b 	movw	r0, #8203	@ 0x200b
 8018074:	4283      	cmp	r3, r0
 8018076:	d131      	bne.n	80180dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 8018078:	f1ba 0f00 	cmp.w	sl, #0
 801807c:	bf0a      	itet	eq
 801807e:	4688      	moveq	r8, r1
 8018080:	4650      	movne	r0, sl
 8018082:	2001      	moveq	r0, #1
 8018084:	440a      	add	r2, r1
 8018086:	8b23      	ldrh	r3, [r4, #24]
 8018088:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801808c:	b292      	uxth	r2, r2
 801808e:	83a2      	strh	r2, [r4, #28]
 8018090:	4413      	add	r3, r2
 8018092:	f1b9 0f00 	cmp.w	r9, #0
 8018096:	d102      	bne.n	801809e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 8018098:	2d00      	cmp	r5, #0
 801809a:	d042      	beq.n	8018122 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 801809c:	b300      	cbz	r0, 80180e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 801809e:	8c21      	ldrh	r1, [r4, #32]
 80180a0:	4419      	add	r1, r3
 80180a2:	458c      	cmp	ip, r1
 80180a4:	da37      	bge.n	8018116 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 80180a6:	8ae1      	ldrh	r1, [r4, #22]
 80180a8:	2900      	cmp	r1, #0
 80180aa:	d034      	beq.n	8018116 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 80180ac:	4563      	cmp	r3, ip
 80180ae:	dd8d      	ble.n	8017fcc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80180b0:	e01d      	b.n	80180ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 80180b2:	8893      	ldrh	r3, [r2, #4]
 80180b4:	8023      	strh	r3, [r4, #0]
 80180b6:	f892 b00d 	ldrb.w	fp, [r2, #13]
 80180ba:	9901      	ldr	r1, [sp, #4]
 80180bc:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80180c0:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 80180c4:	f892 b00a 	ldrb.w	fp, [r2, #10]
 80180c8:	ea4b 0b00 	orr.w	fp, fp, r0
 80180cc:	68e0      	ldr	r0, [r4, #12]
 80180ce:	6803      	ldr	r3, [r0, #0]
 80180d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80180d2:	4798      	blx	r3
 80180d4:	eb0b 0200 	add.w	r2, fp, r0
 80180d8:	b292      	uxth	r2, r2
 80180da:	e7c5      	b.n	8018068 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 80180dc:	2000      	movs	r0, #0
 80180de:	e7d1      	b.n	8018084 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 80180e0:	4563      	cmp	r3, ip
 80180e2:	f77f af73 	ble.w	8017fcc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80180e6:	8ae3      	ldrh	r3, [r4, #22]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	f43f af6f 	beq.w	8017fcc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80180ee:	2301      	movs	r3, #1
 80180f0:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 80180f4:	8c22      	ldrh	r2, [r4, #32]
 80180f6:	8be3      	ldrh	r3, [r4, #30]
 80180f8:	4413      	add	r3, r2
 80180fa:	83e3      	strh	r3, [r4, #30]
 80180fc:	68e0      	ldr	r0, [r4, #12]
 80180fe:	6803      	ldr	r3, [r0, #0]
 8018100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018102:	4798      	blx	r3
 8018104:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8018108:	4418      	add	r0, r3
 801810a:	8a63      	ldrh	r3, [r4, #18]
 801810c:	1a18      	subs	r0, r3, r0
 801810e:	8260      	strh	r0, [r4, #18]
 8018110:	b005      	add	sp, #20
 8018112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018116:	2300      	movs	r3, #0
 8018118:	4611      	mov	r1, r2
 801811a:	4620      	mov	r0, r4
 801811c:	f7ff ff0e 	bl	8017f3c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018120:	e754      	b.n	8017fcc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018122:	4563      	cmp	r3, ip
 8018124:	dd14      	ble.n	8018150 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 8018126:	b117      	cbz	r7, 801812e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 8018128:	2301      	movs	r3, #1
 801812a:	460a      	mov	r2, r1
 801812c:	e772      	b.n	8018014 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801812e:	2e00      	cmp	r6, #0
 8018130:	f43f af4c 	beq.w	8017fcc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018134:	2800      	cmp	r0, #0
 8018136:	f47f af49 	bne.w	8017fcc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801813a:	f1ba 0f00 	cmp.w	sl, #0
 801813e:	d002      	beq.n	8018146 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 8018140:	2301      	movs	r3, #1
 8018142:	4642      	mov	r2, r8
 8018144:	e767      	b.n	8018016 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 8018146:	8ae3      	ldrh	r3, [r4, #22]
 8018148:	2b00      	cmp	r3, #0
 801814a:	f43f af3f 	beq.w	8017fcc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801814e:	e7d5      	b.n	80180fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 8018150:	2800      	cmp	r0, #0
 8018152:	f47f af3b 	bne.w	8017fcc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018156:	f1ba 0f00 	cmp.w	sl, #0
 801815a:	f43f af37 	beq.w	8017fcc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801815e:	2301      	movs	r3, #1
 8018160:	4642      	mov	r2, r8
 8018162:	e7da      	b.n	801811a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

08018164 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018166:	4605      	mov	r5, r0
 8018168:	b08f      	sub	sp, #60	@ 0x3c
 801816a:	4617      	mov	r7, r2
 801816c:	461c      	mov	r4, r3
 801816e:	460e      	mov	r6, r1
 8018170:	b1d1      	cbz	r1, 80181a8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	4620      	mov	r0, r4
 8018176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018178:	4798      	blx	r3
 801817a:	4240      	negs	r0, r0
 801817c:	b200      	sxth	r0, r0
 801817e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8018182:	9603      	str	r6, [sp, #12]
 8018184:	9700      	str	r7, [sp, #0]
 8018186:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801818a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801818e:	4629      	mov	r1, r5
 8018190:	a805      	add	r0, sp, #20
 8018192:	f7ff fcab 	bl	8017aec <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8018196:	2401      	movs	r4, #1
 8018198:	a805      	add	r0, sp, #20
 801819a:	f7ff fedf 	bl	8017f5c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801819e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80181a2:	b163      	cbz	r3, 80181be <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 80181a4:	3401      	adds	r4, #1
 80181a6:	e7f7      	b.n	8018198 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80181a8:	f003 f8a6 	bl	801b2f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80181ac:	2401      	movs	r4, #1
 80181ae:	280a      	cmp	r0, #10
 80181b0:	4628      	mov	r0, r5
 80181b2:	bf08      	it	eq
 80181b4:	3401      	addeq	r4, #1
 80181b6:	f003 f89f 	bl	801b2f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80181ba:	2800      	cmp	r0, #0
 80181bc:	d1f7      	bne.n	80181ae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80181be:	b2a0      	uxth	r0, r4
 80181c0:	b00f      	add	sp, #60	@ 0x3c
 80181c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080181c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80181c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181c8:	b0e3      	sub	sp, #396	@ 0x18c
 80181ca:	461c      	mov	r4, r3
 80181cc:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 80181ce:	4683      	mov	fp, r0
 80181d0:	4688      	mov	r8, r1
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	f000 8112 	beq.w	80183fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80181d8:	6823      	ldr	r3, [r4, #0]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	f000 810e 	beq.w	80183fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80181e0:	7ba3      	ldrb	r3, [r4, #14]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	f000 810a 	beq.w	80183fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80181e8:	6810      	ldr	r0, [r2, #0]
 80181ea:	6851      	ldr	r1, [r2, #4]
 80181ec:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 80181f0:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80181f4:	ad0a      	add	r5, sp, #40	@ 0x28
 80181f6:	462b      	mov	r3, r5
 80181f8:	c303      	stmia	r3!, {r0, r1}
 80181fa:	2100      	movs	r1, #0
 80181fc:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8018200:	910c      	str	r1, [sp, #48]	@ 0x30
 8018202:	79a2      	ldrb	r2, [r4, #6]
 8018204:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8018208:	a90c      	add	r1, sp, #48	@ 0x30
 801820a:	4628      	mov	r0, r5
 801820c:	f7ff fced 	bl	8017bea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018210:	a90c      	add	r1, sp, #48	@ 0x30
 8018212:	4608      	mov	r0, r1
 8018214:	79a2      	ldrb	r2, [r4, #6]
 8018216:	f7ff fce8 	bl	8017bea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801821a:	a817      	add	r0, sp, #92	@ 0x5c
 801821c:	f002 fc41 	bl	801aaa2 <_ZN8touchgfx12TextProviderC1Ev>
 8018220:	6820      	ldr	r0, [r4, #0]
 8018222:	6803      	ldr	r3, [r0, #0]
 8018224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018226:	4798      	blx	r3
 8018228:	4606      	mov	r6, r0
 801822a:	6820      	ldr	r0, [r4, #0]
 801822c:	6803      	ldr	r3, [r0, #0]
 801822e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018230:	4798      	blx	r3
 8018232:	4633      	mov	r3, r6
 8018234:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8018236:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8018238:	9000      	str	r0, [sp, #0]
 801823a:	a817      	add	r0, sp, #92	@ 0x5c
 801823c:	f002 fc8c 	bl	801ab58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018240:	6820      	ldr	r0, [r4, #0]
 8018242:	f894 a004 	ldrb.w	sl, [r4, #4]
 8018246:	6803      	ldr	r3, [r0, #0]
 8018248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801824a:	4798      	blx	r3
 801824c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8018250:	6823      	ldr	r3, [r4, #0]
 8018252:	4607      	mov	r7, r0
 8018254:	4406      	add	r6, r0
 8018256:	a830      	add	r0, sp, #192	@ 0xc0
 8018258:	f893 9009 	ldrb.w	r9, [r3, #9]
 801825c:	f002 fc21 	bl	801aaa2 <_ZN8touchgfx12TextProviderC1Ev>
 8018260:	7c23      	ldrb	r3, [r4, #16]
 8018262:	b17b      	cbz	r3, 8018284 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8018264:	6820      	ldr	r0, [r4, #0]
 8018266:	6803      	ldr	r3, [r0, #0]
 8018268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801826a:	4798      	blx	r3
 801826c:	9009      	str	r0, [sp, #36]	@ 0x24
 801826e:	6820      	ldr	r0, [r4, #0]
 8018270:	6802      	ldr	r2, [r0, #0]
 8018272:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8018274:	4790      	blx	r2
 8018276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018278:	9000      	str	r0, [sp, #0]
 801827a:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801827c:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801827e:	a830      	add	r0, sp, #192	@ 0xc0
 8018280:	f002 fc6a 	bl	801ab58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018284:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8018288:	7be2      	ldrb	r2, [r4, #15]
 801828a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801828e:	1a8a      	subs	r2, r1, r2
 8018290:	7c21      	ldrb	r1, [r4, #16]
 8018292:	9103      	str	r1, [sp, #12]
 8018294:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8018298:	9102      	str	r1, [sp, #8]
 801829a:	6821      	ldr	r1, [r4, #0]
 801829c:	9101      	str	r1, [sp, #4]
 801829e:	7961      	ldrb	r1, [r4, #5]
 80182a0:	9100      	str	r1, [sp, #0]
 80182a2:	b292      	uxth	r2, r2
 80182a4:	a930      	add	r1, sp, #192	@ 0xc0
 80182a6:	a80e      	add	r0, sp, #56	@ 0x38
 80182a8:	f7ff fc20 	bl	8017aec <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80182ac:	2e00      	cmp	r6, #0
 80182ae:	dc5b      	bgt.n	8018368 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80182b0:	af17      	add	r7, sp, #92	@ 0x5c
 80182b2:	f04f 0900 	mov.w	r9, #0
 80182b6:	7c23      	ldrb	r3, [r4, #16]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	f000 80b1 	beq.w	8018420 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80182be:	a80e      	add	r0, sp, #56	@ 0x38
 80182c0:	f7ff fe4c 	bl	8017f5c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80182c4:	f1ba 0f00 	cmp.w	sl, #0
 80182c8:	f000 80a5 	beq.w	8018416 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80182cc:	7c23      	ldrb	r3, [r4, #16]
 80182ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80182d0:	2264      	movs	r2, #100	@ 0x64
 80182d2:	4639      	mov	r1, r7
 80182d4:	a849      	add	r0, sp, #292	@ 0x124
 80182d6:	f013 fb52 	bl	802b97e <memcpy>
 80182da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80182dc:	2b00      	cmp	r3, #0
 80182de:	f000 80a7 	beq.w	8018430 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80182e2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 80182e6:	7922      	ldrb	r2, [r4, #4]
 80182e8:	2a01      	cmp	r2, #1
 80182ea:	f040 808a 	bne.w	8018402 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 80182ee:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 80182f2:	1ac0      	subs	r0, r0, r3
 80182f4:	2302      	movs	r3, #2
 80182f6:	fb90 f0f3 	sdiv	r0, r0, r3
 80182fa:	b200      	sxth	r0, r0
 80182fc:	7c23      	ldrb	r3, [r4, #16]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	f000 808b 	beq.w	801841a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8018304:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8018308:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 801830c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8018310:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8018314:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8018318:	4410      	add	r0, r2
 801831a:	b200      	sxth	r0, r0
 801831c:	9000      	str	r0, [sp, #0]
 801831e:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8018322:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8018326:	4642      	mov	r2, r8
 8018328:	2100      	movs	r1, #0
 801832a:	4658      	mov	r0, fp
 801832c:	f7ff fc8e 	bl	8017c4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8018330:	2800      	cmp	r0, #0
 8018332:	d163      	bne.n	80183fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018334:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8018338:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801833c:	b2b2      	uxth	r2, r6
 801833e:	4413      	add	r3, r2
 8018340:	1a8a      	subs	r2, r1, r2
 8018342:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8018346:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 801834a:	b21b      	sxth	r3, r3
 801834c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8018350:	2a00      	cmp	r2, #0
 8018352:	d153      	bne.n	80183fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018354:	6822      	ldr	r2, [r4, #0]
 8018356:	8869      	ldrh	r1, [r5, #2]
 8018358:	7a12      	ldrb	r2, [r2, #8]
 801835a:	1a9b      	subs	r3, r3, r2
 801835c:	88ea      	ldrh	r2, [r5, #6]
 801835e:	440a      	add	r2, r1
 8018360:	b212      	sxth	r2, r2
 8018362:	4293      	cmp	r3, r2
 8018364:	dda7      	ble.n	80182b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8018366:	e049      	b.n	80183fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018368:	7c23      	ldrb	r3, [r4, #16]
 801836a:	444f      	add	r7, r9
 801836c:	b1c3      	cbz	r3, 80183a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801836e:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8018372:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8018376:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801837a:	443b      	add	r3, r7
 801837c:	4293      	cmp	r3, r2
 801837e:	da97      	bge.n	80182b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8018380:	a80e      	add	r0, sp, #56	@ 0x38
 8018382:	f7ff fdeb 	bl	8017f5c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8018386:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 801838a:	3b01      	subs	r3, #1
 801838c:	b29b      	uxth	r3, r3
 801838e:	454b      	cmp	r3, r9
 8018390:	9309      	str	r3, [sp, #36]	@ 0x24
 8018392:	d021      	beq.n	80183d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8018394:	7961      	ldrb	r1, [r4, #5]
 8018396:	a817      	add	r0, sp, #92	@ 0x5c
 8018398:	f7f7 f9ee 	bl	800f778 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801839c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801839e:	e7f4      	b.n	801838a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 80183a0:	fa1f f986 	uxth.w	r9, r6
 80183a4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80183a8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80183ac:	443b      	add	r3, r7
 80183ae:	4293      	cmp	r3, r2
 80183b0:	f6bf af7e 	bge.w	80182b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80183b4:	a817      	add	r0, sp, #92	@ 0x5c
 80183b6:	f002 ff9f 	bl	801b2f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80183ba:	b1f8      	cbz	r0, 80183fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80183bc:	280a      	cmp	r0, #10
 80183be:	d1f1      	bne.n	80183a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80183c0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80183c4:	444b      	add	r3, r9
 80183c6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80183ca:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80183ce:	eba3 0309 	sub.w	r3, r3, r9
 80183d2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80183d6:	e7e5      	b.n	80183a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80183d8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80183dc:	b2b3      	uxth	r3, r6
 80183de:	441a      	add	r2, r3
 80183e0:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80183e4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 80183e8:	1ad3      	subs	r3, r2, r3
 80183ea:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80183ee:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80183f2:	b11b      	cbz	r3, 80183fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80183f4:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d0ba      	beq.n	8018372 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 80183fc:	b063      	add	sp, #396	@ 0x18c
 80183fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018402:	2a02      	cmp	r2, #2
 8018404:	d105      	bne.n	8018412 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8018406:	7be2      	ldrb	r2, [r4, #15]
 8018408:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801840c:	1a80      	subs	r0, r0, r2
 801840e:	1ac0      	subs	r0, r0, r3
 8018410:	e773      	b.n	80182fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8018412:	2000      	movs	r0, #0
 8018414:	e772      	b.n	80182fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8018416:	7be0      	ldrb	r0, [r4, #15]
 8018418:	e770      	b.n	80182fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801841a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801841e:	e773      	b.n	8018308 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8018420:	f1ba 0f00 	cmp.w	sl, #0
 8018424:	d0f7      	beq.n	8018416 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8018426:	2264      	movs	r2, #100	@ 0x64
 8018428:	4639      	mov	r1, r7
 801842a:	a849      	add	r0, sp, #292	@ 0x124
 801842c:	f013 faa7 	bl	802b97e <memcpy>
 8018430:	2300      	movs	r3, #0
 8018432:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8018436:	6821      	ldr	r1, [r4, #0]
 8018438:	a849      	add	r0, sp, #292	@ 0x124
 801843a:	f7ff fb9a 	bl	8017b72 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801843e:	b203      	sxth	r3, r0
 8018440:	e751      	b.n	80182e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08018442 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018442:	2b03      	cmp	r3, #3
 8018444:	d818      	bhi.n	8018478 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8018446:	e8df f003 	tbb	[pc, r3]
 801844a:	0602      	.short	0x0602
 801844c:	130d      	.short	0x130d
 801844e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018452:	1850      	adds	r0, r2, r1
 8018454:	4770      	bx	lr
 8018456:	8803      	ldrh	r3, [r0, #0]
 8018458:	8880      	ldrh	r0, [r0, #4]
 801845a:	4418      	add	r0, r3
 801845c:	b200      	sxth	r0, r0
 801845e:	1a80      	subs	r0, r0, r2
 8018460:	3801      	subs	r0, #1
 8018462:	4770      	bx	lr
 8018464:	8803      	ldrh	r3, [r0, #0]
 8018466:	8880      	ldrh	r0, [r0, #4]
 8018468:	4418      	add	r0, r3
 801846a:	b200      	sxth	r0, r0
 801846c:	1a40      	subs	r0, r0, r1
 801846e:	e7f7      	b.n	8018460 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018470:	f9b0 0000 	ldrsh.w	r0, [r0]
 8018474:	4410      	add	r0, r2
 8018476:	4770      	bx	lr
 8018478:	2000      	movs	r0, #0
 801847a:	4770      	bx	lr

0801847c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801847c:	2b03      	cmp	r3, #3
 801847e:	d817      	bhi.n	80184b0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8018480:	e8df f003 	tbb	[pc, r3]
 8018484:	10090602 	.word	0x10090602
 8018488:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801848c:	1850      	adds	r0, r2, r1
 801848e:	4770      	bx	lr
 8018490:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018494:	e7fa      	b.n	801848c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8018496:	8843      	ldrh	r3, [r0, #2]
 8018498:	88c0      	ldrh	r0, [r0, #6]
 801849a:	4418      	add	r0, r3
 801849c:	b200      	sxth	r0, r0
 801849e:	1a80      	subs	r0, r0, r2
 80184a0:	3801      	subs	r0, #1
 80184a2:	4770      	bx	lr
 80184a4:	8843      	ldrh	r3, [r0, #2]
 80184a6:	88c0      	ldrh	r0, [r0, #6]
 80184a8:	4418      	add	r0, r3
 80184aa:	b200      	sxth	r0, r0
 80184ac:	1a40      	subs	r0, r0, r1
 80184ae:	e7f7      	b.n	80184a0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80184b0:	2000      	movs	r0, #0
 80184b2:	4770      	bx	lr

080184b4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80184b4:	4b01      	ldr	r3, [pc, #4]	@ (80184bc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80184b6:	2200      	movs	r2, #0
 80184b8:	601a      	str	r2, [r3, #0]
 80184ba:	4770      	bx	lr
 80184bc:	200126f0 	.word	0x200126f0

080184c0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80184c0:	4603      	mov	r3, r0
 80184c2:	b1c8      	cbz	r0, 80184f8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80184c4:	0c02      	lsrs	r2, r0, #16
 80184c6:	0412      	lsls	r2, r2, #16
 80184c8:	b9a2      	cbnz	r2, 80184f4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80184ca:	0403      	lsls	r3, r0, #16
 80184cc:	2010      	movs	r0, #16
 80184ce:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80184d2:	bf04      	itt	eq
 80184d4:	021b      	lsleq	r3, r3, #8
 80184d6:	3008      	addeq	r0, #8
 80184d8:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80184dc:	bf04      	itt	eq
 80184de:	011b      	lsleq	r3, r3, #4
 80184e0:	3004      	addeq	r0, #4
 80184e2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80184e6:	bf04      	itt	eq
 80184e8:	009b      	lsleq	r3, r3, #2
 80184ea:	3002      	addeq	r0, #2
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	db04      	blt.n	80184fa <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80184f0:	3001      	adds	r0, #1
 80184f2:	4770      	bx	lr
 80184f4:	2000      	movs	r0, #0
 80184f6:	e7ea      	b.n	80184ce <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80184f8:	2020      	movs	r0, #32
 80184fa:	4770      	bx	lr

080184fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80184fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018500:	b087      	sub	sp, #28
 8018502:	460d      	mov	r5, r1
 8018504:	4616      	mov	r6, r2
 8018506:	4698      	mov	r8, r3
 8018508:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801850c:	4601      	mov	r1, r0
 801850e:	b120      	cbz	r0, 801851a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8018510:	b11a      	cbz	r2, 801851a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8018512:	2d1f      	cmp	r5, #31
 8018514:	d801      	bhi.n	801851a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8018516:	2b1f      	cmp	r3, #31
 8018518:	d904      	bls.n	8018524 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801851a:	2000      	movs	r0, #0
 801851c:	6038      	str	r0, [r7, #0]
 801851e:	b007      	add	sp, #28
 8018520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018524:	b97d      	cbnz	r5, 8018546 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8018526:	b143      	cbz	r3, 801853a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8018528:	4602      	mov	r2, r0
 801852a:	e9cd 4700 	strd	r4, r7, [sp]
 801852e:	462b      	mov	r3, r5
 8018530:	4641      	mov	r1, r8
 8018532:	4630      	mov	r0, r6
 8018534:	f7ff ffe2 	bl	80184fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018538:	e7f1      	b.n	801851e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801853a:	f04f 33ff 	mov.w	r3, #4294967295
 801853e:	603b      	str	r3, [r7, #0]
 8018540:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8018544:	e7eb      	b.n	801851e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8018546:	fa32 fa05 	lsrs.w	sl, r2, r5
 801854a:	d106      	bne.n	801855a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801854c:	4346      	muls	r6, r0
 801854e:	fbb6 f0f4 	udiv	r0, r6, r4
 8018552:	fb04 6610 	mls	r6, r4, r0, r6
 8018556:	603e      	str	r6, [r7, #0]
 8018558:	e7e1      	b.n	801851e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801855a:	2201      	movs	r2, #1
 801855c:	40aa      	lsls	r2, r5
 801855e:	3a01      	subs	r2, #1
 8018560:	4016      	ands	r6, r2
 8018562:	fa00 fb05 	lsl.w	fp, r0, r5
 8018566:	4630      	mov	r0, r6
 8018568:	fbbb f9f4 	udiv	r9, fp, r4
 801856c:	fb0a f309 	mul.w	r3, sl, r9
 8018570:	9303      	str	r3, [sp, #12]
 8018572:	f7ff ffa5 	bl	80184c0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018576:	462b      	mov	r3, r5
 8018578:	460a      	mov	r2, r1
 801857a:	e9cd 4700 	strd	r4, r7, [sp]
 801857e:	4601      	mov	r1, r0
 8018580:	4630      	mov	r0, r6
 8018582:	f7ff ffbb 	bl	80184fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018586:	fb04 b919 	mls	r9, r4, r9, fp
 801858a:	4606      	mov	r6, r0
 801858c:	4648      	mov	r0, r9
 801858e:	eb05 0108 	add.w	r1, r5, r8
 8018592:	f7ff ff95 	bl	80184c0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018596:	ab05      	add	r3, sp, #20
 8018598:	e9cd 4300 	strd	r4, r3, [sp]
 801859c:	464a      	mov	r2, r9
 801859e:	4603      	mov	r3, r0
 80185a0:	4650      	mov	r0, sl
 80185a2:	f7ff ffab 	bl	80184fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80185a6:	6839      	ldr	r1, [r7, #0]
 80185a8:	9a05      	ldr	r2, [sp, #20]
 80185aa:	9b03      	ldr	r3, [sp, #12]
 80185ac:	4411      	add	r1, r2
 80185ae:	fbb1 f2f4 	udiv	r2, r1, r4
 80185b2:	18d3      	adds	r3, r2, r3
 80185b4:	441e      	add	r6, r3
 80185b6:	fb04 1412 	mls	r4, r4, r2, r1
 80185ba:	4430      	add	r0, r6
 80185bc:	603c      	str	r4, [r7, #0]
 80185be:	e7ae      	b.n	801851e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080185c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80185c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80185c4:	b085      	sub	sp, #20
 80185c6:	f1b0 0900 	subs.w	r9, r0, #0
 80185ca:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80185cc:	461d      	mov	r5, r3
 80185ce:	bfbf      	itttt	lt
 80185d0:	6823      	ldrlt	r3, [r4, #0]
 80185d2:	425b      	neglt	r3, r3
 80185d4:	f1c9 0900 	rsblt	r9, r9, #0
 80185d8:	6023      	strlt	r3, [r4, #0]
 80185da:	bfb4      	ite	lt
 80185dc:	f04f 36ff 	movlt.w	r6, #4294967295
 80185e0:	2601      	movge	r6, #1
 80185e2:	2a00      	cmp	r2, #0
 80185e4:	4617      	mov	r7, r2
 80185e6:	da04      	bge.n	80185f2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80185e8:	6823      	ldr	r3, [r4, #0]
 80185ea:	425b      	negs	r3, r3
 80185ec:	4257      	negs	r7, r2
 80185ee:	4276      	negs	r6, r6
 80185f0:	6023      	str	r3, [r4, #0]
 80185f2:	2d00      	cmp	r5, #0
 80185f4:	4638      	mov	r0, r7
 80185f6:	bfba      	itte	lt
 80185f8:	426d      	neglt	r5, r5
 80185fa:	f04f 38ff 	movlt.w	r8, #4294967295
 80185fe:	f04f 0801 	movge.w	r8, #1
 8018602:	f7ff ff5d 	bl	80184c0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018606:	ab03      	add	r3, sp, #12
 8018608:	e9cd 5300 	strd	r5, r3, [sp]
 801860c:	463a      	mov	r2, r7
 801860e:	4603      	mov	r3, r0
 8018610:	4648      	mov	r0, r9
 8018612:	f7ff ff73 	bl	80184fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018616:	6823      	ldr	r3, [r4, #0]
 8018618:	9a03      	ldr	r2, [sp, #12]
 801861a:	4546      	cmp	r6, r8
 801861c:	441a      	add	r2, r3
 801861e:	fb92 f3f5 	sdiv	r3, r2, r5
 8018622:	4418      	add	r0, r3
 8018624:	bf18      	it	ne
 8018626:	4240      	negne	r0, r0
 8018628:	fb05 2313 	mls	r3, r5, r3, r2
 801862c:	1c72      	adds	r2, r6, #1
 801862e:	6023      	str	r3, [r4, #0]
 8018630:	d105      	bne.n	801863e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8018632:	2b00      	cmp	r3, #0
 8018634:	f1c3 0200 	rsb	r2, r3, #0
 8018638:	db0b      	blt.n	8018652 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801863a:	6022      	str	r2, [r4, #0]
 801863c:	e006      	b.n	801864c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801863e:	2e01      	cmp	r6, #1
 8018640:	d104      	bne.n	801864c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018642:	2b00      	cmp	r3, #0
 8018644:	da02      	bge.n	801864c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018646:	442b      	add	r3, r5
 8018648:	3801      	subs	r0, #1
 801864a:	6023      	str	r3, [r4, #0]
 801864c:	b005      	add	sp, #20
 801864e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018652:	3801      	subs	r0, #1
 8018654:	1b52      	subs	r2, r2, r5
 8018656:	e7f0      	b.n	801863a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08018658 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018658:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801865c:	4c1c      	ldr	r4, [pc, #112]	@ (80186d0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801865e:	6807      	ldr	r7, [r0, #0]
 8018660:	69a3      	ldr	r3, [r4, #24]
 8018662:	4605      	mov	r5, r0
 8018664:	b92b      	cbnz	r3, 8018672 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8018666:	6840      	ldr	r0, [r0, #4]
 8018668:	e9c5 7000 	strd	r7, r0, [r5]
 801866c:	b004      	add	sp, #16
 801866e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018672:	68a2      	ldr	r2, [r4, #8]
 8018674:	6820      	ldr	r0, [r4, #0]
 8018676:	ae04      	add	r6, sp, #16
 8018678:	f04f 0802 	mov.w	r8, #2
 801867c:	fb93 f1f8 	sdiv	r1, r3, r8
 8018680:	440a      	add	r2, r1
 8018682:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018686:	69e1      	ldr	r1, [r4, #28]
 8018688:	9600      	str	r6, [sp, #0]
 801868a:	463a      	mov	r2, r7
 801868c:	f7ff ff98 	bl	80185c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018690:	69a3      	ldr	r3, [r4, #24]
 8018692:	686a      	ldr	r2, [r5, #4]
 8018694:	6a21      	ldr	r1, [r4, #32]
 8018696:	9600      	str	r6, [sp, #0]
 8018698:	4607      	mov	r7, r0
 801869a:	6860      	ldr	r0, [r4, #4]
 801869c:	f7ff ff90 	bl	80185c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80186a0:	6962      	ldr	r2, [r4, #20]
 80186a2:	69a3      	ldr	r3, [r4, #24]
 80186a4:	fb93 f8f8 	sdiv	r8, r3, r8
 80186a8:	4442      	add	r2, r8
 80186aa:	9203      	str	r2, [sp, #12]
 80186ac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80186ae:	682a      	ldr	r2, [r5, #0]
 80186b0:	9600      	str	r6, [sp, #0]
 80186b2:	4407      	add	r7, r0
 80186b4:	68e0      	ldr	r0, [r4, #12]
 80186b6:	f7ff ff83 	bl	80185c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80186ba:	9600      	str	r6, [sp, #0]
 80186bc:	4680      	mov	r8, r0
 80186be:	69a3      	ldr	r3, [r4, #24]
 80186c0:	686a      	ldr	r2, [r5, #4]
 80186c2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80186c4:	6920      	ldr	r0, [r4, #16]
 80186c6:	f7ff ff7b 	bl	80185c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80186ca:	4440      	add	r0, r8
 80186cc:	e7cc      	b.n	8018668 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80186ce:	bf00      	nop
 80186d0:	200126f4 	.word	0x200126f4

080186d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80186d4:	4b07      	ldr	r3, [pc, #28]	@ (80186f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80186d6:	781b      	ldrb	r3, [r3, #0]
 80186d8:	2b01      	cmp	r3, #1
 80186da:	d109      	bne.n	80186f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80186dc:	f9b1 3000 	ldrsh.w	r3, [r1]
 80186e0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80186e4:	8003      	strh	r3, [r0, #0]
 80186e6:	4b04      	ldr	r3, [pc, #16]	@ (80186f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80186e8:	881b      	ldrh	r3, [r3, #0]
 80186ea:	3b01      	subs	r3, #1
 80186ec:	1a9b      	subs	r3, r3, r2
 80186ee:	800b      	strh	r3, [r1, #0]
 80186f0:	4770      	bx	lr
 80186f2:	bf00      	nop
 80186f4:	200126d8 	.word	0x200126d8
 80186f8:	200126d4 	.word	0x200126d4

080186fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80186fc:	b510      	push	{r4, lr}
 80186fe:	4b07      	ldr	r3, [pc, #28]	@ (801871c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018700:	781b      	ldrb	r3, [r3, #0]
 8018702:	2b01      	cmp	r3, #1
 8018704:	d108      	bne.n	8018718 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018706:	4b06      	ldr	r3, [pc, #24]	@ (8018720 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018708:	880c      	ldrh	r4, [r1, #0]
 801870a:	881b      	ldrh	r3, [r3, #0]
 801870c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018710:	3b01      	subs	r3, #1
 8018712:	1b1b      	subs	r3, r3, r4
 8018714:	8003      	strh	r3, [r0, #0]
 8018716:	800a      	strh	r2, [r1, #0]
 8018718:	bd10      	pop	{r4, pc}
 801871a:	bf00      	nop
 801871c:	200126d8 	.word	0x200126d8
 8018720:	200126d4 	.word	0x200126d4

08018724 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018724:	b510      	push	{r4, lr}
 8018726:	4b0a      	ldr	r3, [pc, #40]	@ (8018750 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018728:	781b      	ldrb	r3, [r3, #0]
 801872a:	2b01      	cmp	r3, #1
 801872c:	d10e      	bne.n	801874c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801872e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018732:	8843      	ldrh	r3, [r0, #2]
 8018734:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018738:	8044      	strh	r4, [r0, #2]
 801873a:	18ca      	adds	r2, r1, r3
 801873c:	4b05      	ldr	r3, [pc, #20]	@ (8018754 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801873e:	881b      	ldrh	r3, [r3, #0]
 8018740:	1a9b      	subs	r3, r3, r2
 8018742:	8003      	strh	r3, [r0, #0]
 8018744:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018748:	80c3      	strh	r3, [r0, #6]
 801874a:	8081      	strh	r1, [r0, #4]
 801874c:	bd10      	pop	{r4, pc}
 801874e:	bf00      	nop
 8018750:	200126d8 	.word	0x200126d8
 8018754:	200126d4 	.word	0x200126d4

08018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018758:	4b08      	ldr	r3, [pc, #32]	@ (801877c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801875a:	781b      	ldrb	r3, [r3, #0]
 801875c:	2b01      	cmp	r3, #1
 801875e:	d10c      	bne.n	801877a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8018760:	8803      	ldrh	r3, [r0, #0]
 8018762:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8018766:	8842      	ldrh	r2, [r0, #2]
 8018768:	8002      	strh	r2, [r0, #0]
 801876a:	185a      	adds	r2, r3, r1
 801876c:	4b04      	ldr	r3, [pc, #16]	@ (8018780 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801876e:	881b      	ldrh	r3, [r3, #0]
 8018770:	1a9b      	subs	r3, r3, r2
 8018772:	8043      	strh	r3, [r0, #2]
 8018774:	88c3      	ldrh	r3, [r0, #6]
 8018776:	8083      	strh	r3, [r0, #4]
 8018778:	80c1      	strh	r1, [r0, #6]
 801877a:	4770      	bx	lr
 801877c:	200126d8 	.word	0x200126d8
 8018780:	200126d4 	.word	0x200126d4

08018784 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018784:	b510      	push	{r4, lr}
 8018786:	4b07      	ldr	r3, [pc, #28]	@ (80187a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018788:	781b      	ldrb	r3, [r3, #0]
 801878a:	2b01      	cmp	r3, #1
 801878c:	d108      	bne.n	80187a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801878e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018792:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018796:	8003      	strh	r3, [r0, #0]
 8018798:	8893      	ldrh	r3, [r2, #4]
 801879a:	3b01      	subs	r3, #1
 801879c:	1b1b      	subs	r3, r3, r4
 801879e:	800b      	strh	r3, [r1, #0]
 80187a0:	bd10      	pop	{r4, pc}
 80187a2:	bf00      	nop
 80187a4:	200126d8 	.word	0x200126d8

080187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80187a8:	b510      	push	{r4, lr}
 80187aa:	4b0a      	ldr	r3, [pc, #40]	@ (80187d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80187ac:	781b      	ldrb	r3, [r3, #0]
 80187ae:	2b01      	cmp	r3, #1
 80187b0:	460a      	mov	r2, r1
 80187b2:	d10d      	bne.n	80187d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80187b4:	8881      	ldrh	r1, [r0, #4]
 80187b6:	8803      	ldrh	r3, [r0, #0]
 80187b8:	440b      	add	r3, r1
 80187ba:	4601      	mov	r1, r0
 80187bc:	3b01      	subs	r3, #1
 80187be:	f821 3b02 	strh.w	r3, [r1], #2
 80187c2:	f7ff ffdf 	bl	8018784 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80187c6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80187ca:	88c2      	ldrh	r2, [r0, #6]
 80187cc:	8082      	strh	r2, [r0, #4]
 80187ce:	80c3      	strh	r3, [r0, #6]
 80187d0:	bd10      	pop	{r4, pc}
 80187d2:	bf00      	nop
 80187d4:	200126d8 	.word	0x200126d8

080187d8 <_ZN8touchgfx11Application13requestRedrawEv>:
 80187d8:	4b06      	ldr	r3, [pc, #24]	@ (80187f4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80187da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80187de:	4b06      	ldr	r3, [pc, #24]	@ (80187f8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80187e0:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 80187e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80187e8:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 80187ec:	2100      	movs	r1, #0
 80187ee:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 80187f2:	4770      	bx	lr
 80187f4:	200126d4 	.word	0x200126d4
 80187f8:	200126d6 	.word	0x200126d6

080187fc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80187fc:	4b03      	ldr	r3, [pc, #12]	@ (801880c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80187fe:	6818      	ldr	r0, [r3, #0]
 8018800:	b110      	cbz	r0, 8018808 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018802:	6803      	ldr	r3, [r0, #0]
 8018804:	699b      	ldr	r3, [r3, #24]
 8018806:	4718      	bx	r3
 8018808:	4770      	bx	lr
 801880a:	bf00      	nop
 801880c:	20012724 	.word	0x20012724

08018810 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018810:	4770      	bx	lr
	...

08018814 <_ZN8touchgfx11Application4drawEv>:
 8018814:	b507      	push	{r0, r1, r2, lr}
 8018816:	4b09      	ldr	r3, [pc, #36]	@ (801883c <_ZN8touchgfx11Application4drawEv+0x28>)
 8018818:	f9b3 2000 	ldrsh.w	r2, [r3]
 801881c:	4b08      	ldr	r3, [pc, #32]	@ (8018840 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801881e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018826:	f8ad 3006 	strh.w	r3, [sp, #6]
 801882a:	6803      	ldr	r3, [r0, #0]
 801882c:	2100      	movs	r1, #0
 801882e:	9100      	str	r1, [sp, #0]
 8018830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018832:	4669      	mov	r1, sp
 8018834:	4798      	blx	r3
 8018836:	b003      	add	sp, #12
 8018838:	f85d fb04 	ldr.w	pc, [sp], #4
 801883c:	200126d4 	.word	0x200126d4
 8018840:	200126d6 	.word	0x200126d6

08018844 <_ZN8touchgfx11Application10invalidateEv>:
 8018844:	4b09      	ldr	r3, [pc, #36]	@ (801886c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8018846:	f9b3 2000 	ldrsh.w	r2, [r3]
 801884a:	4b09      	ldr	r3, [pc, #36]	@ (8018870 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801884c:	b082      	sub	sp, #8
 801884e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018852:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018856:	2100      	movs	r1, #0
 8018858:	f8ad 3006 	strh.w	r3, [sp, #6]
 801885c:	9100      	str	r1, [sp, #0]
 801885e:	6803      	ldr	r3, [r0, #0]
 8018860:	aa02      	add	r2, sp, #8
 8018862:	e912 0006 	ldmdb	r2, {r1, r2}
 8018866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018868:	b002      	add	sp, #8
 801886a:	4718      	bx	r3
 801886c:	200126d4 	.word	0x200126d4
 8018870:	200126d6 	.word	0x200126d6

08018874 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018874:	4b03      	ldr	r3, [pc, #12]	@ (8018884 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018876:	6818      	ldr	r0, [r3, #0]
 8018878:	b110      	cbz	r0, 8018880 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801887a:	6803      	ldr	r3, [r0, #0]
 801887c:	69db      	ldr	r3, [r3, #28]
 801887e:	4718      	bx	r3
 8018880:	4770      	bx	lr
 8018882:	bf00      	nop
 8018884:	20012724 	.word	0x20012724

08018888 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018888:	4b03      	ldr	r3, [pc, #12]	@ (8018898 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801888a:	6818      	ldr	r0, [r3, #0]
 801888c:	b110      	cbz	r0, 8018894 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801888e:	6803      	ldr	r3, [r0, #0]
 8018890:	6a1b      	ldr	r3, [r3, #32]
 8018892:	4718      	bx	r3
 8018894:	4770      	bx	lr
 8018896:	bf00      	nop
 8018898:	20012724 	.word	0x20012724

0801889c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801889c:	2300      	movs	r3, #0
 801889e:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80188a2:	4770      	bx	lr

080188a4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80188a4:	4b03      	ldr	r3, [pc, #12]	@ (80188b4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80188a6:	6818      	ldr	r0, [r3, #0]
 80188a8:	b110      	cbz	r0, 80188b0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80188aa:	6803      	ldr	r3, [r0, #0]
 80188ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80188ae:	4718      	bx	r3
 80188b0:	4770      	bx	lr
 80188b2:	bf00      	nop
 80188b4:	20012724 	.word	0x20012724

080188b8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80188b8:	b510      	push	{r4, lr}
 80188ba:	f9b1 4000 	ldrsh.w	r4, [r1]
 80188be:	888a      	ldrh	r2, [r1, #4]
 80188c0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80188c4:	4422      	add	r2, r4
 80188c6:	b212      	sxth	r2, r2
 80188c8:	4293      	cmp	r3, r2
 80188ca:	da15      	bge.n	80188f8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80188cc:	8882      	ldrh	r2, [r0, #4]
 80188ce:	4413      	add	r3, r2
 80188d0:	b21b      	sxth	r3, r3
 80188d2:	429c      	cmp	r4, r3
 80188d4:	da10      	bge.n	80188f8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80188d6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80188da:	88c9      	ldrh	r1, [r1, #6]
 80188dc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80188e0:	4419      	add	r1, r3
 80188e2:	b209      	sxth	r1, r1
 80188e4:	428a      	cmp	r2, r1
 80188e6:	da07      	bge.n	80188f8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80188e8:	88c0      	ldrh	r0, [r0, #6]
 80188ea:	4410      	add	r0, r2
 80188ec:	b200      	sxth	r0, r0
 80188ee:	4283      	cmp	r3, r0
 80188f0:	bfac      	ite	ge
 80188f2:	2000      	movge	r0, #0
 80188f4:	2001      	movlt	r0, #1
 80188f6:	bd10      	pop	{r4, pc}
 80188f8:	2000      	movs	r0, #0
 80188fa:	e7fc      	b.n	80188f6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080188fc <_ZN8touchgfx4Rect10restrictToEss>:
 80188fc:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018900:	2b00      	cmp	r3, #0
 8018902:	b510      	push	{r4, lr}
 8018904:	da04      	bge.n	8018910 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8018906:	8884      	ldrh	r4, [r0, #4]
 8018908:	4423      	add	r3, r4
 801890a:	8083      	strh	r3, [r0, #4]
 801890c:	2300      	movs	r3, #0
 801890e:	8003      	strh	r3, [r0, #0]
 8018910:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018914:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018918:	1b09      	subs	r1, r1, r4
 801891a:	428b      	cmp	r3, r1
 801891c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018920:	bfc8      	it	gt
 8018922:	8081      	strhgt	r1, [r0, #4]
 8018924:	2b00      	cmp	r3, #0
 8018926:	da04      	bge.n	8018932 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8018928:	88c1      	ldrh	r1, [r0, #6]
 801892a:	440b      	add	r3, r1
 801892c:	80c3      	strh	r3, [r0, #6]
 801892e:	2300      	movs	r3, #0
 8018930:	8043      	strh	r3, [r0, #2]
 8018932:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8018936:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801893a:	1a52      	subs	r2, r2, r1
 801893c:	4293      	cmp	r3, r2
 801893e:	bfc8      	it	gt
 8018940:	80c2      	strhgt	r2, [r0, #6]
 8018942:	bd10      	pop	{r4, pc}

08018944 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8018944:	b510      	push	{r4, lr}
 8018946:	4b10      	ldr	r3, [pc, #64]	@ (8018988 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8018948:	f9b3 2000 	ldrsh.w	r2, [r3]
 801894c:	4b0f      	ldr	r3, [pc, #60]	@ (801898c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801894e:	460c      	mov	r4, r1
 8018950:	4620      	mov	r0, r4
 8018952:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018956:	f7ff ffd1 	bl	80188fc <_ZN8touchgfx4Rect10restrictToEss>
 801895a:	4b0d      	ldr	r3, [pc, #52]	@ (8018990 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801895c:	6818      	ldr	r0, [r3, #0]
 801895e:	b190      	cbz	r0, 8018986 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8018960:	6803      	ldr	r3, [r0, #0]
 8018962:	4621      	mov	r1, r4
 8018964:	689b      	ldr	r3, [r3, #8]
 8018966:	4798      	blx	r3
 8018968:	4b0a      	ldr	r3, [pc, #40]	@ (8018994 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801896a:	6818      	ldr	r0, [r3, #0]
 801896c:	b118      	cbz	r0, 8018976 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801896e:	6803      	ldr	r3, [r0, #0]
 8018970:	4621      	mov	r1, r4
 8018972:	689b      	ldr	r3, [r3, #8]
 8018974:	4798      	blx	r3
 8018976:	4b08      	ldr	r3, [pc, #32]	@ (8018998 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8018978:	6818      	ldr	r0, [r3, #0]
 801897a:	6803      	ldr	r3, [r0, #0]
 801897c:	4621      	mov	r1, r4
 801897e:	69db      	ldr	r3, [r3, #28]
 8018980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018984:	4718      	bx	r3
 8018986:	bd10      	pop	{r4, pc}
 8018988:	200126d6 	.word	0x200126d6
 801898c:	200126d4 	.word	0x200126d4
 8018990:	20012724 	.word	0x20012724
 8018994:	20012720 	.word	0x20012720
 8018998:	200126e0 	.word	0x200126e0

0801899c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801899e:	4606      	mov	r6, r0
 80189a0:	4608      	mov	r0, r1
 80189a2:	460f      	mov	r7, r1
 80189a4:	f7fa fab7 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 80189a8:	b9e8      	cbnz	r0, 80189e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80189aa:	f9b7 5000 	ldrsh.w	r5, [r7]
 80189ae:	f9b6 4000 	ldrsh.w	r4, [r6]
 80189b2:	42a5      	cmp	r5, r4
 80189b4:	db17      	blt.n	80189e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80189b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80189ba:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80189be:	429a      	cmp	r2, r3
 80189c0:	db11      	blt.n	80189e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80189c2:	88b9      	ldrh	r1, [r7, #4]
 80189c4:	440d      	add	r5, r1
 80189c6:	88b1      	ldrh	r1, [r6, #4]
 80189c8:	440c      	add	r4, r1
 80189ca:	b22d      	sxth	r5, r5
 80189cc:	b224      	sxth	r4, r4
 80189ce:	42a5      	cmp	r5, r4
 80189d0:	dc09      	bgt.n	80189e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80189d2:	88f8      	ldrh	r0, [r7, #6]
 80189d4:	4410      	add	r0, r2
 80189d6:	88f2      	ldrh	r2, [r6, #6]
 80189d8:	4413      	add	r3, r2
 80189da:	b200      	sxth	r0, r0
 80189dc:	b21b      	sxth	r3, r3
 80189de:	4298      	cmp	r0, r3
 80189e0:	bfcc      	ite	gt
 80189e2:	2000      	movgt	r0, #0
 80189e4:	2001      	movle	r0, #1
 80189e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080189e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80189e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189ea:	4604      	mov	r4, r0
 80189ec:	4608      	mov	r0, r1
 80189ee:	460d      	mov	r5, r1
 80189f0:	f7fa fa91 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 80189f4:	b978      	cbnz	r0, 8018a16 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80189f6:	4620      	mov	r0, r4
 80189f8:	f7fa fa8d 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 80189fc:	f9b5 6000 	ldrsh.w	r6, [r5]
 8018a00:	b150      	cbz	r0, 8018a18 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8018a02:	8026      	strh	r6, [r4, #0]
 8018a04:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018a08:	8063      	strh	r3, [r4, #2]
 8018a0a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8018a0e:	80a3      	strh	r3, [r4, #4]
 8018a10:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018a14:	80e3      	strh	r3, [r4, #6]
 8018a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a18:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018a1c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018a20:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8018a24:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8018a28:	88ed      	ldrh	r5, [r5, #6]
 8018a2a:	42b1      	cmp	r1, r6
 8018a2c:	460f      	mov	r7, r1
 8018a2e:	bfa8      	it	ge
 8018a30:	4637      	movge	r7, r6
 8018a32:	4293      	cmp	r3, r2
 8018a34:	4618      	mov	r0, r3
 8018a36:	4466      	add	r6, ip
 8018a38:	bfa8      	it	ge
 8018a3a:	4610      	movge	r0, r2
 8018a3c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018a40:	8027      	strh	r7, [r4, #0]
 8018a42:	442a      	add	r2, r5
 8018a44:	88e5      	ldrh	r5, [r4, #6]
 8018a46:	8060      	strh	r0, [r4, #2]
 8018a48:	4461      	add	r1, ip
 8018a4a:	442b      	add	r3, r5
 8018a4c:	b236      	sxth	r6, r6
 8018a4e:	b209      	sxth	r1, r1
 8018a50:	b212      	sxth	r2, r2
 8018a52:	b21b      	sxth	r3, r3
 8018a54:	428e      	cmp	r6, r1
 8018a56:	bfac      	ite	ge
 8018a58:	ebc7 0106 	rsbge	r1, r7, r6
 8018a5c:	ebc7 0101 	rsblt	r1, r7, r1
 8018a60:	429a      	cmp	r2, r3
 8018a62:	bfac      	ite	ge
 8018a64:	ebc0 0202 	rsbge	r2, r0, r2
 8018a68:	ebc0 0203 	rsblt	r2, r0, r3
 8018a6c:	80a1      	strh	r1, [r4, #4]
 8018a6e:	80e2      	strh	r2, [r4, #6]
 8018a70:	e7d1      	b.n	8018a16 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08018a74 <_ZN8touchgfx11Application11getInstanceEv>:
 8018a74:	4b01      	ldr	r3, [pc, #4]	@ (8018a7c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018a76:	6818      	ldr	r0, [r3, #0]
 8018a78:	4770      	bx	lr
 8018a7a:	bf00      	nop
 8018a7c:	20012734 	.word	0x20012734

08018a80 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8018a80:	b510      	push	{r4, lr}
 8018a82:	2300      	movs	r3, #0
 8018a84:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8018a88:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8018a8c:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8018a90:	4604      	mov	r4, r0
 8018a92:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8018a96:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8018a9a:	429a      	cmp	r2, r3
 8018a9c:	d90e      	bls.n	8018abc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8018a9e:	18e2      	adds	r2, r4, r3
 8018aa0:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8018aa4:	b122      	cbz	r2, 8018ab0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8018aa6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8018aaa:	6803      	ldr	r3, [r0, #0]
 8018aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018aae:	4798      	blx	r3
 8018ab0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8018ab4:	3301      	adds	r3, #1
 8018ab6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8018aba:	e7ea      	b.n	8018a92 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8018abc:	bd10      	pop	{r4, pc}

08018abe <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8018abe:	2300      	movs	r3, #0
 8018ac0:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8018ac4:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8018ac8:	30a4      	adds	r0, #164	@ 0xa4
 8018aca:	f802 3b01 	strb.w	r3, [r2], #1
 8018ace:	4282      	cmp	r2, r0
 8018ad0:	d1fb      	bne.n	8018aca <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8018ad2:	4770      	bx	lr

08018ad4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018ad4:	b570      	push	{r4, r5, r6, lr}
 8018ad6:	4c0b      	ldr	r4, [pc, #44]	@ (8018b04 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8018ad8:	4605      	mov	r5, r0
 8018ada:	6820      	ldr	r0, [r4, #0]
 8018adc:	460e      	mov	r6, r1
 8018ade:	b110      	cbz	r0, 8018ae6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8018ae0:	6803      	ldr	r3, [r0, #0]
 8018ae2:	695b      	ldr	r3, [r3, #20]
 8018ae4:	4798      	blx	r3
 8018ae6:	1d28      	adds	r0, r5, #4
 8018ae8:	f7ff ffe9 	bl	8018abe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018aec:	6026      	str	r6, [r4, #0]
 8018aee:	6833      	ldr	r3, [r6, #0]
 8018af0:	4630      	mov	r0, r6
 8018af2:	68db      	ldr	r3, [r3, #12]
 8018af4:	4798      	blx	r3
 8018af6:	682b      	ldr	r3, [r5, #0]
 8018af8:	4628      	mov	r0, r5
 8018afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b00:	4718      	bx	r3
 8018b02:	bf00      	nop
 8018b04:	20012724 	.word	0x20012724

08018b08 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8018b08:	2300      	movs	r3, #0
 8018b0a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8018b0e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8018b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b14:	461a      	mov	r2, r3
 8018b16:	461c      	mov	r4, r3
 8018b18:	461d      	mov	r5, r3
 8018b1a:	459c      	cmp	ip, r3
 8018b1c:	dd1a      	ble.n	8018b54 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8018b1e:	18c6      	adds	r6, r0, r3
 8018b20:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8018b24:	b16e      	cbz	r6, 8018b42 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8018b26:	429a      	cmp	r2, r3
 8018b28:	d008      	beq.n	8018b3c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8018b2a:	fa1f fe82 	uxth.w	lr, r2
 8018b2e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8018b32:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8018b36:	1887      	adds	r7, r0, r2
 8018b38:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8018b3c:	3201      	adds	r2, #1
 8018b3e:	3301      	adds	r3, #1
 8018b40:	e7eb      	b.n	8018b1a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8018b42:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8018b46:	4299      	cmp	r1, r3
 8018b48:	bfa8      	it	ge
 8018b4a:	3501      	addge	r5, #1
 8018b4c:	429e      	cmp	r6, r3
 8018b4e:	bfc8      	it	gt
 8018b50:	3401      	addgt	r4, #1
 8018b52:	e7f4      	b.n	8018b3e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8018b54:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8018b58:	1b49      	subs	r1, r1, r5
 8018b5a:	1b1b      	subs	r3, r3, r4
 8018b5c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8018b60:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8018b64:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8018b68:	4293      	cmp	r3, r2
 8018b6a:	dd03      	ble.n	8018b74 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8018b6c:	3b01      	subs	r3, #1
 8018b6e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8018b72:	e7f7      	b.n	8018b64 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8018b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018b78 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018b78:	b570      	push	{r4, r5, r6, lr}
 8018b7a:	4d16      	ldr	r5, [pc, #88]	@ (8018bd4 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8018b7c:	4604      	mov	r4, r0
 8018b7e:	6828      	ldr	r0, [r5, #0]
 8018b80:	b140      	cbz	r0, 8018b94 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018b82:	7a03      	ldrb	r3, [r0, #8]
 8018b84:	b933      	cbnz	r3, 8018b94 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018b86:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8018b8a:	6803      	ldr	r3, [r0, #0]
 8018b8c:	689b      	ldr	r3, [r3, #8]
 8018b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b92:	4718      	bx	r3
 8018b94:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8018b98:	4e0f      	ldr	r6, [pc, #60]	@ (8018bd8 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8018b9a:	b973      	cbnz	r3, 8018bba <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018b9c:	b168      	cbz	r0, 8018bba <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018b9e:	7a03      	ldrb	r3, [r0, #8]
 8018ba0:	b15b      	cbz	r3, 8018bba <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018ba2:	6830      	ldr	r0, [r6, #0]
 8018ba4:	b110      	cbz	r0, 8018bac <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8018ba6:	6803      	ldr	r3, [r0, #0]
 8018ba8:	691b      	ldr	r3, [r3, #16]
 8018baa:	4798      	blx	r3
 8018bac:	6828      	ldr	r0, [r5, #0]
 8018bae:	6803      	ldr	r3, [r0, #0]
 8018bb0:	68db      	ldr	r3, [r3, #12]
 8018bb2:	4798      	blx	r3
 8018bb4:	2301      	movs	r3, #1
 8018bb6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8018bba:	3404      	adds	r4, #4
 8018bbc:	4620      	mov	r0, r4
 8018bbe:	f7ff ff5f 	bl	8018a80 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8018bc2:	4620      	mov	r0, r4
 8018bc4:	f7ff ffa0 	bl	8018b08 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8018bc8:	6830      	ldr	r0, [r6, #0]
 8018bca:	b110      	cbz	r0, 8018bd2 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8018bcc:	6803      	ldr	r3, [r0, #0]
 8018bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018bd0:	e7dd      	b.n	8018b8e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8018bd2:	bd70      	pop	{r4, r5, r6, pc}
 8018bd4:	20012728 	.word	0x20012728
 8018bd8:	20012724 	.word	0x20012724

08018bdc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018bdc:	4603      	mov	r3, r0
 8018bde:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8018be2:	2200      	movs	r2, #0
 8018be4:	801a      	strh	r2, [r3, #0]
 8018be6:	805a      	strh	r2, [r3, #2]
 8018be8:	809a      	strh	r2, [r3, #4]
 8018bea:	80da      	strh	r2, [r3, #6]
 8018bec:	3308      	adds	r3, #8
 8018bee:	428b      	cmp	r3, r1
 8018bf0:	d1f8      	bne.n	8018be4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018bf2:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8018bf6:	4770      	bx	lr

08018bf8 <_ZN8touchgfx11ApplicationC1Ev>:
 8018bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bfa:	4606      	mov	r6, r0
 8018bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8018c70 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8018bfe:	f846 3b04 	str.w	r3, [r6], #4
 8018c02:	4604      	mov	r4, r0
 8018c04:	2500      	movs	r5, #0
 8018c06:	22a8      	movs	r2, #168	@ 0xa8
 8018c08:	2100      	movs	r1, #0
 8018c0a:	4630      	mov	r0, r6
 8018c0c:	f012 fde7 	bl	802b7de <memset>
 8018c10:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8018c14:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8018c18:	f7ff ffe0 	bl	8018bdc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018c1c:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8018c20:	f7ff ffdc 	bl	8018bdc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018c24:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8018c28:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8018c2c:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8018c30:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8018c34:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8018c38:	490e      	ldr	r1, [pc, #56]	@ (8018c74 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8018c3a:	480f      	ldr	r0, [pc, #60]	@ (8018c78 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8018c3c:	4f0f      	ldr	r7, [pc, #60]	@ (8018c7c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8018c3e:	f010 fdeb 	bl	8029818 <CRC_Lock>
 8018c42:	4b0f      	ldr	r3, [pc, #60]	@ (8018c80 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8018c44:	b158      	cbz	r0, 8018c5e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8018c46:	801d      	strh	r5, [r3, #0]
 8018c48:	4a0e      	ldr	r2, [pc, #56]	@ (8018c84 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	6013      	str	r3, [r2, #0]
 8018c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8018c88 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8018c50:	603b      	str	r3, [r7, #0]
 8018c52:	4630      	mov	r0, r6
 8018c54:	6013      	str	r3, [r2, #0]
 8018c56:	f7ff ff32 	bl	8018abe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018c5a:	4620      	mov	r0, r4
 8018c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018c62:	2002      	movs	r0, #2
 8018c64:	801a      	strh	r2, [r3, #0]
 8018c66:	6038      	str	r0, [r7, #0]
 8018c68:	f001 fd6e 	bl	801a748 <_ZN8touchgfx6Screen4drawEv>
 8018c6c:	e7ec      	b.n	8018c48 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8018c6e:	bf00      	nop
 8018c70:	0802e988 	.word	0x0802e988
 8018c74:	b5e8b5cd 	.word	0xb5e8b5cd
 8018c78:	f407a5c2 	.word	0xf407a5c2
 8018c7c:	20012724 	.word	0x20012724
 8018c80:	2000008c 	.word	0x2000008c
 8018c84:	20012734 	.word	0x20012734
 8018c88:	20012728 	.word	0x20012728

08018c8c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018c8c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8018c90:	3b01      	subs	r3, #1
 8018c92:	b29b      	uxth	r3, r3
 8018c94:	428b      	cmp	r3, r1
 8018c96:	b510      	push	{r4, lr}
 8018c98:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8018c9c:	d908      	bls.n	8018cb0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8018c9e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8018ca2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8018ca6:	681a      	ldr	r2, [r3, #0]
 8018ca8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018cac:	685a      	ldr	r2, [r3, #4]
 8018cae:	6062      	str	r2, [r4, #4]
 8018cb0:	bd10      	pop	{r4, pc}
	...

08018cb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cb8:	4b8f      	ldr	r3, [pc, #572]	@ (8018ef8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8018cba:	b08f      	sub	sp, #60	@ 0x3c
 8018cbc:	ac0a      	add	r4, sp, #40	@ 0x28
 8018cbe:	e884 0006 	stmia.w	r4, {r1, r2}
 8018cc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018cc6:	4b8d      	ldr	r3, [pc, #564]	@ (8018efc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8018cc8:	4683      	mov	fp, r0
 8018cca:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018cce:	4620      	mov	r0, r4
 8018cd0:	f7ff fe14 	bl	80188fc <_ZN8touchgfx4Rect10restrictToEss>
 8018cd4:	4620      	mov	r0, r4
 8018cd6:	f7fa f91e 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018cda:	2800      	cmp	r0, #0
 8018cdc:	d16a      	bne.n	8018db4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018cde:	9403      	str	r4, [sp, #12]
 8018ce0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8018ce4:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8018ce8:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8018cec:	35a4      	adds	r5, #164	@ 0xa4
 8018cee:	9301      	str	r3, [sp, #4]
 8018cf0:	b15c      	cbz	r4, 8018d0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8018cf2:	4629      	mov	r1, r5
 8018cf4:	9803      	ldr	r0, [sp, #12]
 8018cf6:	f7ff fe51 	bl	801899c <_ZNK8touchgfx4Rect8includesERKS0_>
 8018cfa:	3c01      	subs	r4, #1
 8018cfc:	b118      	cbz	r0, 8018d06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8018cfe:	b2a1      	uxth	r1, r4
 8018d00:	9801      	ldr	r0, [sp, #4]
 8018d02:	f7ff ffc3 	bl	8018c8c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018d06:	3d08      	subs	r5, #8
 8018d08:	e7f2      	b.n	8018cf0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8018d0a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8018d0e:	f8cd a010 	str.w	sl, [sp, #16]
 8018d12:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018d16:	9302      	str	r3, [sp, #8]
 8018d18:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8018d1c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8018d20:	9306      	str	r3, [sp, #24]
 8018d22:	445c      	add	r4, fp
 8018d24:	2500      	movs	r5, #0
 8018d26:	4626      	mov	r6, r4
 8018d28:	f8cd a014 	str.w	sl, [sp, #20]
 8018d2c:	462f      	mov	r7, r5
 8018d2e:	9b05      	ldr	r3, [sp, #20]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d073      	beq.n	8018e1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8018d34:	9903      	ldr	r1, [sp, #12]
 8018d36:	4630      	mov	r0, r6
 8018d38:	f7ff fdbe 	bl	80188b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018d3c:	b350      	cbz	r0, 8018d94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8018d3e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8018d42:	f9b6 c000 	ldrsh.w	ip, [r6]
 8018d46:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8018d4a:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8018d4e:	45e6      	cmp	lr, ip
 8018d50:	db33      	blt.n	8018dba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018d52:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8018d56:	88b3      	ldrh	r3, [r6, #4]
 8018d58:	4472      	add	r2, lr
 8018d5a:	4463      	add	r3, ip
 8018d5c:	b212      	sxth	r2, r2
 8018d5e:	b21b      	sxth	r3, r3
 8018d60:	429a      	cmp	r2, r3
 8018d62:	dc2a      	bgt.n	8018dba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018d64:	88f3      	ldrh	r3, [r6, #6]
 8018d66:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8018d6a:	fa1f f289 	uxth.w	r2, r9
 8018d6e:	4413      	add	r3, r2
 8018d70:	b29b      	uxth	r3, r3
 8018d72:	45c8      	cmp	r8, r9
 8018d74:	fa1f fc88 	uxth.w	ip, r8
 8018d78:	fa0f fe83 	sxth.w	lr, r3
 8018d7c:	db0f      	blt.n	8018d9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8018d7e:	eba3 030c 	sub.w	r3, r3, ip
 8018d82:	1ac9      	subs	r1, r1, r3
 8018d84:	b209      	sxth	r1, r1
 8018d86:	2900      	cmp	r1, #0
 8018d88:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8018d8c:	dd12      	ble.n	8018db4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018d8e:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8018d92:	4605      	mov	r5, r0
 8018d94:	9b05      	ldr	r3, [sp, #20]
 8018d96:	3b01      	subs	r3, #1
 8018d98:	9305      	str	r3, [sp, #20]
 8018d9a:	3e08      	subs	r6, #8
 8018d9c:	e7c7      	b.n	8018d2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8018d9e:	4461      	add	r1, ip
 8018da0:	b209      	sxth	r1, r1
 8018da2:	4571      	cmp	r1, lr
 8018da4:	dc38      	bgt.n	8018e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018da6:	eba2 020c 	sub.w	r2, r2, ip
 8018daa:	b212      	sxth	r2, r2
 8018dac:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8018db0:	2a00      	cmp	r2, #0
 8018db2:	dcee      	bgt.n	8018d92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8018db4:	b00f      	add	sp, #60	@ 0x3c
 8018db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dba:	45c8      	cmp	r8, r9
 8018dbc:	db2c      	blt.n	8018e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018dbe:	88f3      	ldrh	r3, [r6, #6]
 8018dc0:	4499      	add	r9, r3
 8018dc2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8018dc6:	4498      	add	r8, r3
 8018dc8:	fa0f f989 	sxth.w	r9, r9
 8018dcc:	fa0f f888 	sxth.w	r8, r8
 8018dd0:	45c1      	cmp	r9, r8
 8018dd2:	db21      	blt.n	8018e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018dd4:	88b3      	ldrh	r3, [r6, #4]
 8018dd6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8018dda:	fa1f f28c 	uxth.w	r2, ip
 8018dde:	4413      	add	r3, r2
 8018de0:	b29b      	uxth	r3, r3
 8018de2:	45e6      	cmp	lr, ip
 8018de4:	fa1f f88e 	uxth.w	r8, lr
 8018de8:	fa0f f983 	sxth.w	r9, r3
 8018dec:	db0a      	blt.n	8018e04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8018dee:	eba3 0308 	sub.w	r3, r3, r8
 8018df2:	1ac9      	subs	r1, r1, r3
 8018df4:	b209      	sxth	r1, r1
 8018df6:	2900      	cmp	r1, #0
 8018df8:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8018dfc:	ddda      	ble.n	8018db4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018dfe:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8018e02:	e7c6      	b.n	8018d92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8018e04:	4441      	add	r1, r8
 8018e06:	b209      	sxth	r1, r1
 8018e08:	4549      	cmp	r1, r9
 8018e0a:	dc05      	bgt.n	8018e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018e0c:	eba2 0208 	sub.w	r2, r2, r8
 8018e10:	b212      	sxth	r2, r2
 8018e12:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8018e16:	e7cb      	b.n	8018db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8018e18:	4607      	mov	r7, r0
 8018e1a:	e7bb      	b.n	8018d94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8018e1c:	2d00      	cmp	r5, #0
 8018e1e:	d181      	bne.n	8018d24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8018e20:	2f00      	cmp	r7, #0
 8018e22:	f000 81dd 	beq.w	80191e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8018e26:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8018e2a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8018e2e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8018e32:	b2b3      	uxth	r3, r6
 8018e34:	9305      	str	r3, [sp, #20]
 8018e36:	9a05      	ldr	r2, [sp, #20]
 8018e38:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8018e3c:	4413      	add	r3, r2
 8018e3e:	b2ba      	uxth	r2, r7
 8018e40:	4492      	add	sl, r2
 8018e42:	b29b      	uxth	r3, r3
 8018e44:	fa1f fa8a 	uxth.w	sl, sl
 8018e48:	fa0f f883 	sxth.w	r8, r3
 8018e4c:	fa0f f98a 	sxth.w	r9, sl
 8018e50:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8018e54:	9b04      	ldr	r3, [sp, #16]
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d052      	beq.n	8018f00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8018e5a:	9903      	ldr	r1, [sp, #12]
 8018e5c:	4620      	mov	r0, r4
 8018e5e:	f7ff fd2b 	bl	80188b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018e62:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018e66:	b1c0      	cbz	r0, 8018e9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018e68:	f9b4 e000 	ldrsh.w	lr, [r4]
 8018e6c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018e70:	4576      	cmp	r6, lr
 8018e72:	dc22      	bgt.n	8018eba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018e74:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018e78:	44f4      	add	ip, lr
 8018e7a:	fa0f fc8c 	sxth.w	ip, ip
 8018e7e:	45e0      	cmp	r8, ip
 8018e80:	db1b      	blt.n	8018eba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018e82:	428f      	cmp	r7, r1
 8018e84:	fa1f fc81 	uxth.w	ip, r1
 8018e88:	88e1      	ldrh	r1, [r4, #6]
 8018e8a:	dc0d      	bgt.n	8018ea8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8018e8c:	ebaa 0c0c 	sub.w	ip, sl, ip
 8018e90:	eba1 010c 	sub.w	r1, r1, ip
 8018e94:	f8a4 9002 	strh.w	r9, [r4, #2]
 8018e98:	80e1      	strh	r1, [r4, #6]
 8018e9a:	4628      	mov	r0, r5
 8018e9c:	9904      	ldr	r1, [sp, #16]
 8018e9e:	3901      	subs	r1, #1
 8018ea0:	9104      	str	r1, [sp, #16]
 8018ea2:	3c08      	subs	r4, #8
 8018ea4:	4605      	mov	r5, r0
 8018ea6:	e7d3      	b.n	8018e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8018ea8:	4461      	add	r1, ip
 8018eaa:	b209      	sxth	r1, r1
 8018eac:	4549      	cmp	r1, r9
 8018eae:	dcf5      	bgt.n	8018e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8018eb0:	eba2 0c0c 	sub.w	ip, r2, ip
 8018eb4:	f8a4 c006 	strh.w	ip, [r4, #6]
 8018eb8:	e7ef      	b.n	8018e9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018eba:	428f      	cmp	r7, r1
 8018ebc:	dcee      	bgt.n	8018e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8018ebe:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8018ec2:	4461      	add	r1, ip
 8018ec4:	b209      	sxth	r1, r1
 8018ec6:	4589      	cmp	r9, r1
 8018ec8:	dbe8      	blt.n	8018e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8018eca:	4576      	cmp	r6, lr
 8018ecc:	fa1f fc8e 	uxth.w	ip, lr
 8018ed0:	88a1      	ldrh	r1, [r4, #4]
 8018ed2:	dc07      	bgt.n	8018ee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8018ed4:	eba3 0c0c 	sub.w	ip, r3, ip
 8018ed8:	eba1 010c 	sub.w	r1, r1, ip
 8018edc:	f8a4 8000 	strh.w	r8, [r4]
 8018ee0:	80a1      	strh	r1, [r4, #4]
 8018ee2:	e7da      	b.n	8018e9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018ee4:	4461      	add	r1, ip
 8018ee6:	b209      	sxth	r1, r1
 8018ee8:	4588      	cmp	r8, r1
 8018eea:	dbd7      	blt.n	8018e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8018eec:	9905      	ldr	r1, [sp, #20]
 8018eee:	eba1 0c0c 	sub.w	ip, r1, ip
 8018ef2:	f8a4 c004 	strh.w	ip, [r4, #4]
 8018ef6:	e7d0      	b.n	8018e9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018ef8:	200126d6 	.word	0x200126d6
 8018efc:	200126d4 	.word	0x200126d4
 8018f00:	2d00      	cmp	r5, #0
 8018f02:	f000 816d 	beq.w	80191e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8018f06:	9b06      	ldr	r3, [sp, #24]
 8018f08:	445b      	add	r3, fp
 8018f0a:	461c      	mov	r4, r3
 8018f0c:	9b02      	ldr	r3, [sp, #8]
 8018f0e:	3301      	adds	r3, #1
 8018f10:	f000 8166 	beq.w	80191e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8018f14:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8018f18:	4629      	mov	r1, r5
 8018f1a:	9803      	ldr	r0, [sp, #12]
 8018f1c:	f7ff fd3e 	bl	801899c <_ZNK8touchgfx4Rect8includesERKS0_>
 8018f20:	b120      	cbz	r0, 8018f2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8018f22:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8018f26:	9801      	ldr	r0, [sp, #4]
 8018f28:	f7ff feb0 	bl	8018c8c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018f2c:	9903      	ldr	r1, [sp, #12]
 8018f2e:	4628      	mov	r0, r5
 8018f30:	f7ff fcc2 	bl	80188b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018f34:	2800      	cmp	r0, #0
 8018f36:	f000 809c 	beq.w	8019072 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8018f3a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8018f3e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8018f42:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8018f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8018f48:	fa1f f189 	uxth.w	r1, r9
 8018f4c:	eb01 0c03 	add.w	ip, r1, r3
 8018f50:	fa1f fa8c 	uxth.w	sl, ip
 8018f54:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8018f58:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8018f5c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8018f60:	b283      	uxth	r3, r0
 8018f62:	eb03 050c 	add.w	r5, r3, ip
 8018f66:	b2ad      	uxth	r5, r5
 8018f68:	9505      	str	r5, [sp, #20]
 8018f6a:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8018f6e:	9504      	str	r5, [sp, #16]
 8018f70:	4548      	cmp	r0, r9
 8018f72:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8018f76:	f340 8099 	ble.w	80190ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8018f7a:	1a5b      	subs	r3, r3, r1
 8018f7c:	b29b      	uxth	r3, r3
 8018f7e:	4596      	cmp	lr, r2
 8018f80:	fa0f f08a 	sxth.w	r0, sl
 8018f84:	b21e      	sxth	r6, r3
 8018f86:	dd2e      	ble.n	8018fe6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8018f88:	9f02      	ldr	r7, [sp, #8]
 8018f8a:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8018f8e:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8018f92:	9f04      	ldr	r7, [sp, #16]
 8018f94:	1a3f      	subs	r7, r7, r0
 8018f96:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8018f9a:	fa1f fe8e 	uxth.w	lr, lr
 8018f9e:	b292      	uxth	r2, r2
 8018fa0:	ebae 0102 	sub.w	r1, lr, r2
 8018fa4:	44a6      	add	lr, r4
 8018fa6:	4402      	add	r2, r0
 8018fa8:	b289      	uxth	r1, r1
 8018faa:	fa0f fe8e 	sxth.w	lr, lr
 8018fae:	b212      	sxth	r2, r2
 8018fb0:	b20d      	sxth	r5, r1
 8018fb2:	ebae 0202 	sub.w	r2, lr, r2
 8018fb6:	436f      	muls	r7, r5
 8018fb8:	4372      	muls	r2, r6
 8018fba:	4297      	cmp	r7, r2
 8018fbc:	db09      	blt.n	8018fd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8018fbe:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8018fc2:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8018fc6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8018fca:	449c      	add	ip, r3
 8018fcc:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8018fd0:	e686      	b.n	8018ce0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018fd2:	4421      	add	r1, r4
 8018fd4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8018fd8:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8018fdc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8018fe0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8018fe4:	e67c      	b.n	8018ce0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018fe6:	9f04      	ldr	r7, [sp, #16]
 8018fe8:	42b8      	cmp	r0, r7
 8018fea:	da27      	bge.n	801903c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8018fec:	9902      	ldr	r1, [sp, #8]
 8018fee:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8018ff2:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8018ff6:	eb05 010e 	add.w	r1, r5, lr
 8018ffa:	fa1f f881 	uxth.w	r8, r1
 8018ffe:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8019002:	4411      	add	r1, r2
 8019004:	eba1 0108 	sub.w	r1, r1, r8
 8019008:	b289      	uxth	r1, r1
 801900a:	fa0f f988 	sxth.w	r9, r8
 801900e:	eba2 020e 	sub.w	r2, r2, lr
 8019012:	fa0f f881 	sxth.w	r8, r1
 8019016:	1a3f      	subs	r7, r7, r0
 8019018:	4372      	muls	r2, r6
 801901a:	fb08 f707 	mul.w	r7, r8, r7
 801901e:	42ba      	cmp	r2, r7
 8019020:	dc06      	bgt.n	8019030 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8019022:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8019026:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801902a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801902e:	e7ca      	b.n	8018fc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8019030:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8019034:	4429      	add	r1, r5
 8019036:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801903a:	e651      	b.n	8018ce0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801903c:	9805      	ldr	r0, [sp, #20]
 801903e:	ebaa 0000 	sub.w	r0, sl, r0
 8019042:	b280      	uxth	r0, r0
 8019044:	2d06      	cmp	r5, #6
 8019046:	fa0f fe80 	sxth.w	lr, r0
 801904a:	d817      	bhi.n	801907c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801904c:	9b04      	ldr	r3, [sp, #16]
 801904e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8019052:	1c6b      	adds	r3, r5, #1
 8019054:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8019058:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801905c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8019060:	9b01      	ldr	r3, [sp, #4]
 8019062:	9801      	ldr	r0, [sp, #4]
 8019064:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019068:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801906c:	805a      	strh	r2, [r3, #2]
 801906e:	809e      	strh	r6, [r3, #4]
 8019070:	80d9      	strh	r1, [r3, #6]
 8019072:	9b02      	ldr	r3, [sp, #8]
 8019074:	3b01      	subs	r3, #1
 8019076:	9302      	str	r3, [sp, #8]
 8019078:	3c08      	subs	r4, #8
 801907a:	e747      	b.n	8018f0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801907c:	9a02      	ldr	r2, [sp, #8]
 801907e:	45b6      	cmp	lr, r6
 8019080:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019084:	db0d      	blt.n	80190a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8019086:	449c      	add	ip, r3
 8019088:	fa1f fc8c 	uxth.w	ip, ip
 801908c:	445a      	add	r2, fp
 801908e:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8019092:	448c      	add	ip, r1
 8019094:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8019098:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801909c:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 80190a0:	e61e      	b.n	8018ce0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80190a2:	445a      	add	r2, fp
 80190a4:	4484      	add	ip, r0
 80190a6:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 80190aa:	e78f      	b.n	8018fcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80190ac:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 80190b0:	fa1f f18e 	uxth.w	r1, lr
 80190b4:	eb01 0806 	add.w	r8, r1, r6
 80190b8:	b293      	uxth	r3, r2
 80190ba:	fa1f f888 	uxth.w	r8, r8
 80190be:	9306      	str	r3, [sp, #24]
 80190c0:	fa0f f388 	sxth.w	r3, r8
 80190c4:	9307      	str	r3, [sp, #28]
 80190c6:	9f06      	ldr	r7, [sp, #24]
 80190c8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80190cc:	443b      	add	r3, r7
 80190ce:	b29b      	uxth	r3, r3
 80190d0:	4596      	cmp	lr, r2
 80190d2:	9308      	str	r3, [sp, #32]
 80190d4:	da24      	bge.n	8019120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 80190d6:	9905      	ldr	r1, [sp, #20]
 80190d8:	eba3 0308 	sub.w	r3, r3, r8
 80190dc:	ebaa 0401 	sub.w	r4, sl, r1
 80190e0:	b2a4      	uxth	r4, r4
 80190e2:	b29b      	uxth	r3, r3
 80190e4:	b225      	sxth	r5, r4
 80190e6:	b219      	sxth	r1, r3
 80190e8:	eba2 020e 	sub.w	r2, r2, lr
 80190ec:	eba9 0000 	sub.w	r0, r9, r0
 80190f0:	436a      	muls	r2, r5
 80190f2:	4348      	muls	r0, r1
 80190f4:	4282      	cmp	r2, r0
 80190f6:	9a02      	ldr	r2, [sp, #8]
 80190f8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80190fc:	445a      	add	r2, fp
 80190fe:	dc06      	bgt.n	801910e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8019100:	9b07      	ldr	r3, [sp, #28]
 8019102:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8019106:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801910a:	44a4      	add	ip, r4
 801910c:	e75e      	b.n	8018fcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801910e:	9904      	ldr	r1, [sp, #16]
 8019110:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8019114:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8019118:	4433      	add	r3, r6
 801911a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801911e:	e5df      	b.n	8018ce0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019120:	9f06      	ldr	r7, [sp, #24]
 8019122:	9b04      	ldr	r3, [sp, #16]
 8019124:	1bc9      	subs	r1, r1, r7
 8019126:	fa0f f78a 	sxth.w	r7, sl
 801912a:	b289      	uxth	r1, r1
 801912c:	429f      	cmp	r7, r3
 801912e:	fa0f fe81 	sxth.w	lr, r1
 8019132:	dd23      	ble.n	801917c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8019134:	9a05      	ldr	r2, [sp, #20]
 8019136:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801913a:	9d07      	ldr	r5, [sp, #28]
 801913c:	ebaa 0202 	sub.w	r2, sl, r2
 8019140:	b292      	uxth	r2, r2
 8019142:	eba5 0a03 	sub.w	sl, r5, r3
 8019146:	b214      	sxth	r4, r2
 8019148:	eba9 0000 	sub.w	r0, r9, r0
 801914c:	9b02      	ldr	r3, [sp, #8]
 801914e:	fb0e f000 	mul.w	r0, lr, r0
 8019152:	fb04 fa0a 	mul.w	sl, r4, sl
 8019156:	00db      	lsls	r3, r3, #3
 8019158:	4550      	cmp	r0, sl
 801915a:	445b      	add	r3, fp
 801915c:	db03      	blt.n	8019166 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801915e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8019162:	4494      	add	ip, r2
 8019164:	e732      	b.n	8018fcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8019166:	9a04      	ldr	r2, [sp, #16]
 8019168:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801916c:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8019170:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8019174:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8019178:	4431      	add	r1, r6
 801917a:	e75c      	b.n	8019036 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801917c:	9b08      	ldr	r3, [sp, #32]
 801917e:	eba3 0308 	sub.w	r3, r3, r8
 8019182:	b29b      	uxth	r3, r3
 8019184:	2d06      	cmp	r5, #6
 8019186:	b218      	sxth	r0, r3
 8019188:	d813      	bhi.n	80191b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801918a:	9b07      	ldr	r3, [sp, #28]
 801918c:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8019190:	1c6b      	adds	r3, r5, #1
 8019192:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8019196:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801919a:	9b01      	ldr	r3, [sp, #4]
 801919c:	9901      	ldr	r1, [sp, #4]
 801919e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80191a2:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 80191a6:	805a      	strh	r2, [r3, #2]
 80191a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80191aa:	809a      	strh	r2, [r3, #4]
 80191ac:	f8a3 e006 	strh.w	lr, [r3, #6]
 80191b0:	e75f      	b.n	8019072 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80191b2:	9c02      	ldr	r4, [sp, #8]
 80191b4:	4570      	cmp	r0, lr
 80191b6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80191ba:	db0d      	blt.n	80191d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 80191bc:	4431      	add	r1, r6
 80191be:	9b06      	ldr	r3, [sp, #24]
 80191c0:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80191c4:	b289      	uxth	r1, r1
 80191c6:	445c      	add	r4, fp
 80191c8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80191cc:	4419      	add	r1, r3
 80191ce:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 80191d2:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 80191d6:	e583      	b.n	8018ce0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80191d8:	445c      	add	r4, fp
 80191da:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 80191de:	e79b      	b.n	8019118 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 80191e0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80191e4:	1e65      	subs	r5, r4, #1
 80191e6:	b2ad      	uxth	r5, r5
 80191e8:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80191ec:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 80191f0:	42b5      	cmp	r5, r6
 80191f2:	d044      	beq.n	801927e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 80191f4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80191f8:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 80191fc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8019200:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8019204:	4282      	cmp	r2, r0
 8019206:	d11f      	bne.n	8019248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8019208:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801920c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8019210:	459c      	cmp	ip, r3
 8019212:	d119      	bne.n	8019248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8019214:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8019218:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801921c:	19d8      	adds	r0, r3, r7
 801921e:	b200      	sxth	r0, r0
 8019220:	4288      	cmp	r0, r1
 8019222:	d109      	bne.n	8019238 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8019224:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8019228:	4413      	add	r3, r2
 801922a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801922e:	4629      	mov	r1, r5
 8019230:	9801      	ldr	r0, [sp, #4]
 8019232:	f7ff fd2b 	bl	8018c8c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019236:	e003      	b.n	8019240 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019238:	4411      	add	r1, r2
 801923a:	b209      	sxth	r1, r1
 801923c:	42b9      	cmp	r1, r7
 801923e:	d0f3      	beq.n	8019228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8019240:	3d01      	subs	r5, #1
 8019242:	b2ad      	uxth	r5, r5
 8019244:	3c08      	subs	r4, #8
 8019246:	e7d3      	b.n	80191f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8019248:	42b9      	cmp	r1, r7
 801924a:	d1f9      	bne.n	8019240 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801924c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8019250:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8019254:	4299      	cmp	r1, r3
 8019256:	d1f3      	bne.n	8019240 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019258:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801925c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8019260:	181f      	adds	r7, r3, r0
 8019262:	b23f      	sxth	r7, r7
 8019264:	42ba      	cmp	r2, r7
 8019266:	d105      	bne.n	8019274 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8019268:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801926c:	440b      	add	r3, r1
 801926e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8019272:	e7dc      	b.n	801922e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8019274:	440a      	add	r2, r1
 8019276:	b212      	sxth	r2, r2
 8019278:	4290      	cmp	r0, r2
 801927a:	d1e1      	bne.n	8019240 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801927c:	e7f6      	b.n	801926c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801927e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8019282:	2e07      	cmp	r6, #7
 8019284:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8019288:	d812      	bhi.n	80192b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801928a:	1c75      	adds	r5, r6, #1
 801928c:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8019290:	9d01      	ldr	r5, [sp, #4]
 8019292:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8019296:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801929a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801929e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80192a2:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80192a6:	442c      	add	r4, r5
 80192a8:	8061      	strh	r1, [r4, #2]
 80192aa:	80a2      	strh	r2, [r4, #4]
 80192ac:	80e3      	strh	r3, [r4, #6]
 80192ae:	e581      	b.n	8018db4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80192b0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80192b4:	3e01      	subs	r6, #1
 80192b6:	445c      	add	r4, fp
 80192b8:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 80192bc:	f04f 37ff 	mov.w	r7, #4294967295
 80192c0:	2500      	movs	r5, #0
 80192c2:	9305      	str	r3, [sp, #20]
 80192c4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80192c8:	9302      	str	r3, [sp, #8]
 80192ca:	1e72      	subs	r2, r6, #1
 80192cc:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80192d0:	9304      	str	r3, [sp, #16]
 80192d2:	4691      	mov	r9, r2
 80192d4:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 80192d8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80192dc:	bf14      	ite	ne
 80192de:	9905      	ldrne	r1, [sp, #20]
 80192e0:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80192e4:	6818      	ldr	r0, [r3, #0]
 80192e6:	9207      	str	r2, [sp, #28]
 80192e8:	bf18      	it	ne
 80192ea:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80192ee:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80192f2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80192f6:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80192fa:	9306      	str	r3, [sp, #24]
 80192fc:	fb18 f801 	smulbb	r8, r8, r1
 8019300:	6859      	ldr	r1, [r3, #4]
 8019302:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019306:	4671      	mov	r1, lr
 8019308:	a80c      	add	r0, sp, #48	@ 0x30
 801930a:	f7ff fb6d 	bl	80189e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801930e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8019312:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8019316:	9b04      	ldr	r3, [sp, #16]
 8019318:	9a02      	ldr	r2, [sp, #8]
 801931a:	fb10 f001 	smulbb	r0, r0, r1
 801931e:	fb02 8803 	mla	r8, r2, r3, r8
 8019322:	eba0 0108 	sub.w	r1, r0, r8
 8019326:	f04f 0c08 	mov.w	ip, #8
 801932a:	fb90 f0fc 	sdiv	r0, r0, ip
 801932e:	4288      	cmp	r0, r1
 8019330:	dc20      	bgt.n	8019374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 8019332:	4551      	cmp	r1, sl
 8019334:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8019338:	da03      	bge.n	8019342 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 801933a:	b1d9      	cbz	r1, 8019374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 801933c:	468a      	mov	sl, r1
 801933e:	464f      	mov	r7, r9
 8019340:	4635      	mov	r5, r6
 8019342:	f109 39ff 	add.w	r9, r9, #4294967295
 8019346:	f119 0f02 	cmn.w	r9, #2
 801934a:	d1c5      	bne.n	80192d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801934c:	4616      	mov	r6, r2
 801934e:	3201      	adds	r2, #1
 8019350:	f1a4 0408 	sub.w	r4, r4, #8
 8019354:	d1b6      	bne.n	80192c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8019356:	9b01      	ldr	r3, [sp, #4]
 8019358:	b2ac      	uxth	r4, r5
 801935a:	00ed      	lsls	r5, r5, #3
 801935c:	1958      	adds	r0, r3, r5
 801935e:	1c7b      	adds	r3, r7, #1
 8019360:	d10b      	bne.n	801937a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 8019362:	4601      	mov	r1, r0
 8019364:	9803      	ldr	r0, [sp, #12]
 8019366:	f7ff fb3f 	bl	80189e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801936a:	4621      	mov	r1, r4
 801936c:	9801      	ldr	r0, [sp, #4]
 801936e:	f7ff fc8d 	bl	8018c8c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019372:	e4b5      	b.n	8018ce0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019374:	464f      	mov	r7, r9
 8019376:	4635      	mov	r5, r6
 8019378:	e7ed      	b.n	8019356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 801937a:	9b01      	ldr	r3, [sp, #4]
 801937c:	00ff      	lsls	r7, r7, #3
 801937e:	19d9      	adds	r1, r3, r7
 8019380:	f7ff fb32 	bl	80189e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019384:	9b03      	ldr	r3, [sp, #12]
 8019386:	cb03      	ldmia	r3!, {r0, r1}
 8019388:	445f      	add	r7, fp
 801938a:	445d      	add	r5, fp
 801938c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8019390:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8019394:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8019398:	9b03      	ldr	r3, [sp, #12]
 801939a:	6869      	ldr	r1, [r5, #4]
 801939c:	c303      	stmia	r3!, {r0, r1}
 801939e:	e7e4      	b.n	801936a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

080193a0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80193a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193a4:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 80193a8:	b09b      	sub	sp, #108	@ 0x6c
 80193aa:	4604      	mov	r4, r0
 80193ac:	4630      	mov	r0, r6
 80193ae:	f7f9 fdb2 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 80193b2:	4605      	mov	r5, r0
 80193b4:	b948      	cbnz	r0, 80193ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 80193b6:	6823      	ldr	r3, [r4, #0]
 80193b8:	e896 0006 	ldmia.w	r6, {r1, r2}
 80193bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80193be:	4620      	mov	r0, r4
 80193c0:	4798      	blx	r3
 80193c2:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80193c6:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80193ca:	4bc6      	ldr	r3, [pc, #792]	@ (80196e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d03f      	beq.n	8019452 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80193d2:	4dc5      	ldr	r5, [pc, #788]	@ (80196e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 80193d4:	4628      	mov	r0, r5
 80193d6:	f7f9 fd9e 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 80193da:	4606      	mov	r6, r0
 80193dc:	2800      	cmp	r0, #0
 80193de:	d138      	bne.n	8019452 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80193e0:	4628      	mov	r0, r5
 80193e2:	f7ff f99f 	bl	8018724 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80193e6:	6823      	ldr	r3, [r4, #0]
 80193e8:	6829      	ldr	r1, [r5, #0]
 80193ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80193ec:	686a      	ldr	r2, [r5, #4]
 80193ee:	4620      	mov	r0, r4
 80193f0:	4798      	blx	r3
 80193f2:	802e      	strh	r6, [r5, #0]
 80193f4:	806e      	strh	r6, [r5, #2]
 80193f6:	80ae      	strh	r6, [r5, #4]
 80193f8:	80ee      	strh	r6, [r5, #6]
 80193fa:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 80193fe:	4dbb      	ldr	r5, [pc, #748]	@ (80196ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8019400:	4640      	mov	r0, r8
 8019402:	f7ff fbeb 	bl	8018bdc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019406:	882e      	ldrh	r6, [r5, #0]
 8019408:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801940c:	4633      	mov	r3, r6
 801940e:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8019412:	42bb      	cmp	r3, r7
 8019414:	d224      	bcs.n	8019460 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8019416:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801941a:	2907      	cmp	r1, #7
 801941c:	d816      	bhi.n	801944c <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801941e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8019422:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8019426:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801942a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801942e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8019432:	1c4a      	adds	r2, r1, #1
 8019434:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8019438:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801943c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8019440:	f8a2 a002 	strh.w	sl, [r2, #2]
 8019444:	f8a2 e004 	strh.w	lr, [r2, #4]
 8019448:	f8a2 c006 	strh.w	ip, [r2, #6]
 801944c:	3301      	adds	r3, #1
 801944e:	b29b      	uxth	r3, r3
 8019450:	e7df      	b.n	8019412 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8019452:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8019456:	2b00      	cmp	r3, #0
 8019458:	d1cf      	bne.n	80193fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801945a:	b01b      	add	sp, #108	@ 0x6c
 801945c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019460:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8019464:	42b3      	cmp	r3, r6
 8019466:	d90c      	bls.n	8019482 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8019468:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801946c:	6822      	ldr	r2, [r4, #0]
 801946e:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8019472:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8019474:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8019478:	4620      	mov	r0, r4
 801947a:	3601      	adds	r6, #1
 801947c:	47b8      	blx	r7
 801947e:	b2b6      	uxth	r6, r6
 8019480:	e7ee      	b.n	8019460 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8019482:	4a9b      	ldr	r2, [pc, #620]	@ (80196f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8019484:	6813      	ldr	r3, [r2, #0]
 8019486:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801948a:	2b01      	cmp	r3, #1
 801948c:	4691      	mov	r9, r2
 801948e:	f040 80e2 	bne.w	8019656 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8019492:	8829      	ldrh	r1, [r5, #0]
 8019494:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8019498:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801949c:	33ae      	adds	r3, #174	@ 0xae
 801949e:	2600      	movs	r6, #0
 80194a0:	428f      	cmp	r7, r1
 80194a2:	f103 0308 	add.w	r3, r3, #8
 80194a6:	dd0a      	ble.n	80194be <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 80194a8:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80194ac:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 80194b0:	4402      	add	r2, r0
 80194b2:	b212      	sxth	r2, r2
 80194b4:	4296      	cmp	r6, r2
 80194b6:	bfb8      	it	lt
 80194b8:	4616      	movlt	r6, r2
 80194ba:	3101      	adds	r1, #1
 80194bc:	e7f0      	b.n	80194a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 80194be:	4b8d      	ldr	r3, [pc, #564]	@ (80196f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80194c0:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 80196f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 80194c4:	881b      	ldrh	r3, [r3, #0]
 80194c6:	2b0f      	cmp	r3, #15
 80194c8:	bf88      	it	hi
 80194ca:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 80194ce:	f04f 0300 	mov.w	r3, #0
 80194d2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80194d6:	bf98      	it	ls
 80194d8:	f04f 0b01 	movls.w	fp, #1
 80194dc:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 80194e0:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 80194e4:	4b82      	ldr	r3, [pc, #520]	@ (80196f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80194e6:	4438      	add	r0, r7
 80194e8:	b207      	sxth	r7, r0
 80194ea:	6818      	ldr	r0, [r3, #0]
 80194ec:	42b7      	cmp	r7, r6
 80194ee:	6803      	ldr	r3, [r0, #0]
 80194f0:	f280 8083 	bge.w	80195fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80194f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80194f8:	4798      	blx	r3
 80194fa:	eb07 030b 	add.w	r3, r7, fp
 80194fe:	4298      	cmp	r0, r3
 8019500:	da07      	bge.n	8019512 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 8019502:	42b0      	cmp	r0, r6
 8019504:	da05      	bge.n	8019512 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 8019506:	4287      	cmp	r7, r0
 8019508:	dd6c      	ble.n	80195e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801950a:	2f00      	cmp	r7, #0
 801950c:	dd6a      	ble.n	80195e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801950e:	4630      	mov	r0, r6
 8019510:	e004      	b.n	801951c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8019512:	4287      	cmp	r7, r0
 8019514:	dcfb      	bgt.n	801950e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8019516:	42b0      	cmp	r0, r6
 8019518:	bfa8      	it	ge
 801951a:	4630      	movge	r0, r6
 801951c:	4b76      	ldr	r3, [pc, #472]	@ (80196f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801951e:	f8ad 7016 	strh.w	r7, [sp, #22]
 8019522:	1bc0      	subs	r0, r0, r7
 8019524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019528:	882f      	ldrh	r7, [r5, #0]
 801952a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801952e:	2200      	movs	r2, #0
 8019530:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019534:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019538:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801953c:	42bb      	cmp	r3, r7
 801953e:	d9cd      	bls.n	80194dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8019540:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8019544:	ab07      	add	r3, sp, #28
 8019546:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801954a:	6851      	ldr	r1, [r2, #4]
 801954c:	c303      	stmia	r3!, {r0, r1}
 801954e:	a905      	add	r1, sp, #20
 8019550:	a807      	add	r0, sp, #28
 8019552:	f7ff f9b1 	bl	80188b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019556:	2800      	cmp	r0, #0
 8019558:	d04c      	beq.n	80195f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801955a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801955e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8019562:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8019566:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801956a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801956e:	9302      	str	r3, [sp, #8]
 8019570:	4686      	mov	lr, r0
 8019572:	4290      	cmp	r0, r2
 8019574:	4450      	add	r0, sl
 8019576:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801957a:	bfb8      	it	lt
 801957c:	4696      	movlt	lr, r2
 801957e:	4452      	add	r2, sl
 8019580:	4299      	cmp	r1, r3
 8019582:	b280      	uxth	r0, r0
 8019584:	b292      	uxth	r2, r2
 8019586:	468c      	mov	ip, r1
 8019588:	fa0f fa82 	sxth.w	sl, r2
 801958c:	bfb8      	it	lt
 801958e:	469c      	movlt	ip, r3
 8019590:	b203      	sxth	r3, r0
 8019592:	4553      	cmp	r3, sl
 8019594:	bfb8      	it	lt
 8019596:	4602      	movlt	r2, r0
 8019598:	eba2 020e 	sub.w	r2, r2, lr
 801959c:	f8ad 2020 	strh.w	r2, [sp, #32]
 80195a0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 80195a4:	9b02      	ldr	r3, [sp, #8]
 80195a6:	f8ad e01c 	strh.w	lr, [sp, #28]
 80195aa:	4411      	add	r1, r2
 80195ac:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80195b0:	f8ad c01e 	strh.w	ip, [sp, #30]
 80195b4:	4413      	add	r3, r2
 80195b6:	b289      	uxth	r1, r1
 80195b8:	b29b      	uxth	r3, r3
 80195ba:	b208      	sxth	r0, r1
 80195bc:	b21a      	sxth	r2, r3
 80195be:	4290      	cmp	r0, r2
 80195c0:	bfb8      	it	lt
 80195c2:	460b      	movlt	r3, r1
 80195c4:	eba3 030c 	sub.w	r3, r3, ip
 80195c8:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80195cc:	a807      	add	r0, sp, #28
 80195ce:	f7f9 fca2 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 80195d2:	b920      	cbnz	r0, 80195de <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 80195d4:	6823      	ldr	r3, [r4, #0]
 80195d6:	a907      	add	r1, sp, #28
 80195d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80195da:	4620      	mov	r0, r4
 80195dc:	4798      	blx	r3
 80195de:	3701      	adds	r7, #1
 80195e0:	b2bf      	uxth	r7, r7
 80195e2:	e7a9      	b.n	8019538 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 80195e4:	f8d9 0000 	ldr.w	r0, [r9]
 80195e8:	6803      	ldr	r3, [r0, #0]
 80195ea:	2101      	movs	r1, #1
 80195ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80195f0:	4798      	blx	r3
 80195f2:	e773      	b.n	80194dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 80195f4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80195f8:	e7e8      	b.n	80195cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 80195fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80195fc:	4798      	blx	r3
 80195fe:	4b3f      	ldr	r3, [pc, #252]	@ (80196fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8019600:	781b      	ldrb	r3, [r3, #0]
 8019602:	2b00      	cmp	r3, #0
 8019604:	f43f af29 	beq.w	801945a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8019608:	2300      	movs	r3, #0
 801960a:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801960e:	882b      	ldrh	r3, [r5, #0]
 8019610:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8019614:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8019618:	42ab      	cmp	r3, r5
 801961a:	f4bf af1e 	bcs.w	801945a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801961e:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8019622:	2907      	cmp	r1, #7
 8019624:	d814      	bhi.n	8019650 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8019626:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801962a:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801962e:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8019632:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8019636:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801963a:	1c4a      	adds	r2, r1, #1
 801963c:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8019640:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8019644:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8019648:	f8a2 c002 	strh.w	ip, [r2, #2]
 801964c:	8097      	strh	r7, [r2, #4]
 801964e:	80d6      	strh	r6, [r2, #6]
 8019650:	3301      	adds	r3, #1
 8019652:	b29b      	uxth	r3, r3
 8019654:	e7e0      	b.n	8019618 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 8019656:	2b02      	cmp	r3, #2
 8019658:	f040 8133 	bne.w	80198c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 801965c:	4b28      	ldr	r3, [pc, #160]	@ (8019700 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801965e:	781b      	ldrb	r3, [r3, #0]
 8019660:	2b01      	cmp	r3, #1
 8019662:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8019666:	f000 8098 	beq.w	801979a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801966a:	882a      	ldrh	r2, [r5, #0]
 801966c:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8019670:	3201      	adds	r2, #1
 8019672:	b292      	uxth	r2, r2
 8019674:	2900      	cmp	r1, #0
 8019676:	d0c2      	beq.n	80195fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8019678:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801967c:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8019680:	441e      	add	r6, r3
 8019682:	b236      	sxth	r6, r6
 8019684:	4694      	mov	ip, r2
 8019686:	f04f 0900 	mov.w	r9, #0
 801968a:	fa1f f38c 	uxth.w	r3, ip
 801968e:	4299      	cmp	r1, r3
 8019690:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8019694:	f240 80bf 	bls.w	8019816 <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 8019698:	4427      	add	r7, r4
 801969a:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801969e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80196a2:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 80196a6:	4283      	cmp	r3, r0
 80196a8:	f340 80a1 	ble.w	80197ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 80196ac:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 80196b0:	4406      	add	r6, r0
 80196b2:	b236      	sxth	r6, r6
 80196b4:	429e      	cmp	r6, r3
 80196b6:	bfa8      	it	ge
 80196b8:	461e      	movge	r6, r3
 80196ba:	46e1      	mov	r9, ip
 80196bc:	f10c 0c01 	add.w	ip, ip, #1
 80196c0:	e7e3      	b.n	801968a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 80196c2:	d10a      	bne.n	80196da <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 80196c4:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 80196c8:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 80196cc:	4562      	cmp	r2, ip
 80196ce:	bfb8      	it	lt
 80196d0:	4662      	movlt	r2, ip
 80196d2:	4288      	cmp	r0, r1
 80196d4:	bfb8      	it	lt
 80196d6:	461f      	movlt	r7, r3
 80196d8:	e087      	b.n	80197ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 80196da:	428a      	cmp	r2, r1
 80196dc:	bfb8      	it	lt
 80196de:	460a      	movlt	r2, r1
 80196e0:	e083      	b.n	80197ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 80196e2:	bf00      	nop
 80196e4:	20012720 	.word	0x20012720
 80196e8:	2001272c 	.word	0x2001272c
 80196ec:	2000008c 	.word	0x2000008c
 80196f0:	200126e0 	.word	0x200126e0
 80196f4:	200126d6 	.word	0x200126d6
 80196f8:	200126d4 	.word	0x200126d4
 80196fc:	200126de 	.word	0x200126de
 8019700:	200126d8 	.word	0x200126d8
 8019704:	19a1      	adds	r1, r4, r6
 8019706:	ab07      	add	r3, sp, #28
 8019708:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801970c:	6849      	ldr	r1, [r1, #4]
 801970e:	c303      	stmia	r3!, {r0, r1}
 8019710:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019714:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019718:	2b13      	cmp	r3, #19
 801971a:	bfd8      	it	le
 801971c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8019720:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019724:	440b      	add	r3, r1
 8019726:	1a9b      	subs	r3, r3, r2
 8019728:	a807      	add	r0, sp, #28
 801972a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801972e:	f7ff f813 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019732:	a807      	add	r0, sp, #28
 8019734:	f7f9 fbef 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019738:	bb78      	cbnz	r0, 801979a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801973a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801973e:	f8d9 0000 	ldr.w	r0, [r9]
 8019742:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019746:	f8d0 e000 	ldr.w	lr, [r0]
 801974a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801974e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019752:	f1bc 0f14 	cmp.w	ip, #20
 8019756:	bfa8      	it	ge
 8019758:	f04f 0c14 	movge.w	ip, #20
 801975c:	fa1f fc8c 	uxth.w	ip, ip
 8019760:	f8cd c000 	str.w	ip, [sp]
 8019764:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 8019768:	47d8      	blx	fp
 801976a:	4683      	mov	fp, r0
 801976c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8019770:	a807      	add	r0, sp, #28
 8019772:	f7fe ffd7 	bl	8018724 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019776:	6823      	ldr	r3, [r4, #0]
 8019778:	4426      	add	r6, r4
 801977a:	4620      	mov	r0, r4
 801977c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801977e:	a907      	add	r1, sp, #28
 8019780:	4798      	blx	r3
 8019782:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8019786:	eba0 000b 	sub.w	r0, r0, fp
 801978a:	b200      	sxth	r0, r0
 801978c:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8019790:	b918      	cbnz	r0, 801979a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 8019792:	b2b9      	uxth	r1, r7
 8019794:	4650      	mov	r0, sl
 8019796:	f7ff fa79 	bl	8018c8c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801979a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801979e:	f1bb 0f00 	cmp.w	fp, #0
 80197a2:	f43f af2c 	beq.w	80195fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80197a6:	882b      	ldrh	r3, [r5, #0]
 80197a8:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 80197ac:	3301      	adds	r3, #1
 80197ae:	b29b      	uxth	r3, r3
 80197b0:	2700      	movs	r7, #0
 80197b2:	b299      	uxth	r1, r3
 80197b4:	458b      	cmp	fp, r1
 80197b6:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 80197ba:	d9a3      	bls.n	8019704 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 80197bc:	4426      	add	r6, r4
 80197be:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 80197c2:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 80197c6:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80197ca:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 80197ce:	4408      	add	r0, r1
 80197d0:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 80197d4:	4461      	add	r1, ip
 80197d6:	b200      	sxth	r0, r0
 80197d8:	b209      	sxth	r1, r1
 80197da:	4288      	cmp	r0, r1
 80197dc:	f6bf af71 	bge.w	80196c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 80197e0:	4584      	cmp	ip, r0
 80197e2:	4662      	mov	r2, ip
 80197e4:	461f      	mov	r7, r3
 80197e6:	bfb8      	it	lt
 80197e8:	4602      	movlt	r2, r0
 80197ea:	3301      	adds	r3, #1
 80197ec:	e7e1      	b.n	80197b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 80197ee:	d10e      	bne.n	801980e <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 80197f0:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 80197f4:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 80197f8:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 80197fc:	4473      	add	r3, lr
 80197fe:	b21b      	sxth	r3, r3
 8019800:	429e      	cmp	r6, r3
 8019802:	bfa8      	it	ge
 8019804:	461e      	movge	r6, r3
 8019806:	4287      	cmp	r7, r0
 8019808:	bfb8      	it	lt
 801980a:	46e1      	movlt	r9, ip
 801980c:	e756      	b.n	80196bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801980e:	4286      	cmp	r6, r0
 8019810:	bfa8      	it	ge
 8019812:	4606      	movge	r6, r0
 8019814:	e752      	b.n	80196bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8019816:	eb0a 0007 	add.w	r0, sl, r7
 801981a:	4427      	add	r7, r4
 801981c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8019820:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8019824:	f1bb 0f13 	cmp.w	fp, #19
 8019828:	bfde      	ittt	le
 801982a:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801982e:	445e      	addle	r6, fp
 8019830:	b236      	sxthle	r6, r6
 8019832:	f7f9 fb70 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019836:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801983a:	2800      	cmp	r0, #0
 801983c:	f47f af1a 	bne.w	8019674 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 8019840:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8019844:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8019848:	482a      	ldr	r0, [pc, #168]	@ (80198f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 801984a:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801984e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8019852:	6800      	ldr	r0, [r0, #0]
 8019854:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019858:	1ab6      	subs	r6, r6, r2
 801985a:	2e14      	cmp	r6, #20
 801985c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8019860:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019864:	bfa8      	it	ge
 8019866:	2614      	movge	r6, #20
 8019868:	f8d0 c000 	ldr.w	ip, [r0]
 801986c:	b2b6      	uxth	r6, r6
 801986e:	fa1f fb8b 	uxth.w	fp, fp
 8019872:	455e      	cmp	r6, fp
 8019874:	bf94      	ite	ls
 8019876:	9600      	strls	r6, [sp, #0]
 8019878:	f8cd b000 	strhi.w	fp, [sp]
 801987c:	b292      	uxth	r2, r2
 801987e:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 8019882:	b29b      	uxth	r3, r3
 8019884:	b289      	uxth	r1, r1
 8019886:	47b0      	blx	r6
 8019888:	6823      	ldr	r3, [r4, #0]
 801988a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801988e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019890:	a907      	add	r1, sp, #28
 8019892:	4620      	mov	r0, r4
 8019894:	4798      	blx	r3
 8019896:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801989a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801989e:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 80198a2:	1a5b      	subs	r3, r3, r1
 80198a4:	440a      	add	r2, r1
 80198a6:	b21b      	sxth	r3, r3
 80198a8:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 80198ac:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	f47f aeda 	bne.w	801966a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80198b6:	fa1f f189 	uxth.w	r1, r9
 80198ba:	4650      	mov	r0, sl
 80198bc:	f7ff f9e6 	bl	8018c8c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80198c0:	e6d3      	b.n	801966a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80198c2:	882e      	ldrh	r6, [r5, #0]
 80198c4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80198c8:	42b3      	cmp	r3, r6
 80198ca:	f67f ae98 	bls.w	80195fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80198ce:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80198d2:	ab07      	add	r3, sp, #28
 80198d4:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80198d8:	6851      	ldr	r1, [r2, #4]
 80198da:	c303      	stmia	r3!, {r0, r1}
 80198dc:	a807      	add	r0, sp, #28
 80198de:	f7f9 fb1a 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 80198e2:	b920      	cbnz	r0, 80198ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 80198e4:	6823      	ldr	r3, [r4, #0]
 80198e6:	a907      	add	r1, sp, #28
 80198e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80198ea:	4620      	mov	r0, r4
 80198ec:	4798      	blx	r3
 80198ee:	3601      	adds	r6, #1
 80198f0:	b2b6      	uxth	r6, r6
 80198f2:	e7e7      	b.n	80198c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 80198f4:	200126e0 	.word	0x200126e0

080198f8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80198f8:	4b03      	ldr	r3, [pc, #12]	@ (8019908 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80198fa:	2200      	movs	r2, #0
 80198fc:	801a      	strh	r2, [r3, #0]
 80198fe:	805a      	strh	r2, [r3, #2]
 8019900:	809a      	strh	r2, [r3, #4]
 8019902:	80da      	strh	r2, [r3, #6]
 8019904:	4770      	bx	lr
 8019906:	bf00      	nop
 8019908:	2001272c 	.word	0x2001272c

0801990c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801990c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019910:	4606      	mov	r6, r0
 8019912:	b09d      	sub	sp, #116	@ 0x74
 8019914:	a803      	add	r0, sp, #12
 8019916:	4614      	mov	r4, r2
 8019918:	468a      	mov	sl, r1
 801991a:	461d      	mov	r5, r3
 801991c:	f001 f8c1 	bl	801aaa2 <_ZN8touchgfx12TextProviderC1Ev>
 8019920:	6833      	ldr	r3, [r6, #0]
 8019922:	4630      	mov	r0, r6
 8019924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019926:	4798      	blx	r3
 8019928:	6833      	ldr	r3, [r6, #0]
 801992a:	4607      	mov	r7, r0
 801992c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801992e:	4630      	mov	r0, r6
 8019930:	4798      	blx	r3
 8019932:	462a      	mov	r2, r5
 8019934:	9000      	str	r0, [sp, #0]
 8019936:	4621      	mov	r1, r4
 8019938:	463b      	mov	r3, r7
 801993a:	a803      	add	r0, sp, #12
 801993c:	f001 f90c 	bl	801ab58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019940:	2500      	movs	r5, #0
 8019942:	462c      	mov	r4, r5
 8019944:	46a9      	mov	r9, r5
 8019946:	46a8      	mov	r8, r5
 8019948:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801994c:	2300      	movs	r3, #0
 801994e:	9302      	str	r3, [sp, #8]
 8019950:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8019954:	429c      	cmp	r4, r3
 8019956:	d002      	beq.n	801995e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8019958:	455c      	cmp	r4, fp
 801995a:	bf18      	it	ne
 801995c:	4625      	movne	r5, r4
 801995e:	ab02      	add	r3, sp, #8
 8019960:	4632      	mov	r2, r6
 8019962:	4651      	mov	r1, sl
 8019964:	a803      	add	r0, sp, #12
 8019966:	f001 fbf9 	bl	801b15c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801996a:	4604      	mov	r4, r0
 801996c:	b108      	cbz	r0, 8019972 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801996e:	280a      	cmp	r0, #10
 8019970:	d10a      	bne.n	8019988 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8019972:	45c1      	cmp	r9, r8
 8019974:	bf38      	it	cc
 8019976:	46c1      	movcc	r9, r8
 8019978:	f04f 0800 	mov.w	r8, #0
 801997c:	2c00      	cmp	r4, #0
 801997e:	d1e5      	bne.n	801994c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8019980:	4648      	mov	r0, r9
 8019982:	b01d      	add	sp, #116	@ 0x74
 8019984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019988:	9a02      	ldr	r2, [sp, #8]
 801998a:	2a00      	cmp	r2, #0
 801998c:	d0de      	beq.n	801994c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801998e:	7b57      	ldrb	r7, [r2, #13]
 8019990:	6833      	ldr	r3, [r6, #0]
 8019992:	8894      	ldrh	r4, [r2, #4]
 8019994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019996:	007f      	lsls	r7, r7, #1
 8019998:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801999c:	7a97      	ldrb	r7, [r2, #10]
 801999e:	4629      	mov	r1, r5
 80199a0:	4307      	orrs	r7, r0
 80199a2:	4630      	mov	r0, r6
 80199a4:	4798      	blx	r3
 80199a6:	4438      	add	r0, r7
 80199a8:	4480      	add	r8, r0
 80199aa:	fa1f f888 	uxth.w	r8, r8
 80199ae:	e7e5      	b.n	801997c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080199b0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80199b0:	b508      	push	{r3, lr}
 80199b2:	6803      	ldr	r3, [r0, #0]
 80199b4:	68db      	ldr	r3, [r3, #12]
 80199b6:	4798      	blx	r3
 80199b8:	b128      	cbz	r0, 80199c6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80199ba:	7b43      	ldrb	r3, [r0, #13]
 80199bc:	7a80      	ldrb	r0, [r0, #10]
 80199be:	005b      	lsls	r3, r3, #1
 80199c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80199c4:	4318      	orrs	r0, r3
 80199c6:	bd08      	pop	{r3, pc}

080199c8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80199c8:	b40e      	push	{r1, r2, r3}
 80199ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199cc:	b09e      	sub	sp, #120	@ 0x78
 80199ce:	ab23      	add	r3, sp, #140	@ 0x8c
 80199d0:	4605      	mov	r5, r0
 80199d2:	f853 4b04 	ldr.w	r4, [r3], #4
 80199d6:	9303      	str	r3, [sp, #12]
 80199d8:	a805      	add	r0, sp, #20
 80199da:	f001 f862 	bl	801aaa2 <_ZN8touchgfx12TextProviderC1Ev>
 80199de:	682b      	ldr	r3, [r5, #0]
 80199e0:	4628      	mov	r0, r5
 80199e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80199e4:	4798      	blx	r3
 80199e6:	682b      	ldr	r3, [r5, #0]
 80199e8:	4606      	mov	r6, r0
 80199ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80199ec:	4628      	mov	r0, r5
 80199ee:	4798      	blx	r3
 80199f0:	4633      	mov	r3, r6
 80199f2:	ae1e      	add	r6, sp, #120	@ 0x78
 80199f4:	4621      	mov	r1, r4
 80199f6:	9000      	str	r0, [sp, #0]
 80199f8:	9a03      	ldr	r2, [sp, #12]
 80199fa:	2400      	movs	r4, #0
 80199fc:	a805      	add	r0, sp, #20
 80199fe:	f001 f8ab 	bl	801ab58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019a02:	f846 4d68 	str.w	r4, [r6, #-104]!
 8019a06:	462a      	mov	r2, r5
 8019a08:	4633      	mov	r3, r6
 8019a0a:	4621      	mov	r1, r4
 8019a0c:	a805      	add	r0, sp, #20
 8019a0e:	f001 fba5 	bl	801b15c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a12:	b1f0      	cbz	r0, 8019a52 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8019a14:	280a      	cmp	r0, #10
 8019a16:	d018      	beq.n	8019a4a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8019a18:	9f04      	ldr	r7, [sp, #16]
 8019a1a:	b1b7      	cbz	r7, 8019a4a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8019a1c:	7b78      	ldrb	r0, [r7, #13]
 8019a1e:	7a3b      	ldrb	r3, [r7, #8]
 8019a20:	88ea      	ldrh	r2, [r5, #6]
 8019a22:	00c1      	lsls	r1, r0, #3
 8019a24:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8019a28:	4319      	orrs	r1, r3
 8019a2a:	0643      	lsls	r3, r0, #25
 8019a2c:	bf44      	itt	mi
 8019a2e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8019a32:	b219      	sxthmi	r1, r3
 8019a34:	0100      	lsls	r0, r0, #4
 8019a36:	79fb      	ldrb	r3, [r7, #7]
 8019a38:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8019a3c:	4303      	orrs	r3, r0
 8019a3e:	4413      	add	r3, r2
 8019a40:	1a5b      	subs	r3, r3, r1
 8019a42:	b21b      	sxth	r3, r3
 8019a44:	429c      	cmp	r4, r3
 8019a46:	bfb8      	it	lt
 8019a48:	461c      	movlt	r4, r3
 8019a4a:	4633      	mov	r3, r6
 8019a4c:	462a      	mov	r2, r5
 8019a4e:	2100      	movs	r1, #0
 8019a50:	e7dc      	b.n	8019a0c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8019a52:	b2a0      	uxth	r0, r4
 8019a54:	b01e      	add	sp, #120	@ 0x78
 8019a56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019a5a:	b003      	add	sp, #12
 8019a5c:	4770      	bx	lr

08019a5e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8019a5e:	7a43      	ldrb	r3, [r0, #9]
 8019a60:	8880      	ldrh	r0, [r0, #4]
 8019a62:	4418      	add	r0, r3
 8019a64:	b280      	uxth	r0, r0
 8019a66:	4770      	bx	lr

08019a68 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8019a68:	6803      	ldr	r3, [r0, #0]
 8019a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019a6c:	4718      	bx	r3

08019a6e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019a6e:	b40e      	push	{r1, r2, r3}
 8019a70:	b570      	push	{r4, r5, r6, lr}
 8019a72:	b09d      	sub	sp, #116	@ 0x74
 8019a74:	ab21      	add	r3, sp, #132	@ 0x84
 8019a76:	4604      	mov	r4, r0
 8019a78:	f853 5b04 	ldr.w	r5, [r3], #4
 8019a7c:	9302      	str	r3, [sp, #8]
 8019a7e:	a803      	add	r0, sp, #12
 8019a80:	f001 f80f 	bl	801aaa2 <_ZN8touchgfx12TextProviderC1Ev>
 8019a84:	6823      	ldr	r3, [r4, #0]
 8019a86:	4620      	mov	r0, r4
 8019a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019a8a:	4798      	blx	r3
 8019a8c:	6823      	ldr	r3, [r4, #0]
 8019a8e:	4606      	mov	r6, r0
 8019a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019a92:	4620      	mov	r0, r4
 8019a94:	4798      	blx	r3
 8019a96:	4633      	mov	r3, r6
 8019a98:	9000      	str	r0, [sp, #0]
 8019a9a:	9a02      	ldr	r2, [sp, #8]
 8019a9c:	4629      	mov	r1, r5
 8019a9e:	a803      	add	r0, sp, #12
 8019aa0:	f001 f85a 	bl	801ab58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019aa4:	a803      	add	r0, sp, #12
 8019aa6:	f001 fc27 	bl	801b2f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019aaa:	2401      	movs	r4, #1
 8019aac:	b2a3      	uxth	r3, r4
 8019aae:	b140      	cbz	r0, 8019ac2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8019ab0:	280a      	cmp	r0, #10
 8019ab2:	bf08      	it	eq
 8019ab4:	3301      	addeq	r3, #1
 8019ab6:	a803      	add	r0, sp, #12
 8019ab8:	bf08      	it	eq
 8019aba:	b21c      	sxtheq	r4, r3
 8019abc:	f001 fc1c 	bl	801b2f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019ac0:	e7f4      	b.n	8019aac <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	b01d      	add	sp, #116	@ 0x74
 8019ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019aca:	b003      	add	sp, #12
 8019acc:	4770      	bx	lr

08019ace <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019ace:	b40e      	push	{r1, r2, r3}
 8019ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ad2:	b09e      	sub	sp, #120	@ 0x78
 8019ad4:	ab23      	add	r3, sp, #140	@ 0x8c
 8019ad6:	4604      	mov	r4, r0
 8019ad8:	f853 5b04 	ldr.w	r5, [r3], #4
 8019adc:	9303      	str	r3, [sp, #12]
 8019ade:	a805      	add	r0, sp, #20
 8019ae0:	f000 ffdf 	bl	801aaa2 <_ZN8touchgfx12TextProviderC1Ev>
 8019ae4:	6823      	ldr	r3, [r4, #0]
 8019ae6:	4620      	mov	r0, r4
 8019ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019aea:	4798      	blx	r3
 8019aec:	6823      	ldr	r3, [r4, #0]
 8019aee:	4606      	mov	r6, r0
 8019af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019af2:	4620      	mov	r0, r4
 8019af4:	4798      	blx	r3
 8019af6:	4633      	mov	r3, r6
 8019af8:	4629      	mov	r1, r5
 8019afa:	9000      	str	r0, [sp, #0]
 8019afc:	9a03      	ldr	r2, [sp, #12]
 8019afe:	a805      	add	r0, sp, #20
 8019b00:	ad1e      	add	r5, sp, #120	@ 0x78
 8019b02:	f001 f829 	bl	801ab58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019b06:	2100      	movs	r1, #0
 8019b08:	f845 1d68 	str.w	r1, [r5, #-104]!
 8019b0c:	4622      	mov	r2, r4
 8019b0e:	462b      	mov	r3, r5
 8019b10:	a805      	add	r0, sp, #20
 8019b12:	f001 fb23 	bl	801b15c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b16:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8019b1a:	b1d8      	cbz	r0, 8019b54 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8019b1c:	280a      	cmp	r0, #10
 8019b1e:	d012      	beq.n	8019b46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019b20:	9804      	ldr	r0, [sp, #16]
 8019b22:	b180      	cbz	r0, 8019b46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019b24:	7b47      	ldrb	r7, [r0, #13]
 8019b26:	88e2      	ldrh	r2, [r4, #6]
 8019b28:	00fb      	lsls	r3, r7, #3
 8019b2a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8019b2e:	7a03      	ldrb	r3, [r0, #8]
 8019b30:	430b      	orrs	r3, r1
 8019b32:	0679      	lsls	r1, r7, #25
 8019b34:	bf44      	itt	mi
 8019b36:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019b3a:	b21b      	sxthmi	r3, r3
 8019b3c:	1ad3      	subs	r3, r2, r3
 8019b3e:	b21b      	sxth	r3, r3
 8019b40:	429e      	cmp	r6, r3
 8019b42:	bfa8      	it	ge
 8019b44:	461e      	movge	r6, r3
 8019b46:	462b      	mov	r3, r5
 8019b48:	4622      	mov	r2, r4
 8019b4a:	2100      	movs	r1, #0
 8019b4c:	a805      	add	r0, sp, #20
 8019b4e:	f001 fb05 	bl	801b15c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b52:	e7e2      	b.n	8019b1a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8019b54:	4630      	mov	r0, r6
 8019b56:	b01e      	add	sp, #120	@ 0x78
 8019b58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019b5c:	b003      	add	sp, #12
 8019b5e:	4770      	bx	lr

08019b60 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019b60:	b513      	push	{r0, r1, r4, lr}
 8019b62:	6803      	ldr	r3, [r0, #0]
 8019b64:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019b68:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019b6c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019b70:	2400      	movs	r4, #0
 8019b72:	9400      	str	r4, [sp, #0]
 8019b74:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019b78:	691b      	ldr	r3, [r3, #16]
 8019b7a:	4669      	mov	r1, sp
 8019b7c:	4798      	blx	r3
 8019b7e:	b002      	add	sp, #8
 8019b80:	bd10      	pop	{r4, pc}

08019b82 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019b82:	b538      	push	{r3, r4, r5, lr}
 8019b84:	680b      	ldr	r3, [r1, #0]
 8019b86:	460c      	mov	r4, r1
 8019b88:	68db      	ldr	r3, [r3, #12]
 8019b8a:	4605      	mov	r5, r0
 8019b8c:	4798      	blx	r3
 8019b8e:	6823      	ldr	r3, [r4, #0]
 8019b90:	4620      	mov	r0, r4
 8019b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019b94:	4629      	mov	r1, r5
 8019b96:	4798      	blx	r3
 8019b98:	4628      	mov	r0, r5
 8019b9a:	bd38      	pop	{r3, r4, r5, pc}

08019b9c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019b9c:	b410      	push	{r4}
 8019b9e:	880a      	ldrh	r2, [r1, #0]
 8019ba0:	8884      	ldrh	r4, [r0, #4]
 8019ba2:	4422      	add	r2, r4
 8019ba4:	800a      	strh	r2, [r1, #0]
 8019ba6:	88c4      	ldrh	r4, [r0, #6]
 8019ba8:	884a      	ldrh	r2, [r1, #2]
 8019baa:	4422      	add	r2, r4
 8019bac:	804a      	strh	r2, [r1, #2]
 8019bae:	6940      	ldr	r0, [r0, #20]
 8019bb0:	b120      	cbz	r0, 8019bbc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019bb2:	6803      	ldr	r3, [r0, #0]
 8019bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019bba:	4718      	bx	r3
 8019bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019bc0:	4770      	bx	lr

08019bc2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019bc2:	b570      	push	{r4, r5, r6, lr}
 8019bc4:	8882      	ldrh	r2, [r0, #4]
 8019bc6:	880b      	ldrh	r3, [r1, #0]
 8019bc8:	4413      	add	r3, r2
 8019bca:	800b      	strh	r3, [r1, #0]
 8019bcc:	88c2      	ldrh	r2, [r0, #6]
 8019bce:	884b      	ldrh	r3, [r1, #2]
 8019bd0:	460c      	mov	r4, r1
 8019bd2:	4413      	add	r3, r2
 8019bd4:	804b      	strh	r3, [r1, #2]
 8019bd6:	4605      	mov	r5, r0
 8019bd8:	1d01      	adds	r1, r0, #4
 8019bda:	4620      	mov	r0, r4
 8019bdc:	f7f9 f958 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 8019be0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	dd0b      	ble.n	8019c00 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019be8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	dd07      	ble.n	8019c00 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019bf0:	6968      	ldr	r0, [r5, #20]
 8019bf2:	b128      	cbz	r0, 8019c00 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019bf4:	6803      	ldr	r3, [r0, #0]
 8019bf6:	4621      	mov	r1, r4
 8019bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bfe:	4718      	bx	r3
 8019c00:	bd70      	pop	{r4, r5, r6, pc}
	...

08019c04 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019c04:	b570      	push	{r4, r5, r6, lr}
 8019c06:	8882      	ldrh	r2, [r0, #4]
 8019c08:	880b      	ldrh	r3, [r1, #0]
 8019c0a:	4413      	add	r3, r2
 8019c0c:	800b      	strh	r3, [r1, #0]
 8019c0e:	88c2      	ldrh	r2, [r0, #6]
 8019c10:	884b      	ldrh	r3, [r1, #2]
 8019c12:	460c      	mov	r4, r1
 8019c14:	4413      	add	r3, r2
 8019c16:	804b      	strh	r3, [r1, #2]
 8019c18:	4605      	mov	r5, r0
 8019c1a:	1d01      	adds	r1, r0, #4
 8019c1c:	4620      	mov	r0, r4
 8019c1e:	f7f9 f937 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 8019c22:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	dd19      	ble.n	8019c5e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019c2a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	dd15      	ble.n	8019c5e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019c32:	6968      	ldr	r0, [r5, #20]
 8019c34:	b128      	cbz	r0, 8019c42 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8019c36:	6803      	ldr	r3, [r0, #0]
 8019c38:	4621      	mov	r1, r4
 8019c3a:	691b      	ldr	r3, [r3, #16]
 8019c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c40:	4718      	bx	r3
 8019c42:	4b07      	ldr	r3, [pc, #28]	@ (8019c60 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	3304      	adds	r3, #4
 8019c48:	429d      	cmp	r5, r3
 8019c4a:	d108      	bne.n	8019c5e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019c4c:	f7fe ff12 	bl	8018a74 <_ZN8touchgfx11Application11getInstanceEv>
 8019c50:	6803      	ldr	r3, [r0, #0]
 8019c52:	6821      	ldr	r1, [r4, #0]
 8019c54:	6862      	ldr	r2, [r4, #4]
 8019c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c5c:	4718      	bx	r3
 8019c5e:	bd70      	pop	{r4, r5, r6, pc}
 8019c60:	20012724 	.word	0x20012724

08019c64 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019c64:	b570      	push	{r4, r5, r6, lr}
 8019c66:	4604      	mov	r4, r0
 8019c68:	4616      	mov	r6, r2
 8019c6a:	460d      	mov	r5, r1
 8019c6c:	b901      	cbnz	r1, 8019c70 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019c6e:	b192      	cbz	r2, 8019c96 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8019c70:	6823      	ldr	r3, [r4, #0]
 8019c72:	4620      	mov	r0, r4
 8019c74:	699b      	ldr	r3, [r3, #24]
 8019c76:	4798      	blx	r3
 8019c78:	88e2      	ldrh	r2, [r4, #6]
 8019c7a:	88a1      	ldrh	r1, [r4, #4]
 8019c7c:	4432      	add	r2, r6
 8019c7e:	4429      	add	r1, r5
 8019c80:	4620      	mov	r0, r4
 8019c82:	b212      	sxth	r2, r2
 8019c84:	b209      	sxth	r1, r1
 8019c86:	f7f2 fbe7 	bl	800c458 <_ZN8touchgfx8Drawable5setXYEss>
 8019c8a:	6823      	ldr	r3, [r4, #0]
 8019c8c:	4620      	mov	r0, r4
 8019c8e:	699b      	ldr	r3, [r3, #24]
 8019c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c94:	4718      	bx	r3
 8019c96:	bd70      	pop	{r4, r5, r6, pc}

08019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019c98:	b510      	push	{r4, lr}
 8019c9a:	4604      	mov	r4, r0
 8019c9c:	4608      	mov	r0, r1
 8019c9e:	2300      	movs	r3, #0
 8019ca0:	8023      	strh	r3, [r4, #0]
 8019ca2:	8063      	strh	r3, [r4, #2]
 8019ca4:	6803      	ldr	r3, [r0, #0]
 8019ca6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019caa:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019cae:	80a1      	strh	r1, [r4, #4]
 8019cb0:	80e2      	strh	r2, [r4, #6]
 8019cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019cb4:	4621      	mov	r1, r4
 8019cb6:	4798      	blx	r3
 8019cb8:	4620      	mov	r0, r4
 8019cba:	bd10      	pop	{r4, pc}

08019cbc <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8019cbc:	4a04      	ldr	r2, [pc, #16]	@ (8019cd0 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8019cbe:	6002      	str	r2, [r0, #0]
 8019cc0:	2200      	movs	r2, #0
 8019cc2:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8019cc6:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019cca:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019cce:	4770      	bx	lr
 8019cd0:	0802ea44 	.word	0x0802ea44

08019cd4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8019cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cd8:	4604      	mov	r4, r0
 8019cda:	b087      	sub	sp, #28
 8019cdc:	4696      	mov	lr, r2
 8019cde:	8b22      	ldrh	r2, [r4, #24]
 8019ce0:	6880      	ldr	r0, [r0, #8]
 8019ce2:	9105      	str	r1, [sp, #20]
 8019ce4:	1c51      	adds	r1, r2, #1
 8019ce6:	8321      	strh	r1, [r4, #24]
 8019ce8:	2101      	movs	r1, #1
 8019cea:	5481      	strb	r1, [r0, r2]
 8019cec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019cf0:	8b60      	ldrh	r0, [r4, #26]
 8019cf2:	ee06 2a90 	vmov	s13, r2
 8019cf6:	68e2      	ldr	r2, [r4, #12]
 8019cf8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019cfc:	1845      	adds	r5, r0, r1
 8019cfe:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8019d02:	8365      	strh	r5, [r4, #26]
 8019d04:	edc2 6a00 	vstr	s13, [r2]
 8019d08:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019d0c:	8b60      	ldrh	r0, [r4, #26]
 8019d0e:	ee07 2a10 	vmov	s14, r2
 8019d12:	68e2      	ldr	r2, [r4, #12]
 8019d14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d18:	1845      	adds	r5, r0, r1
 8019d1a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8019d1e:	8365      	strh	r5, [r4, #26]
 8019d20:	ed82 7a00 	vstr	s14, [r2]
 8019d24:	f8be 2000 	ldrh.w	r2, [lr]
 8019d28:	9203      	str	r2, [sp, #12]
 8019d2a:	2200      	movs	r2, #0
 8019d2c:	1d18      	adds	r0, r3, #4
 8019d2e:	4689      	mov	r9, r1
 8019d30:	9201      	str	r2, [sp, #4]
 8019d32:	4613      	mov	r3, r2
 8019d34:	4694      	mov	ip, r2
 8019d36:	460d      	mov	r5, r1
 8019d38:	9202      	str	r2, [sp, #8]
 8019d3a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8019d3e:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8019d42:	9e05      	ldr	r6, [sp, #20]
 8019d44:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8019d48:	f108 0701 	add.w	r7, r8, #1
 8019d4c:	428e      	cmp	r6, r1
 8019d4e:	b2bf      	uxth	r7, r7
 8019d50:	eb0a 0b08 	add.w	fp, sl, r8
 8019d54:	f340 80b6 	ble.w	8019ec4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 8019d58:	9b03      	ldr	r3, [sp, #12]
 8019d5a:	f9b0 c000 	ldrsh.w	ip, [r0]
 8019d5e:	fa43 fb05 	asr.w	fp, r3, r5
 8019d62:	f00b 0b01 	and.w	fp, fp, #1
 8019d66:	fa5f f38b 	uxtb.w	r3, fp
 8019d6a:	9304      	str	r3, [sp, #16]
 8019d6c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019d70:	f1bb 0f00 	cmp.w	fp, #0
 8019d74:	d057      	beq.n	8019e26 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 8019d76:	ee07 ca90 	vmov	s15, ip
 8019d7a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8019d7e:	ee07 3a90 	vmov	s15, r3
 8019d82:	8327      	strh	r7, [r4, #24]
 8019d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d88:	f1b9 0f00 	cmp.w	r9, #0
 8019d8c:	d028      	beq.n	8019de0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 8019d8e:	f04f 0602 	mov.w	r6, #2
 8019d92:	f80a 6008 	strb.w	r6, [sl, r8]
 8019d96:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019d9a:	68e7      	ldr	r7, [r4, #12]
 8019d9c:	f108 0901 	add.w	r9, r8, #1
 8019da0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019da4:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019da8:	edc7 5a00 	vstr	s11, [r7]
 8019dac:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019db0:	68e7      	ldr	r7, [r4, #12]
 8019db2:	f108 0901 	add.w	r9, r8, #1
 8019db6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019dba:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019dbe:	edc7 7a00 	vstr	s15, [r7]
 8019dc2:	3501      	adds	r5, #1
 8019dc4:	2d10      	cmp	r5, #16
 8019dc6:	d106      	bne.n	8019dd6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8019dc8:	9d02      	ldr	r5, [sp, #8]
 8019dca:	3501      	adds	r5, #1
 8019dcc:	9502      	str	r5, [sp, #8]
 8019dce:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 8019dd2:	9503      	str	r5, [sp, #12]
 8019dd4:	2500      	movs	r5, #0
 8019dd6:	3101      	adds	r1, #1
 8019dd8:	3004      	adds	r0, #4
 8019dda:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8019dde:	e7ae      	b.n	8019d3e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 8019de0:	f04f 0605 	mov.w	r6, #5
 8019de4:	f80a 6008 	strb.w	r6, [sl, r8]
 8019de8:	ed9d 5a01 	vldr	s10, [sp, #4]
 8019dec:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019df0:	68e7      	ldr	r7, [r4, #12]
 8019df2:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8019df6:	f108 0901 	add.w	r9, r8, #1
 8019dfa:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019dfe:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019e02:	ed87 5a00 	vstr	s10, [r7]
 8019e06:	ee05 2a10 	vmov	s10, r2
 8019e0a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019e0e:	68e7      	ldr	r7, [r4, #12]
 8019e10:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8019e14:	f108 0901 	add.w	r9, r8, #1
 8019e18:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019e1c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019e20:	ed87 5a00 	vstr	s10, [r7]
 8019e24:	e7b7      	b.n	8019d96 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 8019e26:	f1b9 0f00 	cmp.w	r9, #0
 8019e2a:	d147      	bne.n	8019ebc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 8019e2c:	f04f 0605 	mov.w	r6, #5
 8019e30:	8327      	strh	r7, [r4, #24]
 8019e32:	f80a 6008 	strb.w	r6, [sl, r8]
 8019e36:	eddd 7a01 	vldr	s15, [sp, #4]
 8019e3a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019e3e:	68e7      	ldr	r7, [r4, #12]
 8019e40:	9e01      	ldr	r6, [sp, #4]
 8019e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e46:	f108 0901 	add.w	r9, r8, #1
 8019e4a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019e4e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019e52:	edc7 7a00 	vstr	s15, [r7]
 8019e56:	ee07 2a90 	vmov	s15, r2
 8019e5a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019e5e:	68e7      	ldr	r7, [r4, #12]
 8019e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e64:	f108 0901 	add.w	r9, r8, #1
 8019e68:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019e6c:	4466      	add	r6, ip
 8019e6e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019e72:	edc7 7a00 	vstr	s15, [r7]
 8019e76:	ee07 6a90 	vmov	s15, r6
 8019e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e7e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019e82:	68e7      	ldr	r7, [r4, #12]
 8019e84:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019e88:	f108 0901 	add.w	r9, r8, #1
 8019e8c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019e90:	441a      	add	r2, r3
 8019e92:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019e96:	edc7 7a00 	vstr	s15, [r7]
 8019e9a:	ee07 2a90 	vmov	s15, r2
 8019e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ea2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019ea6:	68e7      	ldr	r7, [r4, #12]
 8019ea8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019eac:	f108 0901 	add.w	r9, r8, #1
 8019eb0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019eb4:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019eb8:	edc7 7a00 	vstr	s15, [r7]
 8019ebc:	461a      	mov	r2, r3
 8019ebe:	f8cd c004 	str.w	ip, [sp, #4]
 8019ec2:	e77e      	b.n	8019dc2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 8019ec4:	f1b9 0f00 	cmp.w	r9, #0
 8019ec8:	d028      	beq.n	8019f1c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8019eca:	ee07 ca90 	vmov	s15, ip
 8019ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ed2:	eef4 6a67 	vcmp.f32	s13, s15
 8019ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eda:	d108      	bne.n	8019eee <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 8019edc:	ee07 3a90 	vmov	s15, r3
 8019ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ee4:	eeb4 7a67 	vcmp.f32	s14, s15
 8019ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eec:	d016      	beq.n	8019f1c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8019eee:	2302      	movs	r3, #2
 8019ef0:	8327      	strh	r7, [r4, #24]
 8019ef2:	f88b 3000 	strb.w	r3, [fp]
 8019ef6:	8b62      	ldrh	r2, [r4, #26]
 8019ef8:	68e3      	ldr	r3, [r4, #12]
 8019efa:	1c51      	adds	r1, r2, #1
 8019efc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8019f00:	8361      	strh	r1, [r4, #26]
 8019f02:	edc3 6a00 	vstr	s13, [r3]
 8019f06:	8b62      	ldrh	r2, [r4, #26]
 8019f08:	68e3      	ldr	r3, [r4, #12]
 8019f0a:	1c51      	adds	r1, r2, #1
 8019f0c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8019f10:	8361      	strh	r1, [r4, #26]
 8019f12:	ed83 7a00 	vstr	s14, [r3]
 8019f16:	b007      	add	sp, #28
 8019f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f1c:	2305      	movs	r3, #5
 8019f1e:	8327      	strh	r7, [r4, #24]
 8019f20:	eddd 7a01 	vldr	s15, [sp, #4]
 8019f24:	f88b 3000 	strb.w	r3, [fp]
 8019f28:	8b61      	ldrh	r1, [r4, #26]
 8019f2a:	68e3      	ldr	r3, [r4, #12]
 8019f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019f30:	1c4d      	adds	r5, r1, #1
 8019f32:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019f36:	8365      	strh	r5, [r4, #26]
 8019f38:	edc3 7a00 	vstr	s15, [r3]
 8019f3c:	ee07 2a90 	vmov	s15, r2
 8019f40:	8b61      	ldrh	r1, [r4, #26]
 8019f42:	68e3      	ldr	r3, [r4, #12]
 8019f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019f48:	1c4d      	adds	r5, r1, #1
 8019f4a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019f4e:	8365      	strh	r5, [r4, #26]
 8019f50:	edc3 7a00 	vstr	s15, [r3]
 8019f54:	e7cf      	b.n	8019ef6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

08019f58 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8019f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f5c:	b08e      	sub	sp, #56	@ 0x38
 8019f5e:	4604      	mov	r4, r0
 8019f60:	4688      	mov	r8, r1
 8019f62:	4615      	mov	r5, r2
 8019f64:	4699      	mov	r9, r3
 8019f66:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8019f68:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8019f6c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019f6e:	f7f8 fb75 	bl	801265c <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8019f72:	6060      	str	r0, [r4, #4]
 8019f74:	f1b9 0f00 	cmp.w	r9, #0
 8019f78:	f000 80e8 	beq.w	801a14c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8019f7c:	2800      	cmp	r0, #0
 8019f7e:	f000 80e5 	beq.w	801a14c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8019f82:	a805      	add	r0, sp, #20
 8019f84:	f000 f8f9 	bl	801a17a <_ZN8touchgfx9Matrix3x3C1Ev>
 8019f88:	6833      	ldr	r3, [r6, #0]
 8019f8a:	4630      	mov	r0, r6
 8019f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019f8e:	4798      	blx	r3
 8019f90:	a805      	add	r0, sp, #20
 8019f92:	eef0 0a40 	vmov.f32	s1, s0
 8019f96:	f000 f8f4 	bl	801a182 <_ZN8touchgfx9Matrix3x35scaleEff>
 8019f9a:	6860      	ldr	r0, [r4, #4]
 8019f9c:	f1ba 0f03 	cmp.w	sl, #3
 8019fa0:	d83b      	bhi.n	801a01a <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 8019fa2:	e8df f00a 	tbb	[pc, sl]
 8019fa6:	1002      	.short	0x1002
 8019fa8:	9f71      	.short	0x9f71
 8019faa:	6803      	ldr	r3, [r0, #0]
 8019fac:	462a      	mov	r2, r5
 8019fae:	689b      	ldr	r3, [r3, #8]
 8019fb0:	4641      	mov	r1, r8
 8019fb2:	4798      	blx	r3
 8019fb4:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8019fb8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8019fbc:	ee07 7a90 	vmov	s15, r7
 8019fc0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8019fc4:	e026      	b.n	801a014 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8019fc6:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8019fca:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8019fce:	8869      	ldrh	r1, [r5, #2]
 8019fd0:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019fd4:	1a9b      	subs	r3, r3, r2
 8019fd6:	1a5b      	subs	r3, r3, r1
 8019fd8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019fdc:	882b      	ldrh	r3, [r5, #0]
 8019fde:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019fe2:	88ab      	ldrh	r3, [r5, #4]
 8019fe4:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019fe8:	6803      	ldr	r3, [r0, #0]
 8019fea:	aa03      	add	r2, sp, #12
 8019fec:	689b      	ldr	r3, [r3, #8]
 8019fee:	4641      	mov	r1, r8
 8019ff0:	4798      	blx	r3
 8019ff2:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801a154 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8019ff6:	a805      	add	r0, sp, #20
 8019ff8:	f000 f8e8 	bl	801a1cc <_ZN8touchgfx9Matrix3x36rotateEf>
 8019ffc:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801a000:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a002:	ee07 7a90 	vmov	s15, r7
 801a006:	1a9b      	subs	r3, r3, r2
 801a008:	ee00 3a10 	vmov	s0, r3
 801a00c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801a010:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a014:	a805      	add	r0, sp, #20
 801a016:	f000 f927 	bl	801a268 <_ZN8touchgfx9Matrix3x39translateEff>
 801a01a:	6860      	ldr	r0, [r4, #4]
 801a01c:	6803      	ldr	r3, [r0, #0]
 801a01e:	a905      	add	r1, sp, #20
 801a020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a022:	4798      	blx	r3
 801a024:	6860      	ldr	r0, [r4, #4]
 801a026:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801a028:	6803      	ldr	r3, [r0, #0]
 801a02a:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801a02e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a030:	4798      	blx	r3
 801a032:	6860      	ldr	r0, [r4, #4]
 801a034:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801a038:	6803      	ldr	r3, [r0, #0]
 801a03a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a03c:	4798      	blx	r3
 801a03e:	6860      	ldr	r0, [r4, #4]
 801a040:	6803      	ldr	r3, [r0, #0]
 801a042:	2101      	movs	r1, #1
 801a044:	68db      	ldr	r3, [r3, #12]
 801a046:	2500      	movs	r5, #0
 801a048:	4798      	blx	r3
 801a04a:	f8b9 7000 	ldrh.w	r7, [r9]
 801a04e:	61a5      	str	r5, [r4, #24]
 801a050:	f104 0310 	add.w	r3, r4, #16
 801a054:	f104 0208 	add.w	r2, r4, #8
 801a058:	f104 0114 	add.w	r1, r4, #20
 801a05c:	f104 000c 	add.w	r0, r4, #12
 801a060:	f109 0602 	add.w	r6, r9, #2
 801a064:	f7f2 f93c 	bl	800c2e0 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801a068:	42af      	cmp	r7, r5
 801a06a:	dd60      	ble.n	801a12e <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 801a06c:	8831      	ldrh	r1, [r6, #0]
 801a06e:	f101 030f 	add.w	r3, r1, #15
 801a072:	1cb2      	adds	r2, r6, #2
 801a074:	f3c3 1307 	ubfx	r3, r3, #4, #8
 801a078:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a07c:	4620      	mov	r0, r4
 801a07e:	f7ff fe29 	bl	8019cd4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801a082:	3501      	adds	r5, #1
 801a084:	4606      	mov	r6, r0
 801a086:	e7ef      	b.n	801a068 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 801a088:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801a08c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801a090:	8829      	ldrh	r1, [r5, #0]
 801a092:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a096:	1a9b      	subs	r3, r3, r2
 801a098:	1a5b      	subs	r3, r3, r1
 801a09a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a09e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a0a2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801a0a6:	886d      	ldrh	r5, [r5, #2]
 801a0a8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a0ac:	1a5b      	subs	r3, r3, r1
 801a0ae:	1b5b      	subs	r3, r3, r5
 801a0b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a0b4:	6803      	ldr	r3, [r0, #0]
 801a0b6:	aa03      	add	r2, sp, #12
 801a0b8:	689b      	ldr	r3, [r3, #8]
 801a0ba:	4641      	mov	r1, r8
 801a0bc:	4798      	blx	r3
 801a0be:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801a158 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801a0c2:	a805      	add	r0, sp, #20
 801a0c4:	f000 f882 	bl	801a1cc <_ZN8touchgfx9Matrix3x36rotateEf>
 801a0c8:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801a0cc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a0ce:	1a9b      	subs	r3, r3, r2
 801a0d0:	ee00 3a90 	vmov	s1, r3
 801a0d4:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801a0d8:	1bdb      	subs	r3, r3, r7
 801a0da:	ee00 3a10 	vmov	s0, r3
 801a0de:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a0e2:	e795      	b.n	801a010 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801a0e4:	886b      	ldrh	r3, [r5, #2]
 801a0e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a0ea:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801a0ee:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801a0f2:	8829      	ldrh	r1, [r5, #0]
 801a0f4:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a0f8:	1a9b      	subs	r3, r3, r2
 801a0fa:	1a5b      	subs	r3, r3, r1
 801a0fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a100:	88eb      	ldrh	r3, [r5, #6]
 801a102:	f8ad 3010 	strh.w	r3, [sp, #16]
 801a106:	6803      	ldr	r3, [r0, #0]
 801a108:	aa03      	add	r2, sp, #12
 801a10a:	689b      	ldr	r3, [r3, #8]
 801a10c:	4641      	mov	r1, r8
 801a10e:	4798      	blx	r3
 801a110:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 801a15c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801a114:	a805      	add	r0, sp, #20
 801a116:	f000 f859 	bl	801a1cc <_ZN8touchgfx9Matrix3x36rotateEf>
 801a11a:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801a11e:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801a122:	1bdb      	subs	r3, r3, r7
 801a124:	ee00 3a90 	vmov	s1, r3
 801a128:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a12c:	e748      	b.n	8019fc0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801a12e:	6860      	ldr	r0, [r4, #4]
 801a130:	8b22      	ldrh	r2, [r4, #24]
 801a132:	6803      	ldr	r3, [r0, #0]
 801a134:	2100      	movs	r1, #0
 801a136:	9101      	str	r1, [sp, #4]
 801a138:	8b61      	ldrh	r1, [r4, #26]
 801a13a:	9100      	str	r1, [sp, #0]
 801a13c:	6a1d      	ldr	r5, [r3, #32]
 801a13e:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801a142:	47a8      	blx	r5
 801a144:	6860      	ldr	r0, [r4, #4]
 801a146:	6803      	ldr	r3, [r0, #0]
 801a148:	69db      	ldr	r3, [r3, #28]
 801a14a:	4798      	blx	r3
 801a14c:	b00e      	add	sp, #56	@ 0x38
 801a14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a152:	bf00      	nop
 801a154:	42b40000 	.word	0x42b40000
 801a158:	43340000 	.word	0x43340000
 801a15c:	43870000 	.word	0x43870000

0801a160 <_ZN8touchgfx9Matrix3x35resetEv>:
 801a160:	2300      	movs	r3, #0
 801a162:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801a166:	6002      	str	r2, [r0, #0]
 801a168:	6043      	str	r3, [r0, #4]
 801a16a:	6083      	str	r3, [r0, #8]
 801a16c:	60c3      	str	r3, [r0, #12]
 801a16e:	6102      	str	r2, [r0, #16]
 801a170:	6143      	str	r3, [r0, #20]
 801a172:	6183      	str	r3, [r0, #24]
 801a174:	61c3      	str	r3, [r0, #28]
 801a176:	6202      	str	r2, [r0, #32]
 801a178:	4770      	bx	lr

0801a17a <_ZN8touchgfx9Matrix3x3C1Ev>:
 801a17a:	b508      	push	{r3, lr}
 801a17c:	f7ff fff0 	bl	801a160 <_ZN8touchgfx9Matrix3x35resetEv>
 801a180:	bd08      	pop	{r3, pc}

0801a182 <_ZN8touchgfx9Matrix3x35scaleEff>:
 801a182:	edd0 7a00 	vldr	s15, [r0]
 801a186:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a18a:	edc0 7a00 	vstr	s15, [r0]
 801a18e:	edd0 7a01 	vldr	s15, [r0, #4]
 801a192:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a196:	edc0 7a01 	vstr	s15, [r0, #4]
 801a19a:	edd0 7a02 	vldr	s15, [r0, #8]
 801a19e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a1a2:	edd0 7a03 	vldr	s15, [r0, #12]
 801a1a6:	ed80 0a02 	vstr	s0, [r0, #8]
 801a1aa:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801a1ae:	edc0 7a03 	vstr	s15, [r0, #12]
 801a1b2:	edd0 7a04 	vldr	s15, [r0, #16]
 801a1b6:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801a1ba:	edc0 7a04 	vstr	s15, [r0, #16]
 801a1be:	edd0 7a05 	vldr	s15, [r0, #20]
 801a1c2:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801a1c6:	edc0 0a05 	vstr	s1, [r0, #20]
 801a1ca:	4770      	bx	lr

0801a1cc <_ZN8touchgfx9Matrix3x36rotateEf>:
 801a1cc:	b510      	push	{r4, lr}
 801a1ce:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801a260 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801a1d2:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a1d6:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801a264 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801a1da:	ed2d 8b02 	vpush	{d8}
 801a1de:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801a1e2:	4604      	mov	r4, r0
 801a1e4:	eeb0 0a68 	vmov.f32	s0, s17
 801a1e8:	f010 f9d4 	bl	802a594 <cosf>
 801a1ec:	eeb0 8a40 	vmov.f32	s16, s0
 801a1f0:	eeb0 0a68 	vmov.f32	s0, s17
 801a1f4:	f010 fa12 	bl	802a61c <sinf>
 801a1f8:	edd4 6a03 	vldr	s13, [r4, #12]
 801a1fc:	edd4 4a00 	vldr	s9, [r4]
 801a200:	ed94 7a04 	vldr	s14, [r4, #16]
 801a204:	ed94 5a01 	vldr	s10, [r4, #4]
 801a208:	edd4 5a02 	vldr	s11, [r4, #8]
 801a20c:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801a210:	ee66 6a88 	vmul.f32	s13, s13, s16
 801a214:	eee8 7a24 	vfma.f32	s15, s16, s9
 801a218:	eee0 6a24 	vfma.f32	s13, s0, s9
 801a21c:	edc4 7a00 	vstr	s15, [r4]
 801a220:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801a224:	ee27 7a08 	vmul.f32	s14, s14, s16
 801a228:	eee8 7a05 	vfma.f32	s15, s16, s10
 801a22c:	eea0 7a05 	vfma.f32	s14, s0, s10
 801a230:	edc4 7a01 	vstr	s15, [r4, #4]
 801a234:	edd4 7a05 	vldr	s15, [r4, #20]
 801a238:	edc4 6a03 	vstr	s13, [r4, #12]
 801a23c:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801a240:	ee67 7a88 	vmul.f32	s15, s15, s16
 801a244:	eea8 6a25 	vfma.f32	s12, s16, s11
 801a248:	ecbd 8b02 	vpop	{d8}
 801a24c:	eee0 7a25 	vfma.f32	s15, s0, s11
 801a250:	ed84 6a02 	vstr	s12, [r4, #8]
 801a254:	ed84 7a04 	vstr	s14, [r4, #16]
 801a258:	edc4 7a05 	vstr	s15, [r4, #20]
 801a25c:	bd10      	pop	{r4, pc}
 801a25e:	bf00      	nop
 801a260:	40490fdb 	.word	0x40490fdb
 801a264:	43340000 	.word	0x43340000

0801a268 <_ZN8touchgfx9Matrix3x39translateEff>:
 801a268:	ed90 6a06 	vldr	s12, [r0, #24]
 801a26c:	edd0 7a00 	vldr	s15, [r0]
 801a270:	edd0 6a07 	vldr	s13, [r0, #28]
 801a274:	ed90 7a08 	vldr	s14, [r0, #32]
 801a278:	eee6 7a00 	vfma.f32	s15, s12, s0
 801a27c:	edc0 7a00 	vstr	s15, [r0]
 801a280:	edd0 7a01 	vldr	s15, [r0, #4]
 801a284:	eee6 7a80 	vfma.f32	s15, s13, s0
 801a288:	edc0 7a01 	vstr	s15, [r0, #4]
 801a28c:	edd0 7a02 	vldr	s15, [r0, #8]
 801a290:	eee7 7a00 	vfma.f32	s15, s14, s0
 801a294:	edc0 7a02 	vstr	s15, [r0, #8]
 801a298:	edd0 7a03 	vldr	s15, [r0, #12]
 801a29c:	eee6 7a20 	vfma.f32	s15, s12, s1
 801a2a0:	edc0 7a03 	vstr	s15, [r0, #12]
 801a2a4:	edd0 7a04 	vldr	s15, [r0, #16]
 801a2a8:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801a2ac:	edc0 7a04 	vstr	s15, [r0, #16]
 801a2b0:	edd0 7a05 	vldr	s15, [r0, #20]
 801a2b4:	eee7 7a20 	vfma.f32	s15, s14, s1
 801a2b8:	edc0 7a05 	vstr	s15, [r0, #20]
 801a2bc:	4770      	bx	lr

0801a2be <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801a2be:	edd0 6a01 	vldr	s13, [r0, #4]
 801a2c2:	edd0 7a04 	vldr	s15, [r0, #16]
 801a2c6:	ed90 7a03 	vldr	s14, [r0, #12]
 801a2ca:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801a2ce:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801a2d2:	edd0 6a00 	vldr	s13, [r0]
 801a2d6:	eee7 7a00 	vfma.f32	s15, s14, s0
 801a2da:	b084      	sub	sp, #16
 801a2dc:	eee6 0a80 	vfma.f32	s1, s13, s0
 801a2e0:	ed90 7a05 	vldr	s14, [r0, #20]
 801a2e4:	ed90 0a02 	vldr	s0, [r0, #8]
 801a2e8:	ee30 0a80 	vadd.f32	s0, s1, s0
 801a2ec:	ee77 0a87 	vadd.f32	s1, s15, s14
 801a2f0:	b004      	add	sp, #16
 801a2f2:	4770      	bx	lr

0801a2f4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801a2f4:	b530      	push	{r4, r5, lr}
 801a2f6:	8083      	strh	r3, [r0, #4]
 801a2f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801a2fc:	80c3      	strh	r3, [r0, #6]
 801a2fe:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801a302:	7203      	strb	r3, [r0, #8]
 801a304:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a308:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801a30c:	7243      	strb	r3, [r0, #9]
 801a30e:	7a83      	ldrb	r3, [r0, #10]
 801a310:	6141      	str	r1, [r0, #20]
 801a312:	f365 0306 	bfi	r3, r5, #0, #7
 801a316:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801a31a:	8302      	strh	r2, [r0, #24]
 801a31c:	f365 13c7 	bfi	r3, r5, #7, #1
 801a320:	7283      	strb	r3, [r0, #10]
 801a322:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801a326:	72c3      	strb	r3, [r0, #11]
 801a328:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801a32c:	7303      	strb	r3, [r0, #12]
 801a32e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801a332:	81c3      	strh	r3, [r0, #14]
 801a334:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801a338:	8203      	strh	r3, [r0, #16]
 801a33a:	4b01      	ldr	r3, [pc, #4]	@ (801a340 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801a33c:	6003      	str	r3, [r0, #0]
 801a33e:	bd30      	pop	{r4, r5, pc}
 801a340:	0802ea58 	.word	0x0802ea58

0801a344 <_ZNK8touchgfx9ConstFont4findEt>:
 801a344:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a346:	6944      	ldr	r4, [r0, #20]
 801a348:	b3bc      	cbz	r4, 801a3ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a34a:	88a3      	ldrh	r3, [r4, #4]
 801a34c:	8b02      	ldrh	r2, [r0, #24]
 801a34e:	1acb      	subs	r3, r1, r3
 801a350:	f102 32ff 	add.w	r2, r2, #4294967295
 801a354:	d431      	bmi.n	801a3ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a356:	4293      	cmp	r3, r2
 801a358:	dd0c      	ble.n	801a374 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801a35a:	230e      	movs	r3, #14
 801a35c:	fb03 4302 	mla	r3, r3, r2, r4
 801a360:	889b      	ldrh	r3, [r3, #4]
 801a362:	1a5b      	subs	r3, r3, r1
 801a364:	1ad3      	subs	r3, r2, r3
 801a366:	429a      	cmp	r2, r3
 801a368:	db27      	blt.n	801a3ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	bfbc      	itt	lt
 801a36e:	2302      	movlt	r3, #2
 801a370:	fb92 f3f3 	sdivlt	r3, r2, r3
 801a374:	2500      	movs	r5, #0
 801a376:	260e      	movs	r6, #14
 801a378:	4295      	cmp	r5, r2
 801a37a:	dc1e      	bgt.n	801a3ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a37c:	fb06 4003 	mla	r0, r6, r3, r4
 801a380:	8887      	ldrh	r7, [r0, #4]
 801a382:	42b9      	cmp	r1, r7
 801a384:	d01a      	beq.n	801a3bc <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801a386:	d20d      	bcs.n	801a3a4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801a388:	1e5a      	subs	r2, r3, #1
 801a38a:	4295      	cmp	r5, r2
 801a38c:	dc15      	bgt.n	801a3ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a38e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801a392:	1a5b      	subs	r3, r3, r1
 801a394:	1ad3      	subs	r3, r2, r3
 801a396:	429a      	cmp	r2, r3
 801a398:	db0f      	blt.n	801a3ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a39a:	429d      	cmp	r5, r3
 801a39c:	ddec      	ble.n	801a378 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a39e:	1953      	adds	r3, r2, r5
 801a3a0:	105b      	asrs	r3, r3, #1
 801a3a2:	e7e9      	b.n	801a378 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a3a4:	1c5d      	adds	r5, r3, #1
 801a3a6:	42aa      	cmp	r2, r5
 801a3a8:	db07      	blt.n	801a3ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a3aa:	8a43      	ldrh	r3, [r0, #18]
 801a3ac:	1acb      	subs	r3, r1, r3
 801a3ae:	442b      	add	r3, r5
 801a3b0:	429d      	cmp	r5, r3
 801a3b2:	dc02      	bgt.n	801a3ba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a3b4:	429a      	cmp	r2, r3
 801a3b6:	dadf      	bge.n	801a378 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a3b8:	e7f1      	b.n	801a39e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801a3ba:	2000      	movs	r0, #0
 801a3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a3be <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801a3be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3c0:	4604      	mov	r4, r0
 801a3c2:	4617      	mov	r7, r2
 801a3c4:	461e      	mov	r6, r3
 801a3c6:	b911      	cbnz	r1, 801a3ce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801a3c8:	2500      	movs	r5, #0
 801a3ca:	4628      	mov	r0, r5
 801a3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3ce:	290a      	cmp	r1, #10
 801a3d0:	d0fa      	beq.n	801a3c8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a3d2:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801a3d6:	4291      	cmp	r1, r2
 801a3d8:	d0f6      	beq.n	801a3c8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a3da:	f242 020b 	movw	r2, #8203	@ 0x200b
 801a3de:	4291      	cmp	r1, r2
 801a3e0:	d0f2      	beq.n	801a3c8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a3e2:	f7ff ffaf 	bl	801a344 <_ZNK8touchgfx9ConstFont4findEt>
 801a3e6:	4605      	mov	r5, r0
 801a3e8:	b950      	cbnz	r0, 801a400 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801a3ea:	6823      	ldr	r3, [r4, #0]
 801a3ec:	4620      	mov	r0, r4
 801a3ee:	691b      	ldr	r3, [r3, #16]
 801a3f0:	4798      	blx	r3
 801a3f2:	4601      	mov	r1, r0
 801a3f4:	4620      	mov	r0, r4
 801a3f6:	f7ff ffa5 	bl	801a344 <_ZNK8touchgfx9ConstFont4findEt>
 801a3fa:	4605      	mov	r5, r0
 801a3fc:	2800      	cmp	r0, #0
 801a3fe:	d0e3      	beq.n	801a3c8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a400:	6823      	ldr	r3, [r4, #0]
 801a402:	4629      	mov	r1, r5
 801a404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a406:	4620      	mov	r0, r4
 801a408:	4798      	blx	r3
 801a40a:	6038      	str	r0, [r7, #0]
 801a40c:	6823      	ldr	r3, [r4, #0]
 801a40e:	4620      	mov	r0, r4
 801a410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a412:	4798      	blx	r3
 801a414:	7030      	strb	r0, [r6, #0]
 801a416:	e7d8      	b.n	801a3ca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801a418 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801a418:	2000      	movs	r0, #0
 801a41a:	4770      	bx	lr

0801a41c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801a41c:	2001      	movs	r0, #1
 801a41e:	4770      	bx	lr

0801a420 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801a420:	2002      	movs	r0, #2
 801a422:	4770      	bx	lr

0801a424 <_ZN8touchgfx12GestureEventD1Ev>:
 801a424:	4770      	bx	lr

0801a426 <_ZN8touchgfx9DragEventD1Ev>:
 801a426:	4770      	bx	lr

0801a428 <_ZN8touchgfx10ClickEventD1Ev>:
 801a428:	4770      	bx	lr

0801a42a <_ZN8touchgfx10ClickEventD0Ev>:
 801a42a:	b510      	push	{r4, lr}
 801a42c:	210c      	movs	r1, #12
 801a42e:	4604      	mov	r4, r0
 801a430:	f010 f867 	bl	802a502 <_ZdlPvj>
 801a434:	4620      	mov	r0, r4
 801a436:	bd10      	pop	{r4, pc}

0801a438 <_ZN8touchgfx9DragEventD0Ev>:
 801a438:	b510      	push	{r4, lr}
 801a43a:	2110      	movs	r1, #16
 801a43c:	4604      	mov	r4, r0
 801a43e:	f010 f860 	bl	802a502 <_ZdlPvj>
 801a442:	4620      	mov	r0, r4
 801a444:	bd10      	pop	{r4, pc}

0801a446 <_ZN8touchgfx12GestureEventD0Ev>:
 801a446:	b510      	push	{r4, lr}
 801a448:	210c      	movs	r1, #12
 801a44a:	4604      	mov	r4, r0
 801a44c:	f010 f859 	bl	802a502 <_ZdlPvj>
 801a450:	4620      	mov	r0, r4
 801a452:	bd10      	pop	{r4, pc}

0801a454 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801a454:	b530      	push	{r4, r5, lr}
 801a456:	460d      	mov	r5, r1
 801a458:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801a45a:	b087      	sub	sp, #28
 801a45c:	4604      	mov	r4, r0
 801a45e:	b301      	cbz	r1, 801a4a2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801a460:	a801      	add	r0, sp, #4
 801a462:	f7ff fc19 	bl	8019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a466:	892a      	ldrh	r2, [r5, #8]
 801a468:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a46c:	7928      	ldrb	r0, [r5, #4]
 801a46e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a472:	f88d 0010 	strb.w	r0, [sp, #16]
 801a476:	1ad2      	subs	r2, r2, r3
 801a478:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801a47a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801a47c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a480:	441a      	add	r2, r3
 801a482:	896b      	ldrh	r3, [r5, #10]
 801a484:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801a488:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a48c:	1b5b      	subs	r3, r3, r5
 801a48e:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801a490:	442b      	add	r3, r5
 801a492:	4d05      	ldr	r5, [pc, #20]	@ (801a4a8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a494:	9503      	str	r5, [sp, #12]
 801a496:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a49a:	6803      	ldr	r3, [r0, #0]
 801a49c:	a903      	add	r1, sp, #12
 801a49e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a4a0:	4798      	blx	r3
 801a4a2:	b007      	add	sp, #28
 801a4a4:	bd30      	pop	{r4, r5, pc}
 801a4a6:	bf00      	nop
 801a4a8:	0802eae8 	.word	0x0802eae8

0801a4ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a4b2:	b08a      	sub	sp, #40	@ 0x28
 801a4b4:	4604      	mov	r4, r0
 801a4b6:	460d      	mov	r5, r1
 801a4b8:	b113      	cbz	r3, 801a4c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801a4ba:	790b      	ldrb	r3, [r1, #4]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d044      	beq.n	801a54a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a4c0:	f104 0804 	add.w	r8, r4, #4
 801a4c4:	4641      	mov	r1, r8
 801a4c6:	a803      	add	r0, sp, #12
 801a4c8:	f7ff fbe6 	bl	8019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a4cc:	792b      	ldrb	r3, [r5, #4]
 801a4ce:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801a4d2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801a4d6:	b983      	cbnz	r3, 801a4fa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801a4d8:	892a      	ldrh	r2, [r5, #8]
 801a4da:	88e9      	ldrh	r1, [r5, #6]
 801a4dc:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801a4e0:	1b92      	subs	r2, r2, r6
 801a4e2:	1bc9      	subs	r1, r1, r7
 801a4e4:	9301      	str	r3, [sp, #4]
 801a4e6:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801a4ea:	9300      	str	r3, [sp, #0]
 801a4ec:	b212      	sxth	r2, r2
 801a4ee:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801a4f2:	b209      	sxth	r1, r1
 801a4f4:	4640      	mov	r0, r8
 801a4f6:	f7f8 fbe7 	bl	8012cc8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801a4fa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a4fc:	b329      	cbz	r1, 801a54a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a4fe:	a805      	add	r0, sp, #20
 801a500:	f7ff fbca 	bl	8019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a504:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801a508:	792b      	ldrb	r3, [r5, #4]
 801a50a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801a50c:	f88d 3020 	strb.w	r3, [sp, #32]
 801a510:	1abf      	subs	r7, r7, r2
 801a512:	88ea      	ldrh	r2, [r5, #6]
 801a514:	4417      	add	r7, r2
 801a516:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801a518:	4417      	add	r7, r2
 801a51a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a51e:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801a522:	1ab6      	subs	r6, r6, r2
 801a524:	892a      	ldrh	r2, [r5, #8]
 801a526:	4416      	add	r6, r2
 801a528:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801a52a:	4416      	add	r6, r2
 801a52c:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801a530:	4a07      	ldr	r2, [pc, #28]	@ (801a550 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801a532:	9207      	str	r2, [sp, #28]
 801a534:	2600      	movs	r6, #0
 801a536:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801a53a:	6803      	ldr	r3, [r0, #0]
 801a53c:	a907      	add	r1, sp, #28
 801a53e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a540:	4798      	blx	r3
 801a542:	792b      	ldrb	r3, [r5, #4]
 801a544:	b10b      	cbz	r3, 801a54a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a546:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801a54a:	b00a      	add	sp, #40	@ 0x28
 801a54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a550:	0802eac0 	.word	0x0802eac0

0801a554 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a558:	460c      	mov	r4, r1
 801a55a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801a55c:	b088      	sub	sp, #32
 801a55e:	4605      	mov	r5, r0
 801a560:	2900      	cmp	r1, #0
 801a562:	d06d      	beq.n	801a640 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801a564:	4668      	mov	r0, sp
 801a566:	f7ff fb97 	bl	8019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a56a:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801a56c:	88e3      	ldrh	r3, [r4, #6]
 801a56e:	f9bd 8000 	ldrsh.w	r8, [sp]
 801a572:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801a576:	440b      	add	r3, r1
 801a578:	b21b      	sxth	r3, r3
 801a57a:	4543      	cmp	r3, r8
 801a57c:	db31      	blt.n	801a5e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a57e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801a582:	44c4      	add	ip, r8
 801a584:	fa0f fc8c 	sxth.w	ip, ip
 801a588:	4563      	cmp	r3, ip
 801a58a:	da2a      	bge.n	801a5e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a58c:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801a58e:	8926      	ldrh	r6, [r4, #8]
 801a590:	4416      	add	r6, r2
 801a592:	b236      	sxth	r6, r6
 801a594:	42be      	cmp	r6, r7
 801a596:	db24      	blt.n	801a5e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a598:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a59c:	4438      	add	r0, r7
 801a59e:	b200      	sxth	r0, r0
 801a5a0:	4286      	cmp	r6, r0
 801a5a2:	da1e      	bge.n	801a5e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a5a4:	8963      	ldrh	r3, [r4, #10]
 801a5a6:	4419      	add	r1, r3
 801a5a8:	b209      	sxth	r1, r1
 801a5aa:	4541      	cmp	r1, r8
 801a5ac:	db08      	blt.n	801a5c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a5ae:	4561      	cmp	r1, ip
 801a5b0:	da06      	bge.n	801a5c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a5b2:	89a3      	ldrh	r3, [r4, #12]
 801a5b4:	441a      	add	r2, r3
 801a5b6:	b212      	sxth	r2, r2
 801a5b8:	42ba      	cmp	r2, r7
 801a5ba:	db01      	blt.n	801a5c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a5bc:	4282      	cmp	r2, r0
 801a5be:	db10      	blt.n	801a5e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a5c0:	4b21      	ldr	r3, [pc, #132]	@ (801a648 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801a5c2:	9304      	str	r3, [sp, #16]
 801a5c4:	2302      	movs	r3, #2
 801a5c6:	f88d 3014 	strb.w	r3, [sp, #20]
 801a5ca:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801a5cc:	2300      	movs	r3, #0
 801a5ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a5d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a5d6:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a5da:	6803      	ldr	r3, [r0, #0]
 801a5dc:	a904      	add	r1, sp, #16
 801a5de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a5e0:	4798      	blx	r3
 801a5e2:	1d29      	adds	r1, r5, #4
 801a5e4:	a802      	add	r0, sp, #8
 801a5e6:	f7ff fb57 	bl	8019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a5ea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a5ee:	88e0      	ldrh	r0, [r4, #6]
 801a5f0:	7921      	ldrb	r1, [r4, #4]
 801a5f2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801a5f6:	8922      	ldrh	r2, [r4, #8]
 801a5f8:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801a5fa:	f88d 1014 	strb.w	r1, [sp, #20]
 801a5fe:	eba3 0808 	sub.w	r8, r3, r8
 801a602:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a606:	1bdf      	subs	r7, r3, r7
 801a608:	b2bb      	uxth	r3, r7
 801a60a:	fa1f f888 	uxth.w	r8, r8
 801a60e:	8967      	ldrh	r7, [r4, #10]
 801a610:	89a4      	ldrh	r4, [r4, #12]
 801a612:	4440      	add	r0, r8
 801a614:	4460      	add	r0, ip
 801a616:	441a      	add	r2, r3
 801a618:	44b8      	add	r8, r7
 801a61a:	4423      	add	r3, r4
 801a61c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a620:	4433      	add	r3, r6
 801a622:	4432      	add	r2, r6
 801a624:	44e0      	add	r8, ip
 801a626:	4c09      	ldr	r4, [pc, #36]	@ (801a64c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801a628:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801a62a:	9404      	str	r4, [sp, #16]
 801a62c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a630:	f8ad 801a 	strh.w	r8, [sp, #26]
 801a634:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a638:	6803      	ldr	r3, [r0, #0]
 801a63a:	a904      	add	r1, sp, #16
 801a63c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a63e:	4798      	blx	r3
 801a640:	b008      	add	sp, #32
 801a642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a646:	bf00      	nop
 801a648:	0802eac0 	.word	0x0802eac0
 801a64c:	0802ead4 	.word	0x0802ead4

0801a650 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a652:	4604      	mov	r4, r0
 801a654:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a658:	3201      	adds	r2, #1
 801a65a:	d112      	bne.n	801a682 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a65c:	6803      	ldr	r3, [r0, #0]
 801a65e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a662:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a666:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a66a:	2500      	movs	r5, #0
 801a66c:	9500      	str	r5, [sp, #0]
 801a66e:	466d      	mov	r5, sp
 801a670:	4629      	mov	r1, r5
 801a672:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a678:	4798      	blx	r3
 801a67a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a67e:	e884 0003 	stmia.w	r4, {r0, r1}
 801a682:	4620      	mov	r0, r4
 801a684:	b003      	add	sp, #12
 801a686:	bd30      	pop	{r4, r5, pc}

0801a688 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a688:	b513      	push	{r0, r1, r4, lr}
 801a68a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a68e:	3301      	adds	r3, #1
 801a690:	4604      	mov	r4, r0
 801a692:	d109      	bne.n	801a6a8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a694:	4601      	mov	r1, r0
 801a696:	4668      	mov	r0, sp
 801a698:	f7ff fafe 	bl	8019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a69c:	f8bd 3000 	ldrh.w	r3, [sp]
 801a6a0:	8423      	strh	r3, [r4, #32]
 801a6a2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a6a6:	8463      	strh	r3, [r4, #34]	@ 0x22
 801a6a8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a6ac:	b002      	add	sp, #8
 801a6ae:	bd10      	pop	{r4, pc}

0801a6b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a6b0:	b513      	push	{r0, r1, r4, lr}
 801a6b2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801a6b6:	3301      	adds	r3, #1
 801a6b8:	4604      	mov	r4, r0
 801a6ba:	d109      	bne.n	801a6d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a6bc:	4601      	mov	r1, r0
 801a6be:	4668      	mov	r0, sp
 801a6c0:	f7ff faea 	bl	8019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a6c4:	f8bd 3000 	ldrh.w	r3, [sp]
 801a6c8:	8423      	strh	r3, [r4, #32]
 801a6ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a6ce:	8463      	strh	r3, [r4, #34]	@ 0x22
 801a6d0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801a6d4:	b002      	add	sp, #8
 801a6d6:	bd10      	pop	{r4, pc}

0801a6d8 <_ZN8touchgfx6ScreenC1Ev>:
 801a6d8:	b570      	push	{r4, r5, r6, lr}
 801a6da:	4605      	mov	r5, r0
 801a6dc:	4b16      	ldr	r3, [pc, #88]	@ (801a738 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801a6de:	f845 3b04 	str.w	r3, [r5], #4
 801a6e2:	2300      	movs	r3, #0
 801a6e4:	8103      	strh	r3, [r0, #8]
 801a6e6:	8143      	strh	r3, [r0, #10]
 801a6e8:	8183      	strh	r3, [r0, #12]
 801a6ea:	81c3      	strh	r3, [r0, #14]
 801a6ec:	8203      	strh	r3, [r0, #16]
 801a6ee:	8243      	strh	r3, [r0, #18]
 801a6f0:	8283      	strh	r3, [r0, #20]
 801a6f2:	82c3      	strh	r3, [r0, #22]
 801a6f4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a6f8:	6203      	str	r3, [r0, #32]
 801a6fa:	8483      	strh	r3, [r0, #36]	@ 0x24
 801a6fc:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801a6fe:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801a702:	4a0e      	ldr	r2, [pc, #56]	@ (801a73c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a704:	6343      	str	r3, [r0, #52]	@ 0x34
 801a706:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801a70a:	4b0d      	ldr	r3, [pc, #52]	@ (801a740 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a70c:	6042      	str	r2, [r0, #4]
 801a70e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a712:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801a714:	4a0b      	ldr	r2, [pc, #44]	@ (801a744 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a716:	4604      	mov	r4, r0
 801a718:	2101      	movs	r1, #1
 801a71a:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801a71e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801a722:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a726:	4628      	mov	r0, r5
 801a728:	4798      	blx	r3
 801a72a:	6863      	ldr	r3, [r4, #4]
 801a72c:	4628      	mov	r0, r5
 801a72e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a730:	4631      	mov	r1, r6
 801a732:	4798      	blx	r3
 801a734:	4620      	mov	r0, r4
 801a736:	bd70      	pop	{r4, r5, r6, pc}
 801a738:	0802eafc 	.word	0x0802eafc
 801a73c:	0802e2b4 	.word	0x0802e2b4
 801a740:	200126d6 	.word	0x200126d6
 801a744:	200126d4 	.word	0x200126d4

0801a748 <_ZN8touchgfx6Screen4drawEv>:
 801a748:	b507      	push	{r0, r1, r2, lr}
 801a74a:	4b09      	ldr	r3, [pc, #36]	@ (801a770 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a74c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a750:	4b08      	ldr	r3, [pc, #32]	@ (801a774 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a752:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a756:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a75a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a75e:	6803      	ldr	r3, [r0, #0]
 801a760:	2100      	movs	r1, #0
 801a762:	9100      	str	r1, [sp, #0]
 801a764:	689b      	ldr	r3, [r3, #8]
 801a766:	4669      	mov	r1, sp
 801a768:	4798      	blx	r3
 801a76a:	b003      	add	sp, #12
 801a76c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a770:	200126d4 	.word	0x200126d4
 801a774:	200126d6 	.word	0x200126d6

0801a778 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a77c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a780:	2b00      	cmp	r3, #0
 801a782:	b089      	sub	sp, #36	@ 0x24
 801a784:	4680      	mov	r8, r0
 801a786:	460c      	mov	r4, r1
 801a788:	4615      	mov	r5, r2
 801a78a:	dd0e      	ble.n	801a7aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a78c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a790:	2b00      	cmp	r3, #0
 801a792:	dd0a      	ble.n	801a7aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a794:	4628      	mov	r0, r5
 801a796:	f7ff ff5b 	bl	801a650 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a79a:	4621      	mov	r1, r4
 801a79c:	f7fe f88c 	bl	80188b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a7a0:	69eb      	ldr	r3, [r5, #28]
 801a7a2:	b928      	cbnz	r0, 801a7b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a7a4:	461d      	mov	r5, r3
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d1f4      	bne.n	801a794 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a7aa:	b009      	add	sp, #36	@ 0x24
 801a7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7b0:	ae04      	add	r6, sp, #16
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	f000 80b5 	beq.w	801a922 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a7b8:	682b      	ldr	r3, [r5, #0]
 801a7ba:	4629      	mov	r1, r5
 801a7bc:	68db      	ldr	r3, [r3, #12]
 801a7be:	a802      	add	r0, sp, #8
 801a7c0:	4798      	blx	r3
 801a7c2:	4628      	mov	r0, r5
 801a7c4:	f7ff ff60 	bl	801a688 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a7c8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a7cc:	4407      	add	r7, r0
 801a7ce:	4628      	mov	r0, r5
 801a7d0:	f7ff ff6e 	bl	801a6b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a7d4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a7d8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a7dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a7e0:	4418      	add	r0, r3
 801a7e2:	4621      	mov	r1, r4
 801a7e4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a7e8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a7ec:	b23f      	sxth	r7, r7
 801a7ee:	4630      	mov	r0, r6
 801a7f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a7f4:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a7f8:	f7f8 fb4a 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 801a7fc:	4628      	mov	r0, r5
 801a7fe:	f7ff ff27 	bl	801a650 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a802:	4602      	mov	r2, r0
 801a804:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a808:	ab06      	add	r3, sp, #24
 801a80a:	e883 0003 	stmia.w	r3, {r0, r1}
 801a80e:	4611      	mov	r1, r2
 801a810:	4618      	mov	r0, r3
 801a812:	f7f8 fb3d 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 801a816:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a81a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a81e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a822:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a826:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a82a:	4299      	cmp	r1, r3
 801a82c:	d10b      	bne.n	801a846 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a82e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a832:	4552      	cmp	r2, sl
 801a834:	d107      	bne.n	801a846 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a836:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a83a:	455a      	cmp	r2, fp
 801a83c:	d103      	bne.n	801a846 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a83e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a842:	454a      	cmp	r2, r9
 801a844:	d06d      	beq.n	801a922 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a846:	f1bb 0f00 	cmp.w	fp, #0
 801a84a:	dd65      	ble.n	801a918 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a84c:	f1b9 0f00 	cmp.w	r9, #0
 801a850:	dd62      	ble.n	801a918 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a852:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a856:	fa1f f08a 	uxth.w	r0, sl
 801a85a:	4552      	cmp	r2, sl
 801a85c:	9000      	str	r0, [sp, #0]
 801a85e:	da12      	bge.n	801a886 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801a860:	9301      	str	r3, [sp, #4]
 801a862:	9b00      	ldr	r3, [sp, #0]
 801a864:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a868:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a86c:	1a9a      	subs	r2, r3, r2
 801a86e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a872:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a876:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a87a:	69ea      	ldr	r2, [r5, #28]
 801a87c:	4631      	mov	r1, r6
 801a87e:	4640      	mov	r0, r8
 801a880:	f7ff ff7a 	bl	801a778 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a884:	9b01      	ldr	r3, [sp, #4]
 801a886:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a88a:	429a      	cmp	r2, r3
 801a88c:	b29f      	uxth	r7, r3
 801a88e:	da0d      	bge.n	801a8ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801a890:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a894:	1aba      	subs	r2, r7, r2
 801a896:	f8ad a012 	strh.w	sl, [sp, #18]
 801a89a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a89e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a8a2:	69ea      	ldr	r2, [r5, #28]
 801a8a4:	4631      	mov	r1, r6
 801a8a6:	4640      	mov	r0, r8
 801a8a8:	f7ff ff66 	bl	801a778 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a8ac:	8822      	ldrh	r2, [r4, #0]
 801a8ae:	88a3      	ldrh	r3, [r4, #4]
 801a8b0:	445f      	add	r7, fp
 801a8b2:	4413      	add	r3, r2
 801a8b4:	b29b      	uxth	r3, r3
 801a8b6:	b2bf      	uxth	r7, r7
 801a8b8:	b23a      	sxth	r2, r7
 801a8ba:	b219      	sxth	r1, r3
 801a8bc:	4291      	cmp	r1, r2
 801a8be:	dd0d      	ble.n	801a8dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801a8c0:	1bdb      	subs	r3, r3, r7
 801a8c2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a8c6:	f8ad a012 	strh.w	sl, [sp, #18]
 801a8ca:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a8ce:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a8d2:	69ea      	ldr	r2, [r5, #28]
 801a8d4:	4631      	mov	r1, r6
 801a8d6:	4640      	mov	r0, r8
 801a8d8:	f7ff ff4e 	bl	801a778 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a8dc:	88e2      	ldrh	r2, [r4, #6]
 801a8de:	8863      	ldrh	r3, [r4, #2]
 801a8e0:	4413      	add	r3, r2
 801a8e2:	9a00      	ldr	r2, [sp, #0]
 801a8e4:	444a      	add	r2, r9
 801a8e6:	b29b      	uxth	r3, r3
 801a8e8:	fa1f f982 	uxth.w	r9, r2
 801a8ec:	fa0f f289 	sxth.w	r2, r9
 801a8f0:	b219      	sxth	r1, r3
 801a8f2:	428a      	cmp	r2, r1
 801a8f4:	da15      	bge.n	801a922 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a8f6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a8fa:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a8fe:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a902:	eba3 0309 	sub.w	r3, r3, r9
 801a906:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a90a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a90e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a912:	69ea      	ldr	r2, [r5, #28]
 801a914:	4631      	mov	r1, r6
 801a916:	e001      	b.n	801a91c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801a918:	69ea      	ldr	r2, [r5, #28]
 801a91a:	4621      	mov	r1, r4
 801a91c:	4640      	mov	r0, r8
 801a91e:	f7ff ff2b 	bl	801a778 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a922:	4628      	mov	r0, r5
 801a924:	f7ff fe94 	bl	801a650 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a928:	6861      	ldr	r1, [r4, #4]
 801a92a:	4602      	mov	r2, r0
 801a92c:	6820      	ldr	r0, [r4, #0]
 801a92e:	4633      	mov	r3, r6
 801a930:	c303      	stmia	r3!, {r0, r1}
 801a932:	4611      	mov	r1, r2
 801a934:	4630      	mov	r0, r6
 801a936:	f7f8 faab 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 801a93a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	f77f af33 	ble.w	801a7aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a944:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a948:	2b00      	cmp	r3, #0
 801a94a:	f77f af2e 	ble.w	801a7aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a94e:	4628      	mov	r0, r5
 801a950:	f7ff fe9a 	bl	801a688 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a954:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a958:	1a18      	subs	r0, r3, r0
 801a95a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a95e:	4628      	mov	r0, r5
 801a960:	f7ff fea6 	bl	801a6b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a964:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a968:	1a18      	subs	r0, r3, r0
 801a96a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a96e:	682b      	ldr	r3, [r5, #0]
 801a970:	4631      	mov	r1, r6
 801a972:	689b      	ldr	r3, [r3, #8]
 801a974:	4628      	mov	r0, r5
 801a976:	4798      	blx	r3
 801a978:	e717      	b.n	801a7aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801a97a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a97a:	b570      	push	{r4, r5, r6, lr}
 801a97c:	460c      	mov	r4, r1
 801a97e:	b086      	sub	sp, #24
 801a980:	1d06      	adds	r6, r0, #4
 801a982:	2300      	movs	r3, #0
 801a984:	4631      	mov	r1, r6
 801a986:	4605      	mov	r5, r0
 801a988:	a802      	add	r0, sp, #8
 801a98a:	9301      	str	r3, [sp, #4]
 801a98c:	f7ff f984 	bl	8019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a990:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a994:	8822      	ldrh	r2, [r4, #0]
 801a996:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801a99a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a99e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a9a2:	1ad2      	subs	r2, r2, r3
 801a9a4:	8863      	ldrh	r3, [r4, #2]
 801a9a6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a9aa:	1a5b      	subs	r3, r3, r1
 801a9ac:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a9b0:	f8ad 1016 	strh.w	r1, [sp, #22]
 801a9b4:	aa01      	add	r2, sp, #4
 801a9b6:	a904      	add	r1, sp, #16
 801a9b8:	4630      	mov	r0, r6
 801a9ba:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a9be:	f7f8 fb3f 	bl	8013040 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a9c2:	9a01      	ldr	r2, [sp, #4]
 801a9c4:	b11a      	cbz	r2, 801a9ce <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801a9c6:	4621      	mov	r1, r4
 801a9c8:	4628      	mov	r0, r5
 801a9ca:	f7ff fed5 	bl	801a778 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a9ce:	b006      	add	sp, #24
 801a9d0:	bd70      	pop	{r4, r5, r6, pc}

0801a9d2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a9d2:	b530      	push	{r4, r5, lr}
 801a9d4:	4602      	mov	r2, r0
 801a9d6:	4604      	mov	r4, r0
 801a9d8:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a9dc:	b085      	sub	sp, #20
 801a9de:	460d      	mov	r5, r1
 801a9e0:	6851      	ldr	r1, [r2, #4]
 801a9e2:	466b      	mov	r3, sp
 801a9e4:	c303      	stmia	r3!, {r0, r1}
 801a9e6:	4629      	mov	r1, r5
 801a9e8:	4668      	mov	r0, sp
 801a9ea:	f7f8 fa51 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 801a9ee:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a9f2:	b12b      	cbz	r3, 801aa00 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801a9f4:	4669      	mov	r1, sp
 801a9f6:	4620      	mov	r0, r4
 801a9f8:	f7ff ffbf 	bl	801a97a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a9fc:	b005      	add	sp, #20
 801a9fe:	bd30      	pop	{r4, r5, pc}
 801aa00:	3404      	adds	r4, #4
 801aa02:	4621      	mov	r1, r4
 801aa04:	a802      	add	r0, sp, #8
 801aa06:	f7ff f947 	bl	8019c98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801aa0a:	f8bd 3000 	ldrh.w	r3, [sp]
 801aa0e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801aa12:	1a9b      	subs	r3, r3, r2
 801aa14:	f8ad 3000 	strh.w	r3, [sp]
 801aa18:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801aa1c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801aa20:	4669      	mov	r1, sp
 801aa22:	1a9b      	subs	r3, r3, r2
 801aa24:	4620      	mov	r0, r4
 801aa26:	f8ad 3002 	strh.w	r3, [sp, #2]
 801aa2a:	f7f8 fad0 	bl	8012fce <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801aa2e:	e7e5      	b.n	801a9fc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801aa30 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801aa30:	680a      	ldr	r2, [r1, #0]
 801aa32:	460b      	mov	r3, r1
 801aa34:	6992      	ldr	r2, [r2, #24]
 801aa36:	1d01      	adds	r1, r0, #4
 801aa38:	4618      	mov	r0, r3
 801aa3a:	4710      	bx	r2

0801aa3c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801aa3c:	4298      	cmp	r0, r3
 801aa3e:	d200      	bcs.n	801aa42 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801aa40:	b913      	cbnz	r3, 801aa48 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801aa42:	440a      	add	r2, r1
 801aa44:	b210      	sxth	r0, r2
 801aa46:	4770      	bx	lr
 801aa48:	ee07 0a90 	vmov	s15, r0
 801aa4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801aa50:	ee07 3a90 	vmov	s15, r3
 801aa54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801aa5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801aa60:	ee37 7a66 	vsub.f32	s14, s14, s13
 801aa64:	ee07 2a90 	vmov	s15, r2
 801aa68:	ee67 5a07 	vmul.f32	s11, s14, s14
 801aa6c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801aa70:	eee5 6a87 	vfma.f32	s13, s11, s14
 801aa74:	ee07 1a90 	vmov	s15, r1
 801aa78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801aa80:	eee6 7a26 	vfma.f32	s15, s12, s13
 801aa84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801aa88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa8c:	bfcc      	ite	gt
 801aa8e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801aa92:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801aa96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aa9a:	ee17 3a90 	vmov	r3, s15
 801aa9e:	b218      	sxth	r0, r3
 801aaa0:	4770      	bx	lr

0801aaa2 <_ZN8touchgfx12TextProviderC1Ev>:
 801aaa2:	b538      	push	{r3, r4, r5, lr}
 801aaa4:	2500      	movs	r5, #0
 801aaa6:	2302      	movs	r3, #2
 801aaa8:	4604      	mov	r4, r0
 801aaaa:	e9c0 5500 	strd	r5, r5, [r0]
 801aaae:	7403      	strb	r3, [r0, #16]
 801aab0:	6145      	str	r5, [r0, #20]
 801aab2:	7605      	strb	r5, [r0, #24]
 801aab4:	83c5      	strh	r5, [r0, #30]
 801aab6:	8405      	strh	r5, [r0, #32]
 801aab8:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801aaba:	8705      	strh	r5, [r0, #56]	@ 0x38
 801aabc:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801aabe:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801aac2:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801aac6:	220e      	movs	r2, #14
 801aac8:	4629      	mov	r1, r5
 801aaca:	304c      	adds	r0, #76	@ 0x4c
 801aacc:	f010 fe87 	bl	802b7de <memset>
 801aad0:	2301      	movs	r3, #1
 801aad2:	4620      	mov	r0, r4
 801aad4:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801aad8:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801aadc:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801aae0:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801aae4:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801aae8:	f7f4 feec 	bl	800f8c4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801aaec:	4620      	mov	r0, r4
 801aaee:	bd38      	pop	{r3, r4, r5, pc}

0801aaf0 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801aaf0:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801aaf2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801aaf6:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801aaf8:	fab0 f080 	clz	r0, r0
 801aafc:	0940      	lsrs	r0, r0, #5
 801aafe:	4770      	bx	lr

0801ab00 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801ab00:	b530      	push	{r4, r5, lr}
 801ab02:	2500      	movs	r5, #0
 801ab04:	2401      	movs	r4, #1
 801ab06:	6843      	ldr	r3, [r0, #4]
 801ab08:	b913      	cbnz	r3, 801ab10 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801ab0a:	6803      	ldr	r3, [r0, #0]
 801ab0c:	b313      	cbz	r3, 801ab54 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ab0e:	6043      	str	r3, [r0, #4]
 801ab10:	7e03      	ldrb	r3, [r0, #24]
 801ab12:	b143      	cbz	r3, 801ab26 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801ab14:	6943      	ldr	r3, [r0, #20]
 801ab16:	b12b      	cbz	r3, 801ab24 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ab18:	881a      	ldrh	r2, [r3, #0]
 801ab1a:	b11a      	cbz	r2, 801ab24 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ab1c:	1c9a      	adds	r2, r3, #2
 801ab1e:	6142      	str	r2, [r0, #20]
 801ab20:	8818      	ldrh	r0, [r3, #0]
 801ab22:	bd30      	pop	{r4, r5, pc}
 801ab24:	7605      	strb	r5, [r0, #24]
 801ab26:	6843      	ldr	r3, [r0, #4]
 801ab28:	8819      	ldrh	r1, [r3, #0]
 801ab2a:	b199      	cbz	r1, 801ab54 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ab2c:	1c9a      	adds	r2, r3, #2
 801ab2e:	2902      	cmp	r1, #2
 801ab30:	6042      	str	r2, [r0, #4]
 801ab32:	d1f5      	bne.n	801ab20 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801ab34:	7c03      	ldrb	r3, [r0, #16]
 801ab36:	2b01      	cmp	r3, #1
 801ab38:	d8e5      	bhi.n	801ab06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ab3a:	1c5a      	adds	r2, r3, #1
 801ab3c:	3302      	adds	r3, #2
 801ab3e:	7402      	strb	r2, [r0, #16]
 801ab40:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ab44:	6143      	str	r3, [r0, #20]
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	d0dd      	beq.n	801ab06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ab4a:	881b      	ldrh	r3, [r3, #0]
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	d0da      	beq.n	801ab06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ab50:	7604      	strb	r4, [r0, #24]
 801ab52:	e7d8      	b.n	801ab06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ab54:	2000      	movs	r0, #0
 801ab56:	e7e4      	b.n	801ab22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801ab58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801ab58:	b430      	push	{r4, r5}
 801ab5a:	6001      	str	r1, [r0, #0]
 801ab5c:	2100      	movs	r1, #0
 801ab5e:	6041      	str	r1, [r0, #4]
 801ab60:	6815      	ldr	r5, [r2, #0]
 801ab62:	6085      	str	r5, [r0, #8]
 801ab64:	6852      	ldr	r2, [r2, #4]
 801ab66:	6443      	str	r3, [r0, #68]	@ 0x44
 801ab68:	9b02      	ldr	r3, [sp, #8]
 801ab6a:	60c2      	str	r2, [r0, #12]
 801ab6c:	7401      	strb	r1, [r0, #16]
 801ab6e:	6141      	str	r1, [r0, #20]
 801ab70:	7601      	strb	r1, [r0, #24]
 801ab72:	8701      	strh	r1, [r0, #56]	@ 0x38
 801ab74:	8401      	strh	r1, [r0, #32]
 801ab76:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801ab7a:	6483      	str	r3, [r0, #72]	@ 0x48
 801ab7c:	bc30      	pop	{r4, r5}
 801ab7e:	f7f4 bea1 	b.w	800f8c4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801ab82 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801ab82:	b408      	push	{r3}
 801ab84:	b510      	push	{r4, lr}
 801ab86:	b085      	sub	sp, #20
 801ab88:	ac07      	add	r4, sp, #28
 801ab8a:	f854 3b04 	ldr.w	r3, [r4], #4
 801ab8e:	9300      	str	r3, [sp, #0]
 801ab90:	4613      	mov	r3, r2
 801ab92:	4622      	mov	r2, r4
 801ab94:	9403      	str	r4, [sp, #12]
 801ab96:	f7ff ffdf 	bl	801ab58 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ab9a:	b005      	add	sp, #20
 801ab9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aba0:	b001      	add	sp, #4
 801aba2:	4770      	bx	lr

0801aba4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801aba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aba6:	4605      	mov	r5, r0
 801aba8:	4608      	mov	r0, r1
 801abaa:	b1e9      	cbz	r1, 801abe8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801abac:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801abb0:	460b      	mov	r3, r1
 801abb2:	f101 0708 	add.w	r7, r1, #8
 801abb6:	4622      	mov	r2, r4
 801abb8:	6818      	ldr	r0, [r3, #0]
 801abba:	6859      	ldr	r1, [r3, #4]
 801abbc:	4626      	mov	r6, r4
 801abbe:	c603      	stmia	r6!, {r0, r1}
 801abc0:	3308      	adds	r3, #8
 801abc2:	42bb      	cmp	r3, r7
 801abc4:	4634      	mov	r4, r6
 801abc6:	d1f7      	bne.n	801abb8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801abc8:	6818      	ldr	r0, [r3, #0]
 801abca:	6030      	str	r0, [r6, #0]
 801abcc:	889b      	ldrh	r3, [r3, #4]
 801abce:	80b3      	strh	r3, [r6, #4]
 801abd0:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801abd4:	015b      	lsls	r3, r3, #5
 801abd6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801abda:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801abde:	430b      	orrs	r3, r1
 801abe0:	425b      	negs	r3, r3
 801abe2:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801abe6:	4610      	mov	r0, r2
 801abe8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801abea <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801abea:	b538      	push	{r3, r4, r5, lr}
 801abec:	460c      	mov	r4, r1
 801abee:	6811      	ldr	r1, [r2, #0]
 801abf0:	4610      	mov	r0, r2
 801abf2:	68cd      	ldr	r5, [r1, #12]
 801abf4:	4619      	mov	r1, r3
 801abf6:	47a8      	blx	r5
 801abf8:	2800      	cmp	r0, #0
 801abfa:	bf08      	it	eq
 801abfc:	4620      	moveq	r0, r4
 801abfe:	bd38      	pop	{r3, r4, r5, pc}

0801ac00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ac00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac02:	4604      	mov	r4, r0
 801ac04:	4615      	mov	r5, r2
 801ac06:	4608      	mov	r0, r1
 801ac08:	b93a      	cbnz	r2, 801ac1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ac0a:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801ac0e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801ac12:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801ac16:	4628      	mov	r0, r5
 801ac18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac1a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801ac1e:	8893      	ldrh	r3, [r2, #4]
 801ac20:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801ac24:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801ac28:	79ee      	ldrb	r6, [r5, #7]
 801ac2a:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
 801ac2e:	4316      	orrs	r6, r2
 801ac30:	19da      	adds	r2, r3, r7
 801ac32:	b291      	uxth	r1, r2
 801ac34:	291d      	cmp	r1, #29
 801ac36:	b2b7      	uxth	r7, r6
 801ac38:	d87a      	bhi.n	801ad30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 801ac3a:	2201      	movs	r2, #1
 801ac3c:	408a      	lsls	r2, r1
 801ac3e:	4975      	ldr	r1, [pc, #468]	@ (801ae14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801ac40:	420a      	tst	r2, r1
 801ac42:	ea4f 06e6 	mov.w	r6, r6, asr #3
 801ac46:	d12d      	bne.n	801aca4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801ac48:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801ac4c:	d070      	beq.n	801ad30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 801ac4e:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801ac52:	462b      	mov	r3, r5
 801ac54:	f105 0e08 	add.w	lr, r5, #8
 801ac58:	4615      	mov	r5, r2
 801ac5a:	6818      	ldr	r0, [r3, #0]
 801ac5c:	6859      	ldr	r1, [r3, #4]
 801ac5e:	4694      	mov	ip, r2
 801ac60:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ac64:	3308      	adds	r3, #8
 801ac66:	4573      	cmp	r3, lr
 801ac68:	4662      	mov	r2, ip
 801ac6a:	d1f6      	bne.n	801ac5a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801ac6c:	6818      	ldr	r0, [r3, #0]
 801ac6e:	f8cc 0000 	str.w	r0, [ip]
 801ac72:	889b      	ldrh	r3, [r3, #4]
 801ac74:	f8ac 3004 	strh.w	r3, [ip, #4]
 801ac78:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801ac7c:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801ac80:	b2b3      	uxth	r3, r6
 801ac82:	1aca      	subs	r2, r1, r3
 801ac84:	b292      	uxth	r2, r2
 801ac86:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801ac8a:	10d2      	asrs	r2, r2, #3
 801ac8c:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801ac90:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801ac94:	4302      	orrs	r2, r0
 801ac96:	1bcf      	subs	r7, r1, r7
 801ac98:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801ac9c:	1afb      	subs	r3, r7, r3
 801ac9e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801aca2:	e7b8      	b.n	801ac16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801aca4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801aca6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801acaa:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801acac:	f640 6333 	movw	r3, #3635	@ 0xe33
 801acb0:	4299      	cmp	r1, r3
 801acb2:	d110      	bne.n	801acd6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801acb4:	6803      	ldr	r3, [r0, #0]
 801acb6:	68db      	ldr	r3, [r3, #12]
 801acb8:	4798      	blx	r3
 801acba:	7b41      	ldrb	r1, [r0, #13]
 801acbc:	00cb      	lsls	r3, r1, #3
 801acbe:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801acc2:	7a03      	ldrb	r3, [r0, #8]
 801acc4:	0648      	lsls	r0, r1, #25
 801acc6:	ea43 0302 	orr.w	r3, r3, r2
 801acca:	bf44      	itt	mi
 801accc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801acd0:	b21b      	sxthmi	r3, r3
 801acd2:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801acd6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801acda:	443b      	add	r3, r7
 801acdc:	4433      	add	r3, r6
 801acde:	b29b      	uxth	r3, r3
 801ace0:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 801ace4:	462a      	mov	r2, r5
 801ace6:	f105 0c08 	add.w	ip, r5, #8
 801acea:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801acee:	4635      	mov	r5, r6
 801acf0:	6810      	ldr	r0, [r2, #0]
 801acf2:	6851      	ldr	r1, [r2, #4]
 801acf4:	4637      	mov	r7, r6
 801acf6:	c703      	stmia	r7!, {r0, r1}
 801acf8:	3208      	adds	r2, #8
 801acfa:	4562      	cmp	r2, ip
 801acfc:	463e      	mov	r6, r7
 801acfe:	d1f7      	bne.n	801acf0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801ad00:	6810      	ldr	r0, [r2, #0]
 801ad02:	6038      	str	r0, [r7, #0]
 801ad04:	8892      	ldrh	r2, [r2, #4]
 801ad06:	80ba      	strh	r2, [r7, #4]
 801ad08:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801ad0c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801ad10:	10db      	asrs	r3, r3, #3
 801ad12:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801ad16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801ad1a:	4313      	orrs	r3, r2
 801ad1c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801ad20:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801ad24:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801ad28:	1a9b      	subs	r3, r3, r2
 801ad2a:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801ad2e:	e772      	b.n	801ac16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801ad30:	f023 0204 	bic.w	r2, r3, #4
 801ad34:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801ad38:	428a      	cmp	r2, r1
 801ad3a:	d003      	beq.n	801ad44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801ad3c:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801ad40:	4293      	cmp	r3, r2
 801ad42:	d120      	bne.n	801ad86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 801ad44:	3b01      	subs	r3, #1
 801ad46:	4602      	mov	r2, r0
 801ad48:	b29b      	uxth	r3, r3
 801ad4a:	4629      	mov	r1, r5
 801ad4c:	4620      	mov	r0, r4
 801ad4e:	f7ff ff4c 	bl	801abea <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ad52:	7b41      	ldrb	r1, [r0, #13]
 801ad54:	00cb      	lsls	r3, r1, #3
 801ad56:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801ad5a:	7a03      	ldrb	r3, [r0, #8]
 801ad5c:	0649      	lsls	r1, r1, #25
 801ad5e:	ea43 0302 	orr.w	r3, r3, r2
 801ad62:	bf44      	itt	mi
 801ad64:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ad68:	b21b      	sxthmi	r3, r3
 801ad6a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801ad6e:	7b6b      	ldrb	r3, [r5, #13]
 801ad70:	7aaa      	ldrb	r2, [r5, #10]
 801ad72:	005b      	lsls	r3, r3, #1
 801ad74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ad78:	4313      	orrs	r3, r2
 801ad7a:	115a      	asrs	r2, r3, #5
 801ad7c:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801ad80:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801ad84:	e036      	b.n	801adf4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801ad86:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801ad8a:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801ad8e:	7a2a      	ldrb	r2, [r5, #8]
 801ad90:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 801ad94:	ea42 0201 	orr.w	r2, r2, r1
 801ad98:	bf1c      	itt	ne
 801ad9a:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 801ad9e:	b212      	sxthne	r2, r2
 801ada0:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801ada4:	f640 6109 	movw	r1, #3593	@ 0xe09
 801ada8:	f023 0210 	bic.w	r2, r3, #16
 801adac:	428a      	cmp	r2, r1
 801adae:	d003      	beq.n	801adb8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 801adb0:	f640 6213 	movw	r2, #3603	@ 0xe13
 801adb4:	4293      	cmp	r3, r2
 801adb6:	d12a      	bne.n	801ae0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801adb8:	7b6e      	ldrb	r6, [r5, #13]
 801adba:	0076      	lsls	r6, r6, #1
 801adbc:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801adc0:	7aae      	ldrb	r6, [r5, #10]
 801adc2:	4316      	orrs	r6, r2
 801adc4:	f640 6213 	movw	r2, #3603	@ 0xe13
 801adc8:	4293      	cmp	r3, r2
 801adca:	bf18      	it	ne
 801adcc:	f103 33ff 	addne.w	r3, r3, #4294967295
 801add0:	4602      	mov	r2, r0
 801add2:	bf14      	ite	ne
 801add4:	b29b      	uxthne	r3, r3
 801add6:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801adda:	4629      	mov	r1, r5
 801addc:	4620      	mov	r0, r4
 801adde:	f7ff ff04 	bl	801abea <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ade2:	7b43      	ldrb	r3, [r0, #13]
 801ade4:	7a82      	ldrb	r2, [r0, #10]
 801ade6:	005b      	lsls	r3, r3, #1
 801ade8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801adec:	4313      	orrs	r3, r2
 801adee:	1af6      	subs	r6, r6, r3
 801adf0:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801adf4:	7b69      	ldrb	r1, [r5, #13]
 801adf6:	00cb      	lsls	r3, r1, #3
 801adf8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801adfc:	7a2b      	ldrb	r3, [r5, #8]
 801adfe:	4313      	orrs	r3, r2
 801ae00:	064a      	lsls	r2, r1, #25
 801ae02:	bf44      	itt	mi
 801ae04:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ae08:	b21b      	sxthmi	r3, r3
 801ae0a:	1bdb      	subs	r3, r3, r7
 801ae0c:	e747      	b.n	801ac9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801ae0e:	2300      	movs	r3, #0
 801ae10:	e7b6      	b.n	801ad80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 801ae12:	bf00      	nop
 801ae14:	3fc00079 	.word	0x3fc00079

0801ae18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801ae18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ae1c:	4604      	mov	r4, r0
 801ae1e:	b942      	cbnz	r2, 801ae32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801ae20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ae24:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801ae28:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801ae2c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801ae30:	e047      	b.n	801aec2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801ae32:	7b51      	ldrb	r1, [r2, #13]
 801ae34:	8893      	ldrh	r3, [r2, #4]
 801ae36:	010d      	lsls	r5, r1, #4
 801ae38:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801ae3c:	79d5      	ldrb	r5, [r2, #7]
 801ae3e:	4305      	orrs	r5, r0
 801ae40:	2d04      	cmp	r5, #4
 801ae42:	bfcc      	ite	gt
 801ae44:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801ae48:	f04f 0e01 	movle.w	lr, #1
 801ae4c:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801ae50:	f200 80ab 	bhi.w	801afaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801ae54:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801ae58:	4283      	cmp	r3, r0
 801ae5a:	d216      	bcs.n	801ae8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ae5c:	f240 605b 	movw	r0, #1627	@ 0x65b
 801ae60:	4283      	cmp	r3, r0
 801ae62:	d859      	bhi.n	801af18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801ae64:	f240 6057 	movw	r0, #1623	@ 0x657
 801ae68:	4283      	cmp	r3, r0
 801ae6a:	d20e      	bcs.n	801ae8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ae6c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801ae70:	d24a      	bcs.n	801af08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801ae72:	f240 604e 	movw	r0, #1614	@ 0x64e
 801ae76:	4283      	cmp	r3, r0
 801ae78:	d207      	bcs.n	801ae8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ae7a:	f240 601a 	movw	r0, #1562	@ 0x61a
 801ae7e:	4283      	cmp	r3, r0
 801ae80:	d02a      	beq.n	801aed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ae82:	d821      	bhi.n	801aec8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801ae84:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801ae88:	d35b      	bcc.n	801af42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ae8a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801ae8e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801ae92:	f040 80d0 	bne.w	801b036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801ae96:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801ae9a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801ae9e:	f040 80ca 	bne.w	801b036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801aea2:	00cb      	lsls	r3, r1, #3
 801aea4:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801aea8:	7a13      	ldrb	r3, [r2, #8]
 801aeaa:	0649      	lsls	r1, r1, #25
 801aeac:	ea43 0300 	orr.w	r3, r3, r0
 801aeb0:	bf44      	itt	mi
 801aeb2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801aeb6:	b21b      	sxthmi	r3, r3
 801aeb8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801aebc:	1b5d      	subs	r5, r3, r5
 801aebe:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801aec2:	4610      	mov	r0, r2
 801aec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aec8:	f240 604b 	movw	r0, #1611	@ 0x64b
 801aecc:	4283      	cmp	r3, r0
 801aece:	d338      	bcc.n	801af42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801aed0:	f240 604c 	movw	r0, #1612	@ 0x64c
 801aed4:	4283      	cmp	r3, r0
 801aed6:	d9d8      	bls.n	801ae8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801aed8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801aedc:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801aee0:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801aee4:	f040 80f2 	bne.w	801b0cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801aee8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801aeec:	f040 80ee 	bne.w	801b0cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801aef0:	00cb      	lsls	r3, r1, #3
 801aef2:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801aef6:	7a13      	ldrb	r3, [r2, #8]
 801aef8:	064e      	lsls	r6, r1, #25
 801aefa:	ea43 0300 	orr.w	r3, r3, r0
 801aefe:	bf44      	itt	mi
 801af00:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801af04:	b21b      	sxthmi	r3, r3
 801af06:	e7d9      	b.n	801aebc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801af08:	f240 6054 	movw	r0, #1620	@ 0x654
 801af0c:	4283      	cmp	r3, r0
 801af0e:	d8e3      	bhi.n	801aed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801af10:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801af14:	d9e0      	bls.n	801aed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801af16:	e7b8      	b.n	801ae8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801af18:	f240 6074 	movw	r0, #1652	@ 0x674
 801af1c:	4283      	cmp	r3, r0
 801af1e:	d0b4      	beq.n	801ae8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801af20:	d82d      	bhi.n	801af7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801af22:	f240 605e 	movw	r0, #1630	@ 0x65e
 801af26:	4283      	cmp	r3, r0
 801af28:	d804      	bhi.n	801af34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801af2a:	f240 605d 	movw	r0, #1629	@ 0x65d
 801af2e:	4283      	cmp	r3, r0
 801af30:	d3d2      	bcc.n	801aed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801af32:	e7aa      	b.n	801ae8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801af34:	f240 605f 	movw	r0, #1631	@ 0x65f
 801af38:	4283      	cmp	r3, r0
 801af3a:	d0cd      	beq.n	801aed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801af3c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801af40:	d0a3      	beq.n	801ae8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801af42:	00cb      	lsls	r3, r1, #3
 801af44:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801af48:	7a13      	ldrb	r3, [r2, #8]
 801af4a:	0649      	lsls	r1, r1, #25
 801af4c:	ea43 0300 	orr.w	r3, r3, r0
 801af50:	bf44      	itt	mi
 801af52:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801af56:	b21b      	sxthmi	r3, r3
 801af58:	1b5d      	subs	r5, r3, r5
 801af5a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801af5e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801af62:	7b53      	ldrb	r3, [r2, #13]
 801af64:	015b      	lsls	r3, r3, #5
 801af66:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801af6a:	7993      	ldrb	r3, [r2, #6]
 801af6c:	430b      	orrs	r3, r1
 801af6e:	005b      	lsls	r3, r3, #1
 801af70:	2105      	movs	r1, #5
 801af72:	fb93 f3f1 	sdiv	r3, r3, r1
 801af76:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801af7a:	440b      	add	r3, r1
 801af7c:	e756      	b.n	801ae2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801af7e:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801af82:	4283      	cmp	r3, r0
 801af84:	d809      	bhi.n	801af9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801af86:	f240 60df 	movw	r0, #1759	@ 0x6df
 801af8a:	4283      	cmp	r3, r0
 801af8c:	f4bf af7d 	bcs.w	801ae8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801af90:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801af94:	2b05      	cmp	r3, #5
 801af96:	d8d4      	bhi.n	801af42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801af98:	e777      	b.n	801ae8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801af9a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801af9e:	4283      	cmp	r3, r0
 801afa0:	d09a      	beq.n	801aed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801afa2:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801afa6:	4283      	cmp	r3, r0
 801afa8:	e7ca      	b.n	801af40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801afaa:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801afae:	d22b      	bcs.n	801b008 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801afb0:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801afb4:	4283      	cmp	r3, r0
 801afb6:	d28f      	bcs.n	801aed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801afb8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801afbc:	4283      	cmp	r3, r0
 801afbe:	d816      	bhi.n	801afee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801afc0:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801afc4:	4283      	cmp	r3, r0
 801afc6:	f4bf af60 	bcs.w	801ae8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801afca:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801afce:	4283      	cmp	r3, r0
 801afd0:	d80a      	bhi.n	801afe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801afd2:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801afd6:	4283      	cmp	r3, r0
 801afd8:	f4bf af57 	bcs.w	801ae8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801afdc:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801afe0:	4283      	cmp	r3, r0
 801afe2:	f43f af79 	beq.w	801aed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801afe6:	e7ac      	b.n	801af42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801afe8:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801afec:	e7f8      	b.n	801afe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801afee:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801aff2:	4283      	cmp	r3, r0
 801aff4:	d802      	bhi.n	801affc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801aff6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801affa:	e798      	b.n	801af2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801affc:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801b000:	4283      	cmp	r3, r0
 801b002:	f47f af42 	bne.w	801ae8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b006:	e767      	b.n	801aed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b008:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801b00c:	4283      	cmp	r3, r0
 801b00e:	f43f af63 	beq.w	801aed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b012:	d802      	bhi.n	801b01a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801b014:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801b018:	e7f2      	b.n	801b000 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801b01a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801b01e:	4283      	cmp	r3, r0
 801b020:	d805      	bhi.n	801b02e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801b022:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801b026:	4283      	cmp	r3, r0
 801b028:	f4ff af2f 	bcc.w	801ae8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801b02c:	e754      	b.n	801aed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801b02e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801b032:	4283      	cmp	r3, r0
 801b034:	e7af      	b.n	801af96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801b036:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801b03a:	4617      	mov	r7, r2
 801b03c:	f102 0808 	add.w	r8, r2, #8
 801b040:	4666      	mov	r6, ip
 801b042:	6838      	ldr	r0, [r7, #0]
 801b044:	6879      	ldr	r1, [r7, #4]
 801b046:	46e6      	mov	lr, ip
 801b048:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801b04c:	3708      	adds	r7, #8
 801b04e:	4547      	cmp	r7, r8
 801b050:	46f4      	mov	ip, lr
 801b052:	d1f6      	bne.n	801b042 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801b054:	6838      	ldr	r0, [r7, #0]
 801b056:	f8ce 0000 	str.w	r0, [lr]
 801b05a:	88b9      	ldrh	r1, [r7, #4]
 801b05c:	f8ae 1004 	strh.w	r1, [lr, #4]
 801b060:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801b064:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801b068:	d009      	beq.n	801b07e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801b06a:	7b51      	ldrb	r1, [r2, #13]
 801b06c:	7992      	ldrb	r2, [r2, #6]
 801b06e:	0149      	lsls	r1, r1, #5
 801b070:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801b074:	4311      	orrs	r1, r2
 801b076:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b07a:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801b07e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801b082:	b2ad      	uxth	r5, r5
 801b084:	d00d      	beq.n	801b0a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801b086:	442b      	add	r3, r5
 801b088:	b29b      	uxth	r3, r3
 801b08a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801b08e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801b092:	10db      	asrs	r3, r3, #3
 801b094:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801b098:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801b09c:	4313      	orrs	r3, r2
 801b09e:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801b0a2:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801b0a6:	00cb      	lsls	r3, r1, #3
 801b0a8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801b0ac:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801b0b0:	064f      	lsls	r7, r1, #25
 801b0b2:	ea43 0302 	orr.w	r3, r3, r2
 801b0b6:	bf44      	itt	mi
 801b0b8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b0bc:	b21b      	sxthmi	r3, r3
 801b0be:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801b0c2:	1b5b      	subs	r3, r3, r5
 801b0c4:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801b0c8:	4632      	mov	r2, r6
 801b0ca:	e6fa      	b.n	801aec2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801b0cc:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801b0d0:	4617      	mov	r7, r2
 801b0d2:	f102 0908 	add.w	r9, r2, #8
 801b0d6:	4666      	mov	r6, ip
 801b0d8:	6838      	ldr	r0, [r7, #0]
 801b0da:	6879      	ldr	r1, [r7, #4]
 801b0dc:	46e0      	mov	r8, ip
 801b0de:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801b0e2:	3708      	adds	r7, #8
 801b0e4:	454f      	cmp	r7, r9
 801b0e6:	46c4      	mov	ip, r8
 801b0e8:	d1f6      	bne.n	801b0d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801b0ea:	6838      	ldr	r0, [r7, #0]
 801b0ec:	f8c8 0000 	str.w	r0, [r8]
 801b0f0:	88b9      	ldrh	r1, [r7, #4]
 801b0f2:	f8a8 1004 	strh.w	r1, [r8, #4]
 801b0f6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801b0fa:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801b0fe:	d009      	beq.n	801b114 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801b100:	7b51      	ldrb	r1, [r2, #13]
 801b102:	7992      	ldrb	r2, [r2, #6]
 801b104:	0149      	lsls	r1, r1, #5
 801b106:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801b10a:	4311      	orrs	r1, r2
 801b10c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b110:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801b114:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801b118:	d00e      	beq.n	801b138 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801b11a:	eba3 030e 	sub.w	r3, r3, lr
 801b11e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801b122:	b29b      	uxth	r3, r3
 801b124:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801b128:	10db      	asrs	r3, r3, #3
 801b12a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801b12e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801b132:	4313      	orrs	r3, r2
 801b134:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801b138:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801b13c:	00cb      	lsls	r3, r1, #3
 801b13e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801b142:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801b146:	0648      	lsls	r0, r1, #25
 801b148:	ea43 0302 	orr.w	r3, r3, r2
 801b14c:	bf44      	itt	mi
 801b14e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b152:	b21b      	sxthmi	r3, r3
 801b154:	1b5d      	subs	r5, r3, r5
 801b156:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801b15a:	e7b5      	b.n	801b0c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801b15c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801b15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b160:	461e      	mov	r6, r3
 801b162:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801b164:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b168:	4604      	mov	r4, r0
 801b16a:	4617      	mov	r7, r2
 801b16c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801b170:	f7f4 fb02 	bl	800f778 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b174:	4605      	mov	r5, r0
 801b176:	b918      	cbnz	r0, 801b180 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801b178:	6030      	str	r0, [r6, #0]
 801b17a:	4628      	mov	r0, r5
 801b17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b180:	683b      	ldr	r3, [r7, #0]
 801b182:	4601      	mov	r1, r0
 801b184:	68db      	ldr	r3, [r3, #12]
 801b186:	4638      	mov	r0, r7
 801b188:	4798      	blx	r3
 801b18a:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801b18e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801b192:	4602      	mov	r2, r0
 801b194:	6030      	str	r0, [r6, #0]
 801b196:	d213      	bcs.n	801b1c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801b198:	4643      	mov	r3, r8
 801b19a:	4639      	mov	r1, r7
 801b19c:	4620      	mov	r0, r4
 801b19e:	f7ff fe3b 	bl	801ae18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b1a2:	6030      	str	r0, [r6, #0]
 801b1a4:	6833      	ldr	r3, [r6, #0]
 801b1a6:	b143      	cbz	r3, 801b1ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801b1a8:	7b5a      	ldrb	r2, [r3, #13]
 801b1aa:	7a9b      	ldrb	r3, [r3, #10]
 801b1ac:	0052      	lsls	r2, r2, #1
 801b1ae:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801b1b2:	4313      	orrs	r3, r2
 801b1b4:	bf0c      	ite	eq
 801b1b6:	2301      	moveq	r3, #1
 801b1b8:	2300      	movne	r3, #0
 801b1ba:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801b1be:	e7dc      	b.n	801b17a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801b1c0:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801b1c4:	b29b      	uxth	r3, r3
 801b1c6:	2b7f      	cmp	r3, #127	@ 0x7f
 801b1c8:	d804      	bhi.n	801b1d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801b1ca:	4639      	mov	r1, r7
 801b1cc:	4620      	mov	r0, r4
 801b1ce:	f7ff fd17 	bl	801ac00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b1d2:	e7e6      	b.n	801b1a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801b1d4:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d0e3      	beq.n	801b1a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801b1dc:	f640 1302 	movw	r3, #2306	@ 0x902
 801b1e0:	429d      	cmp	r5, r3
 801b1e2:	d1df      	bne.n	801b1a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801b1e4:	4601      	mov	r1, r0
 801b1e6:	4620      	mov	r0, r4
 801b1e8:	f7ff fcdc 	bl	801aba4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b1ec:	e7d9      	b.n	801b1a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801b1ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801b1ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1f2:	461e      	mov	r6, r3
 801b1f4:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801b1f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b1fa:	4604      	mov	r4, r0
 801b1fc:	4617      	mov	r7, r2
 801b1fe:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801b202:	f7f4 fab9 	bl	800f778 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b206:	4605      	mov	r5, r0
 801b208:	b918      	cbnz	r0, 801b212 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801b20a:	6030      	str	r0, [r6, #0]
 801b20c:	4628      	mov	r0, r5
 801b20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b212:	683b      	ldr	r3, [r7, #0]
 801b214:	4601      	mov	r1, r0
 801b216:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801b21a:	4638      	mov	r0, r7
 801b21c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b220:	47c8      	blx	r9
 801b222:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801b226:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801b22a:	4602      	mov	r2, r0
 801b22c:	6030      	str	r0, [r6, #0]
 801b22e:	d213      	bcs.n	801b258 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801b230:	4643      	mov	r3, r8
 801b232:	4639      	mov	r1, r7
 801b234:	4620      	mov	r0, r4
 801b236:	f7ff fdef 	bl	801ae18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b23a:	6030      	str	r0, [r6, #0]
 801b23c:	6833      	ldr	r3, [r6, #0]
 801b23e:	b143      	cbz	r3, 801b252 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801b240:	7b5a      	ldrb	r2, [r3, #13]
 801b242:	7a9b      	ldrb	r3, [r3, #10]
 801b244:	0052      	lsls	r2, r2, #1
 801b246:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801b24a:	4313      	orrs	r3, r2
 801b24c:	bf0c      	ite	eq
 801b24e:	2301      	moveq	r3, #1
 801b250:	2300      	movne	r3, #0
 801b252:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801b256:	e7d9      	b.n	801b20c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801b258:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801b25c:	b29b      	uxth	r3, r3
 801b25e:	2b7f      	cmp	r3, #127	@ 0x7f
 801b260:	d804      	bhi.n	801b26c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801b262:	4639      	mov	r1, r7
 801b264:	4620      	mov	r0, r4
 801b266:	f7ff fccb 	bl	801ac00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b26a:	e7e6      	b.n	801b23a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801b26c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801b270:	2b00      	cmp	r3, #0
 801b272:	d0e3      	beq.n	801b23c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801b274:	f640 1302 	movw	r3, #2306	@ 0x902
 801b278:	429d      	cmp	r5, r3
 801b27a:	d1df      	bne.n	801b23c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801b27c:	4601      	mov	r1, r0
 801b27e:	4620      	mov	r0, r4
 801b280:	f7ff fc90 	bl	801aba4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b284:	e7d9      	b.n	801b23a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801b286 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801b286:	b510      	push	{r4, lr}
 801b288:	4604      	mov	r4, r0
 801b28a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801b28e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801b290:	b1f1      	cbz	r1, 801b2d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801b292:	2b0a      	cmp	r3, #10
 801b294:	d02f      	beq.n	801b2f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801b296:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801b298:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801b29c:	3901      	subs	r1, #1
 801b29e:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801b2a0:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801b2a4:	1c51      	adds	r1, r2, #1
 801b2a6:	b289      	uxth	r1, r1
 801b2a8:	2901      	cmp	r1, #1
 801b2aa:	bf84      	itt	hi
 801b2ac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b2b0:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801b2b2:	f103 0201 	add.w	r2, r3, #1
 801b2b6:	8722      	strh	r2, [r4, #56]	@ 0x38
 801b2b8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801b2ba:	bf98      	it	ls
 801b2bc:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801b2be:	4413      	add	r3, r2
 801b2c0:	b29b      	uxth	r3, r3
 801b2c2:	2b09      	cmp	r3, #9
 801b2c4:	bf88      	it	hi
 801b2c6:	3b0a      	subhi	r3, #10
 801b2c8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b2cc:	8458      	strh	r0, [r3, #34]	@ 0x22
 801b2ce:	e7dc      	b.n	801b28a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801b2d0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801b2d2:	2b0a      	cmp	r3, #10
 801b2d4:	d00f      	beq.n	801b2f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801b2d6:	4620      	mov	r0, r4
 801b2d8:	f7ff fc12 	bl	801ab00 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801b2dc:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801b2de:	1c5a      	adds	r2, r3, #1
 801b2e0:	8722      	strh	r2, [r4, #56]	@ 0x38
 801b2e2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801b2e4:	4413      	add	r3, r2
 801b2e6:	b29b      	uxth	r3, r3
 801b2e8:	2b09      	cmp	r3, #9
 801b2ea:	bf88      	it	hi
 801b2ec:	3b0a      	subhi	r3, #10
 801b2ee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b2f2:	8458      	strh	r0, [r3, #34]	@ 0x22
 801b2f4:	e7ec      	b.n	801b2d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801b2f6:	bd10      	pop	{r4, pc}

0801b2f8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801b2f8:	b538      	push	{r3, r4, r5, lr}
 801b2fa:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801b2fc:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801b300:	4604      	mov	r4, r0
 801b302:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801b304:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801b306:	3a01      	subs	r2, #1
 801b308:	8702      	strh	r2, [r0, #56]	@ 0x38
 801b30a:	1c5a      	adds	r2, r3, #1
 801b30c:	b292      	uxth	r2, r2
 801b30e:	2a09      	cmp	r2, #9
 801b310:	bf86      	itte	hi
 801b312:	3b09      	subhi	r3, #9
 801b314:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801b316:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801b318:	f7ff ffb5 	bl	801b286 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b31c:	8c23      	ldrh	r3, [r4, #32]
 801b31e:	2b01      	cmp	r3, #1
 801b320:	bf9c      	itt	ls
 801b322:	3301      	addls	r3, #1
 801b324:	8423      	strhls	r3, [r4, #32]
 801b326:	8be3      	ldrh	r3, [r4, #30]
 801b328:	b90b      	cbnz	r3, 801b32e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801b32a:	2302      	movs	r3, #2
 801b32c:	83e3      	strh	r3, [r4, #30]
 801b32e:	8be3      	ldrh	r3, [r4, #30]
 801b330:	3b01      	subs	r3, #1
 801b332:	b29b      	uxth	r3, r3
 801b334:	83e3      	strh	r3, [r4, #30]
 801b336:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b33a:	4628      	mov	r0, r5
 801b33c:	8365      	strh	r5, [r4, #26]
 801b33e:	bd38      	pop	{r3, r4, r5, pc}

0801b340 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801b340:	428a      	cmp	r2, r1
 801b342:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b346:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801b348:	d931      	bls.n	801b3ae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801b34a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801b34c:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801b350:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801b354:	19ee      	adds	r6, r5, r7
 801b356:	1a54      	subs	r4, r2, r1
 801b358:	3e01      	subs	r6, #1
 801b35a:	fa1f fe84 	uxth.w	lr, r4
 801b35e:	b2b4      	uxth	r4, r6
 801b360:	eba4 090e 	sub.w	r9, r4, lr
 801b364:	fa1f f989 	uxth.w	r9, r9
 801b368:	2c09      	cmp	r4, #9
 801b36a:	4626      	mov	r6, r4
 801b36c:	bf88      	it	hi
 801b36e:	f1a4 060a 	subhi.w	r6, r4, #10
 801b372:	f1bc 0f00 	cmp.w	ip, #0
 801b376:	bf08      	it	eq
 801b378:	f04f 0c02 	moveq.w	ip, #2
 801b37c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801b380:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b384:	fa1f fc8c 	uxth.w	ip, ip
 801b388:	3c01      	subs	r4, #1
 801b38a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801b38e:	b2a4      	uxth	r4, r4
 801b390:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801b394:	454c      	cmp	r4, r9
 801b396:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801b39a:	d1e5      	bne.n	801b368 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801b39c:	eba5 050e 	sub.w	r5, r5, lr
 801b3a0:	eb0e 0408 	add.w	r4, lr, r8
 801b3a4:	8705      	strh	r5, [r0, #56]	@ 0x38
 801b3a6:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801b3aa:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801b3ae:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801b3b0:	1a64      	subs	r4, r4, r1
 801b3b2:	4439      	add	r1, r7
 801b3b4:	b289      	uxth	r1, r1
 801b3b6:	2909      	cmp	r1, #9
 801b3b8:	bf88      	it	hi
 801b3ba:	390a      	subhi	r1, #10
 801b3bc:	8704      	strh	r4, [r0, #56]	@ 0x38
 801b3be:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801b3c0:	250a      	movs	r5, #10
 801b3c2:	b18a      	cbz	r2, 801b3e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801b3c4:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801b3c6:	3a01      	subs	r2, #1
 801b3c8:	b292      	uxth	r2, r2
 801b3ca:	3101      	adds	r1, #1
 801b3cc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801b3d0:	8701      	strh	r1, [r0, #56]	@ 0x38
 801b3d2:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801b3d4:	b901      	cbnz	r1, 801b3d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801b3d6:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801b3d8:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801b3da:	3901      	subs	r1, #1
 801b3dc:	b289      	uxth	r1, r1
 801b3de:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801b3e0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801b3e4:	844c      	strh	r4, [r1, #34]	@ 0x22
 801b3e6:	e7ec      	b.n	801b3c2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801b3e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3ec:	f7ff bf4b 	b.w	801b286 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801b3f0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801b3f0:	b570      	push	{r4, r5, r6, lr}
 801b3f2:	2500      	movs	r5, #0
 801b3f4:	4295      	cmp	r5, r2
 801b3f6:	d011      	beq.n	801b41c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801b3f8:	8bc4      	ldrh	r4, [r0, #30]
 801b3fa:	f831 6b02 	ldrh.w	r6, [r1], #2
 801b3fe:	4414      	add	r4, r2
 801b400:	3c01      	subs	r4, #1
 801b402:	1b64      	subs	r4, r4, r5
 801b404:	b2a4      	uxth	r4, r4
 801b406:	2c01      	cmp	r4, #1
 801b408:	bf88      	it	hi
 801b40a:	3c02      	subhi	r4, #2
 801b40c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b410:	8b64      	ldrh	r4, [r4, #26]
 801b412:	42b4      	cmp	r4, r6
 801b414:	d117      	bne.n	801b446 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801b416:	3501      	adds	r5, #1
 801b418:	b2ad      	uxth	r5, r5
 801b41a:	e7eb      	b.n	801b3f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801b41c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b420:	2400      	movs	r4, #0
 801b422:	4413      	add	r3, r2
 801b424:	b2a2      	uxth	r2, r4
 801b426:	429a      	cmp	r2, r3
 801b428:	da0f      	bge.n	801b44a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801b42a:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801b42c:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801b430:	4432      	add	r2, r6
 801b432:	b292      	uxth	r2, r2
 801b434:	2a09      	cmp	r2, #9
 801b436:	bf88      	it	hi
 801b438:	3a0a      	subhi	r2, #10
 801b43a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b43e:	3401      	adds	r4, #1
 801b440:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801b442:	42aa      	cmp	r2, r5
 801b444:	d0ee      	beq.n	801b424 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801b446:	2000      	movs	r0, #0
 801b448:	bd70      	pop	{r4, r5, r6, pc}
 801b44a:	2001      	movs	r0, #1
 801b44c:	e7fc      	b.n	801b448 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801b44e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b44e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b452:	4605      	mov	r5, r0
 801b454:	4616      	mov	r6, r2
 801b456:	1c8c      	adds	r4, r1, #2
 801b458:	8809      	ldrh	r1, [r1, #0]
 801b45a:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b45e:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b462:	42b3      	cmp	r3, r6
 801b464:	d124      	bne.n	801b4b0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b466:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b46a:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b46e:	f001 070f 	and.w	r7, r1, #15
 801b472:	f8cd 8000 	str.w	r8, [sp]
 801b476:	464b      	mov	r3, r9
 801b478:	4652      	mov	r2, sl
 801b47a:	4621      	mov	r1, r4
 801b47c:	4628      	mov	r0, r5
 801b47e:	f7ff ffb7 	bl	801b3f0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b482:	4683      	mov	fp, r0
 801b484:	b168      	cbz	r0, 801b4a2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b486:	eb0a 0109 	add.w	r1, sl, r9
 801b48a:	4441      	add	r1, r8
 801b48c:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b490:	463a      	mov	r2, r7
 801b492:	4649      	mov	r1, r9
 801b494:	4628      	mov	r0, r5
 801b496:	f7ff ff53 	bl	801b340 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b49a:	4658      	mov	r0, fp
 801b49c:	b003      	add	sp, #12
 801b49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4a2:	eb07 010a 	add.w	r1, r7, sl
 801b4a6:	4449      	add	r1, r9
 801b4a8:	4441      	add	r1, r8
 801b4aa:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b4ae:	e7d2      	b.n	801b456 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b4b0:	f04f 0b00 	mov.w	fp, #0
 801b4b4:	e7f1      	b.n	801b49a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b4b6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b4b6:	b570      	push	{r4, r5, r6, lr}
 801b4b8:	8810      	ldrh	r0, [r2, #0]
 801b4ba:	4298      	cmp	r0, r3
 801b4bc:	d817      	bhi.n	801b4ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b4be:	1e48      	subs	r0, r1, #1
 801b4c0:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b4c4:	4298      	cmp	r0, r3
 801b4c6:	d312      	bcc.n	801b4ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b4c8:	2400      	movs	r4, #0
 801b4ca:	428c      	cmp	r4, r1
 801b4cc:	d20f      	bcs.n	801b4ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b4ce:	1860      	adds	r0, r4, r1
 801b4d0:	1040      	asrs	r0, r0, #1
 801b4d2:	0085      	lsls	r5, r0, #2
 801b4d4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b4d8:	42b3      	cmp	r3, r6
 801b4da:	d902      	bls.n	801b4e2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b4dc:	3001      	adds	r0, #1
 801b4de:	b284      	uxth	r4, r0
 801b4e0:	e7f3      	b.n	801b4ca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b4e2:	d201      	bcs.n	801b4e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801b4e4:	b281      	uxth	r1, r0
 801b4e6:	e7f0      	b.n	801b4ca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b4e8:	442a      	add	r2, r5
 801b4ea:	8850      	ldrh	r0, [r2, #2]
 801b4ec:	bd70      	pop	{r4, r5, r6, pc}
 801b4ee:	2000      	movs	r0, #0
 801b4f0:	e7fc      	b.n	801b4ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801b4f2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4f6:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801b4f8:	886f      	ldrh	r7, [r5, #2]
 801b4fa:	4604      	mov	r4, r0
 801b4fc:	087f      	lsrs	r7, r7, #1
 801b4fe:	260b      	movs	r6, #11
 801b500:	3e01      	subs	r6, #1
 801b502:	d013      	beq.n	801b52c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801b504:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801b506:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b50a:	462a      	mov	r2, r5
 801b50c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801b510:	4639      	mov	r1, r7
 801b512:	4643      	mov	r3, r8
 801b514:	4620      	mov	r0, r4
 801b516:	f7ff ffce 	bl	801b4b6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b51a:	b138      	cbz	r0, 801b52c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801b51c:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b520:	4642      	mov	r2, r8
 801b522:	4620      	mov	r0, r4
 801b524:	f7ff ff93 	bl	801b44e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b528:	2800      	cmp	r0, #0
 801b52a:	d1e9      	bne.n	801b500 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801b52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b530 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801b530:	b570      	push	{r4, r5, r6, lr}
 801b532:	694a      	ldr	r2, [r1, #20]
 801b534:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801b536:	684b      	ldr	r3, [r1, #4]
 801b538:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801b53a:	1b54      	subs	r4, r2, r5
 801b53c:	f000 8106 	beq.w	801b74c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801b540:	1b9b      	subs	r3, r3, r6
 801b542:	d003      	beq.n	801b54c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b544:	4363      	muls	r3, r4
 801b546:	2210      	movs	r2, #16
 801b548:	fb93 f3f2 	sdiv	r3, r3, r2
 801b54c:	680c      	ldr	r4, [r1, #0]
 801b54e:	698a      	ldr	r2, [r1, #24]
 801b550:	1b65      	subs	r5, r4, r5
 801b552:	f000 80fd 	beq.w	801b750 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801b556:	1b92      	subs	r2, r2, r6
 801b558:	d003      	beq.n	801b562 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b55a:	436a      	muls	r2, r5
 801b55c:	2410      	movs	r4, #16
 801b55e:	fb92 f2f4 	sdiv	r2, r2, r4
 801b562:	1a9b      	subs	r3, r3, r2
 801b564:	ee07 3a90 	vmov	s15, r3
 801b568:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 801b78c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801b56c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b570:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b574:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b578:	460a      	mov	r2, r1
 801b57a:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801b57e:	4603      	mov	r3, r0
 801b580:	f100 040c 	add.w	r4, r0, #12
 801b584:	eeb1 6a43 	vneg.f32	s12, s6
 801b588:	edd2 7a02 	vldr	s15, [r2, #8]
 801b58c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b590:	3214      	adds	r2, #20
 801b592:	ece3 6a01 	vstmia	r3!, {s13}
 801b596:	ed52 7a02 	vldr	s15, [r2, #-8]
 801b59a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b59e:	429c      	cmp	r4, r3
 801b5a0:	edc3 7a02 	vstr	s15, [r3, #8]
 801b5a4:	ed52 7a01 	vldr	s15, [r2, #-4]
 801b5a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b5ac:	edc3 7a05 	vstr	s15, [r3, #20]
 801b5b0:	d1ea      	bne.n	801b588 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801b5b2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801b5b4:	698b      	ldr	r3, [r1, #24]
 801b5b6:	edd0 4a02 	vldr	s9, [r0, #8]
 801b5ba:	edd0 3a00 	vldr	s7, [r0]
 801b5be:	edd0 6a01 	vldr	s13, [r0, #4]
 801b5c2:	ed90 5a05 	vldr	s10, [r0, #20]
 801b5c6:	ed90 2a03 	vldr	s4, [r0, #12]
 801b5ca:	edd0 5a04 	vldr	s11, [r0, #16]
 801b5ce:	ed90 1a07 	vldr	s2, [r0, #28]
 801b5d2:	edd0 2a06 	vldr	s5, [r0, #24]
 801b5d6:	1a9b      	subs	r3, r3, r2
 801b5d8:	ee07 3a90 	vmov	s15, r3
 801b5dc:	684b      	ldr	r3, [r1, #4]
 801b5de:	1a9b      	subs	r3, r3, r2
 801b5e0:	ee07 3a10 	vmov	s14, r3
 801b5e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b5e8:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801b5ec:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b5f0:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801b5f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b5f8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801b5fc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b600:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b604:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b608:	ee32 5a45 	vsub.f32	s10, s4, s10
 801b60c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801b610:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801b614:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801b616:	694a      	ldr	r2, [r1, #20]
 801b618:	1b13      	subs	r3, r2, r4
 801b61a:	ee07 3a10 	vmov	s14, r3
 801b61e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b622:	680b      	ldr	r3, [r1, #0]
 801b624:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b628:	1b1b      	subs	r3, r3, r4
 801b62a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801b62e:	ee07 3a10 	vmov	s14, r3
 801b632:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b636:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b63a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801b63e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801b642:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801b646:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801b648:	698b      	ldr	r3, [r1, #24]
 801b64a:	1a9b      	subs	r3, r3, r2
 801b64c:	ee06 3a90 	vmov	s13, r3
 801b650:	684b      	ldr	r3, [r1, #4]
 801b652:	1a9b      	subs	r3, r3, r2
 801b654:	ee07 3a10 	vmov	s14, r3
 801b658:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b65c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b660:	ee66 6a84 	vmul.f32	s13, s13, s8
 801b664:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b668:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801b66c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801b670:	ee66 6a83 	vmul.f32	s13, s13, s6
 801b674:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801b678:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801b67a:	694a      	ldr	r2, [r1, #20]
 801b67c:	1b13      	subs	r3, r2, r4
 801b67e:	ee07 3a10 	vmov	s14, r3
 801b682:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b686:	680b      	ldr	r3, [r1, #0]
 801b688:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b68c:	1b1b      	subs	r3, r3, r4
 801b68e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801b692:	ee07 3a10 	vmov	s14, r3
 801b696:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b69a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b69e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b6a2:	edd0 5a08 	vldr	s11, [r0, #32]
 801b6a6:	ee25 5a06 	vmul.f32	s10, s10, s12
 801b6aa:	ee31 1a65 	vsub.f32	s2, s2, s11
 801b6ae:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801b6b2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801b6b4:	698b      	ldr	r3, [r1, #24]
 801b6b6:	1a9b      	subs	r3, r3, r2
 801b6b8:	ee07 3a10 	vmov	s14, r3
 801b6bc:	684b      	ldr	r3, [r1, #4]
 801b6be:	1a9b      	subs	r3, r3, r2
 801b6c0:	ee01 3a90 	vmov	s3, r3
 801b6c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b6c8:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801b6cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b6d0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b6d4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801b6d8:	ee61 1a84 	vmul.f32	s3, s3, s8
 801b6dc:	eea1 7a21 	vfma.f32	s14, s2, s3
 801b6e0:	ee27 7a03 	vmul.f32	s14, s14, s6
 801b6e4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801b6e8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801b6ea:	694a      	ldr	r2, [r1, #20]
 801b6ec:	1b13      	subs	r3, r2, r4
 801b6ee:	ee03 3a10 	vmov	s6, r3
 801b6f2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b6f6:	680b      	ldr	r3, [r1, #0]
 801b6f8:	ee23 3a04 	vmul.f32	s6, s6, s8
 801b6fc:	1b1b      	subs	r3, r3, r4
 801b6fe:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801b702:	ee03 3a10 	vmov	s6, r3
 801b706:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b70a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801b70e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801b712:	ee25 6a86 	vmul.f32	s12, s11, s12
 801b716:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801b71a:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801b71e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801b722:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b72a:	dd13      	ble.n	801b754 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801b72c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b730:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801b734:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801b736:	eee3 7a87 	vfma.f32	s15, s7, s14
 801b73a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b742:	dd15      	ble.n	801b770 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801b744:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b748:	6403      	str	r3, [r0, #64]	@ 0x40
 801b74a:	bd70      	pop	{r4, r5, r6, pc}
 801b74c:	4623      	mov	r3, r4
 801b74e:	e6fd      	b.n	801b54c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b750:	462a      	mov	r2, r5
 801b752:	e706      	b.n	801b562 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b754:	d502      	bpl.n	801b75c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801b756:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801b75a:	e7e9      	b.n	801b730 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801b75c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801b760:	eea3 2a85 	vfma.f32	s4, s7, s10
 801b764:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801b768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b76c:	dade      	bge.n	801b72c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801b76e:	e7f2      	b.n	801b756 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801b770:	d502      	bpl.n	801b778 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801b772:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801b776:	e7e7      	b.n	801b748 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801b778:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801b77c:	eee3 4a86 	vfma.f32	s9, s7, s12
 801b780:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801b784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b788:	dadc      	bge.n	801b744 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801b78a:	e7f2      	b.n	801b772 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801b78c:	3d800000 	.word	0x3d800000

0801b790 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801b790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b794:	2714      	movs	r7, #20
 801b796:	435f      	muls	r7, r3
 801b798:	eb02 0c07 	add.w	ip, r2, r7
 801b79c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801b7a0:	f115 0e0f 	adds.w	lr, r5, #15
 801b7a4:	f100 80a2 	bmi.w	801b8ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801b7a8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801b7ac:	9c08      	ldr	r4, [sp, #32]
 801b7ae:	f8c0 e014 	str.w	lr, [r0, #20]
 801b7b2:	2614      	movs	r6, #20
 801b7b4:	4366      	muls	r6, r4
 801b7b6:	eb02 0806 	add.w	r8, r2, r6
 801b7ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b7be:	f115 040f 	adds.w	r4, r5, #15
 801b7c2:	f100 809f 	bmi.w	801b904 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801b7c6:	1124      	asrs	r4, r4, #4
 801b7c8:	eba4 040e 	sub.w	r4, r4, lr
 801b7cc:	6184      	str	r4, [r0, #24]
 801b7ce:	2c00      	cmp	r4, #0
 801b7d0:	f000 808a 	beq.w	801b8e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801b7d4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801b7d8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801b7dc:	5995      	ldr	r5, [r2, r6]
 801b7de:	eba4 0809 	sub.w	r8, r4, r9
 801b7e2:	59d4      	ldr	r4, [r2, r7]
 801b7e4:	eba5 0a04 	sub.w	sl, r5, r4
 801b7e8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801b7ec:	fb0e fe05 	mul.w	lr, lr, r5
 801b7f0:	fb0a ee19 	mls	lr, sl, r9, lr
 801b7f4:	fb08 e404 	mla	r4, r8, r4, lr
 801b7f8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801b7fc:	3c01      	subs	r4, #1
 801b7fe:	19a4      	adds	r4, r4, r6
 801b800:	f100 808c 	bmi.w	801b91c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801b804:	fb94 fef6 	sdiv	lr, r4, r6
 801b808:	f8c0 e000 	str.w	lr, [r0]
 801b80c:	fb06 441e 	mls	r4, r6, lr, r4
 801b810:	6104      	str	r4, [r0, #16]
 801b812:	2d00      	cmp	r5, #0
 801b814:	f2c0 8095 	blt.w	801b942 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801b818:	fb95 f4f6 	sdiv	r4, r5, r6
 801b81c:	6044      	str	r4, [r0, #4]
 801b81e:	fb06 5514 	mls	r5, r6, r4, r5
 801b822:	6085      	str	r5, [r0, #8]
 801b824:	60c6      	str	r6, [r0, #12]
 801b826:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801b82a:	6945      	ldr	r5, [r0, #20]
 801b82c:	59d2      	ldr	r2, [r2, r7]
 801b82e:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 801b964 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801b832:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801b836:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801b83a:	ee07 4a10 	vmov	s14, r4
 801b83e:	6804      	ldr	r4, [r0, #0]
 801b840:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801b844:	ee07 2a90 	vmov	s15, r2
 801b848:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b84c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b850:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b854:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b858:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b85c:	edd3 6a00 	vldr	s13, [r3]
 801b860:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b864:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801b868:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b86c:	edc0 6a07 	vstr	s13, [r0, #28]
 801b870:	edd0 6a01 	vldr	s13, [r0, #4]
 801b874:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801b878:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801b87c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b880:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b884:	ed80 6a08 	vstr	s12, [r0, #32]
 801b888:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801b88a:	6242      	str	r2, [r0, #36]	@ 0x24
 801b88c:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801b890:	ed93 6a03 	vldr	s12, [r3, #12]
 801b894:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b898:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801b89c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b8a0:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801b8a4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801b8a8:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801b8ac:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b8b0:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801b8b4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801b8b6:	6302      	str	r2, [r0, #48]	@ 0x30
 801b8b8:	ed93 6a06 	vldr	s12, [r3, #24]
 801b8bc:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801b8c0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b8c4:	eeb0 7a46 	vmov.f32	s14, s12
 801b8c8:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801b8cc:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b8d0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801b8d4:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801b8d8:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801b8dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b8e0:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801b8e4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801b8e6:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801b8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8ec:	f1c5 0501 	rsb	r5, r5, #1
 801b8f0:	f015 050f 	ands.w	r5, r5, #15
 801b8f4:	bf18      	it	ne
 801b8f6:	2501      	movne	r5, #1
 801b8f8:	2410      	movs	r4, #16
 801b8fa:	fb9e fef4 	sdiv	lr, lr, r4
 801b8fe:	ebae 0e05 	sub.w	lr, lr, r5
 801b902:	e753      	b.n	801b7ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801b904:	f1c5 0501 	rsb	r5, r5, #1
 801b908:	f015 050f 	ands.w	r5, r5, #15
 801b90c:	bf18      	it	ne
 801b90e:	2501      	movne	r5, #1
 801b910:	f04f 0910 	mov.w	r9, #16
 801b914:	fb94 f4f9 	sdiv	r4, r4, r9
 801b918:	1b64      	subs	r4, r4, r5
 801b91a:	e755      	b.n	801b7c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801b91c:	4264      	negs	r4, r4
 801b91e:	fb94 fef6 	sdiv	lr, r4, r6
 801b922:	f1ce 0800 	rsb	r8, lr, #0
 801b926:	fb06 441e 	mls	r4, r6, lr, r4
 801b92a:	f8c0 8000 	str.w	r8, [r0]
 801b92e:	6104      	str	r4, [r0, #16]
 801b930:	2c00      	cmp	r4, #0
 801b932:	f43f af6e 	beq.w	801b812 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801b936:	ea6f 0e0e 	mvn.w	lr, lr
 801b93a:	f8c0 e000 	str.w	lr, [r0]
 801b93e:	1b34      	subs	r4, r6, r4
 801b940:	e766      	b.n	801b810 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801b942:	426d      	negs	r5, r5
 801b944:	fb95 f4f6 	sdiv	r4, r5, r6
 801b948:	f1c4 0e00 	rsb	lr, r4, #0
 801b94c:	fb06 5514 	mls	r5, r6, r4, r5
 801b950:	f8c0 e004 	str.w	lr, [r0, #4]
 801b954:	6085      	str	r5, [r0, #8]
 801b956:	2d00      	cmp	r5, #0
 801b958:	f43f af64 	beq.w	801b824 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801b95c:	43e4      	mvns	r4, r4
 801b95e:	6044      	str	r4, [r0, #4]
 801b960:	1b75      	subs	r5, r6, r5
 801b962:	e75e      	b.n	801b822 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801b964:	3d800000 	.word	0x3d800000

0801b968 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b968:	4602      	mov	r2, r0
 801b96a:	b148      	cbz	r0, 801b980 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b96c:	2300      	movs	r3, #0
 801b96e:	b298      	uxth	r0, r3
 801b970:	3301      	adds	r3, #1
 801b972:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b976:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b97a:	2900      	cmp	r1, #0
 801b97c:	d1f7      	bne.n	801b96e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b97e:	4770      	bx	lr
 801b980:	4770      	bx	lr

0801b982 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b982:	b530      	push	{r4, r5, lr}
 801b984:	4604      	mov	r4, r0
 801b986:	b159      	cbz	r1, 801b9a0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801b988:	b148      	cbz	r0, 801b99e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b98a:	2300      	movs	r3, #0
 801b98c:	b298      	uxth	r0, r3
 801b98e:	4282      	cmp	r2, r0
 801b990:	d905      	bls.n	801b99e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b992:	5ccd      	ldrb	r5, [r1, r3]
 801b994:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801b998:	3301      	adds	r3, #1
 801b99a:	2d00      	cmp	r5, #0
 801b99c:	d1f6      	bne.n	801b98c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b99e:	bd30      	pop	{r4, r5, pc}
 801b9a0:	4608      	mov	r0, r1
 801b9a2:	e7fc      	b.n	801b99e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801b9a4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801b9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b9a6:	b08b      	sub	sp, #44	@ 0x2c
 801b9a8:	468c      	mov	ip, r1
 801b9aa:	2100      	movs	r1, #0
 801b9ac:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801b9b0:	4604      	mov	r4, r0
 801b9b2:	261f      	movs	r6, #31
 801b9b4:	af01      	add	r7, sp, #4
 801b9b6:	fb94 fef3 	sdiv	lr, r4, r3
 801b9ba:	fb03 441e 	mls	r4, r3, lr, r4
 801b9be:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801b9c2:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801b9c6:	b2ec      	uxtb	r4, r5
 801b9c8:	2d09      	cmp	r5, #9
 801b9ca:	bfd4      	ite	le
 801b9cc:	3430      	addle	r4, #48	@ 0x30
 801b9ce:	3457      	addgt	r4, #87	@ 0x57
 801b9d0:	b2e4      	uxtb	r4, r4
 801b9d2:	55bc      	strb	r4, [r7, r6]
 801b9d4:	4674      	mov	r4, lr
 801b9d6:	1e71      	subs	r1, r6, #1
 801b9d8:	b974      	cbnz	r4, 801b9f8 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801b9da:	2800      	cmp	r0, #0
 801b9dc:	da05      	bge.n	801b9ea <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801b9de:	ab0a      	add	r3, sp, #40	@ 0x28
 801b9e0:	4419      	add	r1, r3
 801b9e2:	232d      	movs	r3, #45	@ 0x2d
 801b9e4:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b9e8:	1eb1      	subs	r1, r6, #2
 801b9ea:	3101      	adds	r1, #1
 801b9ec:	4439      	add	r1, r7
 801b9ee:	4660      	mov	r0, ip
 801b9f0:	f7ff ffc7 	bl	801b982 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b9f4:	b00b      	add	sp, #44	@ 0x2c
 801b9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b9f8:	460e      	mov	r6, r1
 801b9fa:	e7dc      	b.n	801b9b6 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801b9fc <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801b9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b9fe:	b08b      	sub	sp, #44	@ 0x2c
 801ba00:	468c      	mov	ip, r1
 801ba02:	2100      	movs	r1, #0
 801ba04:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801ba08:	ae01      	add	r6, sp, #4
 801ba0a:	211f      	movs	r1, #31
 801ba0c:	fbb0 f7f3 	udiv	r7, r0, r3
 801ba10:	fb03 0517 	mls	r5, r3, r7, r0
 801ba14:	b2ec      	uxtb	r4, r5
 801ba16:	2d09      	cmp	r5, #9
 801ba18:	bfd4      	ite	le
 801ba1a:	3430      	addle	r4, #48	@ 0x30
 801ba1c:	3457      	addgt	r4, #87	@ 0x57
 801ba1e:	b2e4      	uxtb	r4, r4
 801ba20:	558c      	strb	r4, [r1, r6]
 801ba22:	4638      	mov	r0, r7
 801ba24:	1e4c      	subs	r4, r1, #1
 801ba26:	b92f      	cbnz	r7, 801ba34 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801ba28:	4431      	add	r1, r6
 801ba2a:	4660      	mov	r0, ip
 801ba2c:	f7ff ffa9 	bl	801b982 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ba30:	b00b      	add	sp, #44	@ 0x2c
 801ba32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba34:	4621      	mov	r1, r4
 801ba36:	e7e9      	b.n	801ba0c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801ba38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801ba38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba3c:	4691      	mov	r9, r2
 801ba3e:	b085      	sub	sp, #20
 801ba40:	6802      	ldr	r2, [r0, #0]
 801ba42:	9201      	str	r2, [sp, #4]
 801ba44:	4688      	mov	r8, r1
 801ba46:	4683      	mov	fp, r0
 801ba48:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801ba4c:	9103      	str	r1, [sp, #12]
 801ba4e:	4610      	mov	r0, r2
 801ba50:	461c      	mov	r4, r3
 801ba52:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801ba56:	9302      	str	r3, [sp, #8]
 801ba58:	f7ff ff86 	bl	801b968 <_ZN8touchgfx7Unicode6strlenEPKt>
 801ba5c:	f1b8 0f00 	cmp.w	r8, #0
 801ba60:	bf0c      	ite	eq
 801ba62:	4684      	moveq	ip, r0
 801ba64:	f100 0c01 	addne.w	ip, r0, #1
 801ba68:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801ba6c:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801ba70:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801ba72:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ba74:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801ba78:	9903      	ldr	r1, [sp, #12]
 801ba7a:	fa1f fc8c 	uxth.w	ip, ip
 801ba7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801ba82:	d041      	beq.n	801bb08 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801ba84:	d834      	bhi.n	801baf0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801ba86:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801ba8a:	d059      	beq.n	801bb40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801ba8c:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801ba90:	d03a      	beq.n	801bb08 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801ba92:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801ba96:	d034      	beq.n	801bb02 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801ba98:	2400      	movs	r4, #0
 801ba9a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801ba9e:	3a01      	subs	r2, #1
 801baa0:	b169      	cbz	r1, 801babe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801baa2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801baa4:	458c      	cmp	ip, r1
 801baa6:	da09      	bge.n	801babc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801baa8:	eba1 010c 	sub.w	r1, r1, ip
 801baac:	b289      	uxth	r1, r1
 801baae:	b933      	cbnz	r3, 801babe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801bab0:	2e00      	cmp	r6, #0
 801bab2:	d051      	beq.n	801bb58 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801bab4:	2800      	cmp	r0, #0
 801bab6:	d04f      	beq.n	801bb58 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801bab8:	440c      	add	r4, r1
 801baba:	b2a4      	uxth	r4, r4
 801babc:	2100      	movs	r1, #0
 801babe:	682b      	ldr	r3, [r5, #0]
 801bac0:	4293      	cmp	r3, r2
 801bac2:	da07      	bge.n	801bad4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801bac4:	f1b8 0f00 	cmp.w	r8, #0
 801bac8:	d004      	beq.n	801bad4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801baca:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801bace:	682b      	ldr	r3, [r5, #0]
 801bad0:	3301      	adds	r3, #1
 801bad2:	602b      	str	r3, [r5, #0]
 801bad4:	2730      	movs	r7, #48	@ 0x30
 801bad6:	2c00      	cmp	r4, #0
 801bad8:	d04e      	beq.n	801bb78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801bada:	682e      	ldr	r6, [r5, #0]
 801badc:	3c01      	subs	r4, #1
 801bade:	42b2      	cmp	r2, r6
 801bae0:	b2a4      	uxth	r4, r4
 801bae2:	dd49      	ble.n	801bb78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801bae4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801bae8:	682b      	ldr	r3, [r5, #0]
 801baea:	3301      	adds	r3, #1
 801baec:	602b      	str	r3, [r5, #0]
 801baee:	e7f2      	b.n	801bad6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801baf0:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801baf4:	d01d      	beq.n	801bb32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801baf6:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801bafa:	d002      	beq.n	801bb02 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801bafc:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801bb00:	e7c9      	b.n	801ba96 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801bb02:	4684      	mov	ip, r0
 801bb04:	f04f 0800 	mov.w	r8, #0
 801bb08:	2c00      	cmp	r4, #0
 801bb0a:	d0c6      	beq.n	801ba9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801bb0c:	b947      	cbnz	r7, 801bb20 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801bb0e:	2801      	cmp	r0, #1
 801bb10:	d106      	bne.n	801bb20 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801bb12:	8814      	ldrh	r4, [r2, #0]
 801bb14:	2c30      	cmp	r4, #48	@ 0x30
 801bb16:	bf02      	ittt	eq
 801bb18:	3202      	addeq	r2, #2
 801bb1a:	f8cb 2000 	streq.w	r2, [fp]
 801bb1e:	4638      	moveq	r0, r7
 801bb20:	45bc      	cmp	ip, r7
 801bb22:	da14      	bge.n	801bb4e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801bb24:	b2bf      	uxth	r7, r7
 801bb26:	eba7 040c 	sub.w	r4, r7, ip
 801bb2a:	b2a4      	uxth	r4, r4
 801bb2c:	46bc      	mov	ip, r7
 801bb2e:	2600      	movs	r6, #0
 801bb30:	e7b3      	b.n	801ba9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801bb32:	4684      	mov	ip, r0
 801bb34:	b16c      	cbz	r4, 801bb52 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801bb36:	42b8      	cmp	r0, r7
 801bb38:	dd00      	ble.n	801bb3c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801bb3a:	b2b8      	uxth	r0, r7
 801bb3c:	2400      	movs	r4, #0
 801bb3e:	e003      	b.n	801bb48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801bb40:	f04f 0c01 	mov.w	ip, #1
 801bb44:	2400      	movs	r4, #0
 801bb46:	4660      	mov	r0, ip
 801bb48:	4626      	mov	r6, r4
 801bb4a:	46a0      	mov	r8, r4
 801bb4c:	e7a5      	b.n	801ba9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801bb4e:	2400      	movs	r4, #0
 801bb50:	e7ed      	b.n	801bb2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801bb52:	4626      	mov	r6, r4
 801bb54:	46a0      	mov	r8, r4
 801bb56:	e7a0      	b.n	801ba9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801bb58:	2900      	cmp	r1, #0
 801bb5a:	d0b0      	beq.n	801babe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801bb5c:	2720      	movs	r7, #32
 801bb5e:	682e      	ldr	r6, [r5, #0]
 801bb60:	2900      	cmp	r1, #0
 801bb62:	d0ac      	beq.n	801babe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801bb64:	3901      	subs	r1, #1
 801bb66:	4296      	cmp	r6, r2
 801bb68:	b289      	uxth	r1, r1
 801bb6a:	daa7      	bge.n	801babc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801bb6c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801bb70:	682b      	ldr	r3, [r5, #0]
 801bb72:	3301      	adds	r3, #1
 801bb74:	602b      	str	r3, [r5, #0]
 801bb76:	e7f2      	b.n	801bb5e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801bb78:	b188      	cbz	r0, 801bb9e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801bb7a:	682b      	ldr	r3, [r5, #0]
 801bb7c:	3801      	subs	r0, #1
 801bb7e:	429a      	cmp	r2, r3
 801bb80:	b280      	uxth	r0, r0
 801bb82:	dd0c      	ble.n	801bb9e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801bb84:	f8db 3000 	ldr.w	r3, [fp]
 801bb88:	1c9c      	adds	r4, r3, #2
 801bb8a:	f8cb 4000 	str.w	r4, [fp]
 801bb8e:	881c      	ldrh	r4, [r3, #0]
 801bb90:	682b      	ldr	r3, [r5, #0]
 801bb92:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801bb96:	682b      	ldr	r3, [r5, #0]
 801bb98:	3301      	adds	r3, #1
 801bb9a:	602b      	str	r3, [r5, #0]
 801bb9c:	e7ec      	b.n	801bb78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801bb9e:	2620      	movs	r6, #32
 801bba0:	b151      	cbz	r1, 801bbb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801bba2:	6828      	ldr	r0, [r5, #0]
 801bba4:	3901      	subs	r1, #1
 801bba6:	4282      	cmp	r2, r0
 801bba8:	b289      	uxth	r1, r1
 801bbaa:	dd05      	ble.n	801bbb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801bbac:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801bbb0:	682b      	ldr	r3, [r5, #0]
 801bbb2:	3301      	adds	r3, #1
 801bbb4:	602b      	str	r3, [r5, #0]
 801bbb6:	e7f3      	b.n	801bba0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801bbb8:	b005      	add	sp, #20
 801bbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bbbe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801bbbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bbc2:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801bbc6:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801bbca:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801bbce:	2400      	movs	r4, #0
 801bbd0:	8014      	strh	r4, [r2, #0]
 801bbd2:	701c      	strb	r4, [r3, #0]
 801bbd4:	f888 4000 	strb.w	r4, [r8]
 801bbd8:	f88c 4000 	strb.w	r4, [ip]
 801bbdc:	f88e 4000 	strb.w	r4, [lr]
 801bbe0:	703c      	strb	r4, [r7, #0]
 801bbe2:	6804      	ldr	r4, [r0, #0]
 801bbe4:	b1a4      	cbz	r4, 801bc10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801bbe6:	8824      	ldrh	r4, [r4, #0]
 801bbe8:	f04f 0901 	mov.w	r9, #1
 801bbec:	b314      	cbz	r4, 801bc34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801bbee:	2c2b      	cmp	r4, #43	@ 0x2b
 801bbf0:	d001      	beq.n	801bbf6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801bbf2:	2c20      	cmp	r4, #32
 801bbf4:	d110      	bne.n	801bc18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801bbf6:	8014      	strh	r4, [r2, #0]
 801bbf8:	6804      	ldr	r4, [r0, #0]
 801bbfa:	b10c      	cbz	r4, 801bc00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801bbfc:	3402      	adds	r4, #2
 801bbfe:	6004      	str	r4, [r0, #0]
 801bc00:	680c      	ldr	r4, [r1, #0]
 801bc02:	b10c      	cbz	r4, 801bc08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801bc04:	3401      	adds	r4, #1
 801bc06:	600c      	str	r4, [r1, #0]
 801bc08:	6804      	ldr	r4, [r0, #0]
 801bc0a:	b17c      	cbz	r4, 801bc2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801bc0c:	8824      	ldrh	r4, [r4, #0]
 801bc0e:	e7ed      	b.n	801bbec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801bc10:	680c      	ldr	r4, [r1, #0]
 801bc12:	b17c      	cbz	r4, 801bc34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801bc14:	7824      	ldrb	r4, [r4, #0]
 801bc16:	e7e7      	b.n	801bbe8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801bc18:	2c2d      	cmp	r4, #45	@ 0x2d
 801bc1a:	d102      	bne.n	801bc22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801bc1c:	f883 9000 	strb.w	r9, [r3]
 801bc20:	e7ea      	b.n	801bbf8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801bc22:	2c23      	cmp	r4, #35	@ 0x23
 801bc24:	d107      	bne.n	801bc36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801bc26:	f888 9000 	strb.w	r9, [r8]
 801bc2a:	e7e5      	b.n	801bbf8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801bc2c:	680c      	ldr	r4, [r1, #0]
 801bc2e:	b10c      	cbz	r4, 801bc34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801bc30:	7824      	ldrb	r4, [r4, #0]
 801bc32:	e7db      	b.n	801bbec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801bc34:	2400      	movs	r4, #0
 801bc36:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801bc3a:	2b09      	cmp	r3, #9
 801bc3c:	d901      	bls.n	801bc42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801bc3e:	2c2a      	cmp	r4, #42	@ 0x2a
 801bc40:	d122      	bne.n	801bc88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801bc42:	2301      	movs	r3, #1
 801bc44:	2c30      	cmp	r4, #48	@ 0x30
 801bc46:	f88e 3000 	strb.w	r3, [lr]
 801bc4a:	d10d      	bne.n	801bc68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801bc4c:	f88c 3000 	strb.w	r3, [ip]
 801bc50:	6803      	ldr	r3, [r0, #0]
 801bc52:	b10b      	cbz	r3, 801bc58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801bc54:	3302      	adds	r3, #2
 801bc56:	6003      	str	r3, [r0, #0]
 801bc58:	680b      	ldr	r3, [r1, #0]
 801bc5a:	b10b      	cbz	r3, 801bc60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801bc5c:	3301      	adds	r3, #1
 801bc5e:	600b      	str	r3, [r1, #0]
 801bc60:	6803      	ldr	r3, [r0, #0]
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d02f      	beq.n	801bcc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801bc66:	881c      	ldrh	r4, [r3, #0]
 801bc68:	2c2a      	cmp	r4, #42	@ 0x2a
 801bc6a:	d135      	bne.n	801bcd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801bc6c:	f04f 33ff 	mov.w	r3, #4294967295
 801bc70:	6033      	str	r3, [r6, #0]
 801bc72:	6803      	ldr	r3, [r0, #0]
 801bc74:	b10b      	cbz	r3, 801bc7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801bc76:	3302      	adds	r3, #2
 801bc78:	6003      	str	r3, [r0, #0]
 801bc7a:	680b      	ldr	r3, [r1, #0]
 801bc7c:	b10b      	cbz	r3, 801bc82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801bc7e:	3301      	adds	r3, #1
 801bc80:	600b      	str	r3, [r1, #0]
 801bc82:	6803      	ldr	r3, [r0, #0]
 801bc84:	b31b      	cbz	r3, 801bcce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801bc86:	881c      	ldrh	r4, [r3, #0]
 801bc88:	2c2e      	cmp	r4, #46	@ 0x2e
 801bc8a:	d11a      	bne.n	801bcc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801bc8c:	2301      	movs	r3, #1
 801bc8e:	703b      	strb	r3, [r7, #0]
 801bc90:	6803      	ldr	r3, [r0, #0]
 801bc92:	b10b      	cbz	r3, 801bc98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801bc94:	3302      	adds	r3, #2
 801bc96:	6003      	str	r3, [r0, #0]
 801bc98:	680b      	ldr	r3, [r1, #0]
 801bc9a:	b10b      	cbz	r3, 801bca0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801bc9c:	3301      	adds	r3, #1
 801bc9e:	600b      	str	r3, [r1, #0]
 801bca0:	6803      	ldr	r3, [r0, #0]
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d036      	beq.n	801bd14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801bca6:	881b      	ldrh	r3, [r3, #0]
 801bca8:	2b2a      	cmp	r3, #42	@ 0x2a
 801bcaa:	d137      	bne.n	801bd1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801bcac:	f04f 33ff 	mov.w	r3, #4294967295
 801bcb0:	602b      	str	r3, [r5, #0]
 801bcb2:	6803      	ldr	r3, [r0, #0]
 801bcb4:	b10b      	cbz	r3, 801bcba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801bcb6:	3302      	adds	r3, #2
 801bcb8:	6003      	str	r3, [r0, #0]
 801bcba:	680b      	ldr	r3, [r1, #0]
 801bcbc:	b10b      	cbz	r3, 801bcc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801bcbe:	3301      	adds	r3, #1
 801bcc0:	600b      	str	r3, [r1, #0]
 801bcc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bcc6:	680c      	ldr	r4, [r1, #0]
 801bcc8:	b134      	cbz	r4, 801bcd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801bcca:	7824      	ldrb	r4, [r4, #0]
 801bccc:	e7cc      	b.n	801bc68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801bcce:	680b      	ldr	r3, [r1, #0]
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d0f6      	beq.n	801bcc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801bcd4:	781c      	ldrb	r4, [r3, #0]
 801bcd6:	e7d7      	b.n	801bc88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801bcd8:	2300      	movs	r3, #0
 801bcda:	6033      	str	r3, [r6, #0]
 801bcdc:	220a      	movs	r2, #10
 801bcde:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801bce2:	fa1f f38c 	uxth.w	r3, ip
 801bce6:	2b09      	cmp	r3, #9
 801bce8:	d8ce      	bhi.n	801bc88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801bcea:	6833      	ldr	r3, [r6, #0]
 801bcec:	fb02 c303 	mla	r3, r2, r3, ip
 801bcf0:	6033      	str	r3, [r6, #0]
 801bcf2:	6803      	ldr	r3, [r0, #0]
 801bcf4:	b10b      	cbz	r3, 801bcfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801bcf6:	3302      	adds	r3, #2
 801bcf8:	6003      	str	r3, [r0, #0]
 801bcfa:	680b      	ldr	r3, [r1, #0]
 801bcfc:	b10b      	cbz	r3, 801bd02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801bcfe:	3301      	adds	r3, #1
 801bd00:	600b      	str	r3, [r1, #0]
 801bd02:	6803      	ldr	r3, [r0, #0]
 801bd04:	b10b      	cbz	r3, 801bd0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801bd06:	881c      	ldrh	r4, [r3, #0]
 801bd08:	e7e9      	b.n	801bcde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801bd0a:	680c      	ldr	r4, [r1, #0]
 801bd0c:	2c00      	cmp	r4, #0
 801bd0e:	d0e6      	beq.n	801bcde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801bd10:	7824      	ldrb	r4, [r4, #0]
 801bd12:	e7e4      	b.n	801bcde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801bd14:	680b      	ldr	r3, [r1, #0]
 801bd16:	b10b      	cbz	r3, 801bd1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801bd18:	781b      	ldrb	r3, [r3, #0]
 801bd1a:	e7c5      	b.n	801bca8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801bd1c:	2200      	movs	r2, #0
 801bd1e:	602a      	str	r2, [r5, #0]
 801bd20:	240a      	movs	r4, #10
 801bd22:	3b30      	subs	r3, #48	@ 0x30
 801bd24:	b29e      	uxth	r6, r3
 801bd26:	2e09      	cmp	r6, #9
 801bd28:	682a      	ldr	r2, [r5, #0]
 801bd2a:	d813      	bhi.n	801bd54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801bd2c:	fb04 3302 	mla	r3, r4, r2, r3
 801bd30:	602b      	str	r3, [r5, #0]
 801bd32:	6803      	ldr	r3, [r0, #0]
 801bd34:	b10b      	cbz	r3, 801bd3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801bd36:	3302      	adds	r3, #2
 801bd38:	6003      	str	r3, [r0, #0]
 801bd3a:	680b      	ldr	r3, [r1, #0]
 801bd3c:	b10b      	cbz	r3, 801bd42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801bd3e:	3301      	adds	r3, #1
 801bd40:	600b      	str	r3, [r1, #0]
 801bd42:	6803      	ldr	r3, [r0, #0]
 801bd44:	b10b      	cbz	r3, 801bd4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801bd46:	881b      	ldrh	r3, [r3, #0]
 801bd48:	e7eb      	b.n	801bd22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801bd4a:	680b      	ldr	r3, [r1, #0]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	d0e8      	beq.n	801bd22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801bd50:	781b      	ldrb	r3, [r3, #0]
 801bd52:	e7e6      	b.n	801bd22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801bd54:	2a06      	cmp	r2, #6
 801bd56:	bfa8      	it	ge
 801bd58:	2206      	movge	r2, #6
 801bd5a:	602a      	str	r2, [r5, #0]
 801bd5c:	e7b1      	b.n	801bcc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801bd5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801bd5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd62:	b0a3      	sub	sp, #140	@ 0x8c
 801bd64:	2600      	movs	r6, #0
 801bd66:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801bd6a:	4607      	mov	r7, r0
 801bd6c:	4688      	mov	r8, r1
 801bd6e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801bd72:	4631      	mov	r1, r6
 801bd74:	2242      	movs	r2, #66	@ 0x42
 801bd76:	4648      	mov	r0, r9
 801bd78:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801bd7a:	960d      	str	r6, [sp, #52]	@ 0x34
 801bd7c:	f00f fd2f 	bl	802b7de <memset>
 801bd80:	b15f      	cbz	r7, 801bd9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801bd82:	f108 3aff 	add.w	sl, r8, #4294967295
 801bd86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bd88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bd8a:	b152      	cbz	r2, 801bda2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801bd8c:	8812      	ldrh	r2, [r2, #0]
 801bd8e:	b10a      	cbz	r2, 801bd94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801bd90:	459a      	cmp	sl, r3
 801bd92:	dc2e      	bgt.n	801bdf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801bd94:	2200      	movs	r2, #0
 801bd96:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801bd9a:	4638      	mov	r0, r7
 801bd9c:	b023      	add	sp, #140	@ 0x8c
 801bd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bda2:	9a08      	ldr	r2, [sp, #32]
 801bda4:	2a00      	cmp	r2, #0
 801bda6:	d0f5      	beq.n	801bd94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801bda8:	7812      	ldrb	r2, [r2, #0]
 801bdaa:	e7f0      	b.n	801bd8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801bdac:	2d00      	cmp	r5, #0
 801bdae:	d0ea      	beq.n	801bd86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bdb0:	782a      	ldrb	r2, [r5, #0]
 801bdb2:	b142      	cbz	r2, 801bdc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801bdb4:	2a25      	cmp	r2, #37	@ 0x25
 801bdb6:	d001      	beq.n	801bdbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801bdb8:	459a      	cmp	sl, r3
 801bdba:	dc08      	bgt.n	801bdce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801bdbc:	f1bb 0f00 	cmp.w	fp, #0
 801bdc0:	d121      	bne.n	801be06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801bdc2:	2d00      	cmp	r5, #0
 801bdc4:	d0df      	beq.n	801bd86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bdc6:	782a      	ldrb	r2, [r5, #0]
 801bdc8:	f04f 0b00 	mov.w	fp, #0
 801bdcc:	e01d      	b.n	801be0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801bdce:	f1bb 0f00 	cmp.w	fp, #0
 801bdd2:	d078      	beq.n	801bec6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 801bdd4:	f8bb 2000 	ldrh.w	r2, [fp]
 801bdd8:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801bddc:	f1bb 0f00 	cmp.w	fp, #0
 801bde0:	d002      	beq.n	801bde8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801bde2:	f10b 0202 	add.w	r2, fp, #2
 801bde6:	9209      	str	r2, [sp, #36]	@ 0x24
 801bde8:	b10d      	cbz	r5, 801bdee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801bdea:	3501      	adds	r5, #1
 801bdec:	9508      	str	r5, [sp, #32]
 801bdee:	3301      	adds	r3, #1
 801bdf0:	930d      	str	r3, [sp, #52]	@ 0x34
 801bdf2:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801bdf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bdf8:	f1bb 0f00 	cmp.w	fp, #0
 801bdfc:	d0d6      	beq.n	801bdac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801bdfe:	f8bb 2000 	ldrh.w	r2, [fp]
 801be02:	2a00      	cmp	r2, #0
 801be04:	d1d6      	bne.n	801bdb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801be06:	f8bb 2000 	ldrh.w	r2, [fp]
 801be0a:	2a00      	cmp	r2, #0
 801be0c:	d0bb      	beq.n	801bd86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801be0e:	459a      	cmp	sl, r3
 801be10:	ddb9      	ble.n	801bd86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801be12:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801be16:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801be1a:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801be1e:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801be22:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801be26:	960e      	str	r6, [sp, #56]	@ 0x38
 801be28:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801be2c:	960f      	str	r6, [sp, #60]	@ 0x3c
 801be2e:	f1bb 0f00 	cmp.w	fp, #0
 801be32:	d002      	beq.n	801be3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801be34:	f10b 0302 	add.w	r3, fp, #2
 801be38:	9309      	str	r3, [sp, #36]	@ 0x24
 801be3a:	b10d      	cbz	r5, 801be40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801be3c:	1c6b      	adds	r3, r5, #1
 801be3e:	9308      	str	r3, [sp, #32]
 801be40:	ab0f      	add	r3, sp, #60	@ 0x3c
 801be42:	9305      	str	r3, [sp, #20]
 801be44:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801be48:	9304      	str	r3, [sp, #16]
 801be4a:	ab0e      	add	r3, sp, #56	@ 0x38
 801be4c:	9303      	str	r3, [sp, #12]
 801be4e:	ab0c      	add	r3, sp, #48	@ 0x30
 801be50:	9302      	str	r3, [sp, #8]
 801be52:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801be56:	9301      	str	r3, [sp, #4]
 801be58:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801be5c:	9300      	str	r3, [sp, #0]
 801be5e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801be62:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801be66:	a908      	add	r1, sp, #32
 801be68:	a809      	add	r0, sp, #36	@ 0x24
 801be6a:	f7ff fea8 	bl	801bbbe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801be6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801be70:	2b00      	cmp	r3, #0
 801be72:	bfbe      	ittt	lt
 801be74:	6823      	ldrlt	r3, [r4, #0]
 801be76:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801be7a:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801be7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801be7e:	bfb8      	it	lt
 801be80:	3404      	addlt	r4, #4
 801be82:	2b00      	cmp	r3, #0
 801be84:	bfb8      	it	lt
 801be86:	6823      	ldrlt	r3, [r4, #0]
 801be88:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801be8c:	bfbe      	ittt	lt
 801be8e:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801be92:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801be94:	3404      	addlt	r4, #4
 801be96:	b1d9      	cbz	r1, 801bed0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 801be98:	880b      	ldrh	r3, [r1, #0]
 801be9a:	2b69      	cmp	r3, #105	@ 0x69
 801be9c:	d01f      	beq.n	801bede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801be9e:	d82f      	bhi.n	801bf00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 801bea0:	2b58      	cmp	r3, #88	@ 0x58
 801bea2:	d01c      	beq.n	801bede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801bea4:	d818      	bhi.n	801bed8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 801bea6:	2b25      	cmp	r3, #37	@ 0x25
 801bea8:	d034      	beq.n	801bf14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 801beaa:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801beae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801beb0:	f1bb 0f00 	cmp.w	fp, #0
 801beb4:	f000 80b8 	beq.w	801c028 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 801beb8:	f8bb 5000 	ldrh.w	r5, [fp]
 801bebc:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801bec0:	3301      	adds	r3, #1
 801bec2:	930d      	str	r3, [sp, #52]	@ 0x34
 801bec4:	e029      	b.n	801bf1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801bec6:	b10d      	cbz	r5, 801becc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 801bec8:	782a      	ldrb	r2, [r5, #0]
 801beca:	e785      	b.n	801bdd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801becc:	462a      	mov	r2, r5
 801bece:	e783      	b.n	801bdd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801bed0:	2a00      	cmp	r2, #0
 801bed2:	d0ea      	beq.n	801beaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801bed4:	7813      	ldrb	r3, [r2, #0]
 801bed6:	e7e0      	b.n	801be9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 801bed8:	3b63      	subs	r3, #99	@ 0x63
 801beda:	2b01      	cmp	r3, #1
 801bedc:	d8e5      	bhi.n	801beaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801bede:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801bee2:	b329      	cbz	r1, 801bf30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 801bee4:	880b      	ldrh	r3, [r1, #0]
 801bee6:	2b69      	cmp	r3, #105	@ 0x69
 801bee8:	d063      	beq.n	801bfb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801beea:	d825      	bhi.n	801bf38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 801beec:	2b63      	cmp	r3, #99	@ 0x63
 801beee:	d038      	beq.n	801bf62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 801bef0:	2b64      	cmp	r3, #100	@ 0x64
 801bef2:	d05e      	beq.n	801bfb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801bef4:	2b58      	cmp	r3, #88	@ 0x58
 801bef6:	d07b      	beq.n	801bff0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 801bef8:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801befc:	4625      	mov	r5, r4
 801befe:	e036      	b.n	801bf6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801bf00:	2b73      	cmp	r3, #115	@ 0x73
 801bf02:	d0ec      	beq.n	801bede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801bf04:	d802      	bhi.n	801bf0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 801bf06:	2b6f      	cmp	r3, #111	@ 0x6f
 801bf08:	d1cf      	bne.n	801beaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801bf0a:	e7e8      	b.n	801bede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801bf0c:	2b75      	cmp	r3, #117	@ 0x75
 801bf0e:	d0e6      	beq.n	801bede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801bf10:	2b78      	cmp	r3, #120	@ 0x78
 801bf12:	e7f9      	b.n	801bf08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 801bf14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bf16:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801bf1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf1c:	b10b      	cbz	r3, 801bf22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 801bf1e:	3302      	adds	r3, #2
 801bf20:	9309      	str	r3, [sp, #36]	@ 0x24
 801bf22:	9b08      	ldr	r3, [sp, #32]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	f43f af2e 	beq.w	801bd86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bf2a:	3301      	adds	r3, #1
 801bf2c:	9308      	str	r3, [sp, #32]
 801bf2e:	e72a      	b.n	801bd86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bf30:	2a00      	cmp	r2, #0
 801bf32:	d0e1      	beq.n	801bef8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801bf34:	7813      	ldrb	r3, [r2, #0]
 801bf36:	e7d6      	b.n	801bee6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 801bf38:	2b73      	cmp	r3, #115	@ 0x73
 801bf3a:	d036      	beq.n	801bfaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 801bf3c:	d807      	bhi.n	801bf4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 801bf3e:	2b6f      	cmp	r3, #111	@ 0x6f
 801bf40:	d1da      	bne.n	801bef8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801bf42:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bf44:	1d25      	adds	r5, r4, #4
 801bf46:	eba8 0202 	sub.w	r2, r8, r2
 801bf4a:	2308      	movs	r3, #8
 801bf4c:	e04a      	b.n	801bfe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801bf4e:	2b75      	cmp	r3, #117	@ 0x75
 801bf50:	d043      	beq.n	801bfda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 801bf52:	2b78      	cmp	r3, #120	@ 0x78
 801bf54:	d1d0      	bne.n	801bef8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801bf56:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bf58:	1d25      	adds	r5, r4, #4
 801bf5a:	eba8 0202 	sub.w	r2, r8, r2
 801bf5e:	2310      	movs	r3, #16
 801bf60:	e040      	b.n	801bfe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801bf62:	6823      	ldr	r3, [r4, #0]
 801bf64:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801bf68:	1d25      	adds	r5, r4, #4
 801bf6a:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801bf6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf70:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d052      	beq.n	801c01e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 801bf78:	881a      	ldrh	r2, [r3, #0]
 801bf7a:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801bf7e:	a80d      	add	r0, sp, #52	@ 0x34
 801bf80:	9005      	str	r0, [sp, #20]
 801bf82:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801bf86:	9004      	str	r0, [sp, #16]
 801bf88:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801bf8a:	9003      	str	r0, [sp, #12]
 801bf8c:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801bf90:	9002      	str	r0, [sp, #8]
 801bf92:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801bf94:	9001      	str	r0, [sp, #4]
 801bf96:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801bf9a:	9000      	str	r0, [sp, #0]
 801bf9c:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801bfa0:	a810      	add	r0, sp, #64	@ 0x40
 801bfa2:	f7ff fd49 	bl	801ba38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801bfa6:	462c      	mov	r4, r5
 801bfa8:	e7b7      	b.n	801bf1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801bfaa:	6823      	ldr	r3, [r4, #0]
 801bfac:	1d25      	adds	r5, r4, #4
 801bfae:	9310      	str	r3, [sp, #64]	@ 0x40
 801bfb0:	e7dd      	b.n	801bf6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801bfb2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bfb4:	6820      	ldr	r0, [r4, #0]
 801bfb6:	eba8 0202 	sub.w	r2, r8, r2
 801bfba:	230a      	movs	r3, #10
 801bfbc:	b292      	uxth	r2, r2
 801bfbe:	4649      	mov	r1, r9
 801bfc0:	f7ff fcf0 	bl	801b9a4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801bfc4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801bfc8:	2b2d      	cmp	r3, #45	@ 0x2d
 801bfca:	f104 0504 	add.w	r5, r4, #4
 801bfce:	d1ce      	bne.n	801bf6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801bfd0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801bfd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bfd6:	3302      	adds	r3, #2
 801bfd8:	e7e9      	b.n	801bfae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801bfda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bfdc:	1d25      	adds	r5, r4, #4
 801bfde:	eba8 0202 	sub.w	r2, r8, r2
 801bfe2:	230a      	movs	r3, #10
 801bfe4:	b292      	uxth	r2, r2
 801bfe6:	4649      	mov	r1, r9
 801bfe8:	6820      	ldr	r0, [r4, #0]
 801bfea:	f7ff fd07 	bl	801b9fc <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801bfee:	e7be      	b.n	801bf6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801bff0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bff2:	6820      	ldr	r0, [r4, #0]
 801bff4:	eba8 0202 	sub.w	r2, r8, r2
 801bff8:	b292      	uxth	r2, r2
 801bffa:	2310      	movs	r3, #16
 801bffc:	4649      	mov	r1, r9
 801bffe:	f7ff fcfd 	bl	801b9fc <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801c002:	1d25      	adds	r5, r4, #4
 801c004:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801c008:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801c00c:	2b00      	cmp	r3, #0
 801c00e:	d0ae      	beq.n	801bf6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801c010:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801c014:	2919      	cmp	r1, #25
 801c016:	d8f7      	bhi.n	801c008 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801c018:	3b20      	subs	r3, #32
 801c01a:	8013      	strh	r3, [r2, #0]
 801c01c:	e7f4      	b.n	801c008 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801c01e:	9a08      	ldr	r2, [sp, #32]
 801c020:	2a00      	cmp	r2, #0
 801c022:	d0aa      	beq.n	801bf7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801c024:	7812      	ldrb	r2, [r2, #0]
 801c026:	e7a8      	b.n	801bf7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801c028:	2d00      	cmp	r5, #0
 801c02a:	f43f af47 	beq.w	801bebc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 801c02e:	782d      	ldrb	r5, [r5, #0]
 801c030:	e744      	b.n	801bebc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0801c032 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801c032:	b507      	push	{r0, r1, r2, lr}
 801c034:	9300      	str	r3, [sp, #0]
 801c036:	4613      	mov	r3, r2
 801c038:	2200      	movs	r2, #0
 801c03a:	f7ff fe90 	bl	801bd5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801c03e:	b003      	add	sp, #12
 801c040:	f85d fb04 	ldr.w	pc, [sp], #4

0801c044 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801c044:	b40c      	push	{r2, r3}
 801c046:	b507      	push	{r0, r1, r2, lr}
 801c048:	ab04      	add	r3, sp, #16
 801c04a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c04e:	9301      	str	r3, [sp, #4]
 801c050:	f7ff ffef 	bl	801c032 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801c054:	b003      	add	sp, #12
 801c056:	f85d eb04 	ldr.w	lr, [sp], #4
 801c05a:	b002      	add	sp, #8
 801c05c:	4770      	bx	lr
	...

0801c060 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801c060:	4b01      	ldr	r3, [pc, #4]	@ (801c068 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801c062:	6018      	str	r0, [r3, #0]
 801c064:	4770      	bx	lr
 801c066:	bf00      	nop
 801c068:	20012748 	.word	0x20012748

0801c06c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801c06c:	4b06      	ldr	r3, [pc, #24]	@ (801c088 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801c06e:	881a      	ldrh	r2, [r3, #0]
 801c070:	4282      	cmp	r2, r0
 801c072:	d807      	bhi.n	801c084 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801c074:	4b05      	ldr	r3, [pc, #20]	@ (801c08c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801c076:	881b      	ldrh	r3, [r3, #0]
 801c078:	4413      	add	r3, r2
 801c07a:	4298      	cmp	r0, r3
 801c07c:	bfac      	ite	ge
 801c07e:	2000      	movge	r0, #0
 801c080:	2001      	movlt	r0, #1
 801c082:	4770      	bx	lr
 801c084:	2000      	movs	r0, #0
 801c086:	4770      	bx	lr
 801c088:	20012768 	.word	0x20012768
 801c08c:	2001276c 	.word	0x2001276c

0801c090 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801c090:	b508      	push	{r3, lr}
 801c092:	4601      	mov	r1, r0
 801c094:	f7ff ffea 	bl	801c06c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801c098:	b118      	cbz	r0, 801c0a2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801c09a:	4b02      	ldr	r3, [pc, #8]	@ (801c0a4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801c0a2:	bd08      	pop	{r3, pc}
 801c0a4:	2001274c 	.word	0x2001274c

0801c0a8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801c0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0aa:	4c24      	ldr	r4, [pc, #144]	@ (801c13c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801c0ac:	6823      	ldr	r3, [r4, #0]
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d042      	beq.n	801c138 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801c0b2:	4a23      	ldr	r2, [pc, #140]	@ (801c140 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801c0b4:	4d23      	ldr	r5, [pc, #140]	@ (801c144 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801c0b6:	8811      	ldrh	r1, [r2, #0]
 801c0b8:	f8b5 c000 	ldrh.w	ip, [r5]
 801c0bc:	4822      	ldr	r0, [pc, #136]	@ (801c148 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801c0be:	4461      	add	r1, ip
 801c0c0:	1c4a      	adds	r2, r1, #1
 801c0c2:	f022 0201 	bic.w	r2, r2, #1
 801c0c6:	008f      	lsls	r7, r1, #2
 801c0c8:	0412      	lsls	r2, r2, #16
 801c0ca:	19de      	adds	r6, r3, r7
 801c0cc:	0c12      	lsrs	r2, r2, #16
 801c0ce:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801c0d2:	6006      	str	r6, [r0, #0]
 801c0d4:	4e1d      	ldr	r6, [pc, #116]	@ (801c14c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801c0d6:	19da      	adds	r2, r3, r7
 801c0d8:	6032      	str	r2, [r6, #0]
 801c0da:	220e      	movs	r2, #14
 801c0dc:	fb02 f20c 	mul.w	r2, r2, ip
 801c0e0:	3203      	adds	r2, #3
 801c0e2:	f022 0203 	bic.w	r2, r2, #3
 801c0e6:	443a      	add	r2, r7
 801c0e8:	4f19      	ldr	r7, [pc, #100]	@ (801c150 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801c0ea:	4413      	add	r3, r2
 801c0ec:	603b      	str	r3, [r7, #0]
 801c0ee:	4f19      	ldr	r7, [pc, #100]	@ (801c154 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801c0f0:	2300      	movs	r3, #0
 801c0f2:	803b      	strh	r3, [r7, #0]
 801c0f4:	4f18      	ldr	r7, [pc, #96]	@ (801c158 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801c0f6:	683f      	ldr	r7, [r7, #0]
 801c0f8:	1aba      	subs	r2, r7, r2
 801c0fa:	4f18      	ldr	r7, [pc, #96]	@ (801c15c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801c0fc:	603a      	str	r2, [r7, #0]
 801c0fe:	4a18      	ldr	r2, [pc, #96]	@ (801c160 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801c100:	469c      	mov	ip, r3
 801c102:	8013      	strh	r3, [r2, #0]
 801c104:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801c108:	428b      	cmp	r3, r1
 801c10a:	d10d      	bne.n	801c128 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801c10c:	882d      	ldrh	r5, [r5, #0]
 801c10e:	6830      	ldr	r0, [r6, #0]
 801c110:	2300      	movs	r3, #0
 801c112:	240e      	movs	r4, #14
 801c114:	429d      	cmp	r5, r3
 801c116:	d90f      	bls.n	801c138 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801c118:	fb04 0203 	mla	r2, r4, r3, r0
 801c11c:	3301      	adds	r3, #1
 801c11e:	7b11      	ldrb	r1, [r2, #12]
 801c120:	f36f 1145 	bfc	r1, #5, #1
 801c124:	7311      	strb	r1, [r2, #12]
 801c126:	e7f5      	b.n	801c114 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801c128:	6822      	ldr	r2, [r4, #0]
 801c12a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801c12e:	6802      	ldr	r2, [r0, #0]
 801c130:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801c134:	3301      	adds	r3, #1
 801c136:	e7e7      	b.n	801c108 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801c138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c13a:	bf00      	nop
 801c13c:	2001274c 	.word	0x2001274c
 801c140:	20012768 	.word	0x20012768
 801c144:	2001276c 	.word	0x2001276c
 801c148:	20012760 	.word	0x20012760
 801c14c:	20012750 	.word	0x20012750
 801c150:	20012758 	.word	0x20012758
 801c154:	2001276a 	.word	0x2001276a
 801c158:	20012754 	.word	0x20012754
 801c15c:	20012764 	.word	0x20012764
 801c160:	2001275c 	.word	0x2001275c

0801c164 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801c164:	4b06      	ldr	r3, [pc, #24]	@ (801c180 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801c166:	681b      	ldr	r3, [r3, #0]
 801c168:	b943      	cbnz	r3, 801c17c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801c16a:	b139      	cbz	r1, 801c17c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801c16c:	4b05      	ldr	r3, [pc, #20]	@ (801c184 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801c16e:	801a      	strh	r2, [r3, #0]
 801c170:	4b05      	ldr	r3, [pc, #20]	@ (801c188 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801c172:	6019      	str	r1, [r3, #0]
 801c174:	4b05      	ldr	r3, [pc, #20]	@ (801c18c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801c176:	6018      	str	r0, [r3, #0]
 801c178:	f7ff bf96 	b.w	801c0a8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801c17c:	4770      	bx	lr
 801c17e:	bf00      	nop
 801c180:	20012758 	.word	0x20012758
 801c184:	2001276c 	.word	0x2001276c
 801c188:	20012754 	.word	0x20012754
 801c18c:	2001274c 	.word	0x2001274c

0801c190 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801c190:	b470      	push	{r4, r5, r6}
 801c192:	4c07      	ldr	r4, [pc, #28]	@ (801c1b0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801c194:	6826      	ldr	r6, [r4, #0]
 801c196:	4605      	mov	r5, r0
 801c198:	4610      	mov	r0, r2
 801c19a:	9a03      	ldr	r2, [sp, #12]
 801c19c:	b936      	cbnz	r6, 801c1ac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801c19e:	6025      	str	r5, [r4, #0]
 801c1a0:	4c04      	ldr	r4, [pc, #16]	@ (801c1b4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801c1a2:	8021      	strh	r1, [r4, #0]
 801c1a4:	bc70      	pop	{r4, r5, r6}
 801c1a6:	4619      	mov	r1, r3
 801c1a8:	f7ff bfdc 	b.w	801c164 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801c1ac:	bc70      	pop	{r4, r5, r6}
 801c1ae:	4770      	bx	lr
 801c1b0:	20012770 	.word	0x20012770
 801c1b4:	20012768 	.word	0x20012768

0801c1b8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801c1b8:	4a12      	ldr	r2, [pc, #72]	@ (801c204 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801c1ba:	8803      	ldrh	r3, [r0, #0]
 801c1bc:	8812      	ldrh	r2, [r2, #0]
 801c1be:	4293      	cmp	r3, r2
 801c1c0:	d207      	bcs.n	801c1d2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801c1c2:	4a11      	ldr	r2, [pc, #68]	@ (801c208 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801c1c4:	6812      	ldr	r2, [r2, #0]
 801c1c6:	2114      	movs	r1, #20
 801c1c8:	fb01 2303 	mla	r3, r1, r3, r2
 801c1cc:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801c1d0:	4770      	bx	lr
 801c1d2:	490e      	ldr	r1, [pc, #56]	@ (801c20c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801c1d4:	8809      	ldrh	r1, [r1, #0]
 801c1d6:	4411      	add	r1, r2
 801c1d8:	428b      	cmp	r3, r1
 801c1da:	da04      	bge.n	801c1e6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801c1dc:	1a9b      	subs	r3, r3, r2
 801c1de:	4a0c      	ldr	r2, [pc, #48]	@ (801c210 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801c1e0:	210e      	movs	r1, #14
 801c1e2:	6812      	ldr	r2, [r2, #0]
 801c1e4:	e7f0      	b.n	801c1c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801c1e6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801c1ea:	4293      	cmp	r3, r2
 801c1ec:	d108      	bne.n	801c200 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801c1ee:	4b09      	ldr	r3, [pc, #36]	@ (801c214 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801c1f0:	781b      	ldrb	r3, [r3, #0]
 801c1f2:	b91b      	cbnz	r3, 801c1fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801c1f4:	4b08      	ldr	r3, [pc, #32]	@ (801c218 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801c1f6:	f9b3 0000 	ldrsh.w	r0, [r3]
 801c1fa:	4770      	bx	lr
 801c1fc:	4b07      	ldr	r3, [pc, #28]	@ (801c21c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801c1fe:	e7fa      	b.n	801c1f6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801c200:	2000      	movs	r0, #0
 801c202:	4770      	bx	lr
 801c204:	20012768 	.word	0x20012768
 801c208:	20012770 	.word	0x20012770
 801c20c:	2001276c 	.word	0x2001276c
 801c210:	20012750 	.word	0x20012750
 801c214:	200126d8 	.word	0x200126d8
 801c218:	200126da 	.word	0x200126da
 801c21c:	200126dc 	.word	0x200126dc

0801c220 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801c220:	4a12      	ldr	r2, [pc, #72]	@ (801c26c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801c222:	8803      	ldrh	r3, [r0, #0]
 801c224:	8812      	ldrh	r2, [r2, #0]
 801c226:	4293      	cmp	r3, r2
 801c228:	d207      	bcs.n	801c23a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801c22a:	4a11      	ldr	r2, [pc, #68]	@ (801c270 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801c22c:	6812      	ldr	r2, [r2, #0]
 801c22e:	2114      	movs	r1, #20
 801c230:	fb01 2303 	mla	r3, r1, r3, r2
 801c234:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801c238:	4770      	bx	lr
 801c23a:	490e      	ldr	r1, [pc, #56]	@ (801c274 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801c23c:	8809      	ldrh	r1, [r1, #0]
 801c23e:	4411      	add	r1, r2
 801c240:	428b      	cmp	r3, r1
 801c242:	da04      	bge.n	801c24e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801c244:	1a9b      	subs	r3, r3, r2
 801c246:	4a0c      	ldr	r2, [pc, #48]	@ (801c278 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801c248:	210e      	movs	r1, #14
 801c24a:	6812      	ldr	r2, [r2, #0]
 801c24c:	e7f0      	b.n	801c230 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801c24e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801c252:	4293      	cmp	r3, r2
 801c254:	d108      	bne.n	801c268 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801c256:	4b09      	ldr	r3, [pc, #36]	@ (801c27c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801c258:	781b      	ldrb	r3, [r3, #0]
 801c25a:	b91b      	cbnz	r3, 801c264 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801c25c:	4b08      	ldr	r3, [pc, #32]	@ (801c280 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801c25e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801c262:	4770      	bx	lr
 801c264:	4b07      	ldr	r3, [pc, #28]	@ (801c284 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801c266:	e7fa      	b.n	801c25e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801c268:	2000      	movs	r0, #0
 801c26a:	4770      	bx	lr
 801c26c:	20012768 	.word	0x20012768
 801c270:	20012770 	.word	0x20012770
 801c274:	2001276c 	.word	0x2001276c
 801c278:	20012750 	.word	0x20012750
 801c27c:	200126d8 	.word	0x200126d8
 801c280:	200126dc 	.word	0x200126dc
 801c284:	200126da 	.word	0x200126da

0801c288 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801c288:	b530      	push	{r4, r5, lr}
 801c28a:	4a22      	ldr	r2, [pc, #136]	@ (801c314 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801c28c:	880b      	ldrh	r3, [r1, #0]
 801c28e:	8812      	ldrh	r2, [r2, #0]
 801c290:	4293      	cmp	r3, r2
 801c292:	d213      	bcs.n	801c2bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801c294:	4a20      	ldr	r2, [pc, #128]	@ (801c318 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801c296:	6812      	ldr	r2, [r2, #0]
 801c298:	2114      	movs	r1, #20
 801c29a:	fb01 2303 	mla	r3, r1, r3, r2
 801c29e:	8a1a      	ldrh	r2, [r3, #16]
 801c2a0:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801c2a4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801c2a8:	8a5b      	ldrh	r3, [r3, #18]
 801c2aa:	8004      	strh	r4, [r0, #0]
 801c2ac:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801c2b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c2b4:	8041      	strh	r1, [r0, #2]
 801c2b6:	8082      	strh	r2, [r0, #4]
 801c2b8:	80c3      	strh	r3, [r0, #6]
 801c2ba:	e024      	b.n	801c306 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801c2bc:	4917      	ldr	r1, [pc, #92]	@ (801c31c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801c2be:	8809      	ldrh	r1, [r1, #0]
 801c2c0:	4411      	add	r1, r2
 801c2c2:	428b      	cmp	r3, r1
 801c2c4:	da10      	bge.n	801c2e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801c2c6:	1a9b      	subs	r3, r3, r2
 801c2c8:	220e      	movs	r2, #14
 801c2ca:	4353      	muls	r3, r2
 801c2cc:	4a14      	ldr	r2, [pc, #80]	@ (801c320 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801c2ce:	6811      	ldr	r1, [r2, #0]
 801c2d0:	18ca      	adds	r2, r1, r3
 801c2d2:	5ecd      	ldrsh	r5, [r1, r3]
 801c2d4:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801c2d8:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801c2dc:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801c2e0:	8005      	strh	r5, [r0, #0]
 801c2e2:	8044      	strh	r4, [r0, #2]
 801c2e4:	8081      	strh	r1, [r0, #4]
 801c2e6:	e7e7      	b.n	801c2b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801c2e8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801c2ec:	4293      	cmp	r3, r2
 801c2ee:	d10b      	bne.n	801c308 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801c2f0:	4b0c      	ldr	r3, [pc, #48]	@ (801c324 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801c2f2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c2f6:	4b0c      	ldr	r3, [pc, #48]	@ (801c328 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801c2f8:	8081      	strh	r1, [r0, #4]
 801c2fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c2fe:	80c2      	strh	r2, [r0, #6]
 801c300:	2300      	movs	r3, #0
 801c302:	8003      	strh	r3, [r0, #0]
 801c304:	8043      	strh	r3, [r0, #2]
 801c306:	bd30      	pop	{r4, r5, pc}
 801c308:	2300      	movs	r3, #0
 801c30a:	8003      	strh	r3, [r0, #0]
 801c30c:	8043      	strh	r3, [r0, #2]
 801c30e:	8083      	strh	r3, [r0, #4]
 801c310:	e7d2      	b.n	801c2b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801c312:	bf00      	nop
 801c314:	20012768 	.word	0x20012768
 801c318:	20012770 	.word	0x20012770
 801c31c:	2001276c 	.word	0x2001276c
 801c320:	20012750 	.word	0x20012750
 801c324:	200126d4 	.word	0x200126d4
 801c328:	200126d6 	.word	0x200126d6

0801c32c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801c32c:	4a17      	ldr	r2, [pc, #92]	@ (801c38c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801c32e:	8803      	ldrh	r3, [r0, #0]
 801c330:	8812      	ldrh	r2, [r2, #0]
 801c332:	4293      	cmp	r3, r2
 801c334:	d213      	bcs.n	801c35e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801c336:	4a16      	ldr	r2, [pc, #88]	@ (801c390 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801c338:	6812      	ldr	r2, [r2, #0]
 801c33a:	2114      	movs	r1, #20
 801c33c:	fb01 2303 	mla	r3, r1, r3, r2
 801c340:	8a1a      	ldrh	r2, [r3, #16]
 801c342:	8919      	ldrh	r1, [r3, #8]
 801c344:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801c348:	428a      	cmp	r2, r1
 801c34a:	db1d      	blt.n	801c388 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801c34c:	8a58      	ldrh	r0, [r3, #18]
 801c34e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801c352:	895b      	ldrh	r3, [r3, #10]
 801c354:	4298      	cmp	r0, r3
 801c356:	bfac      	ite	ge
 801c358:	2000      	movge	r0, #0
 801c35a:	2001      	movlt	r0, #1
 801c35c:	4770      	bx	lr
 801c35e:	490d      	ldr	r1, [pc, #52]	@ (801c394 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801c360:	8809      	ldrh	r1, [r1, #0]
 801c362:	4411      	add	r1, r2
 801c364:	428b      	cmp	r3, r1
 801c366:	da0d      	bge.n	801c384 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801c368:	1a9b      	subs	r3, r3, r2
 801c36a:	4a0b      	ldr	r2, [pc, #44]	@ (801c398 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801c36c:	6812      	ldr	r2, [r2, #0]
 801c36e:	210e      	movs	r1, #14
 801c370:	fb01 2303 	mla	r3, r1, r3, r2
 801c374:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801c378:	891a      	ldrh	r2, [r3, #8]
 801c37a:	4291      	cmp	r1, r2
 801c37c:	db04      	blt.n	801c388 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801c37e:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801c382:	e7e6      	b.n	801c352 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801c384:	2000      	movs	r0, #0
 801c386:	4770      	bx	lr
 801c388:	2001      	movs	r0, #1
 801c38a:	4770      	bx	lr
 801c38c:	20012768 	.word	0x20012768
 801c390:	20012770 	.word	0x20012770
 801c394:	2001276c 	.word	0x2001276c
 801c398:	20012750 	.word	0x20012750

0801c39c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801c39c:	4a12      	ldr	r2, [pc, #72]	@ (801c3e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801c39e:	8803      	ldrh	r3, [r0, #0]
 801c3a0:	8811      	ldrh	r1, [r2, #0]
 801c3a2:	428b      	cmp	r3, r1
 801c3a4:	d20b      	bcs.n	801c3be <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801c3a6:	4a11      	ldr	r2, [pc, #68]	@ (801c3ec <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801c3a8:	6812      	ldr	r2, [r2, #0]
 801c3aa:	b112      	cbz	r2, 801c3b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801c3ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801c3b0:	b9c0      	cbnz	r0, 801c3e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801c3b2:	4a0f      	ldr	r2, [pc, #60]	@ (801c3f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801c3b4:	6811      	ldr	r1, [r2, #0]
 801c3b6:	2214      	movs	r2, #20
 801c3b8:	4353      	muls	r3, r2
 801c3ba:	58c8      	ldr	r0, [r1, r3]
 801c3bc:	4770      	bx	lr
 801c3be:	4a0d      	ldr	r2, [pc, #52]	@ (801c3f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801c3c0:	8812      	ldrh	r2, [r2, #0]
 801c3c2:	440a      	add	r2, r1
 801c3c4:	4293      	cmp	r3, r2
 801c3c6:	da04      	bge.n	801c3d2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801c3c8:	4a08      	ldr	r2, [pc, #32]	@ (801c3ec <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801c3ca:	6812      	ldr	r2, [r2, #0]
 801c3cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801c3d0:	4770      	bx	lr
 801c3d2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801c3d6:	4293      	cmp	r3, r2
 801c3d8:	d103      	bne.n	801c3e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801c3da:	4b07      	ldr	r3, [pc, #28]	@ (801c3f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801c3dc:	681b      	ldr	r3, [r3, #0]
 801c3de:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801c3e0:	4770      	bx	lr
 801c3e2:	2000      	movs	r0, #0
 801c3e4:	4770      	bx	lr
 801c3e6:	bf00      	nop
 801c3e8:	20012768 	.word	0x20012768
 801c3ec:	2001274c 	.word	0x2001274c
 801c3f0:	20012770 	.word	0x20012770
 801c3f4:	2001276c 	.word	0x2001276c
 801c3f8:	200126e0 	.word	0x200126e0

0801c3fc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801c3fc:	4b24      	ldr	r3, [pc, #144]	@ (801c490 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801c3fe:	8802      	ldrh	r2, [r0, #0]
 801c400:	8818      	ldrh	r0, [r3, #0]
 801c402:	4282      	cmp	r2, r0
 801c404:	d221      	bcs.n	801c44a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801c406:	4b23      	ldr	r3, [pc, #140]	@ (801c494 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801c408:	6819      	ldr	r1, [r3, #0]
 801c40a:	2314      	movs	r3, #20
 801c40c:	fb03 1302 	mla	r3, r3, r2, r1
 801c410:	6858      	ldr	r0, [r3, #4]
 801c412:	2800      	cmp	r0, #0
 801c414:	d03a      	beq.n	801c48c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801c416:	4920      	ldr	r1, [pc, #128]	@ (801c498 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801c418:	6809      	ldr	r1, [r1, #0]
 801c41a:	2900      	cmp	r1, #0
 801c41c:	d036      	beq.n	801c48c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801c41e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801c422:	2900      	cmp	r1, #0
 801c424:	d032      	beq.n	801c48c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801c426:	891a      	ldrh	r2, [r3, #8]
 801c428:	8958      	ldrh	r0, [r3, #10]
 801c42a:	4350      	muls	r0, r2
 801c42c:	7c5a      	ldrb	r2, [r3, #17]
 801c42e:	7cdb      	ldrb	r3, [r3, #19]
 801c430:	0952      	lsrs	r2, r2, #5
 801c432:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801c436:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801c43a:	2b0b      	cmp	r3, #11
 801c43c:	bf18      	it	ne
 801c43e:	0040      	lslne	r0, r0, #1
 801c440:	3003      	adds	r0, #3
 801c442:	f020 0003 	bic.w	r0, r0, #3
 801c446:	4408      	add	r0, r1
 801c448:	4770      	bx	lr
 801c44a:	4b14      	ldr	r3, [pc, #80]	@ (801c49c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801c44c:	881b      	ldrh	r3, [r3, #0]
 801c44e:	4403      	add	r3, r0
 801c450:	429a      	cmp	r2, r3
 801c452:	da1a      	bge.n	801c48a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801c454:	4b12      	ldr	r3, [pc, #72]	@ (801c4a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	1a10      	subs	r0, r2, r0
 801c45a:	210e      	movs	r1, #14
 801c45c:	fb01 3000 	mla	r0, r1, r0, r3
 801c460:	7b03      	ldrb	r3, [r0, #12]
 801c462:	f003 031f 	and.w	r3, r3, #31
 801c466:	2b0b      	cmp	r3, #11
 801c468:	d10b      	bne.n	801c482 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801c46a:	8903      	ldrh	r3, [r0, #8]
 801c46c:	8940      	ldrh	r0, [r0, #10]
 801c46e:	4358      	muls	r0, r3
 801c470:	4b09      	ldr	r3, [pc, #36]	@ (801c498 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801c472:	6819      	ldr	r1, [r3, #0]
 801c474:	3003      	adds	r0, #3
 801c476:	f020 0303 	bic.w	r3, r0, #3
 801c47a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801c47e:	4418      	add	r0, r3
 801c480:	4770      	bx	lr
 801c482:	2b0d      	cmp	r3, #13
 801c484:	d101      	bne.n	801c48a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801c486:	300d      	adds	r0, #13
 801c488:	4770      	bx	lr
 801c48a:	2000      	movs	r0, #0
 801c48c:	4770      	bx	lr
 801c48e:	bf00      	nop
 801c490:	20012768 	.word	0x20012768
 801c494:	20012770 	.word	0x20012770
 801c498:	2001274c 	.word	0x2001274c
 801c49c:	2001276c 	.word	0x2001276c
 801c4a0:	20012750 	.word	0x20012750

0801c4a4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801c4a4:	b510      	push	{r4, lr}
 801c4a6:	4a17      	ldr	r2, [pc, #92]	@ (801c504 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801c4a8:	8803      	ldrh	r3, [r0, #0]
 801c4aa:	8812      	ldrh	r2, [r2, #0]
 801c4ac:	4293      	cmp	r3, r2
 801c4ae:	d20c      	bcs.n	801c4ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c4b0:	4a15      	ldr	r2, [pc, #84]	@ (801c508 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801c4b2:	6812      	ldr	r2, [r2, #0]
 801c4b4:	2114      	movs	r1, #20
 801c4b6:	fb01 2303 	mla	r3, r1, r3, r2
 801c4ba:	7c58      	ldrb	r0, [r3, #17]
 801c4bc:	0942      	lsrs	r2, r0, #5
 801c4be:	7cd8      	ldrb	r0, [r3, #19]
 801c4c0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801c4c4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801c4c8:	bd10      	pop	{r4, pc}
 801c4ca:	4910      	ldr	r1, [pc, #64]	@ (801c50c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801c4cc:	8809      	ldrh	r1, [r1, #0]
 801c4ce:	4411      	add	r1, r2
 801c4d0:	428b      	cmp	r3, r1
 801c4d2:	da09      	bge.n	801c4e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801c4d4:	1a9b      	subs	r3, r3, r2
 801c4d6:	4a0e      	ldr	r2, [pc, #56]	@ (801c510 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801c4d8:	6812      	ldr	r2, [r2, #0]
 801c4da:	210e      	movs	r1, #14
 801c4dc:	fb01 2303 	mla	r3, r1, r3, r2
 801c4e0:	7b18      	ldrb	r0, [r3, #12]
 801c4e2:	f000 001f 	and.w	r0, r0, #31
 801c4e6:	e7ef      	b.n	801c4c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801c4e8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801c4ec:	4293      	cmp	r3, r2
 801c4ee:	d106      	bne.n	801c4fe <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801c4f0:	f7f0 f98e 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 801c4f4:	6803      	ldr	r3, [r0, #0]
 801c4f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c4fc:	4718      	bx	r3
 801c4fe:	2000      	movs	r0, #0
 801c500:	e7e2      	b.n	801c4c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801c502:	bf00      	nop
 801c504:	20012768 	.word	0x20012768
 801c508:	20012770 	.word	0x20012770
 801c50c:	2001276c 	.word	0x2001276c
 801c510:	20012750 	.word	0x20012750

0801c514 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801c514:	2010      	movs	r0, #16
 801c516:	4770      	bx	lr

0801c518 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801c518:	2000      	movs	r0, #0
 801c51a:	4770      	bx	lr

0801c51c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801c51c:	4b02      	ldr	r3, [pc, #8]	@ (801c528 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801c51e:	8818      	ldrh	r0, [r3, #0]
 801c520:	0040      	lsls	r0, r0, #1
 801c522:	b280      	uxth	r0, r0
 801c524:	4770      	bx	lr
 801c526:	bf00      	nop
 801c528:	200126da 	.word	0x200126da

0801c52c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801c52c:	2bff      	cmp	r3, #255	@ 0xff
 801c52e:	d050      	beq.n	801c5d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801c530:	2a0b      	cmp	r2, #11
 801c532:	d04a      	beq.n	801c5ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801c534:	d80e      	bhi.n	801c554 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801c536:	2a03      	cmp	r2, #3
 801c538:	d03f      	beq.n	801c5ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801c53a:	d804      	bhi.n	801c546 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801c53c:	2a01      	cmp	r2, #1
 801c53e:	d03e      	beq.n	801c5be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801c540:	d93f      	bls.n	801c5c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801c542:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 801c544:	4770      	bx	lr
 801c546:	2a09      	cmp	r2, #9
 801c548:	d03f      	beq.n	801c5ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801c54a:	d83c      	bhi.n	801c5c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801c54c:	2a08      	cmp	r2, #8
 801c54e:	d03a      	beq.n	801c5c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801c550:	2000      	movs	r0, #0
 801c552:	4770      	bx	lr
 801c554:	2a2f      	cmp	r2, #47	@ 0x2f
 801c556:	d024      	beq.n	801c5a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801c558:	d80d      	bhi.n	801c576 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801c55a:	2a2d      	cmp	r2, #45	@ 0x2d
 801c55c:	d014      	beq.n	801c588 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801c55e:	d826      	bhi.n	801c5ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801c560:	2a2c      	cmp	r2, #44	@ 0x2c
 801c562:	d1f5      	bne.n	801c550 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c564:	684b      	ldr	r3, [r1, #4]
 801c566:	781b      	ldrb	r3, [r3, #0]
 801c568:	2b01      	cmp	r3, #1
 801c56a:	d018      	beq.n	801c59e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801c56c:	d323      	bcc.n	801c5b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801c56e:	2b02      	cmp	r3, #2
 801c570:	d1ee      	bne.n	801c550 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c572:	68c0      	ldr	r0, [r0, #12]
 801c574:	4770      	bx	lr
 801c576:	2a31      	cmp	r2, #49	@ 0x31
 801c578:	d004      	beq.n	801c584 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801c57a:	d328      	bcc.n	801c5ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801c57c:	2a32      	cmp	r2, #50	@ 0x32
 801c57e:	d026      	beq.n	801c5ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801c580:	2a33      	cmp	r2, #51	@ 0x33
 801c582:	d1e5      	bne.n	801c550 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c584:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 801c586:	4770      	bx	lr
 801c588:	684b      	ldr	r3, [r1, #4]
 801c58a:	781b      	ldrb	r3, [r3, #0]
 801c58c:	2b01      	cmp	r3, #1
 801c58e:	d004      	beq.n	801c59a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801c590:	d30b      	bcc.n	801c5aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c592:	2b02      	cmp	r3, #2
 801c594:	d1dc      	bne.n	801c550 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c596:	6940      	ldr	r0, [r0, #20]
 801c598:	4770      	bx	lr
 801c59a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801c59c:	4770      	bx	lr
 801c59e:	69c0      	ldr	r0, [r0, #28]
 801c5a0:	4770      	bx	lr
 801c5a2:	684b      	ldr	r3, [r1, #4]
 801c5a4:	781b      	ldrb	r3, [r3, #0]
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d1d2      	bne.n	801c550 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c5aa:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801c5ac:	4770      	bx	lr
 801c5ae:	684b      	ldr	r3, [r1, #4]
 801c5b0:	781b      	ldrb	r3, [r3, #0]
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	d1cc      	bne.n	801c550 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c5b6:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 801c5b8:	4770      	bx	lr
 801c5ba:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 801c5bc:	4770      	bx	lr
 801c5be:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 801c5c0:	4770      	bx	lr
 801c5c2:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 801c5c4:	4770      	bx	lr
 801c5c6:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801c5c8:	4770      	bx	lr
 801c5ca:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801c5cc:	4770      	bx	lr
 801c5ce:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 801c5d0:	4770      	bx	lr
 801c5d2:	2a0b      	cmp	r2, #11
 801c5d4:	d049      	beq.n	801c66a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801c5d6:	d80e      	bhi.n	801c5f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801c5d8:	2a03      	cmp	r2, #3
 801c5da:	d040      	beq.n	801c65e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801c5dc:	d804      	bhi.n	801c5e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801c5de:	2a01      	cmp	r2, #1
 801c5e0:	d03f      	beq.n	801c662 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801c5e2:	d940      	bls.n	801c666 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801c5e4:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 801c5e6:	4770      	bx	lr
 801c5e8:	2a09      	cmp	r2, #9
 801c5ea:	d03e      	beq.n	801c66a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801c5ec:	d801      	bhi.n	801c5f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801c5ee:	2a08      	cmp	r2, #8
 801c5f0:	d1ae      	bne.n	801c550 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c5f2:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801c5f4:	4770      	bx	lr
 801c5f6:	2a2f      	cmp	r2, #47	@ 0x2f
 801c5f8:	d024      	beq.n	801c644 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801c5fa:	d80d      	bhi.n	801c618 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801c5fc:	2a2d      	cmp	r2, #45	@ 0x2d
 801c5fe:	d014      	beq.n	801c62a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801c600:	d826      	bhi.n	801c650 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801c602:	2a2c      	cmp	r2, #44	@ 0x2c
 801c604:	d1a4      	bne.n	801c550 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c606:	684b      	ldr	r3, [r1, #4]
 801c608:	781b      	ldrb	r3, [r3, #0]
 801c60a:	2b01      	cmp	r3, #1
 801c60c:	d018      	beq.n	801c640 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801c60e:	d324      	bcc.n	801c65a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801c610:	2b02      	cmp	r3, #2
 801c612:	d19d      	bne.n	801c550 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c614:	6900      	ldr	r0, [r0, #16]
 801c616:	4770      	bx	lr
 801c618:	2a31      	cmp	r2, #49	@ 0x31
 801c61a:	d004      	beq.n	801c626 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801c61c:	d327      	bcc.n	801c66e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801c61e:	2a32      	cmp	r2, #50	@ 0x32
 801c620:	d025      	beq.n	801c66e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801c622:	2a33      	cmp	r2, #51	@ 0x33
 801c624:	d194      	bne.n	801c550 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c626:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 801c628:	4770      	bx	lr
 801c62a:	684b      	ldr	r3, [r1, #4]
 801c62c:	781b      	ldrb	r3, [r3, #0]
 801c62e:	2b01      	cmp	r3, #1
 801c630:	d004      	beq.n	801c63c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801c632:	d30b      	bcc.n	801c64c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801c634:	2b02      	cmp	r3, #2
 801c636:	d18b      	bne.n	801c550 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c638:	6980      	ldr	r0, [r0, #24]
 801c63a:	4770      	bx	lr
 801c63c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801c63e:	4770      	bx	lr
 801c640:	6a00      	ldr	r0, [r0, #32]
 801c642:	4770      	bx	lr
 801c644:	684b      	ldr	r3, [r1, #4]
 801c646:	781b      	ldrb	r3, [r3, #0]
 801c648:	2b00      	cmp	r3, #0
 801c64a:	d181      	bne.n	801c550 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c64c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 801c64e:	4770      	bx	lr
 801c650:	684b      	ldr	r3, [r1, #4]
 801c652:	781b      	ldrb	r3, [r3, #0]
 801c654:	2b00      	cmp	r3, #0
 801c656:	f47f af7b 	bne.w	801c550 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801c65a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801c65c:	4770      	bx	lr
 801c65e:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 801c660:	4770      	bx	lr
 801c662:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 801c664:	4770      	bx	lr
 801c666:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 801c668:	4770      	bx	lr
 801c66a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801c66c:	4770      	bx	lr
 801c66e:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 801c670:	4770      	bx	lr

0801c672 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c676:	b087      	sub	sp, #28
 801c678:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c67a:	9205      	str	r2, [sp, #20]
 801c67c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c680:	9202      	str	r2, [sp, #8]
 801c682:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801c686:	9101      	str	r1, [sp, #4]
 801c688:	6841      	ldr	r1, [r0, #4]
 801c68a:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801c68e:	fb01 2404 	mla	r4, r1, r4, r2
 801c692:	6802      	ldr	r2, [r0, #0]
 801c694:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c698:	f8de 2000 	ldr.w	r2, [lr]
 801c69c:	9203      	str	r2, [sp, #12]
 801c69e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801c6a2:	3204      	adds	r2, #4
 801c6a4:	9204      	str	r2, [sp, #16]
 801c6a6:	9a02      	ldr	r2, [sp, #8]
 801c6a8:	43d6      	mvns	r6, r2
 801c6aa:	b2f6      	uxtb	r6, r6
 801c6ac:	9a01      	ldr	r2, [sp, #4]
 801c6ae:	2a00      	cmp	r2, #0
 801c6b0:	dc03      	bgt.n	801c6ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c6b2:	9a05      	ldr	r2, [sp, #20]
 801c6b4:	2a00      	cmp	r2, #0
 801c6b6:	f340 8129 	ble.w	801c90c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c6ba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c6bc:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801c6c0:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801c6c4:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801c6c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c6ca:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	dd0e      	ble.n	801c6f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c6d2:	1408      	asrs	r0, r1, #16
 801c6d4:	d405      	bmi.n	801c6e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c6d6:	4560      	cmp	r0, ip
 801c6d8:	da03      	bge.n	801c6e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c6da:	1410      	asrs	r0, r2, #16
 801c6dc:	d401      	bmi.n	801c6e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c6de:	42b8      	cmp	r0, r7
 801c6e0:	db07      	blt.n	801c6f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c6e2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c6e4:	4401      	add	r1, r0
 801c6e6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c6e8:	3b01      	subs	r3, #1
 801c6ea:	4402      	add	r2, r0
 801c6ec:	3402      	adds	r4, #2
 801c6ee:	e7ee      	b.n	801c6ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c6f0:	d071      	beq.n	801c7d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c6f2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801c6f4:	1e58      	subs	r0, r3, #1
 801c6f6:	fb05 1500 	mla	r5, r5, r0, r1
 801c6fa:	142d      	asrs	r5, r5, #16
 801c6fc:	d45f      	bmi.n	801c7be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c6fe:	4565      	cmp	r5, ip
 801c700:	da5d      	bge.n	801c7be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c702:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801c704:	fb05 2000 	mla	r0, r5, r0, r2
 801c708:	1400      	asrs	r0, r0, #16
 801c70a:	d458      	bmi.n	801c7be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c70c:	42b8      	cmp	r0, r7
 801c70e:	da56      	bge.n	801c7be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c710:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801c714:	4699      	mov	r9, r3
 801c716:	46a2      	mov	sl, r4
 801c718:	f1b9 0f00 	cmp.w	r9, #0
 801c71c:	dd57      	ble.n	801c7ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801c71e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c722:	9803      	ldr	r0, [sp, #12]
 801c724:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c728:	140d      	asrs	r5, r1, #16
 801c72a:	fb07 000c 	mla	r0, r7, ip, r0
 801c72e:	f109 39ff 	add.w	r9, r9, #4294967295
 801c732:	5d40      	ldrb	r0, [r0, r5]
 801c734:	9d04      	ldr	r5, [sp, #16]
 801c736:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801c73a:	f8ba 5000 	ldrh.w	r5, [sl]
 801c73e:	122f      	asrs	r7, r5, #8
 801c740:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c744:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c748:	fb17 f706 	smulbb	r7, r7, r6
 801c74c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801c750:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c754:	00ed      	lsls	r5, r5, #3
 801c756:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801c75a:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801c75e:	10c7      	asrs	r7, r0, #3
 801c760:	b2ed      	uxtb	r5, r5
 801c762:	00c0      	lsls	r0, r0, #3
 801c764:	fb18 f806 	smulbb	r8, r8, r6
 801c768:	fb15 f506 	smulbb	r5, r5, r6
 801c76c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c770:	b2c0      	uxtb	r0, r0
 801c772:	fa1f fc8c 	uxth.w	ip, ip
 801c776:	fb07 870b 	mla	r7, r7, fp, r8
 801c77a:	fb00 500b 	mla	r0, r0, fp, r5
 801c77e:	b280      	uxth	r0, r0
 801c780:	b2bf      	uxth	r7, r7
 801c782:	f10c 0501 	add.w	r5, ip, #1
 801c786:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c78a:	f107 0801 	add.w	r8, r7, #1
 801c78e:	1c45      	adds	r5, r0, #1
 801c790:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c794:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801c798:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c79a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c79e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c7a2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801c7a6:	ea45 0c0c 	orr.w	ip, r5, ip
 801c7aa:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801c7ae:	4401      	add	r1, r0
 801c7b0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c7b2:	ea4c 0c08 	orr.w	ip, ip, r8
 801c7b6:	f82a cb02 	strh.w	ip, [sl], #2
 801c7ba:	4402      	add	r2, r0
 801c7bc:	e7ac      	b.n	801c718 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c7be:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801c7c2:	f04f 0800 	mov.w	r8, #0
 801c7c6:	eb03 0008 	add.w	r0, r3, r8
 801c7ca:	2800      	cmp	r0, #0
 801c7cc:	dc41      	bgt.n	801c852 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c7ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c7d2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c7d6:	9b01      	ldr	r3, [sp, #4]
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	f340 8097 	ble.w	801c90c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c7de:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c7e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c7e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c7ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c7ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c7f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c7f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c7f8:	eef0 6a62 	vmov.f32	s13, s5
 801c7fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c800:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c804:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c808:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801c80c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c810:	eef0 6a43 	vmov.f32	s13, s6
 801c814:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c818:	ee12 2a90 	vmov	r2, s5
 801c81c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c820:	fb92 f3f3 	sdiv	r3, r2, r3
 801c824:	ee13 2a10 	vmov	r2, s6
 801c828:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c82a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c82c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c830:	9314      	str	r3, [sp, #80]	@ 0x50
 801c832:	9b01      	ldr	r3, [sp, #4]
 801c834:	9a05      	ldr	r2, [sp, #20]
 801c836:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c83a:	3b01      	subs	r3, #1
 801c83c:	9301      	str	r3, [sp, #4]
 801c83e:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801c842:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c844:	eeb0 3a67 	vmov.f32	s6, s15
 801c848:	bf08      	it	eq
 801c84a:	4613      	moveq	r3, r2
 801c84c:	eef0 2a47 	vmov.f32	s5, s14
 801c850:	e72c      	b.n	801c6ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c852:	140f      	asrs	r7, r1, #16
 801c854:	d453      	bmi.n	801c8fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c856:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c85a:	42bd      	cmp	r5, r7
 801c85c:	dd4f      	ble.n	801c8fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c85e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c862:	d44c      	bmi.n	801c8fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c864:	f8de 000c 	ldr.w	r0, [lr, #12]
 801c868:	4560      	cmp	r0, ip
 801c86a:	dd48      	ble.n	801c8fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c86c:	9803      	ldr	r0, [sp, #12]
 801c86e:	b22d      	sxth	r5, r5
 801c870:	fb0c 0505 	mla	r5, ip, r5, r0
 801c874:	5de8      	ldrb	r0, [r5, r7]
 801c876:	9d04      	ldr	r5, [sp, #16]
 801c878:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801c87c:	f06f 0501 	mvn.w	r5, #1
 801c880:	fb05 fb08 	mul.w	fp, r5, r8
 801c884:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c888:	f834 500b 	ldrh.w	r5, [r4, fp]
 801c88c:	122f      	asrs	r7, r5, #8
 801c88e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c892:	fb17 f706 	smulbb	r7, r7, r6
 801c896:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801c89a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c89e:	00ed      	lsls	r5, r5, #3
 801c8a0:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801c8a4:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801c8a8:	10c7      	asrs	r7, r0, #3
 801c8aa:	b2ed      	uxtb	r5, r5
 801c8ac:	00c0      	lsls	r0, r0, #3
 801c8ae:	fb19 f906 	smulbb	r9, r9, r6
 801c8b2:	fb15 f506 	smulbb	r5, r5, r6
 801c8b6:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c8ba:	b2c0      	uxtb	r0, r0
 801c8bc:	fa1f fc8c 	uxth.w	ip, ip
 801c8c0:	fb07 970a 	mla	r7, r7, sl, r9
 801c8c4:	fb00 500a 	mla	r0, r0, sl, r5
 801c8c8:	b2bf      	uxth	r7, r7
 801c8ca:	b280      	uxth	r0, r0
 801c8cc:	f10c 0501 	add.w	r5, ip, #1
 801c8d0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c8d4:	f107 0901 	add.w	r9, r7, #1
 801c8d8:	1c45      	adds	r5, r0, #1
 801c8da:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c8de:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801c8e2:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c8e6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c8ea:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801c8ee:	ea45 0c0c 	orr.w	ip, r5, ip
 801c8f2:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801c8f6:	ea4c 0c09 	orr.w	ip, ip, r9
 801c8fa:	f824 c00b 	strh.w	ip, [r4, fp]
 801c8fe:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c900:	4401      	add	r1, r0
 801c902:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c904:	f108 38ff 	add.w	r8, r8, #4294967295
 801c908:	4402      	add	r2, r0
 801c90a:	e75c      	b.n	801c7c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c90c:	b007      	add	sp, #28
 801c90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c912 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c912:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c916:	b085      	sub	sp, #20
 801c918:	4693      	mov	fp, r2
 801c91a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801c91c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801c91e:	6870      	ldr	r0, [r6, #4]
 801c920:	9100      	str	r1, [sp, #0]
 801c922:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801c926:	fb00 2404 	mla	r4, r0, r4, r2
 801c92a:	6832      	ldr	r2, [r6, #0]
 801c92c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c930:	682a      	ldr	r2, [r5, #0]
 801c932:	9201      	str	r2, [sp, #4]
 801c934:	686a      	ldr	r2, [r5, #4]
 801c936:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801c93a:	3204      	adds	r2, #4
 801c93c:	9202      	str	r2, [sp, #8]
 801c93e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c942:	9a00      	ldr	r2, [sp, #0]
 801c944:	2a00      	cmp	r2, #0
 801c946:	dc03      	bgt.n	801c950 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c948:	f1bb 0f00 	cmp.w	fp, #0
 801c94c:	f340 80a0 	ble.w	801ca90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801c950:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c952:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c956:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801c95a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c95e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c960:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c964:	2b00      	cmp	r3, #0
 801c966:	dd0c      	ble.n	801c982 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c968:	1406      	asrs	r6, r0, #16
 801c96a:	d405      	bmi.n	801c978 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c96c:	454e      	cmp	r6, r9
 801c96e:	da03      	bge.n	801c978 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c970:	1416      	asrs	r6, r2, #16
 801c972:	d401      	bmi.n	801c978 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c974:	4546      	cmp	r6, r8
 801c976:	db05      	blt.n	801c984 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c978:	4470      	add	r0, lr
 801c97a:	4462      	add	r2, ip
 801c97c:	3b01      	subs	r3, #1
 801c97e:	3402      	adds	r4, #2
 801c980:	e7f0      	b.n	801c964 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c982:	d00f      	beq.n	801c9a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c984:	1e5e      	subs	r6, r3, #1
 801c986:	fb0e 0706 	mla	r7, lr, r6, r0
 801c98a:	143f      	asrs	r7, r7, #16
 801c98c:	d541      	bpl.n	801ca12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801c98e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801c992:	4698      	mov	r8, r3
 801c994:	9603      	str	r6, [sp, #12]
 801c996:	f1b8 0f00 	cmp.w	r8, #0
 801c99a:	dc59      	bgt.n	801ca50 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c99c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c9a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c9a4:	9b00      	ldr	r3, [sp, #0]
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	dd72      	ble.n	801ca90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801c9aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c9ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c9b2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c9b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c9b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c9bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c9c0:	eeb0 6a62 	vmov.f32	s12, s5
 801c9c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c9c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c9cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c9d0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c9d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c9d8:	eeb0 6a43 	vmov.f32	s12, s6
 801c9dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c9e0:	ee12 2a90 	vmov	r2, s5
 801c9e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c9e8:	fb92 fef3 	sdiv	lr, r2, r3
 801c9ec:	ee13 2a10 	vmov	r2, s6
 801c9f0:	fb92 fcf3 	sdiv	ip, r2, r3
 801c9f4:	9b00      	ldr	r3, [sp, #0]
 801c9f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c9fa:	3b01      	subs	r3, #1
 801c9fc:	9300      	str	r3, [sp, #0]
 801c9fe:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ca02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca04:	eeb0 3a67 	vmov.f32	s6, s15
 801ca08:	bf08      	it	eq
 801ca0a:	465b      	moveq	r3, fp
 801ca0c:	eef0 2a47 	vmov.f32	s5, s14
 801ca10:	e797      	b.n	801c942 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ca12:	454f      	cmp	r7, r9
 801ca14:	dabb      	bge.n	801c98e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ca16:	fb0c 2606 	mla	r6, ip, r6, r2
 801ca1a:	1436      	asrs	r6, r6, #16
 801ca1c:	d4b7      	bmi.n	801c98e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ca1e:	4546      	cmp	r6, r8
 801ca20:	dab5      	bge.n	801c98e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ca22:	461e      	mov	r6, r3
 801ca24:	46a0      	mov	r8, r4
 801ca26:	2e00      	cmp	r6, #0
 801ca28:	ddb8      	ble.n	801c99c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ca2a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801ca2e:	9901      	ldr	r1, [sp, #4]
 801ca30:	1417      	asrs	r7, r2, #16
 801ca32:	ea4f 4920 	mov.w	r9, r0, asr #16
 801ca36:	fb0a 1707 	mla	r7, sl, r7, r1
 801ca3a:	9902      	ldr	r1, [sp, #8]
 801ca3c:	f817 7009 	ldrb.w	r7, [r7, r9]
 801ca40:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801ca44:	f828 7b02 	strh.w	r7, [r8], #2
 801ca48:	4470      	add	r0, lr
 801ca4a:	4462      	add	r2, ip
 801ca4c:	3e01      	subs	r6, #1
 801ca4e:	e7ea      	b.n	801ca26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801ca50:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ca54:	d417      	bmi.n	801ca86 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801ca56:	68ae      	ldr	r6, [r5, #8]
 801ca58:	454e      	cmp	r6, r9
 801ca5a:	dd14      	ble.n	801ca86 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801ca5c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ca60:	d411      	bmi.n	801ca86 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801ca62:	68ef      	ldr	r7, [r5, #12]
 801ca64:	4557      	cmp	r7, sl
 801ca66:	dd0e      	ble.n	801ca86 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801ca68:	9f01      	ldr	r7, [sp, #4]
 801ca6a:	b236      	sxth	r6, r6
 801ca6c:	fb0a 7606 	mla	r6, sl, r6, r7
 801ca70:	9f02      	ldr	r7, [sp, #8]
 801ca72:	f816 6009 	ldrb.w	r6, [r6, r9]
 801ca76:	f06f 0101 	mvn.w	r1, #1
 801ca7a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801ca7e:	fb01 f608 	mul.w	r6, r1, r8
 801ca82:	9903      	ldr	r1, [sp, #12]
 801ca84:	538f      	strh	r7, [r1, r6]
 801ca86:	4470      	add	r0, lr
 801ca88:	4462      	add	r2, ip
 801ca8a:	f108 38ff 	add.w	r8, r8, #4294967295
 801ca8e:	e782      	b.n	801c996 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ca90:	b005      	add	sp, #20
 801ca92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ca96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca9a:	b087      	sub	sp, #28
 801ca9c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ca9e:	9205      	str	r2, [sp, #20]
 801caa0:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801caa4:	9203      	str	r2, [sp, #12]
 801caa6:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801caaa:	9102      	str	r1, [sp, #8]
 801caac:	6861      	ldr	r1, [r4, #4]
 801caae:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801cab2:	fb01 2000 	mla	r0, r1, r0, r2
 801cab6:	6822      	ldr	r2, [r4, #0]
 801cab8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801cabc:	9200      	str	r2, [sp, #0]
 801cabe:	f8dc 2000 	ldr.w	r2, [ip]
 801cac2:	9204      	str	r2, [sp, #16]
 801cac4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801cac8:	3204      	adds	r2, #4
 801caca:	9201      	str	r2, [sp, #4]
 801cacc:	9a03      	ldr	r2, [sp, #12]
 801cace:	43d5      	mvns	r5, r2
 801cad0:	b2ed      	uxtb	r5, r5
 801cad2:	9a02      	ldr	r2, [sp, #8]
 801cad4:	2a00      	cmp	r2, #0
 801cad6:	dc03      	bgt.n	801cae0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801cad8:	9a05      	ldr	r2, [sp, #20]
 801cada:	2a00      	cmp	r2, #0
 801cadc:	f340 812c 	ble.w	801cd38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801cae0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cae2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801cae6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801caea:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801caee:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801caf0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	dd10      	ble.n	801cb1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801caf8:	140c      	asrs	r4, r1, #16
 801cafa:	d405      	bmi.n	801cb08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cafc:	4574      	cmp	r4, lr
 801cafe:	da03      	bge.n	801cb08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cb00:	1414      	asrs	r4, r2, #16
 801cb02:	d401      	bmi.n	801cb08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cb04:	42bc      	cmp	r4, r7
 801cb06:	db09      	blt.n	801cb1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cb08:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cb0a:	9800      	ldr	r0, [sp, #0]
 801cb0c:	4421      	add	r1, r4
 801cb0e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801cb10:	3002      	adds	r0, #2
 801cb12:	4422      	add	r2, r4
 801cb14:	3b01      	subs	r3, #1
 801cb16:	9000      	str	r0, [sp, #0]
 801cb18:	e7ec      	b.n	801caf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801cb1a:	d071      	beq.n	801cc00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801cb1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801cb1e:	1e5c      	subs	r4, r3, #1
 801cb20:	fb06 1604 	mla	r6, r6, r4, r1
 801cb24:	1436      	asrs	r6, r6, #16
 801cb26:	d45d      	bmi.n	801cbe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801cb28:	4576      	cmp	r6, lr
 801cb2a:	da5b      	bge.n	801cbe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801cb2c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801cb2e:	fb06 2404 	mla	r4, r6, r4, r2
 801cb32:	1424      	asrs	r4, r4, #16
 801cb34:	d456      	bmi.n	801cbe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801cb36:	42bc      	cmp	r4, r7
 801cb38:	da54      	bge.n	801cbe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801cb3a:	f8dd 9000 	ldr.w	r9, [sp]
 801cb3e:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801cb42:	4698      	mov	r8, r3
 801cb44:	f1b8 0f00 	cmp.w	r8, #0
 801cb48:	dd54      	ble.n	801cbf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801cb4a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801cb4e:	9804      	ldr	r0, [sp, #16]
 801cb50:	1414      	asrs	r4, r2, #16
 801cb52:	fb07 0404 	mla	r4, r7, r4, r0
 801cb56:	140e      	asrs	r6, r1, #16
 801cb58:	9801      	ldr	r0, [sp, #4]
 801cb5a:	f814 e006 	ldrb.w	lr, [r4, r6]
 801cb5e:	f8b9 4000 	ldrh.w	r4, [r9]
 801cb62:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cb66:	eb00 0b0e 	add.w	fp, r0, lr
 801cb6a:	1227      	asrs	r7, r4, #8
 801cb6c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801cb70:	f89b b001 	ldrb.w	fp, [fp, #1]
 801cb74:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801cb78:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801cb7a:	fb16 f60a 	smulbb	r6, r6, sl
 801cb7e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801cb82:	fb07 6705 	mla	r7, r7, r5, r6
 801cb86:	10e6      	asrs	r6, r4, #3
 801cb88:	00e4      	lsls	r4, r4, #3
 801cb8a:	b2e4      	uxtb	r4, r4
 801cb8c:	fb1b fb0a 	smulbb	fp, fp, sl
 801cb90:	fb14 f405 	smulbb	r4, r4, r5
 801cb94:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801cb98:	b2bf      	uxth	r7, r7
 801cb9a:	fb06 b605 	mla	r6, r6, r5, fp
 801cb9e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801cba2:	b2b6      	uxth	r6, r6
 801cba4:	fa1f fe8e 	uxth.w	lr, lr
 801cba8:	1c7c      	adds	r4, r7, #1
 801cbaa:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801cbae:	f106 0b01 	add.w	fp, r6, #1
 801cbb2:	f10e 0401 	add.w	r4, lr, #1
 801cbb6:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801cbba:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801cbbe:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801cbc2:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801cbc6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801cbca:	4327      	orrs	r7, r4
 801cbcc:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801cbd0:	4401      	add	r1, r0
 801cbd2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801cbd4:	ea47 070b 	orr.w	r7, r7, fp
 801cbd8:	f829 7b02 	strh.w	r7, [r9], #2
 801cbdc:	4402      	add	r2, r0
 801cbde:	f108 38ff 	add.w	r8, r8, #4294967295
 801cbe2:	e7af      	b.n	801cb44 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801cbe4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801cbe8:	f04f 0e00 	mov.w	lr, #0
 801cbec:	eb03 040e 	add.w	r4, r3, lr
 801cbf0:	2c00      	cmp	r4, #0
 801cbf2:	dc43      	bgt.n	801cc7c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801cbf4:	9a00      	ldr	r2, [sp, #0]
 801cbf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cbfa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cbfe:	9300      	str	r3, [sp, #0]
 801cc00:	9b02      	ldr	r3, [sp, #8]
 801cc02:	2b00      	cmp	r3, #0
 801cc04:	f340 8098 	ble.w	801cd38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801cc08:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cc0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801cc10:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cc14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cc16:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cc1a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc1e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cc22:	eef0 6a62 	vmov.f32	s13, s5
 801cc26:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cc2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc2e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cc32:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801cc36:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cc3a:	eef0 6a43 	vmov.f32	s13, s6
 801cc3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cc42:	ee12 2a90 	vmov	r2, s5
 801cc46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cc4a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc4e:	ee13 2a10 	vmov	r2, s6
 801cc52:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cc54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cc56:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc5a:	9314      	str	r3, [sp, #80]	@ 0x50
 801cc5c:	9b02      	ldr	r3, [sp, #8]
 801cc5e:	9a05      	ldr	r2, [sp, #20]
 801cc60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc64:	3b01      	subs	r3, #1
 801cc66:	9302      	str	r3, [sp, #8]
 801cc68:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801cc6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cc6e:	eeb0 3a67 	vmov.f32	s6, s15
 801cc72:	bf08      	it	eq
 801cc74:	4613      	moveq	r3, r2
 801cc76:	eef0 2a47 	vmov.f32	s5, s14
 801cc7a:	e72a      	b.n	801cad2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801cc7c:	140f      	asrs	r7, r1, #16
 801cc7e:	d454      	bmi.n	801cd2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801cc80:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801cc84:	42be      	cmp	r6, r7
 801cc86:	dd50      	ble.n	801cd2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801cc88:	ea5f 4822 	movs.w	r8, r2, asr #16
 801cc8c:	d44d      	bmi.n	801cd2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801cc8e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801cc92:	4544      	cmp	r4, r8
 801cc94:	dd49      	ble.n	801cd2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801cc96:	9c04      	ldr	r4, [sp, #16]
 801cc98:	b236      	sxth	r6, r6
 801cc9a:	fb08 4606 	mla	r6, r8, r6, r4
 801cc9e:	f06f 0001 	mvn.w	r0, #1
 801cca2:	f816 8007 	ldrb.w	r8, [r6, r7]
 801cca6:	9c01      	ldr	r4, [sp, #4]
 801cca8:	fb00 fa0e 	mul.w	sl, r0, lr
 801ccac:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ccb0:	9800      	ldr	r0, [sp, #0]
 801ccb2:	eb04 0b08 	add.w	fp, r4, r8
 801ccb6:	f830 400a 	ldrh.w	r4, [r0, sl]
 801ccba:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801ccbe:	9801      	ldr	r0, [sp, #4]
 801ccc0:	f89b b001 	ldrb.w	fp, [fp, #1]
 801ccc4:	f810 8008 	ldrb.w	r8, [r0, r8]
 801ccc8:	9800      	ldr	r0, [sp, #0]
 801ccca:	1227      	asrs	r7, r4, #8
 801cccc:	fb16 f609 	smulbb	r6, r6, r9
 801ccd0:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ccd4:	fb07 6705 	mla	r7, r7, r5, r6
 801ccd8:	10e6      	asrs	r6, r4, #3
 801ccda:	00e4      	lsls	r4, r4, #3
 801ccdc:	b2e4      	uxtb	r4, r4
 801ccde:	fb1b fb09 	smulbb	fp, fp, r9
 801cce2:	fb14 f405 	smulbb	r4, r4, r5
 801cce6:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ccea:	b2bf      	uxth	r7, r7
 801ccec:	fb06 b605 	mla	r6, r6, r5, fp
 801ccf0:	fb08 4809 	mla	r8, r8, r9, r4
 801ccf4:	b2b6      	uxth	r6, r6
 801ccf6:	fa1f f888 	uxth.w	r8, r8
 801ccfa:	1c7c      	adds	r4, r7, #1
 801ccfc:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801cd00:	f106 0b01 	add.w	fp, r6, #1
 801cd04:	f108 0401 	add.w	r4, r8, #1
 801cd08:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801cd0c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801cd10:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801cd14:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801cd18:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801cd1c:	4327      	orrs	r7, r4
 801cd1e:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801cd22:	ea47 070b 	orr.w	r7, r7, fp
 801cd26:	f820 700a 	strh.w	r7, [r0, sl]
 801cd2a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801cd2c:	4401      	add	r1, r0
 801cd2e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801cd30:	f10e 3eff 	add.w	lr, lr, #4294967295
 801cd34:	4402      	add	r2, r0
 801cd36:	e759      	b.n	801cbec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801cd38:	b007      	add	sp, #28
 801cd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801cd40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd44:	b085      	sub	sp, #20
 801cd46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cd4a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801cd4c:	9203      	str	r2, [sp, #12]
 801cd4e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801cd52:	6870      	ldr	r0, [r6, #4]
 801cd54:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801cd56:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801cd5a:	686f      	ldr	r7, [r5, #4]
 801cd5c:	9101      	str	r1, [sp, #4]
 801cd5e:	fb00 2404 	mla	r4, r0, r4, r2
 801cd62:	6832      	ldr	r2, [r6, #0]
 801cd64:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cd68:	682a      	ldr	r2, [r5, #0]
 801cd6a:	9202      	str	r2, [sp, #8]
 801cd6c:	3704      	adds	r7, #4
 801cd6e:	9a01      	ldr	r2, [sp, #4]
 801cd70:	2a00      	cmp	r2, #0
 801cd72:	dc03      	bgt.n	801cd7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801cd74:	9a03      	ldr	r2, [sp, #12]
 801cd76:	2a00      	cmp	r2, #0
 801cd78:	f340 80cc 	ble.w	801cf14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801cd7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cd7e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801cd82:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801cd86:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801cd8a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801cd8c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	dd0d      	ble.n	801cdb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cd94:	1406      	asrs	r6, r0, #16
 801cd96:	d405      	bmi.n	801cda4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801cd98:	454e      	cmp	r6, r9
 801cd9a:	da03      	bge.n	801cda4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801cd9c:	1416      	asrs	r6, r2, #16
 801cd9e:	d401      	bmi.n	801cda4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801cda0:	4546      	cmp	r6, r8
 801cda2:	db06      	blt.n	801cdb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cda4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801cda6:	4460      	add	r0, ip
 801cda8:	4432      	add	r2, r6
 801cdaa:	3b01      	subs	r3, #1
 801cdac:	3402      	adds	r4, #2
 801cdae:	e7ef      	b.n	801cd90 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801cdb0:	d00f      	beq.n	801cdd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801cdb2:	1e5e      	subs	r6, r3, #1
 801cdb4:	fb0c 0e06 	mla	lr, ip, r6, r0
 801cdb8:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801cdbc:	d543      	bpl.n	801ce46 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801cdbe:	4698      	mov	r8, r3
 801cdc0:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801cdc4:	f1b8 0f00 	cmp.w	r8, #0
 801cdc8:	dc71      	bgt.n	801ceae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801cdca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cdce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cdd2:	9b01      	ldr	r3, [sp, #4]
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	f340 809d 	ble.w	801cf14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801cdda:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cdde:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cde2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cde6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cde8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cdec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cdf0:	eeb0 6a62 	vmov.f32	s12, s5
 801cdf4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cdf8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdfc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ce00:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ce04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ce08:	eeb0 6a43 	vmov.f32	s12, s6
 801ce0c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ce10:	ee12 2a90 	vmov	r2, s5
 801ce14:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ce18:	fb92 fcf3 	sdiv	ip, r2, r3
 801ce1c:	ee13 2a10 	vmov	r2, s6
 801ce20:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce24:	9312      	str	r3, [sp, #72]	@ 0x48
 801ce26:	9b01      	ldr	r3, [sp, #4]
 801ce28:	9a03      	ldr	r2, [sp, #12]
 801ce2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ce2e:	3b01      	subs	r3, #1
 801ce30:	9301      	str	r3, [sp, #4]
 801ce32:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ce36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce38:	eeb0 3a67 	vmov.f32	s6, s15
 801ce3c:	bf08      	it	eq
 801ce3e:	4613      	moveq	r3, r2
 801ce40:	eef0 2a47 	vmov.f32	s5, s14
 801ce44:	e793      	b.n	801cd6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801ce46:	45ce      	cmp	lr, r9
 801ce48:	dab9      	bge.n	801cdbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ce4a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ce4c:	fb01 2606 	mla	r6, r1, r6, r2
 801ce50:	1436      	asrs	r6, r6, #16
 801ce52:	d4b4      	bmi.n	801cdbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ce54:	4546      	cmp	r6, r8
 801ce56:	dab2      	bge.n	801cdbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ce58:	4698      	mov	r8, r3
 801ce5a:	46a2      	mov	sl, r4
 801ce5c:	f1b8 0f00 	cmp.w	r8, #0
 801ce60:	ddb3      	ble.n	801cdca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ce62:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ce66:	9902      	ldr	r1, [sp, #8]
 801ce68:	1416      	asrs	r6, r2, #16
 801ce6a:	fb09 1606 	mla	r6, r9, r6, r1
 801ce6e:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801ce72:	492a      	ldr	r1, [pc, #168]	@ (801cf1c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801ce74:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801ce78:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ce7c:	eb07 0b0e 	add.w	fp, r7, lr
 801ce80:	4460      	add	r0, ip
 801ce82:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801ce86:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ce8a:	00f6      	lsls	r6, r6, #3
 801ce8c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801ce90:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801ce94:	ea49 0606 	orr.w	r6, r9, r6
 801ce98:	f817 900e 	ldrb.w	r9, [r7, lr]
 801ce9c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ce9e:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801cea2:	f82a 6b02 	strh.w	r6, [sl], #2
 801cea6:	440a      	add	r2, r1
 801cea8:	f108 38ff 	add.w	r8, r8, #4294967295
 801ceac:	e7d6      	b.n	801ce5c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ceae:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ceb2:	d429      	bmi.n	801cf08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ceb4:	68ae      	ldr	r6, [r5, #8]
 801ceb6:	454e      	cmp	r6, r9
 801ceb8:	dd26      	ble.n	801cf08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ceba:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801cebe:	d423      	bmi.n	801cf08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801cec0:	68e9      	ldr	r1, [r5, #12]
 801cec2:	4559      	cmp	r1, fp
 801cec4:	dd20      	ble.n	801cf08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801cec6:	9902      	ldr	r1, [sp, #8]
 801cec8:	fa0f fe86 	sxth.w	lr, r6
 801cecc:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801ced0:	f06f 0101 	mvn.w	r1, #1
 801ced4:	f81e e009 	ldrb.w	lr, [lr, r9]
 801ced8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cedc:	eb07 060e 	add.w	r6, r7, lr
 801cee0:	fb01 f908 	mul.w	r9, r1, r8
 801cee4:	f896 b002 	ldrb.w	fp, [r6, #2]
 801cee8:	7876      	ldrb	r6, [r6, #1]
 801ceea:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801ceee:	00f6      	lsls	r6, r6, #3
 801cef0:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801cef4:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801cef8:	ea4b 0606 	orr.w	r6, fp, r6
 801cefc:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801cf00:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801cf04:	f82a 6009 	strh.w	r6, [sl, r9]
 801cf08:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801cf0a:	4460      	add	r0, ip
 801cf0c:	440a      	add	r2, r1
 801cf0e:	f108 38ff 	add.w	r8, r8, #4294967295
 801cf12:	e757      	b.n	801cdc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801cf14:	b005      	add	sp, #20
 801cf16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf1a:	bf00      	nop
 801cf1c:	fffff800 	.word	0xfffff800

0801cf20 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf24:	b087      	sub	sp, #28
 801cf26:	468b      	mov	fp, r1
 801cf28:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801cf2a:	9204      	str	r2, [sp, #16]
 801cf2c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801cf30:	9205      	str	r2, [sp, #20]
 801cf32:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801cf36:	6841      	ldr	r1, [r0, #4]
 801cf38:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801cf3c:	fb01 2404 	mla	r4, r1, r4, r2
 801cf40:	6802      	ldr	r2, [r0, #0]
 801cf42:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cf46:	f8dc 2000 	ldr.w	r2, [ip]
 801cf4a:	9201      	str	r2, [sp, #4]
 801cf4c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801cf50:	3204      	adds	r2, #4
 801cf52:	9202      	str	r2, [sp, #8]
 801cf54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cf58:	f1bb 0f00 	cmp.w	fp, #0
 801cf5c:	dc03      	bgt.n	801cf66 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801cf5e:	9a04      	ldr	r2, [sp, #16]
 801cf60:	2a00      	cmp	r2, #0
 801cf62:	f340 8138 	ble.w	801d1d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801cf66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cf68:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801cf6c:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801cf70:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801cf74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cf76:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	dd0e      	ble.n	801cf9c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cf7e:	1402      	asrs	r2, r0, #16
 801cf80:	d405      	bmi.n	801cf8e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cf82:	42ba      	cmp	r2, r7
 801cf84:	da03      	bge.n	801cf8e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cf86:	140a      	asrs	r2, r1, #16
 801cf88:	d401      	bmi.n	801cf8e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cf8a:	42b2      	cmp	r2, r6
 801cf8c:	db07      	blt.n	801cf9e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801cf8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cf90:	4410      	add	r0, r2
 801cf92:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cf94:	3b01      	subs	r3, #1
 801cf96:	4411      	add	r1, r2
 801cf98:	3402      	adds	r4, #2
 801cf9a:	e7ee      	b.n	801cf7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801cf9c:	d019      	beq.n	801cfd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801cf9e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801cfa0:	1e5a      	subs	r2, r3, #1
 801cfa2:	fb05 0502 	mla	r5, r5, r2, r0
 801cfa6:	142d      	asrs	r5, r5, #16
 801cfa8:	d409      	bmi.n	801cfbe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cfaa:	42bd      	cmp	r5, r7
 801cfac:	da07      	bge.n	801cfbe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cfae:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801cfb0:	fb05 1202 	mla	r2, r5, r2, r1
 801cfb4:	1412      	asrs	r2, r2, #16
 801cfb6:	d402      	bmi.n	801cfbe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cfb8:	42b2      	cmp	r2, r6
 801cfba:	f2c0 80ac 	blt.w	801d116 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801cfbe:	f04f 0e00 	mov.w	lr, #0
 801cfc2:	eb03 020e 	add.w	r2, r3, lr
 801cfc6:	2a00      	cmp	r2, #0
 801cfc8:	dc3e      	bgt.n	801d048 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801cfca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cfce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cfd2:	f1bb 0f00 	cmp.w	fp, #0
 801cfd6:	f340 80fe 	ble.w	801d1d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801cfda:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cfde:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cfe2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cfe6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cfe8:	f1bb 0b01 	subs.w	fp, fp, #1
 801cfec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cff0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cff4:	eeb0 6a62 	vmov.f32	s12, s5
 801cff8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cffc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d000:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d004:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801d008:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d00c:	eeb0 6a43 	vmov.f32	s12, s6
 801d010:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d014:	ee12 2a90 	vmov	r2, s5
 801d018:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d01c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d020:	ee13 2a10 	vmov	r2, s6
 801d024:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d028:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d02a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d02c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d030:	9a04      	ldr	r2, [sp, #16]
 801d032:	9314      	str	r3, [sp, #80]	@ 0x50
 801d034:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801d038:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d03a:	eeb0 3a67 	vmov.f32	s6, s15
 801d03e:	bf08      	it	eq
 801d040:	4613      	moveq	r3, r2
 801d042:	eef0 2a47 	vmov.f32	s5, s14
 801d046:	e787      	b.n	801cf58 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d048:	1406      	asrs	r6, r0, #16
 801d04a:	d45d      	bmi.n	801d108 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d04c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801d050:	42b5      	cmp	r5, r6
 801d052:	dd59      	ble.n	801d108 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d054:	140f      	asrs	r7, r1, #16
 801d056:	d457      	bmi.n	801d108 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d058:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d05c:	42ba      	cmp	r2, r7
 801d05e:	dd53      	ble.n	801d108 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d060:	9a01      	ldr	r2, [sp, #4]
 801d062:	b22d      	sxth	r5, r5
 801d064:	fb07 2505 	mla	r5, r7, r5, r2
 801d068:	5daa      	ldrb	r2, [r5, r6]
 801d06a:	9d02      	ldr	r5, [sp, #8]
 801d06c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d070:	0e2e      	lsrs	r6, r5, #24
 801d072:	d049      	beq.n	801d108 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d074:	f06f 0201 	mvn.w	r2, #1
 801d078:	fb02 f20e 	mul.w	r2, r2, lr
 801d07c:	9203      	str	r2, [sp, #12]
 801d07e:	f834 8002 	ldrh.w	r8, [r4, r2]
 801d082:	9a05      	ldr	r2, [sp, #20]
 801d084:	4356      	muls	r6, r2
 801d086:	1c72      	adds	r2, r6, #1
 801d088:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801d08c:	1212      	asrs	r2, r2, #8
 801d08e:	fa1f f982 	uxth.w	r9, r2
 801d092:	ea4f 2728 	mov.w	r7, r8, asr #8
 801d096:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d09a:	43d2      	mvns	r2, r2
 801d09c:	b2d2      	uxtb	r2, r2
 801d09e:	fb16 f609 	smulbb	r6, r6, r9
 801d0a2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d0a6:	fb07 6702 	mla	r7, r7, r2, r6
 801d0aa:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d0ae:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801d0b2:	b2ed      	uxtb	r5, r5
 801d0b4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d0b8:	fa5f f888 	uxtb.w	r8, r8
 801d0bc:	fb15 f509 	smulbb	r5, r5, r9
 801d0c0:	fb08 5502 	mla	r5, r8, r2, r5
 801d0c4:	b2bf      	uxth	r7, r7
 801d0c6:	fb1a fa09 	smulbb	sl, sl, r9
 801d0ca:	b2ad      	uxth	r5, r5
 801d0cc:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d0d0:	fb06 a602 	mla	r6, r6, r2, sl
 801d0d4:	1c7a      	adds	r2, r7, #1
 801d0d6:	f105 0a01 	add.w	sl, r5, #1
 801d0da:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d0de:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d0e2:	b2b6      	uxth	r6, r6
 801d0e4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d0e8:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801d0ec:	ea4a 0707 	orr.w	r7, sl, r7
 801d0f0:	f106 0a01 	add.w	sl, r6, #1
 801d0f4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d0f8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d0fc:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d100:	9a03      	ldr	r2, [sp, #12]
 801d102:	ea47 070a 	orr.w	r7, r7, sl
 801d106:	52a7      	strh	r7, [r4, r2]
 801d108:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d10a:	4410      	add	r0, r2
 801d10c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d10e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d112:	4411      	add	r1, r2
 801d114:	e755      	b.n	801cfc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d116:	f04f 0800 	mov.w	r8, #0
 801d11a:	eba3 0208 	sub.w	r2, r3, r8
 801d11e:	2a00      	cmp	r2, #0
 801d120:	f77f af53 	ble.w	801cfca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801d124:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801d128:	9f01      	ldr	r7, [sp, #4]
 801d12a:	140a      	asrs	r2, r1, #16
 801d12c:	1405      	asrs	r5, r0, #16
 801d12e:	fb06 7202 	mla	r2, r6, r2, r7
 801d132:	5d52      	ldrb	r2, [r2, r5]
 801d134:	9d02      	ldr	r5, [sp, #8]
 801d136:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d13a:	0e2e      	lsrs	r6, r5, #24
 801d13c:	d044      	beq.n	801d1c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801d13e:	9a05      	ldr	r2, [sp, #20]
 801d140:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801d144:	4356      	muls	r6, r2
 801d146:	1c72      	adds	r2, r6, #1
 801d148:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801d14c:	1212      	asrs	r2, r2, #8
 801d14e:	fa1f f982 	uxth.w	r9, r2
 801d152:	ea4f 272e 	mov.w	r7, lr, asr #8
 801d156:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d15a:	43d2      	mvns	r2, r2
 801d15c:	b2d2      	uxtb	r2, r2
 801d15e:	fb16 f609 	smulbb	r6, r6, r9
 801d162:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d166:	fb07 6702 	mla	r7, r7, r2, r6
 801d16a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d16e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d172:	b2ed      	uxtb	r5, r5
 801d174:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d178:	fa5f fe8e 	uxtb.w	lr, lr
 801d17c:	fb15 f509 	smulbb	r5, r5, r9
 801d180:	fb0e 5502 	mla	r5, lr, r2, r5
 801d184:	b2bf      	uxth	r7, r7
 801d186:	fb1a fa09 	smulbb	sl, sl, r9
 801d18a:	b2ad      	uxth	r5, r5
 801d18c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d190:	fb06 a602 	mla	r6, r6, r2, sl
 801d194:	1c7a      	adds	r2, r7, #1
 801d196:	f105 0a01 	add.w	sl, r5, #1
 801d19a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d19e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d1a2:	b2b6      	uxth	r6, r6
 801d1a4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d1a8:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801d1ac:	ea4a 0707 	orr.w	r7, sl, r7
 801d1b0:	f106 0a01 	add.w	sl, r6, #1
 801d1b4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d1b8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d1bc:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d1c0:	ea47 070a 	orr.w	r7, r7, sl
 801d1c4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801d1c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d1ca:	4410      	add	r0, r2
 801d1cc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d1ce:	f108 0801 	add.w	r8, r8, #1
 801d1d2:	4411      	add	r1, r2
 801d1d4:	e7a1      	b.n	801d11a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d1d6:	b007      	add	sp, #28
 801d1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d1dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1e0:	b085      	sub	sp, #20
 801d1e2:	468b      	mov	fp, r1
 801d1e4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d1e6:	9203      	str	r2, [sp, #12]
 801d1e8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801d1ec:	6841      	ldr	r1, [r0, #4]
 801d1ee:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801d1f2:	fb01 2404 	mla	r4, r1, r4, r2
 801d1f6:	6802      	ldr	r2, [r0, #0]
 801d1f8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d1fc:	f8de 2000 	ldr.w	r2, [lr]
 801d200:	9200      	str	r2, [sp, #0]
 801d202:	f8de 2004 	ldr.w	r2, [lr, #4]
 801d206:	3204      	adds	r2, #4
 801d208:	9201      	str	r2, [sp, #4]
 801d20a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d20e:	f1bb 0f00 	cmp.w	fp, #0
 801d212:	dc03      	bgt.n	801d21c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d214:	9a03      	ldr	r2, [sp, #12]
 801d216:	2a00      	cmp	r2, #0
 801d218:	f340 8153 	ble.w	801d4c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801d21c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d21e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d222:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801d226:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d22a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d22c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d230:	2b00      	cmp	r3, #0
 801d232:	dd0e      	ble.n	801d252 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d234:	1408      	asrs	r0, r1, #16
 801d236:	d405      	bmi.n	801d244 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d238:	42b8      	cmp	r0, r7
 801d23a:	da03      	bge.n	801d244 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d23c:	1410      	asrs	r0, r2, #16
 801d23e:	d401      	bmi.n	801d244 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d240:	42b0      	cmp	r0, r6
 801d242:	db07      	blt.n	801d254 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d244:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d246:	4401      	add	r1, r0
 801d248:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d24a:	3b01      	subs	r3, #1
 801d24c:	4402      	add	r2, r0
 801d24e:	3402      	adds	r4, #2
 801d250:	e7ee      	b.n	801d230 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801d252:	d017      	beq.n	801d284 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801d254:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801d256:	1e58      	subs	r0, r3, #1
 801d258:	fb05 1500 	mla	r5, r5, r0, r1
 801d25c:	142d      	asrs	r5, r5, #16
 801d25e:	d409      	bmi.n	801d274 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d260:	42bd      	cmp	r5, r7
 801d262:	da07      	bge.n	801d274 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d264:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801d266:	fb05 2000 	mla	r0, r5, r0, r2
 801d26a:	1400      	asrs	r0, r0, #16
 801d26c:	d402      	bmi.n	801d274 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d26e:	42b0      	cmp	r0, r6
 801d270:	f2c0 80bc 	blt.w	801d3ec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801d274:	2600      	movs	r6, #0
 801d276:	1998      	adds	r0, r3, r6
 801d278:	2800      	cmp	r0, #0
 801d27a:	dc3e      	bgt.n	801d2fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d27c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d280:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d284:	f1bb 0f00 	cmp.w	fp, #0
 801d288:	f340 811b 	ble.w	801d4c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801d28c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d290:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d294:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d29a:	f1bb 0b01 	subs.w	fp, fp, #1
 801d29e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d2a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d2a6:	eeb0 6a62 	vmov.f32	s12, s5
 801d2aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d2ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d2b6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d2ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d2be:	eeb0 6a43 	vmov.f32	s12, s6
 801d2c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d2c6:	ee12 2a90 	vmov	r2, s5
 801d2ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d2ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2d2:	ee13 2a10 	vmov	r2, s6
 801d2d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2da:	9311      	str	r3, [sp, #68]	@ 0x44
 801d2dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d2de:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2e2:	9a03      	ldr	r2, [sp, #12]
 801d2e4:	9312      	str	r3, [sp, #72]	@ 0x48
 801d2e6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d2ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d2ec:	eeb0 3a67 	vmov.f32	s6, s15
 801d2f0:	bf08      	it	eq
 801d2f2:	4613      	moveq	r3, r2
 801d2f4:	eef0 2a47 	vmov.f32	s5, s14
 801d2f8:	e789      	b.n	801d20e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801d2fa:	140f      	asrs	r7, r1, #16
 801d2fc:	d426      	bmi.n	801d34c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d2fe:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d302:	42bd      	cmp	r5, r7
 801d304:	dd22      	ble.n	801d34c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d306:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d30a:	d41f      	bmi.n	801d34c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d30c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801d310:	4560      	cmp	r0, ip
 801d312:	dd1b      	ble.n	801d34c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d314:	9800      	ldr	r0, [sp, #0]
 801d316:	b22d      	sxth	r5, r5
 801d318:	fb0c 0505 	mla	r5, ip, r5, r0
 801d31c:	5de8      	ldrb	r0, [r5, r7]
 801d31e:	9d01      	ldr	r5, [sp, #4]
 801d320:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801d324:	0e07      	lsrs	r7, r0, #24
 801d326:	2fff      	cmp	r7, #255	@ 0xff
 801d328:	d116      	bne.n	801d358 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d32a:	f06f 0501 	mvn.w	r5, #1
 801d32e:	fb05 f706 	mul.w	r7, r5, r6
 801d332:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801d336:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801d33a:	0945      	lsrs	r5, r0, #5
 801d33c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801d340:	ea4c 0505 	orr.w	r5, ip, r5
 801d344:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801d348:	4305      	orrs	r5, r0
 801d34a:	53e5      	strh	r5, [r4, r7]
 801d34c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d34e:	4401      	add	r1, r0
 801d350:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d352:	3e01      	subs	r6, #1
 801d354:	4402      	add	r2, r0
 801d356:	e78e      	b.n	801d276 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801d358:	b2fd      	uxtb	r5, r7
 801d35a:	2f00      	cmp	r7, #0
 801d35c:	d0f6      	beq.n	801d34c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d35e:	f06f 0701 	mvn.w	r7, #1
 801d362:	4377      	muls	r7, r6
 801d364:	fa1f f985 	uxth.w	r9, r5
 801d368:	f834 8007 	ldrh.w	r8, [r4, r7]
 801d36c:	9702      	str	r7, [sp, #8]
 801d36e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801d372:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801d376:	43ed      	mvns	r5, r5
 801d378:	b2ed      	uxtb	r5, r5
 801d37a:	fb17 f709 	smulbb	r7, r7, r9
 801d37e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d382:	fb0c 7c05 	mla	ip, ip, r5, r7
 801d386:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d38a:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801d38e:	b2c0      	uxtb	r0, r0
 801d390:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d394:	fa5f f888 	uxtb.w	r8, r8
 801d398:	fb10 f009 	smulbb	r0, r0, r9
 801d39c:	fb08 0005 	mla	r0, r8, r5, r0
 801d3a0:	b280      	uxth	r0, r0
 801d3a2:	fa1f fc8c 	uxth.w	ip, ip
 801d3a6:	fb1a fa09 	smulbb	sl, sl, r9
 801d3aa:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d3ae:	fb07 a705 	mla	r7, r7, r5, sl
 801d3b2:	f100 0a01 	add.w	sl, r0, #1
 801d3b6:	f10c 0501 	add.w	r5, ip, #1
 801d3ba:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801d3be:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d3c2:	b2bf      	uxth	r7, r7
 801d3c4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d3c8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d3cc:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d3d0:	f107 0a01 	add.w	sl, r7, #1
 801d3d4:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801d3d8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d3dc:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d3e0:	9802      	ldr	r0, [sp, #8]
 801d3e2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d3e6:	f824 c000 	strh.w	ip, [r4, r0]
 801d3ea:	e7af      	b.n	801d34c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d3ec:	f04f 0800 	mov.w	r8, #0
 801d3f0:	eba3 0008 	sub.w	r0, r3, r8
 801d3f4:	2800      	cmp	r0, #0
 801d3f6:	f77f af41 	ble.w	801d27c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d3fa:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801d3fe:	9f00      	ldr	r7, [sp, #0]
 801d400:	1410      	asrs	r0, r2, #16
 801d402:	140d      	asrs	r5, r1, #16
 801d404:	fb06 7000 	mla	r0, r6, r0, r7
 801d408:	5d40      	ldrb	r0, [r0, r5]
 801d40a:	9d01      	ldr	r5, [sp, #4]
 801d40c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801d410:	0e2e      	lsrs	r6, r5, #24
 801d412:	2eff      	cmp	r6, #255	@ 0xff
 801d414:	d112      	bne.n	801d43c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801d416:	482c      	ldr	r0, [pc, #176]	@ (801d4c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801d418:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801d41c:	0968      	lsrs	r0, r5, #5
 801d41e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801d422:	4330      	orrs	r0, r6
 801d424:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801d428:	4328      	orrs	r0, r5
 801d42a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801d42e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d430:	4401      	add	r1, r0
 801d432:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d434:	f108 0801 	add.w	r8, r8, #1
 801d438:	4402      	add	r2, r0
 801d43a:	e7d9      	b.n	801d3f0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d43c:	b2f0      	uxtb	r0, r6
 801d43e:	2e00      	cmp	r6, #0
 801d440:	d0f5      	beq.n	801d42e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801d442:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801d446:	fa1f f980 	uxth.w	r9, r0
 801d44a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d44e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d452:	43c0      	mvns	r0, r0
 801d454:	b2c0      	uxtb	r0, r0
 801d456:	fb16 f609 	smulbb	r6, r6, r9
 801d45a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d45e:	fb07 6700 	mla	r7, r7, r0, r6
 801d462:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d466:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801d46a:	b2ed      	uxtb	r5, r5
 801d46c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d470:	fa5f fc8c 	uxtb.w	ip, ip
 801d474:	fb15 f509 	smulbb	r5, r5, r9
 801d478:	fb0c 5500 	mla	r5, ip, r0, r5
 801d47c:	b2bf      	uxth	r7, r7
 801d47e:	fb1a fa09 	smulbb	sl, sl, r9
 801d482:	b2ad      	uxth	r5, r5
 801d484:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d488:	fb06 a600 	mla	r6, r6, r0, sl
 801d48c:	1c78      	adds	r0, r7, #1
 801d48e:	f105 0a01 	add.w	sl, r5, #1
 801d492:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801d496:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d49a:	b2b6      	uxth	r6, r6
 801d49c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d4a0:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801d4a4:	ea4a 0707 	orr.w	r7, sl, r7
 801d4a8:	f106 0a01 	add.w	sl, r6, #1
 801d4ac:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d4b0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d4b4:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d4b8:	ea47 070a 	orr.w	r7, r7, sl
 801d4bc:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801d4c0:	e7b5      	b.n	801d42e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801d4c2:	b005      	add	sp, #20
 801d4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4c8:	fffff800 	.word	0xfffff800

0801d4cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4d0:	b087      	sub	sp, #28
 801d4d2:	468b      	mov	fp, r1
 801d4d4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d4d6:	9204      	str	r2, [sp, #16]
 801d4d8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d4dc:	9205      	str	r2, [sp, #20]
 801d4de:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801d4e2:	6861      	ldr	r1, [r4, #4]
 801d4e4:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801d4e8:	fb01 2000 	mla	r0, r1, r0, r2
 801d4ec:	6822      	ldr	r2, [r4, #0]
 801d4ee:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801d4f2:	f8de 2000 	ldr.w	r2, [lr]
 801d4f6:	9201      	str	r2, [sp, #4]
 801d4f8:	f8de 2004 	ldr.w	r2, [lr, #4]
 801d4fc:	9202      	str	r2, [sp, #8]
 801d4fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d502:	f1bb 0f00 	cmp.w	fp, #0
 801d506:	dc03      	bgt.n	801d510 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d508:	9a04      	ldr	r2, [sp, #16]
 801d50a:	2a00      	cmp	r2, #0
 801d50c:	f340 8142 	ble.w	801d794 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801d510:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d512:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d516:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801d51a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d51e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d520:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d524:	2b00      	cmp	r3, #0
 801d526:	dd0e      	ble.n	801d546 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d528:	140c      	asrs	r4, r1, #16
 801d52a:	d405      	bmi.n	801d538 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d52c:	42bc      	cmp	r4, r7
 801d52e:	da03      	bge.n	801d538 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d530:	1414      	asrs	r4, r2, #16
 801d532:	d401      	bmi.n	801d538 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d534:	42b4      	cmp	r4, r6
 801d536:	db07      	blt.n	801d548 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d538:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d53a:	4421      	add	r1, r4
 801d53c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d53e:	3b01      	subs	r3, #1
 801d540:	4422      	add	r2, r4
 801d542:	3002      	adds	r0, #2
 801d544:	e7ee      	b.n	801d524 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d546:	d019      	beq.n	801d57c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801d548:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801d54a:	1e5c      	subs	r4, r3, #1
 801d54c:	fb05 1504 	mla	r5, r5, r4, r1
 801d550:	142d      	asrs	r5, r5, #16
 801d552:	d409      	bmi.n	801d568 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801d554:	42bd      	cmp	r5, r7
 801d556:	da07      	bge.n	801d568 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801d558:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d55a:	fb05 2404 	mla	r4, r5, r4, r2
 801d55e:	1424      	asrs	r4, r4, #16
 801d560:	d402      	bmi.n	801d568 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801d562:	42b4      	cmp	r4, r6
 801d564:	f2c0 80b1 	blt.w	801d6ca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801d568:	f04f 0800 	mov.w	r8, #0
 801d56c:	eb03 0408 	add.w	r4, r3, r8
 801d570:	2c00      	cmp	r4, #0
 801d572:	dc3e      	bgt.n	801d5f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d574:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d578:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d57c:	f1bb 0f00 	cmp.w	fp, #0
 801d580:	f340 8108 	ble.w	801d794 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801d584:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d588:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d58c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d590:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d592:	f1bb 0b01 	subs.w	fp, fp, #1
 801d596:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d59a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d59e:	eeb0 6a62 	vmov.f32	s12, s5
 801d5a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d5a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d5aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d5ae:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801d5b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d5b6:	eeb0 6a43 	vmov.f32	s12, s6
 801d5ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d5be:	ee12 2a90 	vmov	r2, s5
 801d5c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d5c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5ca:	ee13 2a10 	vmov	r2, s6
 801d5ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d5d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d5d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d5d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5da:	9a04      	ldr	r2, [sp, #16]
 801d5dc:	9314      	str	r3, [sp, #80]	@ 0x50
 801d5de:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801d5e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d5e4:	eeb0 3a67 	vmov.f32	s6, s15
 801d5e8:	bf08      	it	eq
 801d5ea:	4613      	moveq	r3, r2
 801d5ec:	eef0 2a47 	vmov.f32	s5, s14
 801d5f0:	e787      	b.n	801d502 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d5f2:	140e      	asrs	r6, r1, #16
 801d5f4:	d462      	bmi.n	801d6bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801d5f6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d5fa:	42b5      	cmp	r5, r6
 801d5fc:	dd5e      	ble.n	801d6bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801d5fe:	1417      	asrs	r7, r2, #16
 801d600:	d45c      	bmi.n	801d6bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801d602:	f8de 400c 	ldr.w	r4, [lr, #12]
 801d606:	42bc      	cmp	r4, r7
 801d608:	dd58      	ble.n	801d6bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801d60a:	b22d      	sxth	r5, r5
 801d60c:	fb07 6505 	mla	r5, r7, r5, r6
 801d610:	9c02      	ldr	r4, [sp, #8]
 801d612:	5d66      	ldrb	r6, [r4, r5]
 801d614:	2e00      	cmp	r6, #0
 801d616:	d051      	beq.n	801d6bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801d618:	9c01      	ldr	r4, [sp, #4]
 801d61a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801d61e:	f06f 0401 	mvn.w	r4, #1
 801d622:	fb04 f408 	mul.w	r4, r4, r8
 801d626:	9403      	str	r4, [sp, #12]
 801d628:	5b05      	ldrh	r5, [r0, r4]
 801d62a:	9c05      	ldr	r4, [sp, #20]
 801d62c:	4366      	muls	r6, r4
 801d62e:	1c74      	adds	r4, r6, #1
 801d630:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801d634:	1224      	asrs	r4, r4, #8
 801d636:	b2a7      	uxth	r7, r4
 801d638:	122e      	asrs	r6, r5, #8
 801d63a:	43e4      	mvns	r4, r4
 801d63c:	b2e4      	uxtb	r4, r4
 801d63e:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801d642:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801d646:	fb16 f604 	smulbb	r6, r6, r4
 801d64a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d64e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d652:	00ed      	lsls	r5, r5, #3
 801d654:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d658:	b2ed      	uxtb	r5, r5
 801d65a:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801d65e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801d662:	fb15 f504 	smulbb	r5, r5, r4
 801d666:	fa5f f989 	uxtb.w	r9, r9
 801d66a:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801d66e:	fb09 5507 	mla	r5, r9, r7, r5
 801d672:	fb1a fa04 	smulbb	sl, sl, r4
 801d676:	fa1f fc8c 	uxth.w	ip, ip
 801d67a:	b2ad      	uxth	r5, r5
 801d67c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d680:	fb06 a607 	mla	r6, r6, r7, sl
 801d684:	f10c 0401 	add.w	r4, ip, #1
 801d688:	f105 0a01 	add.w	sl, r5, #1
 801d68c:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801d690:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d694:	b2b6      	uxth	r6, r6
 801d696:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d69a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d69e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d6a2:	f106 0a01 	add.w	sl, r6, #1
 801d6a6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d6aa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d6ae:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d6b2:	9c03      	ldr	r4, [sp, #12]
 801d6b4:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d6b8:	f820 c004 	strh.w	ip, [r0, r4]
 801d6bc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d6be:	4421      	add	r1, r4
 801d6c0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d6c2:	f108 38ff 	add.w	r8, r8, #4294967295
 801d6c6:	4422      	add	r2, r4
 801d6c8:	e750      	b.n	801d56c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d6ca:	f04f 0900 	mov.w	r9, #0
 801d6ce:	eba3 0409 	sub.w	r4, r3, r9
 801d6d2:	2c00      	cmp	r4, #0
 801d6d4:	f77f af4e 	ble.w	801d574 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801d6d8:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801d6dc:	140d      	asrs	r5, r1, #16
 801d6de:	1414      	asrs	r4, r2, #16
 801d6e0:	fb06 5404 	mla	r4, r6, r4, r5
 801d6e4:	9d02      	ldr	r5, [sp, #8]
 801d6e6:	5d2e      	ldrb	r6, [r5, r4]
 801d6e8:	2e00      	cmp	r6, #0
 801d6ea:	d04c      	beq.n	801d786 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d6ec:	9d01      	ldr	r5, [sp, #4]
 801d6ee:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801d6f2:	9c05      	ldr	r4, [sp, #20]
 801d6f4:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801d6f8:	4366      	muls	r6, r4
 801d6fa:	1c74      	adds	r4, r6, #1
 801d6fc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801d700:	1224      	asrs	r4, r4, #8
 801d702:	b2a7      	uxth	r7, r4
 801d704:	122e      	asrs	r6, r5, #8
 801d706:	43e4      	mvns	r4, r4
 801d708:	b2e4      	uxtb	r4, r4
 801d70a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801d70e:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801d712:	fb16 f604 	smulbb	r6, r6, r4
 801d716:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d71a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d71e:	00ed      	lsls	r5, r5, #3
 801d720:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d724:	b2ed      	uxtb	r5, r5
 801d726:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801d72a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d72e:	fb15 f504 	smulbb	r5, r5, r4
 801d732:	fa5f f888 	uxtb.w	r8, r8
 801d736:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801d73a:	fb08 5507 	mla	r5, r8, r7, r5
 801d73e:	fb1a fa04 	smulbb	sl, sl, r4
 801d742:	fa1f fc8c 	uxth.w	ip, ip
 801d746:	b2ad      	uxth	r5, r5
 801d748:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d74c:	fb06 a607 	mla	r6, r6, r7, sl
 801d750:	f10c 0401 	add.w	r4, ip, #1
 801d754:	f105 0a01 	add.w	sl, r5, #1
 801d758:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801d75c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d760:	b2b6      	uxth	r6, r6
 801d762:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d766:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d76a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d76e:	f106 0a01 	add.w	sl, r6, #1
 801d772:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d776:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d77a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d77e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d782:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801d786:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d788:	4421      	add	r1, r4
 801d78a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d78c:	f109 0901 	add.w	r9, r9, #1
 801d790:	4422      	add	r2, r4
 801d792:	e79c      	b.n	801d6ce <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801d794:	b007      	add	sp, #28
 801d796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d79a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d79a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d79e:	b085      	sub	sp, #20
 801d7a0:	468b      	mov	fp, r1
 801d7a2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d7a4:	9203      	str	r2, [sp, #12]
 801d7a6:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 801d7aa:	6861      	ldr	r1, [r4, #4]
 801d7ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801d7b0:	fb01 2000 	mla	r0, r1, r0, r2
 801d7b4:	6822      	ldr	r2, [r4, #0]
 801d7b6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801d7ba:	f8d8 2000 	ldr.w	r2, [r8]
 801d7be:	9200      	str	r2, [sp, #0]
 801d7c0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801d7c4:	9201      	str	r2, [sp, #4]
 801d7c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d7ca:	f1bb 0f00 	cmp.w	fp, #0
 801d7ce:	dc03      	bgt.n	801d7d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d7d0:	9a03      	ldr	r2, [sp, #12]
 801d7d2:	2a00      	cmp	r2, #0
 801d7d4:	f340 8146 	ble.w	801da64 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801d7d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d7da:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801d7de:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801d7e2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d7e6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d7e8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	dd0e      	ble.n	801d80e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d7f0:	140c      	asrs	r4, r1, #16
 801d7f2:	d405      	bmi.n	801d800 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d7f4:	42bc      	cmp	r4, r7
 801d7f6:	da03      	bge.n	801d800 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d7f8:	1414      	asrs	r4, r2, #16
 801d7fa:	d401      	bmi.n	801d800 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d7fc:	42b4      	cmp	r4, r6
 801d7fe:	db07      	blt.n	801d810 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d800:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d802:	4421      	add	r1, r4
 801d804:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d806:	3b01      	subs	r3, #1
 801d808:	4422      	add	r2, r4
 801d80a:	3002      	adds	r0, #2
 801d80c:	e7ee      	b.n	801d7ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d80e:	d017      	beq.n	801d840 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d810:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801d812:	1e5c      	subs	r4, r3, #1
 801d814:	fb05 1504 	mla	r5, r5, r4, r1
 801d818:	142d      	asrs	r5, r5, #16
 801d81a:	d409      	bmi.n	801d830 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d81c:	42bd      	cmp	r5, r7
 801d81e:	da07      	bge.n	801d830 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d820:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801d822:	fb05 2404 	mla	r4, r5, r4, r2
 801d826:	1424      	asrs	r4, r4, #16
 801d828:	d402      	bmi.n	801d830 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d82a:	42b4      	cmp	r4, r6
 801d82c:	f2c0 80b3 	blt.w	801d996 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801d830:	2600      	movs	r6, #0
 801d832:	199c      	adds	r4, r3, r6
 801d834:	2c00      	cmp	r4, #0
 801d836:	dc3e      	bgt.n	801d8b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d838:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d83c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d840:	f1bb 0f00 	cmp.w	fp, #0
 801d844:	f340 810e 	ble.w	801da64 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801d848:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d84c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d850:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d856:	f1bb 0b01 	subs.w	fp, fp, #1
 801d85a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d85e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d862:	eeb0 6a62 	vmov.f32	s12, s5
 801d866:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d86a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d86e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d872:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d876:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d87a:	eeb0 6a43 	vmov.f32	s12, s6
 801d87e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d882:	ee12 2a90 	vmov	r2, s5
 801d886:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d88a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d88e:	ee13 2a10 	vmov	r2, s6
 801d892:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d896:	9311      	str	r3, [sp, #68]	@ 0x44
 801d898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d89a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d89e:	9a03      	ldr	r2, [sp, #12]
 801d8a0:	9312      	str	r3, [sp, #72]	@ 0x48
 801d8a2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d8a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d8a8:	eeb0 3a67 	vmov.f32	s6, s15
 801d8ac:	bf08      	it	eq
 801d8ae:	4613      	moveq	r3, r2
 801d8b0:	eef0 2a47 	vmov.f32	s5, s14
 801d8b4:	e789      	b.n	801d7ca <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d8b6:	140f      	asrs	r7, r1, #16
 801d8b8:	d418      	bmi.n	801d8ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d8ba:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801d8be:	42bd      	cmp	r5, r7
 801d8c0:	dd14      	ble.n	801d8ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d8c2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d8c6:	d411      	bmi.n	801d8ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d8c8:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801d8cc:	4564      	cmp	r4, ip
 801d8ce:	dd0d      	ble.n	801d8ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d8d0:	b22d      	sxth	r5, r5
 801d8d2:	fb0c 7505 	mla	r5, ip, r5, r7
 801d8d6:	9c01      	ldr	r4, [sp, #4]
 801d8d8:	5d64      	ldrb	r4, [r4, r5]
 801d8da:	2cff      	cmp	r4, #255	@ 0xff
 801d8dc:	d10c      	bne.n	801d8f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801d8de:	9c00      	ldr	r4, [sp, #0]
 801d8e0:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801d8e4:	f06f 0401 	mvn.w	r4, #1
 801d8e8:	4374      	muls	r4, r6
 801d8ea:	5305      	strh	r5, [r0, r4]
 801d8ec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d8ee:	4421      	add	r1, r4
 801d8f0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d8f2:	3e01      	subs	r6, #1
 801d8f4:	4422      	add	r2, r4
 801d8f6:	e79c      	b.n	801d832 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d8f8:	2c00      	cmp	r4, #0
 801d8fa:	d0f7      	beq.n	801d8ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d8fc:	9f00      	ldr	r7, [sp, #0]
 801d8fe:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801d902:	f06f 0501 	mvn.w	r5, #1
 801d906:	4375      	muls	r5, r6
 801d908:	9502      	str	r5, [sp, #8]
 801d90a:	5b45      	ldrh	r5, [r0, r5]
 801d90c:	fa1f fc84 	uxth.w	ip, r4
 801d910:	122f      	asrs	r7, r5, #8
 801d912:	43e4      	mvns	r4, r4
 801d914:	b2e4      	uxtb	r4, r4
 801d916:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801d91a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d91e:	fb17 f704 	smulbb	r7, r7, r4
 801d922:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d926:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801d92a:	00ed      	lsls	r5, r5, #3
 801d92c:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801d930:	b2ed      	uxtb	r5, r5
 801d932:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801d936:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801d93a:	fb15 f504 	smulbb	r5, r5, r4
 801d93e:	fa5f f989 	uxtb.w	r9, r9
 801d942:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801d946:	fb09 550c 	mla	r5, r9, ip, r5
 801d94a:	fb1a fa04 	smulbb	sl, sl, r4
 801d94e:	fa1f fe8e 	uxth.w	lr, lr
 801d952:	b2ad      	uxth	r5, r5
 801d954:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d958:	fb07 a70c 	mla	r7, r7, ip, sl
 801d95c:	f10e 0401 	add.w	r4, lr, #1
 801d960:	f105 0a01 	add.w	sl, r5, #1
 801d964:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801d968:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d96c:	b2bf      	uxth	r7, r7
 801d96e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d972:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801d976:	ea4a 0e0e 	orr.w	lr, sl, lr
 801d97a:	f107 0a01 	add.w	sl, r7, #1
 801d97e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801d982:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d986:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d98a:	9c02      	ldr	r4, [sp, #8]
 801d98c:	ea4e 0e0a 	orr.w	lr, lr, sl
 801d990:	f820 e004 	strh.w	lr, [r0, r4]
 801d994:	e7aa      	b.n	801d8ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d996:	f04f 0900 	mov.w	r9, #0
 801d99a:	eba3 0409 	sub.w	r4, r3, r9
 801d99e:	2c00      	cmp	r4, #0
 801d9a0:	f77f af4a 	ble.w	801d838 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d9a4:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801d9a8:	1414      	asrs	r4, r2, #16
 801d9aa:	140d      	asrs	r5, r1, #16
 801d9ac:	fb06 5504 	mla	r5, r6, r4, r5
 801d9b0:	9c01      	ldr	r4, [sp, #4]
 801d9b2:	5d64      	ldrb	r4, [r4, r5]
 801d9b4:	2cff      	cmp	r4, #255	@ 0xff
 801d9b6:	d10b      	bne.n	801d9d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801d9b8:	9c00      	ldr	r4, [sp, #0]
 801d9ba:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801d9be:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801d9c2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d9c4:	4421      	add	r1, r4
 801d9c6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d9c8:	f109 0901 	add.w	r9, r9, #1
 801d9cc:	4422      	add	r2, r4
 801d9ce:	e7e4      	b.n	801d99a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d9d0:	2c00      	cmp	r4, #0
 801d9d2:	d0f6      	beq.n	801d9c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801d9d4:	9e00      	ldr	r6, [sp, #0]
 801d9d6:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801d9da:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801d9de:	b2a7      	uxth	r7, r4
 801d9e0:	122e      	asrs	r6, r5, #8
 801d9e2:	43e4      	mvns	r4, r4
 801d9e4:	b2e4      	uxtb	r4, r4
 801d9e6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d9ea:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801d9ee:	fb16 f604 	smulbb	r6, r6, r4
 801d9f2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d9f6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d9fa:	00ed      	lsls	r5, r5, #3
 801d9fc:	fb0c 6c07 	mla	ip, ip, r7, r6
 801da00:	b2ed      	uxtb	r5, r5
 801da02:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801da06:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801da0a:	fb15 f504 	smulbb	r5, r5, r4
 801da0e:	fa5f fe8e 	uxtb.w	lr, lr
 801da12:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801da16:	fb0e 5507 	mla	r5, lr, r7, r5
 801da1a:	fb1a fa04 	smulbb	sl, sl, r4
 801da1e:	fa1f fc8c 	uxth.w	ip, ip
 801da22:	b2ad      	uxth	r5, r5
 801da24:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801da28:	fb06 a607 	mla	r6, r6, r7, sl
 801da2c:	f10c 0401 	add.w	r4, ip, #1
 801da30:	f105 0a01 	add.w	sl, r5, #1
 801da34:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801da38:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801da3c:	b2b6      	uxth	r6, r6
 801da3e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801da42:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801da46:	ea4a 0c0c 	orr.w	ip, sl, ip
 801da4a:	f106 0a01 	add.w	sl, r6, #1
 801da4e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801da52:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801da56:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801da5a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801da5e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801da62:	e7ae      	b.n	801d9c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801da64:	b005      	add	sp, #20
 801da66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801da6a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801da6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da6e:	b085      	sub	sp, #20
 801da70:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801da72:	9203      	str	r2, [sp, #12]
 801da74:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801da78:	9201      	str	r2, [sp, #4]
 801da7a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801da7e:	9100      	str	r1, [sp, #0]
 801da80:	6841      	ldr	r1, [r0, #4]
 801da82:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801da86:	fb01 2404 	mla	r4, r1, r4, r2
 801da8a:	6802      	ldr	r2, [r0, #0]
 801da8c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801da90:	f8de 2000 	ldr.w	r2, [lr]
 801da94:	9202      	str	r2, [sp, #8]
 801da96:	9a01      	ldr	r2, [sp, #4]
 801da98:	43d6      	mvns	r6, r2
 801da9a:	b2f6      	uxtb	r6, r6
 801da9c:	9a00      	ldr	r2, [sp, #0]
 801da9e:	2a00      	cmp	r2, #0
 801daa0:	dc03      	bgt.n	801daaa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801daa2:	9a03      	ldr	r2, [sp, #12]
 801daa4:	2a00      	cmp	r2, #0
 801daa6:	f340 8124 	ble.w	801dcf2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801daaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801daac:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801dab0:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801dab4:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801dab8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801daba:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	dd0e      	ble.n	801dae0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dac2:	1408      	asrs	r0, r1, #16
 801dac4:	d405      	bmi.n	801dad2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dac6:	4560      	cmp	r0, ip
 801dac8:	da03      	bge.n	801dad2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801daca:	1410      	asrs	r0, r2, #16
 801dacc:	d401      	bmi.n	801dad2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dace:	42b8      	cmp	r0, r7
 801dad0:	db07      	blt.n	801dae2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dad2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801dad4:	4401      	add	r1, r0
 801dad6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dad8:	3b01      	subs	r3, #1
 801dada:	4402      	add	r2, r0
 801dadc:	3402      	adds	r4, #2
 801dade:	e7ee      	b.n	801dabe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801dae0:	d06e      	beq.n	801dbc0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801dae2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801dae4:	1e58      	subs	r0, r3, #1
 801dae6:	fb05 1500 	mla	r5, r5, r0, r1
 801daea:	142d      	asrs	r5, r5, #16
 801daec:	d45c      	bmi.n	801dba8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801daee:	4565      	cmp	r5, ip
 801daf0:	da5a      	bge.n	801dba8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801daf2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801daf4:	fb05 2000 	mla	r0, r5, r0, r2
 801daf8:	1400      	asrs	r0, r0, #16
 801dafa:	d455      	bmi.n	801dba8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801dafc:	42b8      	cmp	r0, r7
 801dafe:	da53      	bge.n	801dba8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801db00:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801db04:	4699      	mov	r9, r3
 801db06:	46a2      	mov	sl, r4
 801db08:	f1b9 0f00 	cmp.w	r9, #0
 801db0c:	dd54      	ble.n	801dbb8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801db0e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801db12:	140d      	asrs	r5, r1, #16
 801db14:	1410      	asrs	r0, r2, #16
 801db16:	fb07 5000 	mla	r0, r7, r0, r5
 801db1a:	9d02      	ldr	r5, [sp, #8]
 801db1c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801db20:	f8ba 5000 	ldrh.w	r5, [sl]
 801db24:	122f      	asrs	r7, r5, #8
 801db26:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801db2a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801db2e:	fb17 f706 	smulbb	r7, r7, r6
 801db32:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801db36:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801db3a:	00ed      	lsls	r5, r5, #3
 801db3c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801db40:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801db44:	10c7      	asrs	r7, r0, #3
 801db46:	b2ed      	uxtb	r5, r5
 801db48:	00c0      	lsls	r0, r0, #3
 801db4a:	fb18 f806 	smulbb	r8, r8, r6
 801db4e:	fb15 f506 	smulbb	r5, r5, r6
 801db52:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801db56:	b2c0      	uxtb	r0, r0
 801db58:	fa1f fc8c 	uxth.w	ip, ip
 801db5c:	fb07 870b 	mla	r7, r7, fp, r8
 801db60:	fb00 500b 	mla	r0, r0, fp, r5
 801db64:	b280      	uxth	r0, r0
 801db66:	b2bf      	uxth	r7, r7
 801db68:	f10c 0501 	add.w	r5, ip, #1
 801db6c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801db70:	f107 0801 	add.w	r8, r7, #1
 801db74:	1c45      	adds	r5, r0, #1
 801db76:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801db7a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801db7e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801db80:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801db84:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801db88:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801db8c:	ea45 0c0c 	orr.w	ip, r5, ip
 801db90:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801db94:	4401      	add	r1, r0
 801db96:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801db98:	ea4c 0c08 	orr.w	ip, ip, r8
 801db9c:	f82a cb02 	strh.w	ip, [sl], #2
 801dba0:	4402      	add	r2, r0
 801dba2:	f109 39ff 	add.w	r9, r9, #4294967295
 801dba6:	e7af      	b.n	801db08 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801dba8:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801dbac:	f04f 0800 	mov.w	r8, #0
 801dbb0:	eb03 0008 	add.w	r0, r3, r8
 801dbb4:	2800      	cmp	r0, #0
 801dbb6:	dc41      	bgt.n	801dc3c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801dbb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dbbc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dbc0:	9b00      	ldr	r3, [sp, #0]
 801dbc2:	2b00      	cmp	r3, #0
 801dbc4:	f340 8095 	ble.w	801dcf2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801dbc8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dbcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dbd0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dbd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dbd6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dbda:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dbde:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dbe2:	eef0 6a62 	vmov.f32	s13, s5
 801dbe6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dbea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dbee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dbf2:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801dbf6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dbfa:	eef0 6a43 	vmov.f32	s13, s6
 801dbfe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dc02:	ee12 2a90 	vmov	r2, s5
 801dc06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dc0a:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc0e:	ee13 2a10 	vmov	r2, s6
 801dc12:	9311      	str	r3, [sp, #68]	@ 0x44
 801dc14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc16:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc1a:	9312      	str	r3, [sp, #72]	@ 0x48
 801dc1c:	9b00      	ldr	r3, [sp, #0]
 801dc1e:	9a03      	ldr	r2, [sp, #12]
 801dc20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dc24:	3b01      	subs	r3, #1
 801dc26:	9300      	str	r3, [sp, #0]
 801dc28:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801dc2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc2e:	eeb0 3a67 	vmov.f32	s6, s15
 801dc32:	bf08      	it	eq
 801dc34:	4613      	moveq	r3, r2
 801dc36:	eef0 2a47 	vmov.f32	s5, s14
 801dc3a:	e72f      	b.n	801da9c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801dc3c:	140f      	asrs	r7, r1, #16
 801dc3e:	d451      	bmi.n	801dce4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801dc40:	f8de 5008 	ldr.w	r5, [lr, #8]
 801dc44:	42bd      	cmp	r5, r7
 801dc46:	dd4d      	ble.n	801dce4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801dc48:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801dc4c:	d44a      	bmi.n	801dce4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801dc4e:	f8de 000c 	ldr.w	r0, [lr, #12]
 801dc52:	4560      	cmp	r0, ip
 801dc54:	dd46      	ble.n	801dce4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801dc56:	b22d      	sxth	r5, r5
 801dc58:	fb0c 7505 	mla	r5, ip, r5, r7
 801dc5c:	9802      	ldr	r0, [sp, #8]
 801dc5e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801dc62:	f06f 0501 	mvn.w	r5, #1
 801dc66:	fb05 fb08 	mul.w	fp, r5, r8
 801dc6a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801dc6e:	f834 500b 	ldrh.w	r5, [r4, fp]
 801dc72:	122f      	asrs	r7, r5, #8
 801dc74:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801dc78:	fb17 f706 	smulbb	r7, r7, r6
 801dc7c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801dc80:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801dc84:	00ed      	lsls	r5, r5, #3
 801dc86:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801dc8a:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801dc8e:	10c7      	asrs	r7, r0, #3
 801dc90:	b2ed      	uxtb	r5, r5
 801dc92:	00c0      	lsls	r0, r0, #3
 801dc94:	fb19 f906 	smulbb	r9, r9, r6
 801dc98:	fb15 f506 	smulbb	r5, r5, r6
 801dc9c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801dca0:	b2c0      	uxtb	r0, r0
 801dca2:	fa1f fc8c 	uxth.w	ip, ip
 801dca6:	fb07 970a 	mla	r7, r7, sl, r9
 801dcaa:	fb00 500a 	mla	r0, r0, sl, r5
 801dcae:	b2bf      	uxth	r7, r7
 801dcb0:	b280      	uxth	r0, r0
 801dcb2:	f10c 0501 	add.w	r5, ip, #1
 801dcb6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801dcba:	f107 0901 	add.w	r9, r7, #1
 801dcbe:	1c45      	adds	r5, r0, #1
 801dcc0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801dcc4:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801dcc8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801dccc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801dcd0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801dcd4:	ea45 0c0c 	orr.w	ip, r5, ip
 801dcd8:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801dcdc:	ea4c 0c09 	orr.w	ip, ip, r9
 801dce0:	f824 c00b 	strh.w	ip, [r4, fp]
 801dce4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801dce6:	4401      	add	r1, r0
 801dce8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dcea:	f108 38ff 	add.w	r8, r8, #4294967295
 801dcee:	4402      	add	r2, r0
 801dcf0:	e75e      	b.n	801dbb0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801dcf2:	b005      	add	sp, #20
 801dcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dcf8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcfc:	b085      	sub	sp, #20
 801dcfe:	4693      	mov	fp, r2
 801dd00:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801dd02:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801dd04:	6870      	ldr	r0, [r6, #4]
 801dd06:	9101      	str	r1, [sp, #4]
 801dd08:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801dd0c:	fb00 2404 	mla	r4, r0, r4, r2
 801dd10:	6832      	ldr	r2, [r6, #0]
 801dd12:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801dd16:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801dd1a:	682a      	ldr	r2, [r5, #0]
 801dd1c:	9202      	str	r2, [sp, #8]
 801dd1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dd22:	9a01      	ldr	r2, [sp, #4]
 801dd24:	2a00      	cmp	r2, #0
 801dd26:	dc03      	bgt.n	801dd30 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801dd28:	f1bb 0f00 	cmp.w	fp, #0
 801dd2c:	f340 809a 	ble.w	801de64 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801dd30:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dd32:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801dd36:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801dd3a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801dd3e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801dd40:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	dd0c      	ble.n	801dd62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dd48:	1406      	asrs	r6, r0, #16
 801dd4a:	d405      	bmi.n	801dd58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801dd4c:	454e      	cmp	r6, r9
 801dd4e:	da03      	bge.n	801dd58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801dd50:	1416      	asrs	r6, r2, #16
 801dd52:	d401      	bmi.n	801dd58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801dd54:	4546      	cmp	r6, r8
 801dd56:	db05      	blt.n	801dd64 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dd58:	4470      	add	r0, lr
 801dd5a:	4462      	add	r2, ip
 801dd5c:	3b01      	subs	r3, #1
 801dd5e:	3402      	adds	r4, #2
 801dd60:	e7f0      	b.n	801dd44 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801dd62:	d00f      	beq.n	801dd84 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801dd64:	1e5e      	subs	r6, r3, #1
 801dd66:	fb0e 0706 	mla	r7, lr, r6, r0
 801dd6a:	143f      	asrs	r7, r7, #16
 801dd6c:	d541      	bpl.n	801ddf2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801dd6e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801dd72:	4698      	mov	r8, r3
 801dd74:	9603      	str	r6, [sp, #12]
 801dd76:	f1b8 0f00 	cmp.w	r8, #0
 801dd7a:	dc56      	bgt.n	801de2a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801dd7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dd80:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dd84:	9b01      	ldr	r3, [sp, #4]
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	dd6c      	ble.n	801de64 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801dd8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd92:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dd96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd98:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dda0:	eeb0 6a62 	vmov.f32	s12, s5
 801dda4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dda8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ddac:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ddb0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ddb4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ddb8:	eeb0 6a43 	vmov.f32	s12, s6
 801ddbc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ddc0:	ee12 2a90 	vmov	r2, s5
 801ddc4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ddc8:	fb92 fef3 	sdiv	lr, r2, r3
 801ddcc:	ee13 2a10 	vmov	r2, s6
 801ddd0:	fb92 fcf3 	sdiv	ip, r2, r3
 801ddd4:	9b01      	ldr	r3, [sp, #4]
 801ddd6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ddda:	3b01      	subs	r3, #1
 801dddc:	9301      	str	r3, [sp, #4]
 801ddde:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801dde2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dde4:	eeb0 3a67 	vmov.f32	s6, s15
 801dde8:	bf08      	it	eq
 801ddea:	465b      	moveq	r3, fp
 801ddec:	eef0 2a47 	vmov.f32	s5, s14
 801ddf0:	e797      	b.n	801dd22 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ddf2:	454f      	cmp	r7, r9
 801ddf4:	dabb      	bge.n	801dd6e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ddf6:	fb0c 2606 	mla	r6, ip, r6, r2
 801ddfa:	1436      	asrs	r6, r6, #16
 801ddfc:	d4b7      	bmi.n	801dd6e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ddfe:	4546      	cmp	r6, r8
 801de00:	dab5      	bge.n	801dd6e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801de02:	461e      	mov	r6, r3
 801de04:	46a0      	mov	r8, r4
 801de06:	2e00      	cmp	r6, #0
 801de08:	ddb8      	ble.n	801dd7c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801de0a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801de0e:	9902      	ldr	r1, [sp, #8]
 801de10:	1417      	asrs	r7, r2, #16
 801de12:	ea4f 4920 	mov.w	r9, r0, asr #16
 801de16:	fb0a 9707 	mla	r7, sl, r7, r9
 801de1a:	4470      	add	r0, lr
 801de1c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801de20:	f828 7b02 	strh.w	r7, [r8], #2
 801de24:	4462      	add	r2, ip
 801de26:	3e01      	subs	r6, #1
 801de28:	e7ed      	b.n	801de06 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801de2a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801de2e:	d414      	bmi.n	801de5a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801de30:	68ae      	ldr	r6, [r5, #8]
 801de32:	454e      	cmp	r6, r9
 801de34:	dd11      	ble.n	801de5a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801de36:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801de3a:	d40e      	bmi.n	801de5a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801de3c:	68ef      	ldr	r7, [r5, #12]
 801de3e:	4557      	cmp	r7, sl
 801de40:	dd0b      	ble.n	801de5a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801de42:	b236      	sxth	r6, r6
 801de44:	fb0a 9606 	mla	r6, sl, r6, r9
 801de48:	9f02      	ldr	r7, [sp, #8]
 801de4a:	f06f 0101 	mvn.w	r1, #1
 801de4e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801de52:	fb01 f608 	mul.w	r6, r1, r8
 801de56:	9903      	ldr	r1, [sp, #12]
 801de58:	538f      	strh	r7, [r1, r6]
 801de5a:	4470      	add	r0, lr
 801de5c:	4462      	add	r2, ip
 801de5e:	f108 38ff 	add.w	r8, r8, #4294967295
 801de62:	e788      	b.n	801dd76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801de64:	b005      	add	sp, #20
 801de66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801de6a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de6e:	b087      	sub	sp, #28
 801de70:	468b      	mov	fp, r1
 801de72:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801de74:	9203      	str	r2, [sp, #12]
 801de76:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801de7a:	9204      	str	r2, [sp, #16]
 801de7c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801de80:	6841      	ldr	r1, [r0, #4]
 801de82:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801de86:	fb01 2505 	mla	r5, r1, r5, r2
 801de8a:	6802      	ldr	r2, [r0, #0]
 801de8c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801de90:	f8d9 2000 	ldr.w	r2, [r9]
 801de94:	9201      	str	r2, [sp, #4]
 801de96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801de9a:	f1bb 0f00 	cmp.w	fp, #0
 801de9e:	dc03      	bgt.n	801dea8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801dea0:	9a03      	ldr	r2, [sp, #12]
 801dea2:	2a00      	cmp	r2, #0
 801dea4:	f340 8159 	ble.w	801e15a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801dea8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801deaa:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801deae:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801deb2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801deb6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801deb8:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801debc:	2b00      	cmp	r3, #0
 801debe:	dd0e      	ble.n	801dede <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801dec0:	1402      	asrs	r2, r0, #16
 801dec2:	d405      	bmi.n	801ded0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801dec4:	42ba      	cmp	r2, r7
 801dec6:	da03      	bge.n	801ded0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801dec8:	140a      	asrs	r2, r1, #16
 801deca:	d401      	bmi.n	801ded0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801decc:	42b2      	cmp	r2, r6
 801dece:	db07      	blt.n	801dee0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ded0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ded2:	4410      	add	r0, r2
 801ded4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ded6:	3b01      	subs	r3, #1
 801ded8:	4411      	add	r1, r2
 801deda:	3502      	adds	r5, #2
 801dedc:	e7ee      	b.n	801debc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801dede:	d017      	beq.n	801df10 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801dee0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dee2:	1e5a      	subs	r2, r3, #1
 801dee4:	fb04 0402 	mla	r4, r4, r2, r0
 801dee8:	1424      	asrs	r4, r4, #16
 801deea:	d409      	bmi.n	801df00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801deec:	42bc      	cmp	r4, r7
 801deee:	da07      	bge.n	801df00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801def0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801def2:	fb04 1202 	mla	r2, r4, r2, r1
 801def6:	1412      	asrs	r2, r2, #16
 801def8:	d402      	bmi.n	801df00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801defa:	42b2      	cmp	r2, r6
 801defc:	f2c0 80bf 	blt.w	801e07e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801df00:	2700      	movs	r7, #0
 801df02:	19da      	adds	r2, r3, r7
 801df04:	2a00      	cmp	r2, #0
 801df06:	dc3e      	bgt.n	801df86 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801df08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801df0c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801df10:	f1bb 0f00 	cmp.w	fp, #0
 801df14:	f340 8121 	ble.w	801e15a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801df18:	ee30 0a04 	vadd.f32	s0, s0, s8
 801df1c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801df20:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801df24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df26:	f1bb 0b01 	subs.w	fp, fp, #1
 801df2a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801df2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801df32:	eeb0 6a62 	vmov.f32	s12, s5
 801df36:	ee61 7a27 	vmul.f32	s15, s2, s15
 801df3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801df42:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801df46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801df4a:	eeb0 6a43 	vmov.f32	s12, s6
 801df4e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801df52:	ee12 2a90 	vmov	r2, s5
 801df56:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801df5a:	fb92 f3f3 	sdiv	r3, r2, r3
 801df5e:	ee13 2a10 	vmov	r2, s6
 801df62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df66:	9313      	str	r3, [sp, #76]	@ 0x4c
 801df68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df6a:	fb92 f3f3 	sdiv	r3, r2, r3
 801df6e:	9a03      	ldr	r2, [sp, #12]
 801df70:	9314      	str	r3, [sp, #80]	@ 0x50
 801df72:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801df76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df78:	eeb0 3a67 	vmov.f32	s6, s15
 801df7c:	bf08      	it	eq
 801df7e:	4613      	moveq	r3, r2
 801df80:	eef0 2a47 	vmov.f32	s5, s14
 801df84:	e789      	b.n	801de9a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801df86:	1406      	asrs	r6, r0, #16
 801df88:	d42d      	bmi.n	801dfe6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801df8a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801df8e:	42b4      	cmp	r4, r6
 801df90:	dd29      	ble.n	801dfe6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801df92:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801df96:	d426      	bmi.n	801dfe6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801df98:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801df9c:	4562      	cmp	r2, ip
 801df9e:	dd22      	ble.n	801dfe6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801dfa0:	b224      	sxth	r4, r4
 801dfa2:	9a01      	ldr	r2, [sp, #4]
 801dfa4:	fb0c 6404 	mla	r4, ip, r4, r6
 801dfa8:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801dfac:	0e22      	lsrs	r2, r4, #24
 801dfae:	d01a      	beq.n	801dfe6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801dfb0:	9e04      	ldr	r6, [sp, #16]
 801dfb2:	4372      	muls	r2, r6
 801dfb4:	1c56      	adds	r6, r2, #1
 801dfb6:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801dfba:	1212      	asrs	r2, r2, #8
 801dfbc:	0a26      	lsrs	r6, r4, #8
 801dfbe:	2aff      	cmp	r2, #255	@ 0xff
 801dfc0:	9605      	str	r6, [sp, #20]
 801dfc2:	d116      	bne.n	801dff2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801dfc4:	f06f 0201 	mvn.w	r2, #1
 801dfc8:	fb02 fc07 	mul.w	ip, r2, r7
 801dfcc:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801dfd0:	0962      	lsrs	r2, r4, #5
 801dfd2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801dfd6:	f026 0607 	bic.w	r6, r6, #7
 801dfda:	4316      	orrs	r6, r2
 801dfdc:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801dfe0:	4326      	orrs	r6, r4
 801dfe2:	f825 600c 	strh.w	r6, [r5, ip]
 801dfe6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dfe8:	4410      	add	r0, r2
 801dfea:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dfec:	3f01      	subs	r7, #1
 801dfee:	4411      	add	r1, r2
 801dff0:	e787      	b.n	801df02 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801dff2:	f06f 0601 	mvn.w	r6, #1
 801dff6:	437e      	muls	r6, r7
 801dff8:	fa1f fa82 	uxth.w	sl, r2
 801dffc:	f835 8006 	ldrh.w	r8, [r5, r6]
 801e000:	9602      	str	r6, [sp, #8]
 801e002:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801e006:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801e00a:	43d2      	mvns	r2, r2
 801e00c:	b2d2      	uxtb	r2, r2
 801e00e:	fb1c fc0a 	smulbb	ip, ip, sl
 801e012:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801e016:	fb0e ce02 	mla	lr, lr, r2, ip
 801e01a:	b2e4      	uxtb	r4, r4
 801e01c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801e020:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e024:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801e028:	fa5f f888 	uxtb.w	r8, r8
 801e02c:	fb14 f40a 	smulbb	r4, r4, sl
 801e030:	fb08 4402 	mla	r4, r8, r2, r4
 801e034:	fa1f fe8e 	uxth.w	lr, lr
 801e038:	fb16 f60a 	smulbb	r6, r6, sl
 801e03c:	b2a4      	uxth	r4, r4
 801e03e:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801e042:	fb0c 6c02 	mla	ip, ip, r2, r6
 801e046:	f10e 0201 	add.w	r2, lr, #1
 801e04a:	1c66      	adds	r6, r4, #1
 801e04c:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801e050:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801e054:	fa1f fc8c 	uxth.w	ip, ip
 801e058:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801e05c:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801e060:	ea46 0e0e 	orr.w	lr, r6, lr
 801e064:	f10c 0601 	add.w	r6, ip, #1
 801e068:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801e06c:	0976      	lsrs	r6, r6, #5
 801e06e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801e072:	9a02      	ldr	r2, [sp, #8]
 801e074:	ea4e 0e06 	orr.w	lr, lr, r6
 801e078:	f825 e002 	strh.w	lr, [r5, r2]
 801e07c:	e7b3      	b.n	801dfe6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e07e:	f04f 0800 	mov.w	r8, #0
 801e082:	eba3 0208 	sub.w	r2, r3, r8
 801e086:	2a00      	cmp	r2, #0
 801e088:	f77f af3e 	ble.w	801df08 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e08c:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801e090:	1404      	asrs	r4, r0, #16
 801e092:	140a      	asrs	r2, r1, #16
 801e094:	fb06 4202 	mla	r2, r6, r2, r4
 801e098:	9c01      	ldr	r4, [sp, #4]
 801e09a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801e09e:	0e22      	lsrs	r2, r4, #24
 801e0a0:	d016      	beq.n	801e0d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801e0a2:	9e04      	ldr	r6, [sp, #16]
 801e0a4:	4372      	muls	r2, r6
 801e0a6:	1c56      	adds	r6, r2, #1
 801e0a8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e0ac:	1212      	asrs	r2, r2, #8
 801e0ae:	2aff      	cmp	r2, #255	@ 0xff
 801e0b0:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801e0b4:	d113      	bne.n	801e0de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801e0b6:	0962      	lsrs	r2, r4, #5
 801e0b8:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801e0bc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e0c0:	f026 0607 	bic.w	r6, r6, #7
 801e0c4:	4316      	orrs	r6, r2
 801e0c6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801e0ca:	4326      	orrs	r6, r4
 801e0cc:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801e0d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e0d2:	4410      	add	r0, r2
 801e0d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e0d6:	f108 0801 	add.w	r8, r8, #1
 801e0da:	4411      	add	r1, r2
 801e0dc:	e7d1      	b.n	801e082 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801e0de:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801e0e2:	fa1f fa82 	uxth.w	sl, r2
 801e0e6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e0ea:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801e0ee:	43d2      	mvns	r2, r2
 801e0f0:	b2d2      	uxtb	r2, r2
 801e0f2:	fb17 f70a 	smulbb	r7, r7, sl
 801e0f6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e0fa:	fb0c 7c02 	mla	ip, ip, r2, r7
 801e0fe:	b2e4      	uxtb	r4, r4
 801e100:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801e104:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e108:	fa5f fe8e 	uxtb.w	lr, lr
 801e10c:	fb14 f40a 	smulbb	r4, r4, sl
 801e110:	fb0e 4402 	mla	r4, lr, r2, r4
 801e114:	b2f6      	uxtb	r6, r6
 801e116:	fa1f fc8c 	uxth.w	ip, ip
 801e11a:	fb16 f60a 	smulbb	r6, r6, sl
 801e11e:	b2a4      	uxth	r4, r4
 801e120:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e124:	fb07 6702 	mla	r7, r7, r2, r6
 801e128:	f10c 0201 	add.w	r2, ip, #1
 801e12c:	1c66      	adds	r6, r4, #1
 801e12e:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801e132:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801e136:	b2bf      	uxth	r7, r7
 801e138:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801e13c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e140:	ea46 0c0c 	orr.w	ip, r6, ip
 801e144:	1c7e      	adds	r6, r7, #1
 801e146:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801e14a:	0976      	lsrs	r6, r6, #5
 801e14c:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801e150:	ea4c 0c06 	orr.w	ip, ip, r6
 801e154:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801e158:	e7ba      	b.n	801e0d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801e15a:	b007      	add	sp, #28
 801e15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e160 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e164:	b085      	sub	sp, #20
 801e166:	468b      	mov	fp, r1
 801e168:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e16a:	9203      	str	r2, [sp, #12]
 801e16c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801e170:	6841      	ldr	r1, [r0, #4]
 801e172:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801e176:	fb01 2404 	mla	r4, r1, r4, r2
 801e17a:	6802      	ldr	r2, [r0, #0]
 801e17c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e180:	f8d8 2000 	ldr.w	r2, [r8]
 801e184:	9201      	str	r2, [sp, #4]
 801e186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e18a:	f1bb 0f00 	cmp.w	fp, #0
 801e18e:	dc03      	bgt.n	801e198 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e190:	9a03      	ldr	r2, [sp, #12]
 801e192:	2a00      	cmp	r2, #0
 801e194:	f340 814f 	ble.w	801e436 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801e198:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e19a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801e19e:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801e1a2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e1a6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e1a8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e1ac:	2b00      	cmp	r3, #0
 801e1ae:	dd0e      	ble.n	801e1ce <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e1b0:	1408      	asrs	r0, r1, #16
 801e1b2:	d405      	bmi.n	801e1c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e1b4:	42b8      	cmp	r0, r7
 801e1b6:	da03      	bge.n	801e1c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e1b8:	1410      	asrs	r0, r2, #16
 801e1ba:	d401      	bmi.n	801e1c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e1bc:	42b0      	cmp	r0, r6
 801e1be:	db07      	blt.n	801e1d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e1c0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e1c2:	4401      	add	r1, r0
 801e1c4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e1c6:	3b01      	subs	r3, #1
 801e1c8:	4402      	add	r2, r0
 801e1ca:	3402      	adds	r4, #2
 801e1cc:	e7ee      	b.n	801e1ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e1ce:	d017      	beq.n	801e200 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e1d0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e1d2:	1e58      	subs	r0, r3, #1
 801e1d4:	fb05 1500 	mla	r5, r5, r0, r1
 801e1d8:	142d      	asrs	r5, r5, #16
 801e1da:	d409      	bmi.n	801e1f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e1dc:	42bd      	cmp	r5, r7
 801e1de:	da07      	bge.n	801e1f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e1e0:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e1e2:	fb05 2000 	mla	r0, r5, r0, r2
 801e1e6:	1400      	asrs	r0, r0, #16
 801e1e8:	d402      	bmi.n	801e1f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e1ea:	42b0      	cmp	r0, r6
 801e1ec:	f2c0 80ba 	blt.w	801e364 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e1f0:	2600      	movs	r6, #0
 801e1f2:	1998      	adds	r0, r3, r6
 801e1f4:	2800      	cmp	r0, #0
 801e1f6:	dc3e      	bgt.n	801e276 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e1f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e1fc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e200:	f1bb 0f00 	cmp.w	fp, #0
 801e204:	f340 8117 	ble.w	801e436 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801e208:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e20c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e210:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e216:	f1bb 0b01 	subs.w	fp, fp, #1
 801e21a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e21e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e222:	eeb0 6a62 	vmov.f32	s12, s5
 801e226:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e22a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e22e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e232:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e236:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e23a:	eeb0 6a43 	vmov.f32	s12, s6
 801e23e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e242:	ee12 2a90 	vmov	r2, s5
 801e246:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e24a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e24e:	ee13 2a10 	vmov	r2, s6
 801e252:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e256:	9311      	str	r3, [sp, #68]	@ 0x44
 801e258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e25a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e25e:	9a03      	ldr	r2, [sp, #12]
 801e260:	9312      	str	r3, [sp, #72]	@ 0x48
 801e262:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e266:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e268:	eeb0 3a67 	vmov.f32	s6, s15
 801e26c:	bf08      	it	eq
 801e26e:	4613      	moveq	r3, r2
 801e270:	eef0 2a47 	vmov.f32	s5, s14
 801e274:	e789      	b.n	801e18a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801e276:	140f      	asrs	r7, r1, #16
 801e278:	d424      	bmi.n	801e2c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e27a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801e27e:	42bd      	cmp	r5, r7
 801e280:	dd20      	ble.n	801e2c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e282:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e286:	d41d      	bmi.n	801e2c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e288:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801e28c:	4560      	cmp	r0, ip
 801e28e:	dd19      	ble.n	801e2c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e290:	b22d      	sxth	r5, r5
 801e292:	fb0c 7505 	mla	r5, ip, r5, r7
 801e296:	9801      	ldr	r0, [sp, #4]
 801e298:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801e29c:	0e07      	lsrs	r7, r0, #24
 801e29e:	2fff      	cmp	r7, #255	@ 0xff
 801e2a0:	d116      	bne.n	801e2d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801e2a2:	f06f 0501 	mvn.w	r5, #1
 801e2a6:	fb05 f706 	mul.w	r7, r5, r6
 801e2aa:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801e2ae:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801e2b2:	0945      	lsrs	r5, r0, #5
 801e2b4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801e2b8:	ea4c 0505 	orr.w	r5, ip, r5
 801e2bc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801e2c0:	4305      	orrs	r5, r0
 801e2c2:	53e5      	strh	r5, [r4, r7]
 801e2c4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e2c6:	4401      	add	r1, r0
 801e2c8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e2ca:	3e01      	subs	r6, #1
 801e2cc:	4402      	add	r2, r0
 801e2ce:	e790      	b.n	801e1f2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e2d0:	b2fd      	uxtb	r5, r7
 801e2d2:	2f00      	cmp	r7, #0
 801e2d4:	d0f6      	beq.n	801e2c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e2d6:	f06f 0701 	mvn.w	r7, #1
 801e2da:	4377      	muls	r7, r6
 801e2dc:	fa1f f985 	uxth.w	r9, r5
 801e2e0:	f834 e007 	ldrh.w	lr, [r4, r7]
 801e2e4:	9702      	str	r7, [sp, #8]
 801e2e6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e2ea:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801e2ee:	43ed      	mvns	r5, r5
 801e2f0:	b2ed      	uxtb	r5, r5
 801e2f2:	fb17 f709 	smulbb	r7, r7, r9
 801e2f6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e2fa:	fb0c 7c05 	mla	ip, ip, r5, r7
 801e2fe:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801e302:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801e306:	b2c0      	uxtb	r0, r0
 801e308:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e30c:	fa5f fe8e 	uxtb.w	lr, lr
 801e310:	fb10 f009 	smulbb	r0, r0, r9
 801e314:	fb0e 0005 	mla	r0, lr, r5, r0
 801e318:	b280      	uxth	r0, r0
 801e31a:	fa1f fc8c 	uxth.w	ip, ip
 801e31e:	fb1a fa09 	smulbb	sl, sl, r9
 801e322:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e326:	fb07 a705 	mla	r7, r7, r5, sl
 801e32a:	f100 0a01 	add.w	sl, r0, #1
 801e32e:	f10c 0501 	add.w	r5, ip, #1
 801e332:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801e336:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e33a:	b2bf      	uxth	r7, r7
 801e33c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e340:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e344:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e348:	f107 0a01 	add.w	sl, r7, #1
 801e34c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e350:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e354:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e358:	9802      	ldr	r0, [sp, #8]
 801e35a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e35e:	f824 c000 	strh.w	ip, [r4, r0]
 801e362:	e7af      	b.n	801e2c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e364:	f04f 0e00 	mov.w	lr, #0
 801e368:	eba3 000e 	sub.w	r0, r3, lr
 801e36c:	2800      	cmp	r0, #0
 801e36e:	f77f af43 	ble.w	801e1f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e372:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801e376:	140d      	asrs	r5, r1, #16
 801e378:	1410      	asrs	r0, r2, #16
 801e37a:	fb06 5000 	mla	r0, r6, r0, r5
 801e37e:	9d01      	ldr	r5, [sp, #4]
 801e380:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801e384:	0e2e      	lsrs	r6, r5, #24
 801e386:	2eff      	cmp	r6, #255	@ 0xff
 801e388:	d112      	bne.n	801e3b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801e38a:	482c      	ldr	r0, [pc, #176]	@ (801e43c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801e38c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801e390:	0968      	lsrs	r0, r5, #5
 801e392:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801e396:	4330      	orrs	r0, r6
 801e398:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801e39c:	4328      	orrs	r0, r5
 801e39e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801e3a2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e3a4:	4401      	add	r1, r0
 801e3a6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e3a8:	f10e 0e01 	add.w	lr, lr, #1
 801e3ac:	4402      	add	r2, r0
 801e3ae:	e7db      	b.n	801e368 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801e3b0:	b2f0      	uxtb	r0, r6
 801e3b2:	2e00      	cmp	r6, #0
 801e3b4:	d0f5      	beq.n	801e3a2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801e3b6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801e3ba:	fa1f f980 	uxth.w	r9, r0
 801e3be:	ea4f 272c 	mov.w	r7, ip, asr #8
 801e3c2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801e3c6:	43c0      	mvns	r0, r0
 801e3c8:	b2c0      	uxtb	r0, r0
 801e3ca:	fb16 f609 	smulbb	r6, r6, r9
 801e3ce:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e3d2:	fb07 6700 	mla	r7, r7, r0, r6
 801e3d6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e3da:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801e3de:	b2ed      	uxtb	r5, r5
 801e3e0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e3e4:	fa5f fc8c 	uxtb.w	ip, ip
 801e3e8:	fb15 f509 	smulbb	r5, r5, r9
 801e3ec:	fb0c 5500 	mla	r5, ip, r0, r5
 801e3f0:	b2bf      	uxth	r7, r7
 801e3f2:	fb1a fa09 	smulbb	sl, sl, r9
 801e3f6:	b2ad      	uxth	r5, r5
 801e3f8:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e3fc:	fb06 a600 	mla	r6, r6, r0, sl
 801e400:	1c78      	adds	r0, r7, #1
 801e402:	f105 0a01 	add.w	sl, r5, #1
 801e406:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801e40a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e40e:	b2b6      	uxth	r6, r6
 801e410:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e414:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801e418:	ea4a 0707 	orr.w	r7, sl, r7
 801e41c:	f106 0a01 	add.w	sl, r6, #1
 801e420:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e424:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e428:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e42c:	ea47 070a 	orr.w	r7, r7, sl
 801e430:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801e434:	e7b5      	b.n	801e3a2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801e436:	b005      	add	sp, #20
 801e438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e43c:	fffff800 	.word	0xfffff800

0801e440 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e444:	b087      	sub	sp, #28
 801e446:	468b      	mov	fp, r1
 801e448:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e44a:	9203      	str	r2, [sp, #12]
 801e44c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801e450:	9204      	str	r2, [sp, #16]
 801e452:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801e456:	6841      	ldr	r1, [r0, #4]
 801e458:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801e45c:	fb01 2404 	mla	r4, r1, r4, r2
 801e460:	6802      	ldr	r2, [r0, #0]
 801e462:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e466:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801e46a:	3201      	adds	r2, #1
 801e46c:	f022 0201 	bic.w	r2, r2, #1
 801e470:	9200      	str	r2, [sp, #0]
 801e472:	f8d9 2000 	ldr.w	r2, [r9]
 801e476:	9201      	str	r2, [sp, #4]
 801e478:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e47c:	f1bb 0f00 	cmp.w	fp, #0
 801e480:	dc03      	bgt.n	801e48a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e482:	9a03      	ldr	r2, [sp, #12]
 801e484:	2a00      	cmp	r2, #0
 801e486:	f340 8169 	ble.w	801e75c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801e48a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e48c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801e490:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801e494:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e498:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e49a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	dd0e      	ble.n	801e4c0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e4a2:	1402      	asrs	r2, r0, #16
 801e4a4:	d405      	bmi.n	801e4b2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4a6:	42ba      	cmp	r2, r7
 801e4a8:	da03      	bge.n	801e4b2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4aa:	140a      	asrs	r2, r1, #16
 801e4ac:	d401      	bmi.n	801e4b2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4ae:	42b2      	cmp	r2, r6
 801e4b0:	db07      	blt.n	801e4c2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e4b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e4b4:	4410      	add	r0, r2
 801e4b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e4b8:	3b01      	subs	r3, #1
 801e4ba:	4411      	add	r1, r2
 801e4bc:	3402      	adds	r4, #2
 801e4be:	e7ee      	b.n	801e49e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e4c0:	d017      	beq.n	801e4f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801e4c2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e4c4:	1e5a      	subs	r2, r3, #1
 801e4c6:	fb05 0502 	mla	r5, r5, r2, r0
 801e4ca:	142d      	asrs	r5, r5, #16
 801e4cc:	d409      	bmi.n	801e4e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801e4ce:	42bd      	cmp	r5, r7
 801e4d0:	da07      	bge.n	801e4e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801e4d2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e4d4:	fb05 1202 	mla	r2, r5, r2, r1
 801e4d8:	1412      	asrs	r2, r2, #16
 801e4da:	d402      	bmi.n	801e4e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801e4dc:	42b2      	cmp	r2, r6
 801e4de:	f2c0 80c7 	blt.w	801e670 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801e4e2:	2700      	movs	r7, #0
 801e4e4:	19da      	adds	r2, r3, r7
 801e4e6:	2a00      	cmp	r2, #0
 801e4e8:	dc3e      	bgt.n	801e568 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e4ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e4ee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e4f2:	f1bb 0f00 	cmp.w	fp, #0
 801e4f6:	f340 8131 	ble.w	801e75c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801e4fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e4fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e502:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e506:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e508:	f1bb 0b01 	subs.w	fp, fp, #1
 801e50c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e510:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e514:	eeb0 6a62 	vmov.f32	s12, s5
 801e518:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e51c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e520:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e524:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801e528:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e52c:	eeb0 6a43 	vmov.f32	s12, s6
 801e530:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e534:	ee12 2a90 	vmov	r2, s5
 801e538:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e53c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e540:	ee13 2a10 	vmov	r2, s6
 801e544:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e548:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e54a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e54c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e550:	9a03      	ldr	r2, [sp, #12]
 801e552:	9314      	str	r3, [sp, #80]	@ 0x50
 801e554:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801e558:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e55a:	eeb0 3a67 	vmov.f32	s6, s15
 801e55e:	bf08      	it	eq
 801e560:	4613      	moveq	r3, r2
 801e562:	eef0 2a47 	vmov.f32	s5, s14
 801e566:	e789      	b.n	801e47c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e568:	1405      	asrs	r5, r0, #16
 801e56a:	d435      	bmi.n	801e5d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801e56c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801e570:	42aa      	cmp	r2, r5
 801e572:	dd31      	ble.n	801e5d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801e574:	140e      	asrs	r6, r1, #16
 801e576:	d42f      	bmi.n	801e5d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801e578:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801e57c:	42b2      	cmp	r2, r6
 801e57e:	dd2b      	ble.n	801e5d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801e580:	9a00      	ldr	r2, [sp, #0]
 801e582:	fb06 5502 	mla	r5, r6, r2, r5
 801e586:	086a      	lsrs	r2, r5, #1
 801e588:	9e01      	ldr	r6, [sp, #4]
 801e58a:	5cb2      	ldrb	r2, [r6, r2]
 801e58c:	07ee      	lsls	r6, r5, #31
 801e58e:	bf54      	ite	pl
 801e590:	f002 020f 	andpl.w	r2, r2, #15
 801e594:	1112      	asrmi	r2, r2, #4
 801e596:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e59a:	b2d2      	uxtb	r2, r2
 801e59c:	b1e2      	cbz	r2, 801e5d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801e59e:	9d04      	ldr	r5, [sp, #16]
 801e5a0:	436a      	muls	r2, r5
 801e5a2:	1c55      	adds	r5, r2, #1
 801e5a4:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801e5a8:	4d6e      	ldr	r5, [pc, #440]	@ (801e764 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801e5aa:	682d      	ldr	r5, [r5, #0]
 801e5ac:	1212      	asrs	r2, r2, #8
 801e5ae:	0a2e      	lsrs	r6, r5, #8
 801e5b0:	2aff      	cmp	r2, #255	@ 0xff
 801e5b2:	9605      	str	r6, [sp, #20]
 801e5b4:	d116      	bne.n	801e5e4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e5b6:	f06f 0201 	mvn.w	r2, #1
 801e5ba:	fb02 fc07 	mul.w	ip, r2, r7
 801e5be:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801e5c2:	096a      	lsrs	r2, r5, #5
 801e5c4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e5c8:	f026 0607 	bic.w	r6, r6, #7
 801e5cc:	4316      	orrs	r6, r2
 801e5ce:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801e5d2:	432e      	orrs	r6, r5
 801e5d4:	f824 600c 	strh.w	r6, [r4, ip]
 801e5d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e5da:	4410      	add	r0, r2
 801e5dc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e5de:	3f01      	subs	r7, #1
 801e5e0:	4411      	add	r1, r2
 801e5e2:	e77f      	b.n	801e4e4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801e5e4:	f06f 0601 	mvn.w	r6, #1
 801e5e8:	437e      	muls	r6, r7
 801e5ea:	fa1f fa82 	uxth.w	sl, r2
 801e5ee:	f834 8006 	ldrh.w	r8, [r4, r6]
 801e5f2:	9602      	str	r6, [sp, #8]
 801e5f4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801e5f8:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801e5fc:	43d2      	mvns	r2, r2
 801e5fe:	b2d2      	uxtb	r2, r2
 801e600:	fb1c fc0a 	smulbb	ip, ip, sl
 801e604:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801e608:	fb0e ce02 	mla	lr, lr, r2, ip
 801e60c:	b2ed      	uxtb	r5, r5
 801e60e:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801e612:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e616:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801e61a:	fa5f f888 	uxtb.w	r8, r8
 801e61e:	fb15 f50a 	smulbb	r5, r5, sl
 801e622:	fb08 5502 	mla	r5, r8, r2, r5
 801e626:	fa1f fe8e 	uxth.w	lr, lr
 801e62a:	fb16 f60a 	smulbb	r6, r6, sl
 801e62e:	b2ad      	uxth	r5, r5
 801e630:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801e634:	fb0c 6c02 	mla	ip, ip, r2, r6
 801e638:	f10e 0201 	add.w	r2, lr, #1
 801e63c:	1c6e      	adds	r6, r5, #1
 801e63e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801e642:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801e646:	fa1f fc8c 	uxth.w	ip, ip
 801e64a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801e64e:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801e652:	ea46 0e0e 	orr.w	lr, r6, lr
 801e656:	f10c 0601 	add.w	r6, ip, #1
 801e65a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801e65e:	0976      	lsrs	r6, r6, #5
 801e660:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801e664:	9a02      	ldr	r2, [sp, #8]
 801e666:	ea4e 0e06 	orr.w	lr, lr, r6
 801e66a:	f824 e002 	strh.w	lr, [r4, r2]
 801e66e:	e7b3      	b.n	801e5d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801e670:	f04f 0800 	mov.w	r8, #0
 801e674:	eba3 0208 	sub.w	r2, r3, r8
 801e678:	2a00      	cmp	r2, #0
 801e67a:	f77f af36 	ble.w	801e4ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e67e:	9e00      	ldr	r6, [sp, #0]
 801e680:	1402      	asrs	r2, r0, #16
 801e682:	140d      	asrs	r5, r1, #16
 801e684:	fb06 2505 	mla	r5, r6, r5, r2
 801e688:	086a      	lsrs	r2, r5, #1
 801e68a:	9e01      	ldr	r6, [sp, #4]
 801e68c:	5cb2      	ldrb	r2, [r6, r2]
 801e68e:	07ed      	lsls	r5, r5, #31
 801e690:	bf54      	ite	pl
 801e692:	f002 020f 	andpl.w	r2, r2, #15
 801e696:	1112      	asrmi	r2, r2, #4
 801e698:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e69c:	b2d2      	uxtb	r2, r2
 801e69e:	b1c2      	cbz	r2, 801e6d2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801e6a0:	9d04      	ldr	r5, [sp, #16]
 801e6a2:	436a      	muls	r2, r5
 801e6a4:	1c55      	adds	r5, r2, #1
 801e6a6:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801e6aa:	4d2e      	ldr	r5, [pc, #184]	@ (801e764 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801e6ac:	1212      	asrs	r2, r2, #8
 801e6ae:	682e      	ldr	r6, [r5, #0]
 801e6b0:	2aff      	cmp	r2, #255	@ 0xff
 801e6b2:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801e6b6:	d113      	bne.n	801e6e0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801e6b8:	0972      	lsrs	r2, r6, #5
 801e6ba:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801e6be:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e6c2:	f025 0507 	bic.w	r5, r5, #7
 801e6c6:	4315      	orrs	r5, r2
 801e6c8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801e6cc:	4335      	orrs	r5, r6
 801e6ce:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801e6d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e6d4:	4410      	add	r0, r2
 801e6d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e6d8:	f108 0801 	add.w	r8, r8, #1
 801e6dc:	4411      	add	r1, r2
 801e6de:	e7c9      	b.n	801e674 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801e6e0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801e6e4:	fa1f fa82 	uxth.w	sl, r2
 801e6e8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e6ec:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801e6f0:	43d2      	mvns	r2, r2
 801e6f2:	b2d2      	uxtb	r2, r2
 801e6f4:	fb17 f70a 	smulbb	r7, r7, sl
 801e6f8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e6fc:	fb0c 7c02 	mla	ip, ip, r2, r7
 801e700:	b2f6      	uxtb	r6, r6
 801e702:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801e706:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e70a:	fa5f fe8e 	uxtb.w	lr, lr
 801e70e:	fb16 f60a 	smulbb	r6, r6, sl
 801e712:	fb0e 6602 	mla	r6, lr, r2, r6
 801e716:	b2ed      	uxtb	r5, r5
 801e718:	fa1f fc8c 	uxth.w	ip, ip
 801e71c:	fb15 f50a 	smulbb	r5, r5, sl
 801e720:	b2b6      	uxth	r6, r6
 801e722:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e726:	fb07 5702 	mla	r7, r7, r2, r5
 801e72a:	f10c 0201 	add.w	r2, ip, #1
 801e72e:	1c75      	adds	r5, r6, #1
 801e730:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801e734:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801e738:	b2bf      	uxth	r7, r7
 801e73a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e73e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e742:	ea45 0c0c 	orr.w	ip, r5, ip
 801e746:	1c7d      	adds	r5, r7, #1
 801e748:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801e74c:	096d      	lsrs	r5, r5, #5
 801e74e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801e752:	ea4c 0c05 	orr.w	ip, ip, r5
 801e756:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801e75a:	e7ba      	b.n	801e6d2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801e75c:	b007      	add	sp, #28
 801e75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e762:	bf00      	nop
 801e764:	200126f0 	.word	0x200126f0

0801e768 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e76c:	b087      	sub	sp, #28
 801e76e:	f8df 830c 	ldr.w	r8, [pc, #780]	@ 801ea7c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801e772:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e774:	9205      	str	r2, [sp, #20]
 801e776:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801e77a:	9101      	str	r1, [sp, #4]
 801e77c:	6841      	ldr	r1, [r0, #4]
 801e77e:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801e782:	fb01 2404 	mla	r4, r1, r4, r2
 801e786:	6802      	ldr	r2, [r0, #0]
 801e788:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e78c:	f8db 2008 	ldr.w	r2, [fp, #8]
 801e790:	3201      	adds	r2, #1
 801e792:	f022 0201 	bic.w	r2, r2, #1
 801e796:	9202      	str	r2, [sp, #8]
 801e798:	f8db 2000 	ldr.w	r2, [fp]
 801e79c:	9203      	str	r2, [sp, #12]
 801e79e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e7a2:	9a01      	ldr	r2, [sp, #4]
 801e7a4:	2a00      	cmp	r2, #0
 801e7a6:	dc03      	bgt.n	801e7b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e7a8:	9a05      	ldr	r2, [sp, #20]
 801e7aa:	2a00      	cmp	r2, #0
 801e7ac:	f340 8162 	ble.w	801ea74 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801e7b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e7b2:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801e7b6:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801e7ba:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e7be:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e7c0:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	dd0e      	ble.n	801e7e6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e7c8:	1402      	asrs	r2, r0, #16
 801e7ca:	d405      	bmi.n	801e7d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e7cc:	42ba      	cmp	r2, r7
 801e7ce:	da03      	bge.n	801e7d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e7d0:	140a      	asrs	r2, r1, #16
 801e7d2:	d401      	bmi.n	801e7d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e7d4:	42b2      	cmp	r2, r6
 801e7d6:	db07      	blt.n	801e7e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e7d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e7da:	4410      	add	r0, r2
 801e7dc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e7de:	3b01      	subs	r3, #1
 801e7e0:	4411      	add	r1, r2
 801e7e2:	3402      	adds	r4, #2
 801e7e4:	e7ee      	b.n	801e7c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e7e6:	d017      	beq.n	801e818 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e7e8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e7ea:	1e5a      	subs	r2, r3, #1
 801e7ec:	fb05 0502 	mla	r5, r5, r2, r0
 801e7f0:	142d      	asrs	r5, r5, #16
 801e7f2:	d409      	bmi.n	801e808 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e7f4:	42bd      	cmp	r5, r7
 801e7f6:	da07      	bge.n	801e808 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e7f8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e7fa:	fb05 1202 	mla	r2, r5, r2, r1
 801e7fe:	1412      	asrs	r2, r2, #16
 801e800:	d402      	bmi.n	801e808 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e802:	42b2      	cmp	r2, r6
 801e804:	f2c0 80c3 	blt.w	801e98e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801e808:	2500      	movs	r5, #0
 801e80a:	195a      	adds	r2, r3, r5
 801e80c:	2a00      	cmp	r2, #0
 801e80e:	dc3f      	bgt.n	801e890 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e810:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e814:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e818:	9b01      	ldr	r3, [sp, #4]
 801e81a:	2b00      	cmp	r3, #0
 801e81c:	f340 812a 	ble.w	801ea74 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801e820:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e824:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e828:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e82c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e82e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e832:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e836:	eeb0 6a62 	vmov.f32	s12, s5
 801e83a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e83e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e842:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e846:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801e84a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e84e:	eeb0 6a43 	vmov.f32	s12, s6
 801e852:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e856:	ee12 2a90 	vmov	r2, s5
 801e85a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e85e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e862:	ee13 2a10 	vmov	r2, s6
 801e866:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e868:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e86a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e86e:	9314      	str	r3, [sp, #80]	@ 0x50
 801e870:	9b01      	ldr	r3, [sp, #4]
 801e872:	9a05      	ldr	r2, [sp, #20]
 801e874:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e878:	3b01      	subs	r3, #1
 801e87a:	9301      	str	r3, [sp, #4]
 801e87c:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801e880:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e882:	eeb0 3a67 	vmov.f32	s6, s15
 801e886:	bf08      	it	eq
 801e888:	4613      	moveq	r3, r2
 801e88a:	eef0 2a47 	vmov.f32	s5, s14
 801e88e:	e788      	b.n	801e7a2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e890:	1406      	asrs	r6, r0, #16
 801e892:	d42c      	bmi.n	801e8ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e894:	f8db 2008 	ldr.w	r2, [fp, #8]
 801e898:	42b2      	cmp	r2, r6
 801e89a:	dd28      	ble.n	801e8ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e89c:	140f      	asrs	r7, r1, #16
 801e89e:	d426      	bmi.n	801e8ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e8a0:	f8db 200c 	ldr.w	r2, [fp, #12]
 801e8a4:	42ba      	cmp	r2, r7
 801e8a6:	dd22      	ble.n	801e8ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e8a8:	9a02      	ldr	r2, [sp, #8]
 801e8aa:	fb07 6602 	mla	r6, r7, r2, r6
 801e8ae:	0872      	lsrs	r2, r6, #1
 801e8b0:	9f03      	ldr	r7, [sp, #12]
 801e8b2:	5cba      	ldrb	r2, [r7, r2]
 801e8b4:	07f6      	lsls	r6, r6, #31
 801e8b6:	bf54      	ite	pl
 801e8b8:	f002 020f 	andpl.w	r2, r2, #15
 801e8bc:	1112      	asrmi	r2, r2, #4
 801e8be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e8c2:	b2d2      	uxtb	r2, r2
 801e8c4:	2aff      	cmp	r2, #255	@ 0xff
 801e8c6:	d118      	bne.n	801e8fa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801e8c8:	f8d8 2000 	ldr.w	r2, [r8]
 801e8cc:	f06f 0601 	mvn.w	r6, #1
 801e8d0:	fb06 f705 	mul.w	r7, r6, r5
 801e8d4:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 801e8d8:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801e8dc:	0956      	lsrs	r6, r2, #5
 801e8de:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801e8e2:	ea4c 0606 	orr.w	r6, ip, r6
 801e8e6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e8ea:	4316      	orrs	r6, r2
 801e8ec:	53e6      	strh	r6, [r4, r7]
 801e8ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e8f0:	4410      	add	r0, r2
 801e8f2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e8f4:	3d01      	subs	r5, #1
 801e8f6:	4411      	add	r1, r2
 801e8f8:	e787      	b.n	801e80a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801e8fa:	2a00      	cmp	r2, #0
 801e8fc:	d0f7      	beq.n	801e8ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e8fe:	f06f 0601 	mvn.w	r6, #1
 801e902:	436e      	muls	r6, r5
 801e904:	f8d8 c000 	ldr.w	ip, [r8]
 801e908:	f834 e006 	ldrh.w	lr, [r4, r6]
 801e90c:	9604      	str	r6, [sp, #16]
 801e90e:	fa1f f982 	uxth.w	r9, r2
 801e912:	ea4f 272e 	mov.w	r7, lr, asr #8
 801e916:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801e91a:	43d2      	mvns	r2, r2
 801e91c:	b2d2      	uxtb	r2, r2
 801e91e:	fb16 f609 	smulbb	r6, r6, r9
 801e922:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e926:	fb07 6702 	mla	r7, r7, r2, r6
 801e92a:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801e92e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e932:	fa5f fc8c 	uxtb.w	ip, ip
 801e936:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e93a:	fa5f fe8e 	uxtb.w	lr, lr
 801e93e:	fb1c fc09 	smulbb	ip, ip, r9
 801e942:	fb0e cc02 	mla	ip, lr, r2, ip
 801e946:	b2bf      	uxth	r7, r7
 801e948:	fb1a fa09 	smulbb	sl, sl, r9
 801e94c:	fa1f fc8c 	uxth.w	ip, ip
 801e950:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e954:	fb06 a602 	mla	r6, r6, r2, sl
 801e958:	1c7a      	adds	r2, r7, #1
 801e95a:	f10c 0a01 	add.w	sl, ip, #1
 801e95e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e962:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801e966:	b2b6      	uxth	r6, r6
 801e968:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e96c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801e970:	ea4a 0707 	orr.w	r7, sl, r7
 801e974:	f106 0a01 	add.w	sl, r6, #1
 801e978:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e97c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e980:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e984:	9a04      	ldr	r2, [sp, #16]
 801e986:	ea47 070a 	orr.w	r7, r7, sl
 801e98a:	52a7      	strh	r7, [r4, r2]
 801e98c:	e7af      	b.n	801e8ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e98e:	f04f 0e00 	mov.w	lr, #0
 801e992:	eba3 020e 	sub.w	r2, r3, lr
 801e996:	2a00      	cmp	r2, #0
 801e998:	f77f af3a 	ble.w	801e810 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801e99c:	9e02      	ldr	r6, [sp, #8]
 801e99e:	1402      	asrs	r2, r0, #16
 801e9a0:	140d      	asrs	r5, r1, #16
 801e9a2:	fb06 2505 	mla	r5, r6, r5, r2
 801e9a6:	086a      	lsrs	r2, r5, #1
 801e9a8:	9e03      	ldr	r6, [sp, #12]
 801e9aa:	5cb2      	ldrb	r2, [r6, r2]
 801e9ac:	07ed      	lsls	r5, r5, #31
 801e9ae:	bf54      	ite	pl
 801e9b0:	f002 020f 	andpl.w	r2, r2, #15
 801e9b4:	1112      	asrmi	r2, r2, #4
 801e9b6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e9ba:	b2d2      	uxtb	r2, r2
 801e9bc:	2aff      	cmp	r2, #255	@ 0xff
 801e9be:	d115      	bne.n	801e9ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801e9c0:	f8d8 5000 	ldr.w	r5, [r8]
 801e9c4:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 801e9c8:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801e9cc:	096a      	lsrs	r2, r5, #5
 801e9ce:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e9d2:	4332      	orrs	r2, r6
 801e9d4:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801e9d8:	432a      	orrs	r2, r5
 801e9da:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801e9de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e9e0:	4410      	add	r0, r2
 801e9e2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e9e4:	f10e 0e01 	add.w	lr, lr, #1
 801e9e8:	4411      	add	r1, r2
 801e9ea:	e7d2      	b.n	801e992 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e9ec:	2a00      	cmp	r2, #0
 801e9ee:	d0f6      	beq.n	801e9de <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e9f0:	f8d8 7000 	ldr.w	r7, [r8]
 801e9f4:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801e9f8:	fa1f f982 	uxth.w	r9, r2
 801e9fc:	ea4f 262c 	mov.w	r6, ip, asr #8
 801ea00:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801ea04:	43d2      	mvns	r2, r2
 801ea06:	b2d2      	uxtb	r2, r2
 801ea08:	fb15 f509 	smulbb	r5, r5, r9
 801ea0c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801ea10:	fb06 5602 	mla	r6, r6, r2, r5
 801ea14:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801ea18:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801ea1c:	b2ff      	uxtb	r7, r7
 801ea1e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ea22:	fa5f fc8c 	uxtb.w	ip, ip
 801ea26:	fb17 f709 	smulbb	r7, r7, r9
 801ea2a:	fb0c 7702 	mla	r7, ip, r2, r7
 801ea2e:	b2b6      	uxth	r6, r6
 801ea30:	fb1a fa09 	smulbb	sl, sl, r9
 801ea34:	b2bf      	uxth	r7, r7
 801ea36:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801ea3a:	fb05 a502 	mla	r5, r5, r2, sl
 801ea3e:	1c72      	adds	r2, r6, #1
 801ea40:	f107 0a01 	add.w	sl, r7, #1
 801ea44:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801ea48:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ea4c:	b2ad      	uxth	r5, r5
 801ea4e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ea52:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801ea56:	ea4a 0606 	orr.w	r6, sl, r6
 801ea5a:	f105 0a01 	add.w	sl, r5, #1
 801ea5e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ea62:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ea66:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ea6a:	ea46 060a 	orr.w	r6, r6, sl
 801ea6e:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801ea72:	e7b4      	b.n	801e9de <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801ea74:	b007      	add	sp, #28
 801ea76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea7a:	bf00      	nop
 801ea7c:	200126f0 	.word	0x200126f0

0801ea80 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801ea80:	4770      	bx	lr

0801ea82 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801ea82:	4770      	bx	lr

0801ea84 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801ea84:	4770      	bx	lr

0801ea86 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801ea86:	4770      	bx	lr

0801ea88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801ea88:	4770      	bx	lr

0801ea8a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801ea8a:	4770      	bx	lr

0801ea8c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801ea8c:	4770      	bx	lr

0801ea8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ea8e:	4770      	bx	lr

0801ea90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ea90:	4770      	bx	lr

0801ea92 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ea92:	4770      	bx	lr

0801ea94 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ea94:	4770      	bx	lr

0801ea96 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ea96:	4770      	bx	lr

0801ea98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801ea98:	4770      	bx	lr

0801ea9a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ea9a:	4770      	bx	lr

0801ea9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ea9c:	4770      	bx	lr

0801ea9e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ea9e:	4770      	bx	lr

0801eaa0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801eaa0:	4770      	bx	lr

0801eaa2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801eaa2:	4770      	bx	lr

0801eaa4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801eaa4:	4770      	bx	lr

0801eaa6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801eaa6:	4770      	bx	lr

0801eaa8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801eaa8:	4770      	bx	lr

0801eaaa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801eaaa:	4770      	bx	lr

0801eaac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801eaac:	4770      	bx	lr

0801eaae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801eaae:	4770      	bx	lr

0801eab0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801eab0:	4770      	bx	lr

0801eab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801eab2:	4770      	bx	lr

0801eab4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801eab4:	4770      	bx	lr

0801eab6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801eab6:	4770      	bx	lr

0801eab8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801eab8:	4770      	bx	lr

0801eaba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801eaba:	4770      	bx	lr

0801eabc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801eabc:	4770      	bx	lr

0801eabe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801eabe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eac2:	b088      	sub	sp, #32
 801eac4:	ac08      	add	r4, sp, #32
 801eac6:	4606      	mov	r6, r0
 801eac8:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801eacc:	4620      	mov	r0, r4
 801eace:	4688      	mov	r8, r1
 801ead0:	4691      	mov	r9, r2
 801ead2:	f7fd fc63 	bl	801c39c <_ZNK8touchgfx6Bitmap7getDataEv>
 801ead6:	6833      	ldr	r3, [r6, #0]
 801ead8:	4605      	mov	r5, r0
 801eada:	4620      	mov	r0, r4
 801eadc:	699f      	ldr	r7, [r3, #24]
 801eade:	f7fd fb6b 	bl	801c1b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801eae2:	4682      	mov	sl, r0
 801eae4:	4620      	mov	r0, r4
 801eae6:	f7fd fb9b 	bl	801c220 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801eaea:	9500      	str	r5, [sp, #0]
 801eaec:	e9cd a001 	strd	sl, r0, [sp, #4]
 801eaf0:	464b      	mov	r3, r9
 801eaf2:	a806      	add	r0, sp, #24
 801eaf4:	4642      	mov	r2, r8
 801eaf6:	4631      	mov	r1, r6
 801eaf8:	47b8      	blx	r7
 801eafa:	4628      	mov	r0, r5
 801eafc:	b008      	add	sp, #32
 801eafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801eb04 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801eb04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801eb08:	2300      	movs	r3, #0
 801eb0a:	9300      	str	r3, [sp, #0]
 801eb0c:	4b3d      	ldr	r3, [pc, #244]	@ (801ec04 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801eb0e:	781b      	ldrb	r3, [r3, #0]
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	d137      	bne.n	801eb84 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801eb14:	4a3c      	ldr	r2, [pc, #240]	@ (801ec08 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801eb16:	f9b2 2000 	ldrsh.w	r2, [r2]
 801eb1a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801eb1e:	2b00      	cmp	r3, #0
 801eb20:	d132      	bne.n	801eb88 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801eb22:	4b3a      	ldr	r3, [pc, #232]	@ (801ec0c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801eb24:	f9b3 3000 	ldrsh.w	r3, [r3]
 801eb28:	6808      	ldr	r0, [r1, #0]
 801eb2a:	6849      	ldr	r1, [r1, #4]
 801eb2c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801eb30:	ac02      	add	r4, sp, #8
 801eb32:	ab02      	add	r3, sp, #8
 801eb34:	c303      	stmia	r3!, {r0, r1}
 801eb36:	4669      	mov	r1, sp
 801eb38:	4620      	mov	r0, r4
 801eb3a:	f7f9 fe35 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801eb3e:	4668      	mov	r0, sp
 801eb40:	f7f9 fe0a 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eb44:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801eb48:	f8bd 2000 	ldrh.w	r2, [sp]
 801eb4c:	4d30      	ldr	r5, [pc, #192]	@ (801ec10 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801eb4e:	4413      	add	r3, r2
 801eb50:	f8ad 3008 	strh.w	r3, [sp, #8]
 801eb54:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801eb58:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801eb5c:	6828      	ldr	r0, [r5, #0]
 801eb5e:	4413      	add	r3, r2
 801eb60:	f8ad 300a 	strh.w	r3, [sp, #10]
 801eb64:	6803      	ldr	r3, [r0, #0]
 801eb66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eb68:	4798      	blx	r3
 801eb6a:	f010 0f01 	tst.w	r0, #1
 801eb6e:	462f      	mov	r7, r5
 801eb70:	d00c      	beq.n	801eb8c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801eb72:	6828      	ldr	r0, [r5, #0]
 801eb74:	6803      	ldr	r3, [r0, #0]
 801eb76:	e894 0006 	ldmia.w	r4, {r1, r2}
 801eb7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801eb7c:	4798      	blx	r3
 801eb7e:	b004      	add	sp, #16
 801eb80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb84:	4a21      	ldr	r2, [pc, #132]	@ (801ec0c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801eb86:	e7c6      	b.n	801eb16 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801eb88:	4b1f      	ldr	r3, [pc, #124]	@ (801ec08 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801eb8a:	e7cb      	b.n	801eb24 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801eb8c:	6838      	ldr	r0, [r7, #0]
 801eb8e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801eb92:	6803      	ldr	r3, [r0, #0]
 801eb94:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801eb98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801eb9a:	4798      	blx	r3
 801eb9c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801eba0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801eba4:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801eba8:	fb16 3602 	smlabb	r6, r6, r2, r3
 801ebac:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ebb0:	6838      	ldr	r0, [r7, #0]
 801ebb2:	6803      	ldr	r3, [r0, #0]
 801ebb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ebb6:	4798      	blx	r3
 801ebb8:	4a13      	ldr	r2, [pc, #76]	@ (801ec08 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801ebba:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801ebbe:	8813      	ldrh	r3, [r2, #0]
 801ebc0:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801ebc4:	fb03 1404 	mla	r4, r3, r4, r1
 801ebc8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ebcc:	435d      	muls	r5, r3
 801ebce:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801ebd2:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801ebd6:	4691      	mov	r9, r2
 801ebd8:	6838      	ldr	r0, [r7, #0]
 801ebda:	42ac      	cmp	r4, r5
 801ebdc:	6803      	ldr	r3, [r0, #0]
 801ebde:	d20e      	bcs.n	801ebfe <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801ebe0:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 801ebe4:	4632      	mov	r2, r6
 801ebe6:	4643      	mov	r3, r8
 801ebe8:	4621      	mov	r1, r4
 801ebea:	47d0      	blx	sl
 801ebec:	f8b9 3000 	ldrh.w	r3, [r9]
 801ebf0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ebf4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801ebf8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801ebfc:	e7ec      	b.n	801ebd8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801ebfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec00:	4798      	blx	r3
 801ec02:	e7bc      	b.n	801eb7e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801ec04:	200126d8 	.word	0x200126d8
 801ec08:	200126da 	.word	0x200126da
 801ec0c:	200126dc 	.word	0x200126dc
 801ec10:	200126e0 	.word	0x200126e0

0801ec14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801ec14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec18:	b08b      	sub	sp, #44	@ 0x2c
 801ec1a:	460f      	mov	r7, r1
 801ec1c:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 801ec20:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 801ec24:	4616      	mov	r6, r2
 801ec26:	f1bb 0f00 	cmp.w	fp, #0
 801ec2a:	d04a      	beq.n	801ecc2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801ec2c:	6810      	ldr	r0, [r2, #0]
 801ec2e:	6851      	ldr	r1, [r2, #4]
 801ec30:	ad06      	add	r5, sp, #24
 801ec32:	c503      	stmia	r5!, {r0, r1}
 801ec34:	6818      	ldr	r0, [r3, #0]
 801ec36:	6859      	ldr	r1, [r3, #4]
 801ec38:	ad08      	add	r5, sp, #32
 801ec3a:	c503      	stmia	r5!, {r0, r1}
 801ec3c:	a806      	add	r0, sp, #24
 801ec3e:	f7f9 fd8b 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ec42:	4631      	mov	r1, r6
 801ec44:	a808      	add	r0, sp, #32
 801ec46:	f7f9 fdaf 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ec4a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ec4e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801ec52:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801ec56:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801ec5a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801ec5e:	fb16 2103 	smlabb	r1, r6, r3, r2
 801ec62:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801ec66:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801ec6a:	4f5f      	ldr	r7, [pc, #380]	@ (801ede8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801ec6c:	440a      	add	r2, r1
 801ec6e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ec72:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ec76:	6838      	ldr	r0, [r7, #0]
 801ec78:	4413      	add	r3, r2
 801ec7a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801ec7e:	6803      	ldr	r3, [r0, #0]
 801ec80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ec82:	4798      	blx	r3
 801ec84:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801ec88:	46b9      	mov	r9, r7
 801ec8a:	d11d      	bne.n	801ecc8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801ec8c:	b9fc      	cbnz	r4, 801ecce <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801ec8e:	f010 0f01 	tst.w	r0, #1
 801ec92:	d01c      	beq.n	801ecce <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801ec94:	f8d9 0000 	ldr.w	r0, [r9]
 801ec98:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801ec9c:	6801      	ldr	r1, [r0, #0]
 801ec9e:	f8cd b00c 	str.w	fp, [sp, #12]
 801eca2:	2700      	movs	r7, #0
 801eca4:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801eca8:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801ecac:	9402      	str	r4, [sp, #8]
 801ecae:	b2ad      	uxth	r5, r5
 801ecb0:	fa1f f488 	uxth.w	r4, r8
 801ecb4:	9501      	str	r5, [sp, #4]
 801ecb6:	9400      	str	r4, [sp, #0]
 801ecb8:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 801ecba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ecbe:	4631      	mov	r1, r6
 801ecc0:	47a0      	blx	r4
 801ecc2:	b00b      	add	sp, #44	@ 0x2c
 801ecc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecc8:	f010 0f04 	tst.w	r0, #4
 801eccc:	e7e1      	b.n	801ec92 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801ecce:	f8d9 0000 	ldr.w	r0, [r9]
 801ecd2:	6803      	ldr	r3, [r0, #0]
 801ecd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ecd6:	4798      	blx	r3
 801ecd8:	4b44      	ldr	r3, [pc, #272]	@ (801edec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801ecda:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801ecde:	881a      	ldrh	r2, [r3, #0]
 801ece0:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801ece4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801ece8:	fb02 1404 	mla	r4, r2, r4, r1
 801ecec:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ecf0:	469a      	mov	sl, r3
 801ecf2:	fb05 f502 	mul.w	r5, r5, r2
 801ecf6:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801ecfa:	d059      	beq.n	801edb0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801ecfc:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 801ed00:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801ed04:	fa1f f28b 	uxth.w	r2, fp
 801ed08:	fa1f f989 	uxth.w	r9, r9
 801ed0c:	469e      	mov	lr, r3
 801ed0e:	42ac      	cmp	r4, r5
 801ed10:	d264      	bcs.n	801eddc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801ed12:	eb04 0a07 	add.w	sl, r4, r7
 801ed16:	4554      	cmp	r4, sl
 801ed18:	d23d      	bcs.n	801ed96 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801ed1a:	8821      	ldrh	r1, [r4, #0]
 801ed1c:	f836 3b02 	ldrh.w	r3, [r6], #2
 801ed20:	1208      	asrs	r0, r1, #8
 801ed22:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801ed26:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801ed2a:	fb10 f009 	smulbb	r0, r0, r9
 801ed2e:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801ed32:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801ed36:	00c9      	lsls	r1, r1, #3
 801ed38:	fb0c 0c02 	mla	ip, ip, r2, r0
 801ed3c:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801ed40:	10d8      	asrs	r0, r3, #3
 801ed42:	b2c9      	uxtb	r1, r1
 801ed44:	00db      	lsls	r3, r3, #3
 801ed46:	fa1f fc8c 	uxth.w	ip, ip
 801ed4a:	fb1b fb09 	smulbb	fp, fp, r9
 801ed4e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801ed52:	b2db      	uxtb	r3, r3
 801ed54:	fb11 f109 	smulbb	r1, r1, r9
 801ed58:	fb00 b002 	mla	r0, r0, r2, fp
 801ed5c:	fb03 1302 	mla	r3, r3, r2, r1
 801ed60:	f10c 0b01 	add.w	fp, ip, #1
 801ed64:	b29b      	uxth	r3, r3
 801ed66:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ed6a:	b280      	uxth	r0, r0
 801ed6c:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 801ed70:	f103 0c01 	add.w	ip, r3, #1
 801ed74:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801ed78:	1c43      	adds	r3, r0, #1
 801ed7a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ed7e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801ed82:	0940      	lsrs	r0, r0, #5
 801ed84:	ea4c 0c0b 	orr.w	ip, ip, fp
 801ed88:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801ed8c:	ea4c 0c00 	orr.w	ip, ip, r0
 801ed90:	f824 cb02 	strh.w	ip, [r4], #2
 801ed94:	e7bf      	b.n	801ed16 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801ed96:	f8be 3000 	ldrh.w	r3, [lr]
 801ed9a:	eba3 0308 	sub.w	r3, r3, r8
 801ed9e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eda2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801eda6:	eba3 0308 	sub.w	r3, r3, r8
 801edaa:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801edae:	e7ae      	b.n	801ed0e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801edb0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801edb4:	f8d9 0000 	ldr.w	r0, [r9]
 801edb8:	42ac      	cmp	r4, r5
 801edba:	6803      	ldr	r3, [r0, #0]
 801edbc:	d20e      	bcs.n	801eddc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801edbe:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 801edc2:	4632      	mov	r2, r6
 801edc4:	463b      	mov	r3, r7
 801edc6:	4621      	mov	r1, r4
 801edc8:	47c0      	blx	r8
 801edca:	f8ba 3000 	ldrh.w	r3, [sl]
 801edce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801edd2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801edd6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801edda:	e7eb      	b.n	801edb4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801eddc:	4b02      	ldr	r3, [pc, #8]	@ (801ede8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801edde:	6818      	ldr	r0, [r3, #0]
 801ede0:	6803      	ldr	r3, [r0, #0]
 801ede2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ede4:	4798      	blx	r3
 801ede6:	e76c      	b.n	801ecc2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801ede8:	200126e0 	.word	0x200126e0
 801edec:	200126da 	.word	0x200126da

0801edf0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801edf0:	b510      	push	{r4, lr}
 801edf2:	2104      	movs	r1, #4
 801edf4:	4604      	mov	r4, r0
 801edf6:	f00b fb84 	bl	802a502 <_ZdlPvj>
 801edfa:	4620      	mov	r0, r4
 801edfc:	bd10      	pop	{r4, pc}

0801edfe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801edfe:	b510      	push	{r4, lr}
 801ee00:	2104      	movs	r1, #4
 801ee02:	4604      	mov	r4, r0
 801ee04:	f00b fb7d 	bl	802a502 <_ZdlPvj>
 801ee08:	4620      	mov	r0, r4
 801ee0a:	bd10      	pop	{r4, pc}

0801ee0c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801ee0c:	b510      	push	{r4, lr}
 801ee0e:	f640 0144 	movw	r1, #2116	@ 0x844
 801ee12:	4604      	mov	r4, r0
 801ee14:	f00b fb75 	bl	802a502 <_ZdlPvj>
 801ee18:	4620      	mov	r0, r4
 801ee1a:	bd10      	pop	{r4, pc}

0801ee1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ee1c:	b510      	push	{r4, lr}
 801ee1e:	2104      	movs	r1, #4
 801ee20:	4604      	mov	r4, r0
 801ee22:	f00b fb6e 	bl	802a502 <_ZdlPvj>
 801ee26:	4620      	mov	r0, r4
 801ee28:	bd10      	pop	{r4, pc}

0801ee2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801ee2a:	b510      	push	{r4, lr}
 801ee2c:	2104      	movs	r1, #4
 801ee2e:	4604      	mov	r4, r0
 801ee30:	f00b fb67 	bl	802a502 <_ZdlPvj>
 801ee34:	4620      	mov	r0, r4
 801ee36:	bd10      	pop	{r4, pc}

0801ee38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ee38:	b510      	push	{r4, lr}
 801ee3a:	2104      	movs	r1, #4
 801ee3c:	4604      	mov	r4, r0
 801ee3e:	f00b fb60 	bl	802a502 <_ZdlPvj>
 801ee42:	4620      	mov	r0, r4
 801ee44:	bd10      	pop	{r4, pc}

0801ee46 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801ee46:	b510      	push	{r4, lr}
 801ee48:	2104      	movs	r1, #4
 801ee4a:	4604      	mov	r4, r0
 801ee4c:	f00b fb59 	bl	802a502 <_ZdlPvj>
 801ee50:	4620      	mov	r0, r4
 801ee52:	bd10      	pop	{r4, pc}

0801ee54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ee54:	b510      	push	{r4, lr}
 801ee56:	2104      	movs	r1, #4
 801ee58:	4604      	mov	r4, r0
 801ee5a:	f00b fb52 	bl	802a502 <_ZdlPvj>
 801ee5e:	4620      	mov	r0, r4
 801ee60:	bd10      	pop	{r4, pc}

0801ee62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ee62:	b510      	push	{r4, lr}
 801ee64:	2104      	movs	r1, #4
 801ee66:	4604      	mov	r4, r0
 801ee68:	f00b fb4b 	bl	802a502 <_ZdlPvj>
 801ee6c:	4620      	mov	r0, r4
 801ee6e:	bd10      	pop	{r4, pc}

0801ee70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ee70:	b510      	push	{r4, lr}
 801ee72:	2104      	movs	r1, #4
 801ee74:	4604      	mov	r4, r0
 801ee76:	f00b fb44 	bl	802a502 <_ZdlPvj>
 801ee7a:	4620      	mov	r0, r4
 801ee7c:	bd10      	pop	{r4, pc}

0801ee7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ee7e:	b510      	push	{r4, lr}
 801ee80:	2104      	movs	r1, #4
 801ee82:	4604      	mov	r4, r0
 801ee84:	f00b fb3d 	bl	802a502 <_ZdlPvj>
 801ee88:	4620      	mov	r0, r4
 801ee8a:	bd10      	pop	{r4, pc}

0801ee8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ee8c:	b510      	push	{r4, lr}
 801ee8e:	2104      	movs	r1, #4
 801ee90:	4604      	mov	r4, r0
 801ee92:	f00b fb36 	bl	802a502 <_ZdlPvj>
 801ee96:	4620      	mov	r0, r4
 801ee98:	bd10      	pop	{r4, pc}

0801ee9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ee9a:	b510      	push	{r4, lr}
 801ee9c:	2104      	movs	r1, #4
 801ee9e:	4604      	mov	r4, r0
 801eea0:	f00b fb2f 	bl	802a502 <_ZdlPvj>
 801eea4:	4620      	mov	r0, r4
 801eea6:	bd10      	pop	{r4, pc}

0801eea8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801eea8:	b510      	push	{r4, lr}
 801eeaa:	2104      	movs	r1, #4
 801eeac:	4604      	mov	r4, r0
 801eeae:	f00b fb28 	bl	802a502 <_ZdlPvj>
 801eeb2:	4620      	mov	r0, r4
 801eeb4:	bd10      	pop	{r4, pc}

0801eeb6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801eeb6:	b510      	push	{r4, lr}
 801eeb8:	2104      	movs	r1, #4
 801eeba:	4604      	mov	r4, r0
 801eebc:	f00b fb21 	bl	802a502 <_ZdlPvj>
 801eec0:	4620      	mov	r0, r4
 801eec2:	bd10      	pop	{r4, pc}

0801eec4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801eec4:	b510      	push	{r4, lr}
 801eec6:	2104      	movs	r1, #4
 801eec8:	4604      	mov	r4, r0
 801eeca:	f00b fb1a 	bl	802a502 <_ZdlPvj>
 801eece:	4620      	mov	r0, r4
 801eed0:	bd10      	pop	{r4, pc}

0801eed2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801eed2:	b510      	push	{r4, lr}
 801eed4:	2104      	movs	r1, #4
 801eed6:	4604      	mov	r4, r0
 801eed8:	f00b fb13 	bl	802a502 <_ZdlPvj>
 801eedc:	4620      	mov	r0, r4
 801eede:	bd10      	pop	{r4, pc}

0801eee0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801eee0:	b510      	push	{r4, lr}
 801eee2:	2104      	movs	r1, #4
 801eee4:	4604      	mov	r4, r0
 801eee6:	f00b fb0c 	bl	802a502 <_ZdlPvj>
 801eeea:	4620      	mov	r0, r4
 801eeec:	bd10      	pop	{r4, pc}

0801eeee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801eeee:	b510      	push	{r4, lr}
 801eef0:	2104      	movs	r1, #4
 801eef2:	4604      	mov	r4, r0
 801eef4:	f00b fb05 	bl	802a502 <_ZdlPvj>
 801eef8:	4620      	mov	r0, r4
 801eefa:	bd10      	pop	{r4, pc}

0801eefc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801eefc:	b510      	push	{r4, lr}
 801eefe:	2104      	movs	r1, #4
 801ef00:	4604      	mov	r4, r0
 801ef02:	f00b fafe 	bl	802a502 <_ZdlPvj>
 801ef06:	4620      	mov	r0, r4
 801ef08:	bd10      	pop	{r4, pc}

0801ef0a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801ef0a:	b510      	push	{r4, lr}
 801ef0c:	2104      	movs	r1, #4
 801ef0e:	4604      	mov	r4, r0
 801ef10:	f00b faf7 	bl	802a502 <_ZdlPvj>
 801ef14:	4620      	mov	r0, r4
 801ef16:	bd10      	pop	{r4, pc}

0801ef18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ef18:	b510      	push	{r4, lr}
 801ef1a:	2104      	movs	r1, #4
 801ef1c:	4604      	mov	r4, r0
 801ef1e:	f00b faf0 	bl	802a502 <_ZdlPvj>
 801ef22:	4620      	mov	r0, r4
 801ef24:	bd10      	pop	{r4, pc}

0801ef26 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ef26:	b510      	push	{r4, lr}
 801ef28:	2104      	movs	r1, #4
 801ef2a:	4604      	mov	r4, r0
 801ef2c:	f00b fae9 	bl	802a502 <_ZdlPvj>
 801ef30:	4620      	mov	r0, r4
 801ef32:	bd10      	pop	{r4, pc}

0801ef34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ef34:	b510      	push	{r4, lr}
 801ef36:	2104      	movs	r1, #4
 801ef38:	4604      	mov	r4, r0
 801ef3a:	f00b fae2 	bl	802a502 <_ZdlPvj>
 801ef3e:	4620      	mov	r0, r4
 801ef40:	bd10      	pop	{r4, pc}

0801ef42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ef42:	b510      	push	{r4, lr}
 801ef44:	2104      	movs	r1, #4
 801ef46:	4604      	mov	r4, r0
 801ef48:	f00b fadb 	bl	802a502 <_ZdlPvj>
 801ef4c:	4620      	mov	r0, r4
 801ef4e:	bd10      	pop	{r4, pc}

0801ef50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ef50:	b510      	push	{r4, lr}
 801ef52:	2104      	movs	r1, #4
 801ef54:	4604      	mov	r4, r0
 801ef56:	f00b fad4 	bl	802a502 <_ZdlPvj>
 801ef5a:	4620      	mov	r0, r4
 801ef5c:	bd10      	pop	{r4, pc}

0801ef5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ef5e:	b510      	push	{r4, lr}
 801ef60:	2104      	movs	r1, #4
 801ef62:	4604      	mov	r4, r0
 801ef64:	f00b facd 	bl	802a502 <_ZdlPvj>
 801ef68:	4620      	mov	r0, r4
 801ef6a:	bd10      	pop	{r4, pc}

0801ef6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801ef6c:	b510      	push	{r4, lr}
 801ef6e:	2104      	movs	r1, #4
 801ef70:	4604      	mov	r4, r0
 801ef72:	f00b fac6 	bl	802a502 <_ZdlPvj>
 801ef76:	4620      	mov	r0, r4
 801ef78:	bd10      	pop	{r4, pc}

0801ef7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801ef7a:	b510      	push	{r4, lr}
 801ef7c:	2104      	movs	r1, #4
 801ef7e:	4604      	mov	r4, r0
 801ef80:	f00b fabf 	bl	802a502 <_ZdlPvj>
 801ef84:	4620      	mov	r0, r4
 801ef86:	bd10      	pop	{r4, pc}

0801ef88 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801ef88:	b510      	push	{r4, lr}
 801ef8a:	2104      	movs	r1, #4
 801ef8c:	4604      	mov	r4, r0
 801ef8e:	f00b fab8 	bl	802a502 <_ZdlPvj>
 801ef92:	4620      	mov	r0, r4
 801ef94:	bd10      	pop	{r4, pc}

0801ef96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801ef96:	b510      	push	{r4, lr}
 801ef98:	2104      	movs	r1, #4
 801ef9a:	4604      	mov	r4, r0
 801ef9c:	f00b fab1 	bl	802a502 <_ZdlPvj>
 801efa0:	4620      	mov	r0, r4
 801efa2:	bd10      	pop	{r4, pc}

0801efa4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801efa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efa8:	b08f      	sub	sp, #60	@ 0x3c
 801efaa:	461c      	mov	r4, r3
 801efac:	9205      	str	r2, [sp, #20]
 801efae:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801efb2:	9100      	str	r1, [sp, #0]
 801efb4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801efb6:	9201      	str	r2, [sp, #4]
 801efb8:	2a00      	cmp	r2, #0
 801efba:	f000 8115 	beq.w	801f1e8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x244>
 801efbe:	6820      	ldr	r0, [r4, #0]
 801efc0:	6861      	ldr	r1, [r4, #4]
 801efc2:	aa0a      	add	r2, sp, #40	@ 0x28
 801efc4:	c203      	stmia	r2!, {r0, r1}
 801efc6:	6818      	ldr	r0, [r3, #0]
 801efc8:	6859      	ldr	r1, [r3, #4]
 801efca:	aa0c      	add	r2, sp, #48	@ 0x30
 801efcc:	c203      	stmia	r2!, {r0, r1}
 801efce:	a80a      	add	r0, sp, #40	@ 0x28
 801efd0:	f7f9 fbc2 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801efd4:	4621      	mov	r1, r4
 801efd6:	a80c      	add	r0, sp, #48	@ 0x30
 801efd8:	f7f9 fbe6 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801efdc:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801efe0:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801efe4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801efe8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801efec:	bfde      	ittt	le
 801efee:	b2b3      	uxthle	r3, r6
 801eff0:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801eff4:	fb92 f3f3 	sdivle	r3, r2, r3
 801eff8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801effc:	bfc8      	it	gt
 801effe:	2301      	movgt	r3, #1
 801f000:	fb92 f1f3 	sdiv	r1, r2, r3
 801f004:	fa1f fc81 	uxth.w	ip, r1
 801f008:	fb0c 2413 	mls	r4, ip, r3, r2
 801f00c:	fb14 f406 	smulbb	r4, r4, r6
 801f010:	441d      	add	r5, r3
 801f012:	4404      	add	r4, r0
 801f014:	4661      	mov	r1, ip
 801f016:	3d01      	subs	r5, #1
 801f018:	b2a4      	uxth	r4, r4
 801f01a:	fb95 f5f3 	sdiv	r5, r5, r3
 801f01e:	b131      	cbz	r1, 801f02e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x8a>
 801f020:	9b05      	ldr	r3, [sp, #20]
 801f022:	9900      	ldr	r1, [sp, #0]
 801f024:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f028:	ba1b      	rev	r3, r3
 801f02a:	4419      	add	r1, r3
 801f02c:	9100      	str	r1, [sp, #0]
 801f02e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f032:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801f036:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801f03a:	4418      	add	r0, r3
 801f03c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801f040:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801f044:	441a      	add	r2, r3
 801f046:	4b6a      	ldr	r3, [pc, #424]	@ (801f1f0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801f048:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801f04c:	6818      	ldr	r0, [r3, #0]
 801f04e:	6803      	ldr	r3, [r0, #0]
 801f050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f052:	4798      	blx	r3
 801f054:	4967      	ldr	r1, [pc, #412]	@ (801f1f4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801f056:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801f05a:	880b      	ldrh	r3, [r1, #0]
 801f05c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801f060:	9109      	str	r1, [sp, #36]	@ 0x24
 801f062:	fb03 c202 	mla	r2, r3, r2, ip
 801f066:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f06a:	4373      	muls	r3, r6
 801f06c:	b2ad      	uxth	r5, r5
 801f06e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f072:	00ad      	lsls	r5, r5, #2
 801f074:	9306      	str	r3, [sp, #24]
 801f076:	1d2b      	adds	r3, r5, #4
 801f078:	9307      	str	r3, [sp, #28]
 801f07a:	9b01      	ldr	r3, [sp, #4]
 801f07c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801f080:	9103      	str	r1, [sp, #12]
 801f082:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 801f086:	2c00      	cmp	r4, #0
 801f088:	bf0c      	ite	eq
 801f08a:	46c6      	moveq	lr, r8
 801f08c:	f04f 0e00 	movne.w	lr, #0
 801f090:	2300      	movs	r3, #0
 801f092:	b292      	uxth	r2, r2
 801f094:	fa1f fe8e 	uxth.w	lr, lr
 801f098:	9302      	str	r3, [sp, #8]
 801f09a:	9204      	str	r2, [sp, #16]
 801f09c:	9a06      	ldr	r2, [sp, #24]
 801f09e:	4282      	cmp	r2, r0
 801f0a0:	f240 809d 	bls.w	801f1de <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23a>
 801f0a4:	b963      	cbnz	r3, 801f0c0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11c>
 801f0a6:	9b00      	ldr	r3, [sp, #0]
 801f0a8:	781a      	ldrb	r2, [r3, #0]
 801f0aa:	0993      	lsrs	r3, r2, #6
 801f0ac:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801f0b0:	9202      	str	r2, [sp, #8]
 801f0b2:	1e5a      	subs	r2, r3, #1
 801f0b4:	2a02      	cmp	r2, #2
 801f0b6:	d815      	bhi.n	801f0e4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x140>
 801f0b8:	9a00      	ldr	r2, [sp, #0]
 801f0ba:	3201      	adds	r2, #1
 801f0bc:	9200      	str	r2, [sp, #0]
 801f0be:	b29b      	uxth	r3, r3
 801f0c0:	b1b4      	cbz	r4, 801f0f0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14c>
 801f0c2:	429c      	cmp	r4, r3
 801f0c4:	bf95      	itete	ls
 801f0c6:	1b1c      	subls	r4, r3, r4
 801f0c8:	1ae4      	subhi	r4, r4, r3
 801f0ca:	fa1f fa84 	uxthls.w	sl, r4
 801f0ce:	b2a4      	uxthhi	r4, r4
 801f0d0:	bf87      	ittee	hi
 801f0d2:	4671      	movhi	r1, lr
 801f0d4:	f04f 0a00 	movhi.w	sl, #0
 801f0d8:	fa1f f188 	uxthls.w	r1, r8
 801f0dc:	2400      	movls	r4, #0
 801f0de:	4653      	mov	r3, sl
 801f0e0:	468e      	mov	lr, r1
 801f0e2:	e7db      	b.n	801f09c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf8>
 801f0e4:	9a00      	ldr	r2, [sp, #0]
 801f0e6:	9b00      	ldr	r3, [sp, #0]
 801f0e8:	3202      	adds	r2, #2
 801f0ea:	785b      	ldrb	r3, [r3, #1]
 801f0ec:	9200      	str	r2, [sp, #0]
 801f0ee:	e7e7      	b.n	801f0c0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11c>
 801f0f0:	2202      	movs	r2, #2
 801f0f2:	4615      	mov	r5, r2
 801f0f4:	9907      	ldr	r1, [sp, #28]
 801f0f6:	9a02      	ldr	r2, [sp, #8]
 801f0f8:	fb15 1202 	smlabb	r2, r5, r2, r1
 801f0fc:	9905      	ldr	r1, [sp, #20]
 801f0fe:	4573      	cmp	r3, lr
 801f100:	f831 c002 	ldrh.w	ip, [r1, r2]
 801f104:	9a01      	ldr	r2, [sp, #4]
 801f106:	bf2b      	itete	cs
 801f108:	eba3 0a0e 	subcs.w	sl, r3, lr
 801f10c:	ebae 0103 	subcc.w	r1, lr, r3
 801f110:	46f1      	movcs	r9, lr
 801f112:	4699      	movcc	r9, r3
 801f114:	bf27      	ittee	cs
 801f116:	fa1f fa8a 	uxthcs.w	sl, sl
 801f11a:	4621      	movcs	r1, r4
 801f11c:	b289      	uxthcc	r1, r1
 801f11e:	46a2      	movcc	sl, r4
 801f120:	2aff      	cmp	r2, #255	@ 0xff
 801f122:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f126:	d105      	bne.n	801f134 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 801f128:	4481      	add	r9, r0
 801f12a:	4581      	cmp	r9, r0
 801f12c:	d045      	beq.n	801f1ba <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x216>
 801f12e:	f820 cb02 	strh.w	ip, [r0], #2
 801f132:	e7fa      	b.n	801f12a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 801f134:	9d03      	ldr	r5, [sp, #12]
 801f136:	ea4f 222c 	mov.w	r2, ip, asr #8
 801f13a:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801f13e:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801f142:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f146:	436a      	muls	r2, r5
 801f148:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801f14c:	fa5f fc8c 	uxtb.w	ip, ip
 801f150:	9208      	str	r2, [sp, #32]
 801f152:	fb0b fb05 	mul.w	fp, fp, r5
 801f156:	fb0c fc05 	mul.w	ip, ip, r5
 801f15a:	4481      	add	r9, r0
 801f15c:	4581      	cmp	r9, r0
 801f15e:	d02c      	beq.n	801f1ba <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x216>
 801f160:	8802      	ldrh	r2, [r0, #0]
 801f162:	9d04      	ldr	r5, [sp, #16]
 801f164:	9f04      	ldr	r7, [sp, #16]
 801f166:	1216      	asrs	r6, r2, #8
 801f168:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f16c:	fb16 f605 	smulbb	r6, r6, r5
 801f170:	9d08      	ldr	r5, [sp, #32]
 801f172:	442e      	add	r6, r5
 801f174:	10d5      	asrs	r5, r2, #3
 801f176:	00d2      	lsls	r2, r2, #3
 801f178:	b2d2      	uxtb	r2, r2
 801f17a:	fb12 f207 	smulbb	r2, r2, r7
 801f17e:	b2b6      	uxth	r6, r6
 801f180:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801f184:	4462      	add	r2, ip
 801f186:	fb15 f507 	smulbb	r5, r5, r7
 801f18a:	b292      	uxth	r2, r2
 801f18c:	1c77      	adds	r7, r6, #1
 801f18e:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801f192:	1c57      	adds	r7, r2, #1
 801f194:	445d      	add	r5, fp
 801f196:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 801f19a:	b2ad      	uxth	r5, r5
 801f19c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f1a0:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801f1a4:	4316      	orrs	r6, r2
 801f1a6:	1c6a      	adds	r2, r5, #1
 801f1a8:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801f1ac:	096d      	lsrs	r5, r5, #5
 801f1ae:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f1b2:	432e      	orrs	r6, r5
 801f1b4:	f820 6b02 	strh.w	r6, [r0], #2
 801f1b8:	e7d0      	b.n	801f15c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1b8>
 801f1ba:	4573      	cmp	r3, lr
 801f1bc:	d38f      	bcc.n	801f0de <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13a>
 801f1be:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801f1c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1c4:	fa1f f188 	uxth.w	r1, r8
 801f1c8:	1a64      	subs	r4, r4, r1
 801f1ca:	881b      	ldrh	r3, [r3, #0]
 801f1cc:	b2a4      	uxth	r4, r4
 801f1ce:	2c00      	cmp	r4, #0
 801f1d0:	eba3 0308 	sub.w	r3, r3, r8
 801f1d4:	bf18      	it	ne
 801f1d6:	2100      	movne	r1, #0
 801f1d8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f1dc:	e77f      	b.n	801f0de <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13a>
 801f1de:	4b04      	ldr	r3, [pc, #16]	@ (801f1f0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801f1e0:	6818      	ldr	r0, [r3, #0]
 801f1e2:	6803      	ldr	r3, [r0, #0]
 801f1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f1e6:	4798      	blx	r3
 801f1e8:	b00f      	add	sp, #60	@ 0x3c
 801f1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1ee:	bf00      	nop
 801f1f0:	200126e0 	.word	0x200126e0
 801f1f4:	200126da 	.word	0x200126da

0801f1f8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801f1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1fc:	b09f      	sub	sp, #124	@ 0x7c
 801f1fe:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 801f202:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801f206:	9209      	str	r2, [sp, #36]	@ 0x24
 801f208:	461d      	mov	r5, r3
 801f20a:	4604      	mov	r4, r0
 801f20c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f20e:	2a00      	cmp	r2, #0
 801f210:	f000 81eb 	beq.w	801f5ea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f2>
 801f214:	6828      	ldr	r0, [r5, #0]
 801f216:	6869      	ldr	r1, [r5, #4]
 801f218:	aa1a      	add	r2, sp, #104	@ 0x68
 801f21a:	c203      	stmia	r2!, {r0, r1}
 801f21c:	6818      	ldr	r0, [r3, #0]
 801f21e:	6859      	ldr	r1, [r3, #4]
 801f220:	aa1c      	add	r2, sp, #112	@ 0x70
 801f222:	c203      	stmia	r2!, {r0, r1}
 801f224:	a81a      	add	r0, sp, #104	@ 0x68
 801f226:	f7f9 fa97 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f22a:	4629      	mov	r1, r5
 801f22c:	a81c      	add	r0, sp, #112	@ 0x70
 801f22e:	f7f9 fabb 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f232:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801f236:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 801f23a:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 801f23e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801f242:	bfd7      	itett	le
 801f244:	b29a      	uxthle	r2, r3
 801f246:	2201      	movgt	r2, #1
 801f248:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801f24c:	fb91 f2f2 	sdivle	r2, r1, r2
 801f250:	9202      	str	r2, [sp, #8]
 801f252:	9802      	ldr	r0, [sp, #8]
 801f254:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 801f258:	fb92 f0f0 	sdiv	r0, r2, r0
 801f25c:	b280      	uxth	r0, r0
 801f25e:	9010      	str	r0, [sp, #64]	@ 0x40
 801f260:	9902      	ldr	r1, [sp, #8]
 801f262:	9802      	ldr	r0, [sp, #8]
 801f264:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801f266:	4488      	add	r8, r1
 801f268:	fb05 2510 	mls	r5, r5, r0, r2
 801f26c:	fb15 f503 	smulbb	r5, r5, r3
 801f270:	f108 38ff 	add.w	r8, r8, #4294967295
 801f274:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801f278:	fb98 f8f1 	sdiv	r8, r8, r1
 801f27c:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 801f280:	440d      	add	r5, r1
 801f282:	4419      	add	r1, r3
 801f284:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 801f288:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 801f28c:	441a      	add	r2, r3
 801f28e:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 801f292:	9304      	str	r3, [sp, #16]
 801f294:	4b95      	ldr	r3, [pc, #596]	@ (801f4ec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f4>)
 801f296:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 801f29a:	6818      	ldr	r0, [r3, #0]
 801f29c:	6803      	ldr	r3, [r0, #0]
 801f29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f2a0:	4798      	blx	r3
 801f2a2:	4b93      	ldr	r3, [pc, #588]	@ (801f4f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801f2a4:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 801f2a8:	881a      	ldrh	r2, [r3, #0]
 801f2aa:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 801f2ae:	9318      	str	r3, [sp, #96]	@ 0x60
 801f2b0:	fb02 7101 	mla	r1, r2, r1, r7
 801f2b4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801f2b8:	4356      	muls	r6, r2
 801f2ba:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 801f2be:	f108 0801 	add.w	r8, r8, #1
 801f2c2:	920a      	str	r2, [sp, #40]	@ 0x28
 801f2c4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f2c6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 801f2ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f2cc:	fa1f f888 	uxth.w	r8, r8
 801f2d0:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801f2d4:	f108 0204 	add.w	r2, r8, #4
 801f2d8:	9211      	str	r2, [sp, #68]	@ 0x44
 801f2da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f2dc:	4b85      	ldr	r3, [pc, #532]	@ (801f4f4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801f2de:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801f2e2:	b2ad      	uxth	r5, r5
 801f2e4:	9215      	str	r2, [sp, #84]	@ 0x54
 801f2e6:	2d00      	cmp	r5, #0
 801f2e8:	9a04      	ldr	r2, [sp, #16]
 801f2ea:	f04f 0100 	mov.w	r1, #0
 801f2ee:	bf18      	it	ne
 801f2f0:	2200      	movne	r2, #0
 801f2f2:	1b1b      	subs	r3, r3, r4
 801f2f4:	b292      	uxth	r2, r2
 801f2f6:	910d      	str	r1, [sp, #52]	@ 0x34
 801f2f8:	9319      	str	r3, [sp, #100]	@ 0x64
 801f2fa:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f2fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f2fe:	fa11 f383 	uxtah	r3, r1, r3
 801f302:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801f304:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f308:	3304      	adds	r3, #4
 801f30a:	9306      	str	r3, [sp, #24]
 801f30c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f30e:	4283      	cmp	r3, r0
 801f310:	f240 8166 	bls.w	801f5e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3e8>
 801f314:	9902      	ldr	r1, [sp, #8]
 801f316:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 801f31a:	fbb5 f3f3 	udiv	r3, r5, r3
 801f31e:	1acb      	subs	r3, r1, r3
 801f320:	b29b      	uxth	r3, r3
 801f322:	9316      	str	r3, [sp, #88]	@ 0x58
 801f324:	9b06      	ldr	r3, [sp, #24]
 801f326:	9e06      	ldr	r6, [sp, #24]
 801f328:	7859      	ldrb	r1, [r3, #1]
 801f32a:	789b      	ldrb	r3, [r3, #2]
 801f32c:	7836      	ldrb	r6, [r6, #0]
 801f32e:	9612      	str	r6, [sp, #72]	@ 0x48
 801f330:	021b      	lsls	r3, r3, #8
 801f332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801f336:	9906      	ldr	r1, [sp, #24]
 801f338:	78c9      	ldrb	r1, [r1, #3]
 801f33a:	430b      	orrs	r3, r1
 801f33c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f33e:	3601      	adds	r6, #1
 801f340:	4419      	add	r1, r3
 801f342:	9605      	str	r6, [sp, #20]
 801f344:	1c4e      	adds	r6, r1, #1
 801f346:	9603      	str	r6, [sp, #12]
 801f348:	7849      	ldrb	r1, [r1, #1]
 801f34a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f34c:	0209      	lsls	r1, r1, #8
 801f34e:	5cf3      	ldrb	r3, [r6, r3]
 801f350:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801f354:	4319      	orrs	r1, r3
 801f356:	b28b      	uxth	r3, r1
 801f358:	930c      	str	r3, [sp, #48]	@ 0x30
 801f35a:	2300      	movs	r3, #0
 801f35c:	f04f 0a01 	mov.w	sl, #1
 801f360:	9307      	str	r3, [sp, #28]
 801f362:	469c      	mov	ip, r3
 801f364:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801f368:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801f36c:	46d3      	mov	fp, sl
 801f36e:	4657      	mov	r7, sl
 801f370:	930e      	str	r3, [sp, #56]	@ 0x38
 801f372:	2d00      	cmp	r5, #0
 801f374:	d07e      	beq.n	801f474 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 801f376:	42af      	cmp	r7, r5
 801f378:	d26e      	bcs.n	801f458 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x260>
 801f37a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f37c:	9201      	str	r2, [sp, #4]
 801f37e:	1bed      	subs	r5, r5, r7
 801f380:	4283      	cmp	r3, r0
 801f382:	b2ad      	uxth	r5, r5
 801f384:	d802      	bhi.n	801f38c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 801f386:	e073      	b.n	801f470 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x278>
 801f388:	2b00      	cmp	r3, #0
 801f38a:	d15f      	bne.n	801f44c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 801f38c:	9b03      	ldr	r3, [sp, #12]
 801f38e:	785b      	ldrb	r3, [r3, #1]
 801f390:	f1cb 0207 	rsb	r2, fp, #7
 801f394:	4093      	lsls	r3, r2
 801f396:	005b      	lsls	r3, r3, #1
 801f398:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801f39c:	9b03      	ldr	r3, [sp, #12]
 801f39e:	781b      	ldrb	r3, [r3, #0]
 801f3a0:	fa43 f30b 	asr.w	r3, r3, fp
 801f3a4:	b2db      	uxtb	r3, r3
 801f3a6:	4313      	orrs	r3, r2
 801f3a8:	f10b 0201 	add.w	r2, fp, #1
 801f3ac:	fa5f fb82 	uxtb.w	fp, r2
 801f3b0:	9a03      	ldr	r2, [sp, #12]
 801f3b2:	f1bb 0f08 	cmp.w	fp, #8
 801f3b6:	bf15      	itete	ne
 801f3b8:	3201      	addne	r2, #1
 801f3ba:	3202      	addeq	r2, #2
 801f3bc:	9203      	strne	r2, [sp, #12]
 801f3be:	9203      	streq	r2, [sp, #12]
 801f3c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f3c2:	b29f      	uxth	r7, r3
 801f3c4:	bf08      	it	eq
 801f3c6:	f04f 0b00 	moveq.w	fp, #0
 801f3ca:	42ba      	cmp	r2, r7
 801f3cc:	d309      	bcc.n	801f3e2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 801f3ce:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801f3d2:	2301      	movs	r3, #1
 801f3d4:	9a05      	ldr	r2, [sp, #20]
 801f3d6:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801f3da:	d30e      	bcc.n	801f3fa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x202>
 801f3dc:	469a      	mov	sl, r3
 801f3de:	2600      	movs	r6, #0
 801f3e0:	e035      	b.n	801f44e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x256>
 801f3e2:	9b05      	ldr	r3, [sp, #20]
 801f3e4:	429f      	cmp	r7, r3
 801f3e6:	d318      	bcc.n	801f41a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x222>
 801f3e8:	eb04 030a 	add.w	r3, r4, sl
 801f3ec:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801f3f0:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801f3f4:	f10a 0301 	add.w	r3, sl, #1
 801f3f8:	b29b      	uxth	r3, r3
 801f3fa:	9a05      	ldr	r2, [sp, #20]
 801f3fc:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801f400:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801f402:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f406:	7116      	strb	r6, [r2, #4]
 801f408:	f10a 0601 	add.w	r6, sl, #1
 801f40c:	80d1      	strh	r1, [r2, #6]
 801f40e:	7156      	strb	r6, [r2, #5]
 801f410:	9a05      	ldr	r2, [sp, #20]
 801f412:	3201      	adds	r2, #1
 801f414:	b292      	uxth	r2, r2
 801f416:	9205      	str	r2, [sp, #20]
 801f418:	e7e0      	b.n	801f3dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e4>
 801f41a:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801f41e:	463a      	mov	r2, r7
 801f420:	795b      	ldrb	r3, [r3, #5]
 801f422:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801f426:	4426      	add	r6, r4
 801f428:	9919      	ldr	r1, [sp, #100]	@ 0x64
 801f42a:	eb01 0c06 	add.w	ip, r1, r6
 801f42e:	f1bc 0f00 	cmp.w	ip, #0
 801f432:	dd07      	ble.n	801f444 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>
 801f434:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f438:	f892 c004 	ldrb.w	ip, [r2, #4]
 801f43c:	f806 cd01 	strb.w	ip, [r6, #-1]!
 801f440:	88d2      	ldrh	r2, [r2, #6]
 801f442:	e7f1      	b.n	801f428 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x230>
 801f444:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801f448:	b29b      	uxth	r3, r3
 801f44a:	e7c3      	b.n	801f3d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1dc>
 801f44c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801f44e:	970c      	str	r7, [sp, #48]	@ 0x30
 801f450:	9a01      	ldr	r2, [sp, #4]
 801f452:	46b4      	mov	ip, r6
 801f454:	461f      	mov	r7, r3
 801f456:	e78c      	b.n	801f372 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17a>
 801f458:	1b7b      	subs	r3, r7, r5
 801f45a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f45e:	9201      	str	r2, [sp, #4]
 801f460:	eb0c 0605 	add.w	r6, ip, r5
 801f464:	b29b      	uxth	r3, r3
 801f466:	b2b6      	uxth	r6, r6
 801f468:	2500      	movs	r5, #0
 801f46a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f46c:	4282      	cmp	r2, r0
 801f46e:	d88b      	bhi.n	801f388 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 801f470:	9a01      	ldr	r2, [sp, #4]
 801f472:	e74b      	b.n	801f30c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x114>
 801f474:	4297      	cmp	r7, r2
 801f476:	d332      	bcc.n	801f4de <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2e6>
 801f478:	1abb      	subs	r3, r7, r2
 801f47a:	b29b      	uxth	r3, r3
 801f47c:	9208      	str	r2, [sp, #32]
 801f47e:	9501      	str	r5, [sp, #4]
 801f480:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f482:	29ff      	cmp	r1, #255	@ 0xff
 801f484:	9908      	ldr	r1, [sp, #32]
 801f486:	eb0c 0601 	add.w	r6, ip, r1
 801f48a:	d135      	bne.n	801f4f8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>
 801f48c:	f1a0 0e02 	sub.w	lr, r0, #2
 801f490:	b2b6      	uxth	r6, r6
 801f492:	45b4      	cmp	ip, r6
 801f494:	f040 808c 	bne.w	801f5b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3b8>
 801f498:	9908      	ldr	r1, [sp, #32]
 801f49a:	4297      	cmp	r7, r2
 801f49c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801f4a0:	d3e2      	bcc.n	801f468 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x270>
 801f4a2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f4a4:	9904      	ldr	r1, [sp, #16]
 801f4a6:	8812      	ldrh	r2, [r2, #0]
 801f4a8:	1a52      	subs	r2, r2, r1
 801f4aa:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f4ae:	9a07      	ldr	r2, [sp, #28]
 801f4b0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f4b2:	3201      	adds	r2, #1
 801f4b4:	428a      	cmp	r2, r1
 801f4b6:	9207      	str	r2, [sp, #28]
 801f4b8:	f040 8087 	bne.w	801f5ca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d2>
 801f4bc:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 801f4c0:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 801f4c4:	9b04      	ldr	r3, [sp, #16]
 801f4c6:	1bed      	subs	r5, r5, r7
 801f4c8:	b2ad      	uxth	r5, r5
 801f4ca:	2d00      	cmp	r5, #0
 801f4cc:	bf08      	it	eq
 801f4ce:	461a      	moveq	r2, r3
 801f4d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f4d2:	bf18      	it	ne
 801f4d4:	2200      	movne	r2, #0
 801f4d6:	3301      	adds	r3, #1
 801f4d8:	930d      	str	r3, [sp, #52]	@ 0x34
 801f4da:	b292      	uxth	r2, r2
 801f4dc:	e70d      	b.n	801f2fa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x102>
 801f4de:	1bd1      	subs	r1, r2, r7
 801f4e0:	b28b      	uxth	r3, r1
 801f4e2:	9301      	str	r3, [sp, #4]
 801f4e4:	9708      	str	r7, [sp, #32]
 801f4e6:	462b      	mov	r3, r5
 801f4e8:	e7ca      	b.n	801f480 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>
 801f4ea:	bf00      	nop
 801f4ec:	200126e0 	.word	0x200126e0
 801f4f0:	200126da 	.word	0x200126da
 801f4f4:	fffff7fb 	.word	0xfffff7fb
 801f4f8:	b2b6      	uxth	r6, r6
 801f4fa:	900b      	str	r0, [sp, #44]	@ 0x2c
 801f4fc:	45b4      	cmp	ip, r6
 801f4fe:	d0cb      	beq.n	801f498 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a0>
 801f500:	f10c 0101 	add.w	r1, ip, #1
 801f504:	44a4      	add	ip, r4
 801f506:	9117      	str	r1, [sp, #92]	@ 0x5c
 801f508:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 801f50c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f50e:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801f512:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f514:	f8b1 c000 	ldrh.w	ip, [r1]
 801f518:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f51a:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 801f51e:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801f522:	fb1e fe01 	smulbb	lr, lr, r1
 801f526:	ea4f 2825 	mov.w	r8, r5, asr #8
 801f52a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f52c:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801f530:	fb08 e801 	mla	r8, r8, r1, lr
 801f534:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801f538:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f53a:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801f53e:	fb19 f901 	smulbb	r9, r9, r1
 801f542:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 801f546:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f548:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801f54c:	fb0e 9e01 	mla	lr, lr, r1, r9
 801f550:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f554:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f556:	fa5f fc8c 	uxtb.w	ip, ip
 801f55a:	fb1c fc01 	smulbb	ip, ip, r1
 801f55e:	00ed      	lsls	r5, r5, #3
 801f560:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f562:	b2ed      	uxtb	r5, r5
 801f564:	fb05 c501 	mla	r5, r5, r1, ip
 801f568:	fa1f f888 	uxth.w	r8, r8
 801f56c:	fa1f fe8e 	uxth.w	lr, lr
 801f570:	b2ad      	uxth	r5, r5
 801f572:	f108 0c01 	add.w	ip, r8, #1
 801f576:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801f57a:	f10e 0901 	add.w	r9, lr, #1
 801f57e:	f105 0c01 	add.w	ip, r5, #1
 801f582:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801f586:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 801f58a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f58e:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801f592:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f596:	ea4c 0808 	orr.w	r8, ip, r8
 801f59a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f59c:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 801f5a0:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801f5a4:	ea48 0809 	orr.w	r8, r8, r9
 801f5a8:	f821 8b02 	strh.w	r8, [r1], #2
 801f5ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f5ae:	e7a5      	b.n	801f4fc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 801f5b0:	f10c 0801 	add.w	r8, ip, #1
 801f5b4:	44a4      	add	ip, r4
 801f5b6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f5b8:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 801f5bc:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801f5c0:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801f5c4:	fa1f fc88 	uxth.w	ip, r8
 801f5c8:	e763      	b.n	801f492 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29a>
 801f5ca:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f5ce:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801f5d2:	1aad      	subs	r5, r5, r2
 801f5d4:	b2ad      	uxth	r5, r5
 801f5d6:	2d00      	cmp	r5, #0
 801f5d8:	bf18      	it	ne
 801f5da:	2200      	movne	r2, #0
 801f5dc:	9201      	str	r2, [sp, #4]
 801f5de:	e744      	b.n	801f46a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 801f5e0:	4b03      	ldr	r3, [pc, #12]	@ (801f5f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f8>)
 801f5e2:	6818      	ldr	r0, [r3, #0]
 801f5e4:	6803      	ldr	r3, [r0, #0]
 801f5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f5e8:	4798      	blx	r3
 801f5ea:	b01f      	add	sp, #124	@ 0x7c
 801f5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5f0:	200126e0 	.word	0x200126e0

0801f5f4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801f5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5f8:	b08f      	sub	sp, #60	@ 0x3c
 801f5fa:	461c      	mov	r4, r3
 801f5fc:	9203      	str	r2, [sp, #12]
 801f5fe:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f602:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f604:	9202      	str	r2, [sp, #8]
 801f606:	460f      	mov	r7, r1
 801f608:	2a00      	cmp	r2, #0
 801f60a:	f000 8128 	beq.w	801f85e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801f60e:	6820      	ldr	r0, [r4, #0]
 801f610:	6861      	ldr	r1, [r4, #4]
 801f612:	aa0a      	add	r2, sp, #40	@ 0x28
 801f614:	c203      	stmia	r2!, {r0, r1}
 801f616:	6818      	ldr	r0, [r3, #0]
 801f618:	6859      	ldr	r1, [r3, #4]
 801f61a:	aa0c      	add	r2, sp, #48	@ 0x30
 801f61c:	c203      	stmia	r2!, {r0, r1}
 801f61e:	a80a      	add	r0, sp, #40	@ 0x28
 801f620:	f7f9 f89a 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f624:	4621      	mov	r1, r4
 801f626:	a80c      	add	r0, sp, #48	@ 0x30
 801f628:	f7f9 f8be 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f62c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801f630:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801f634:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801f638:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801f63c:	bfde      	ittt	le
 801f63e:	b2b3      	uxthle	r3, r6
 801f640:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801f644:	fb92 f3f3 	sdivle	r3, r2, r3
 801f648:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801f64c:	bfc8      	it	gt
 801f64e:	2301      	movgt	r3, #1
 801f650:	fb92 f1f3 	sdiv	r1, r2, r3
 801f654:	fa1f fc81 	uxth.w	ip, r1
 801f658:	fb0c 2413 	mls	r4, ip, r3, r2
 801f65c:	fb14 f406 	smulbb	r4, r4, r6
 801f660:	441d      	add	r5, r3
 801f662:	4404      	add	r4, r0
 801f664:	4661      	mov	r1, ip
 801f666:	3d01      	subs	r5, #1
 801f668:	b2a4      	uxth	r4, r4
 801f66a:	fb95 f5f3 	sdiv	r5, r5, r3
 801f66e:	b121      	cbz	r1, 801f67a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x86>
 801f670:	9b03      	ldr	r3, [sp, #12]
 801f672:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f676:	ba1b      	rev	r3, r3
 801f678:	441f      	add	r7, r3
 801f67a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f67e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801f682:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801f686:	4418      	add	r0, r3
 801f688:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801f68c:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801f690:	441a      	add	r2, r3
 801f692:	4b74      	ldr	r3, [pc, #464]	@ (801f864 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801f694:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801f698:	6818      	ldr	r0, [r3, #0]
 801f69a:	6803      	ldr	r3, [r0, #0]
 801f69c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f69e:	4798      	blx	r3
 801f6a0:	4a71      	ldr	r2, [pc, #452]	@ (801f868 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801f6a2:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801f6a6:	8813      	ldrh	r3, [r2, #0]
 801f6a8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801f6ac:	9209      	str	r2, [sp, #36]	@ 0x24
 801f6ae:	fb03 c101 	mla	r1, r3, r1, ip
 801f6b2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801f6b6:	4373      	muls	r3, r6
 801f6b8:	b2ad      	uxth	r5, r5
 801f6ba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f6be:	00ad      	lsls	r5, r5, #2
 801f6c0:	2c00      	cmp	r4, #0
 801f6c2:	9304      	str	r3, [sp, #16]
 801f6c4:	f105 0304 	add.w	r3, r5, #4
 801f6c8:	9305      	str	r3, [sp, #20]
 801f6ca:	bf0c      	ite	eq
 801f6cc:	46c8      	moveq	r8, r9
 801f6ce:	f04f 0800 	movne.w	r8, #0
 801f6d2:	2300      	movs	r3, #0
 801f6d4:	fa1f f888 	uxth.w	r8, r8
 801f6d8:	9301      	str	r3, [sp, #4]
 801f6da:	9a04      	ldr	r2, [sp, #16]
 801f6dc:	4282      	cmp	r2, r0
 801f6de:	f240 80b9 	bls.w	801f854 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801f6e2:	b95b      	cbnz	r3, 801f6fc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x108>
 801f6e4:	783a      	ldrb	r2, [r7, #0]
 801f6e6:	0993      	lsrs	r3, r2, #6
 801f6e8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801f6ec:	9201      	str	r2, [sp, #4]
 801f6ee:	1e5a      	subs	r2, r3, #1
 801f6f0:	2a02      	cmp	r2, #2
 801f6f2:	bf8d      	iteet	hi
 801f6f4:	787b      	ldrbhi	r3, [r7, #1]
 801f6f6:	3701      	addls	r7, #1
 801f6f8:	b29b      	uxthls	r3, r3
 801f6fa:	3702      	addhi	r7, #2
 801f6fc:	b184      	cbz	r4, 801f720 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801f6fe:	429c      	cmp	r4, r3
 801f700:	bf95      	itete	ls
 801f702:	1b1c      	subls	r4, r3, r4
 801f704:	1ae4      	subhi	r4, r4, r3
 801f706:	fa1f fa84 	uxthls.w	sl, r4
 801f70a:	b2a4      	uxthhi	r4, r4
 801f70c:	bf87      	ittee	hi
 801f70e:	46c4      	movhi	ip, r8
 801f710:	f04f 0a00 	movhi.w	sl, #0
 801f714:	fa1f fc89 	uxthls.w	ip, r9
 801f718:	2400      	movls	r4, #0
 801f71a:	4653      	mov	r3, sl
 801f71c:	46e0      	mov	r8, ip
 801f71e:	e7dc      	b.n	801f6da <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe6>
 801f720:	2204      	movs	r2, #4
 801f722:	4615      	mov	r5, r2
 801f724:	9905      	ldr	r1, [sp, #20]
 801f726:	9a01      	ldr	r2, [sp, #4]
 801f728:	fb15 1202 	smlabb	r2, r5, r2, r1
 801f72c:	9903      	ldr	r1, [sp, #12]
 801f72e:	588a      	ldr	r2, [r1, r2]
 801f730:	4543      	cmp	r3, r8
 801f732:	bf27      	ittee	cs
 801f734:	eba3 0a08 	subcs.w	sl, r3, r8
 801f738:	46c6      	movcs	lr, r8
 801f73a:	eba8 0c03 	subcc.w	ip, r8, r3
 801f73e:	469e      	movcc	lr, r3
 801f740:	ea4f 6112 	mov.w	r1, r2, lsr #24
 801f744:	bf27      	ittee	cs
 801f746:	fa1f fa8a 	uxthcs.w	sl, sl
 801f74a:	46a4      	movcs	ip, r4
 801f74c:	fa1f fc8c 	uxthcc.w	ip, ip
 801f750:	46a2      	movcc	sl, r4
 801f752:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801f756:	2900      	cmp	r1, #0
 801f758:	d066      	beq.n	801f828 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 801f75a:	29ff      	cmp	r1, #255	@ 0xff
 801f75c:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801f760:	d114      	bne.n	801f78c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801f762:	9d02      	ldr	r5, [sp, #8]
 801f764:	2dff      	cmp	r5, #255	@ 0xff
 801f766:	d111      	bne.n	801f78c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801f768:	0951      	lsrs	r1, r2, #5
 801f76a:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801f76e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801f772:	f026 0607 	bic.w	r6, r6, #7
 801f776:	430e      	orrs	r6, r1
 801f778:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f77c:	4316      	orrs	r6, r2
 801f77e:	b2b6      	uxth	r6, r6
 801f780:	4486      	add	lr, r0
 801f782:	4586      	cmp	lr, r0
 801f784:	d051      	beq.n	801f82a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801f786:	f820 6b02 	strh.w	r6, [r0], #2
 801f78a:	e7fa      	b.n	801f782 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801f78c:	9d02      	ldr	r5, [sp, #8]
 801f78e:	4369      	muls	r1, r5
 801f790:	1c4d      	adds	r5, r1, #1
 801f792:	eb05 2521 	add.w	r5, r5, r1, asr #8
 801f796:	122d      	asrs	r5, r5, #8
 801f798:	ea6f 0b05 	mvn.w	fp, r5
 801f79c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801f7a0:	b2ad      	uxth	r5, r5
 801f7a2:	b2f6      	uxtb	r6, r6
 801f7a4:	b2d2      	uxtb	r2, r2
 801f7a6:	fb11 f105 	smulbb	r1, r1, r5
 801f7aa:	fb16 f605 	smulbb	r6, r6, r5
 801f7ae:	fb12 f205 	smulbb	r2, r2, r5
 801f7b2:	b289      	uxth	r1, r1
 801f7b4:	b2b6      	uxth	r6, r6
 801f7b6:	b292      	uxth	r2, r2
 801f7b8:	9106      	str	r1, [sp, #24]
 801f7ba:	9607      	str	r6, [sp, #28]
 801f7bc:	9208      	str	r2, [sp, #32]
 801f7be:	4486      	add	lr, r0
 801f7c0:	fa5f fb8b 	uxtb.w	fp, fp
 801f7c4:	4586      	cmp	lr, r0
 801f7c6:	d030      	beq.n	801f82a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801f7c8:	8802      	ldrh	r2, [r0, #0]
 801f7ca:	9906      	ldr	r1, [sp, #24]
 801f7cc:	1216      	asrs	r6, r2, #8
 801f7ce:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f7d2:	10d5      	asrs	r5, r2, #3
 801f7d4:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f7d8:	fb06 160b 	mla	r6, r6, fp, r1
 801f7dc:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801f7e0:	9907      	ldr	r1, [sp, #28]
 801f7e2:	00d2      	lsls	r2, r2, #3
 801f7e4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801f7e8:	fb05 150b 	mla	r5, r5, fp, r1
 801f7ec:	b2d2      	uxtb	r2, r2
 801f7ee:	9908      	ldr	r1, [sp, #32]
 801f7f0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f7f4:	b2b6      	uxth	r6, r6
 801f7f6:	fb02 120b 	mla	r2, r2, fp, r1
 801f7fa:	b292      	uxth	r2, r2
 801f7fc:	1c71      	adds	r1, r6, #1
 801f7fe:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801f802:	1c51      	adds	r1, r2, #1
 801f804:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f808:	b2ad      	uxth	r5, r5
 801f80a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f80e:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801f812:	4316      	orrs	r6, r2
 801f814:	1c6a      	adds	r2, r5, #1
 801f816:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801f81a:	096d      	lsrs	r5, r5, #5
 801f81c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f820:	432e      	orrs	r6, r5
 801f822:	f820 6b02 	strh.w	r6, [r0], #2
 801f826:	e7cd      	b.n	801f7c4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 801f828:	4470      	add	r0, lr
 801f82a:	4543      	cmp	r3, r8
 801f82c:	f4ff af75 	bcc.w	801f71a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x126>
 801f830:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801f834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f836:	fa1f fc89 	uxth.w	ip, r9
 801f83a:	eba4 040c 	sub.w	r4, r4, ip
 801f83e:	881b      	ldrh	r3, [r3, #0]
 801f840:	b2a4      	uxth	r4, r4
 801f842:	2c00      	cmp	r4, #0
 801f844:	eba3 0309 	sub.w	r3, r3, r9
 801f848:	bf18      	it	ne
 801f84a:	f04f 0c00 	movne.w	ip, #0
 801f84e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f852:	e762      	b.n	801f71a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x126>
 801f854:	4b03      	ldr	r3, [pc, #12]	@ (801f864 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801f856:	6818      	ldr	r0, [r3, #0]
 801f858:	6803      	ldr	r3, [r0, #0]
 801f85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f85c:	4798      	blx	r3
 801f85e:	b00f      	add	sp, #60	@ 0x3c
 801f860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f864:	200126e0 	.word	0x200126e0
 801f868:	200126da 	.word	0x200126da

0801f86c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801f86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f870:	b093      	sub	sp, #76	@ 0x4c
 801f872:	461c      	mov	r4, r3
 801f874:	9205      	str	r2, [sp, #20]
 801f876:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 801f87a:	9101      	str	r1, [sp, #4]
 801f87c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f87e:	9202      	str	r2, [sp, #8]
 801f880:	2a00      	cmp	r2, #0
 801f882:	f000 812c 	beq.w	801fade <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 801f886:	6820      	ldr	r0, [r4, #0]
 801f888:	6861      	ldr	r1, [r4, #4]
 801f88a:	aa0e      	add	r2, sp, #56	@ 0x38
 801f88c:	c203      	stmia	r2!, {r0, r1}
 801f88e:	6818      	ldr	r0, [r3, #0]
 801f890:	6859      	ldr	r1, [r3, #4]
 801f892:	aa10      	add	r2, sp, #64	@ 0x40
 801f894:	c203      	stmia	r2!, {r0, r1}
 801f896:	a80e      	add	r0, sp, #56	@ 0x38
 801f898:	f7f8 ff5e 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f89c:	4621      	mov	r1, r4
 801f89e:	a810      	add	r0, sp, #64	@ 0x40
 801f8a0:	f7f8 ff82 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f8a4:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 801f8a8:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801f8ac:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 801f8b0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801f8b4:	bfde      	ittt	le
 801f8b6:	b2b3      	uxthle	r3, r6
 801f8b8:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801f8bc:	fb92 f3f3 	sdivle	r3, r2, r3
 801f8c0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801f8c4:	bfc8      	it	gt
 801f8c6:	2301      	movgt	r3, #1
 801f8c8:	fb92 f1f3 	sdiv	r1, r2, r3
 801f8cc:	fa1f fc81 	uxth.w	ip, r1
 801f8d0:	fb0c 2413 	mls	r4, ip, r3, r2
 801f8d4:	fb14 f406 	smulbb	r4, r4, r6
 801f8d8:	441d      	add	r5, r3
 801f8da:	4404      	add	r4, r0
 801f8dc:	4661      	mov	r1, ip
 801f8de:	3d01      	subs	r5, #1
 801f8e0:	b2a4      	uxth	r4, r4
 801f8e2:	fb95 f5f3 	sdiv	r5, r5, r3
 801f8e6:	b131      	cbz	r1, 801f8f6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x8a>
 801f8e8:	9b05      	ldr	r3, [sp, #20]
 801f8ea:	9901      	ldr	r1, [sp, #4]
 801f8ec:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f8f0:	ba1b      	rev	r3, r3
 801f8f2:	4419      	add	r1, r3
 801f8f4:	9101      	str	r1, [sp, #4]
 801f8f6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801f8fa:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801f8fe:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 801f902:	4418      	add	r0, r3
 801f904:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801f908:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801f90c:	441a      	add	r2, r3
 801f90e:	4b75      	ldr	r3, [pc, #468]	@ (801fae4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 801f910:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 801f914:	6818      	ldr	r0, [r3, #0]
 801f916:	6803      	ldr	r3, [r0, #0]
 801f918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f91a:	4798      	blx	r3
 801f91c:	4972      	ldr	r1, [pc, #456]	@ (801fae8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801f91e:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 801f922:	880b      	ldrh	r3, [r1, #0]
 801f924:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801f928:	910d      	str	r1, [sp, #52]	@ 0x34
 801f92a:	fb03 c202 	mla	r2, r3, r2, ip
 801f92e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f932:	4373      	muls	r3, r6
 801f934:	b2ad      	uxth	r5, r5
 801f936:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f93a:	00ad      	lsls	r5, r5, #2
 801f93c:	9308      	str	r3, [sp, #32]
 801f93e:	1d2b      	adds	r3, r5, #4
 801f940:	9309      	str	r3, [sp, #36]	@ 0x24
 801f942:	9b02      	ldr	r3, [sp, #8]
 801f944:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801f948:	9106      	str	r1, [sp, #24]
 801f94a:	43da      	mvns	r2, r3
 801f94c:	2c00      	cmp	r4, #0
 801f94e:	bf0c      	ite	eq
 801f950:	46dc      	moveq	ip, fp
 801f952:	f04f 0c00 	movne.w	ip, #0
 801f956:	2300      	movs	r3, #0
 801f958:	b2d2      	uxtb	r2, r2
 801f95a:	fa1f fc8c 	uxth.w	ip, ip
 801f95e:	9303      	str	r3, [sp, #12]
 801f960:	9207      	str	r2, [sp, #28]
 801f962:	9a08      	ldr	r2, [sp, #32]
 801f964:	4282      	cmp	r2, r0
 801f966:	f240 80b5 	bls.w	801fad4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801f96a:	b963      	cbnz	r3, 801f986 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801f96c:	9b01      	ldr	r3, [sp, #4]
 801f96e:	781a      	ldrb	r2, [r3, #0]
 801f970:	0993      	lsrs	r3, r2, #6
 801f972:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801f976:	9203      	str	r2, [sp, #12]
 801f978:	1e5a      	subs	r2, r3, #1
 801f97a:	2a02      	cmp	r2, #2
 801f97c:	d815      	bhi.n	801f9aa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 801f97e:	9a01      	ldr	r2, [sp, #4]
 801f980:	3201      	adds	r2, #1
 801f982:	9201      	str	r2, [sp, #4]
 801f984:	b29b      	uxth	r3, r3
 801f986:	b1b4      	cbz	r4, 801f9b6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14a>
 801f988:	429c      	cmp	r4, r3
 801f98a:	bf95      	itete	ls
 801f98c:	1b1c      	subls	r4, r3, r4
 801f98e:	1ae4      	subhi	r4, r4, r3
 801f990:	fa1f f884 	uxthls.w	r8, r4
 801f994:	b2a4      	uxthhi	r4, r4
 801f996:	bf87      	ittee	hi
 801f998:	4666      	movhi	r6, ip
 801f99a:	f04f 0800 	movhi.w	r8, #0
 801f99e:	fa1f f68b 	uxthls.w	r6, fp
 801f9a2:	2400      	movls	r4, #0
 801f9a4:	4643      	mov	r3, r8
 801f9a6:	46b4      	mov	ip, r6
 801f9a8:	e7db      	b.n	801f962 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801f9aa:	9a01      	ldr	r2, [sp, #4]
 801f9ac:	9b01      	ldr	r3, [sp, #4]
 801f9ae:	3202      	adds	r2, #2
 801f9b0:	785b      	ldrb	r3, [r3, #1]
 801f9b2:	9201      	str	r2, [sp, #4]
 801f9b4:	e7e7      	b.n	801f986 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801f9b6:	2203      	movs	r2, #3
 801f9b8:	4615      	mov	r5, r2
 801f9ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f9bc:	9a03      	ldr	r2, [sp, #12]
 801f9be:	fb15 1202 	smlabb	r2, r5, r2, r1
 801f9c2:	9905      	ldr	r1, [sp, #20]
 801f9c4:	4563      	cmp	r3, ip
 801f9c6:	eb01 0502 	add.w	r5, r1, r2
 801f9ca:	9902      	ldr	r1, [sp, #8]
 801f9cc:	bf29      	itett	cs
 801f9ce:	eba3 080c 	subcs.w	r8, r3, ip
 801f9d2:	ebac 0603 	subcc.w	r6, ip, r3
 801f9d6:	fa1f f888 	uxthcs.w	r8, r8
 801f9da:	46e1      	movcs	r9, ip
 801f9dc:	bf2f      	iteee	cs
 801f9de:	4626      	movcs	r6, r4
 801f9e0:	b2b6      	uxthcc	r6, r6
 801f9e2:	4699      	movcc	r9, r3
 801f9e4:	46a0      	movcc	r8, r4
 801f9e6:	29ff      	cmp	r1, #255	@ 0xff
 801f9e8:	d04a      	beq.n	801fa80 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x214>
 801f9ea:	9f06      	ldr	r7, [sp, #24]
 801f9ec:	78a9      	ldrb	r1, [r5, #2]
 801f9ee:	9004      	str	r0, [sp, #16]
 801f9f0:	4379      	muls	r1, r7
 801f9f2:	910a      	str	r1, [sp, #40]	@ 0x28
 801f9f4:	7869      	ldrb	r1, [r5, #1]
 801f9f6:	4379      	muls	r1, r7
 801f9f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f9fa:	9905      	ldr	r1, [sp, #20]
 801f9fc:	5c8a      	ldrb	r2, [r1, r2]
 801f9fe:	437a      	muls	r2, r7
 801fa00:	920c      	str	r2, [sp, #48]	@ 0x30
 801fa02:	46ca      	mov	sl, r9
 801fa04:	f1ba 0f00 	cmp.w	sl, #0
 801fa08:	d03d      	beq.n	801fa86 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21a>
 801fa0a:	9a04      	ldr	r2, [sp, #16]
 801fa0c:	9f07      	ldr	r7, [sp, #28]
 801fa0e:	8812      	ldrh	r2, [r2, #0]
 801fa10:	1215      	asrs	r5, r2, #8
 801fa12:	46be      	mov	lr, r7
 801fa14:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801fa18:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801fa1a:	10d1      	asrs	r1, r2, #3
 801fa1c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801fa20:	fb05 750e 	mla	r5, r5, lr, r7
 801fa24:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801fa28:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fa2a:	00d2      	lsls	r2, r2, #3
 801fa2c:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801fa30:	fb01 710e 	mla	r1, r1, lr, r7
 801fa34:	b2d2      	uxtb	r2, r2
 801fa36:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801fa38:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801fa3c:	b2ad      	uxth	r5, r5
 801fa3e:	fb02 720e 	mla	r2, r2, lr, r7
 801fa42:	b292      	uxth	r2, r2
 801fa44:	f105 0e01 	add.w	lr, r5, #1
 801fa48:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801fa4c:	f102 0e01 	add.w	lr, r2, #1
 801fa50:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801fa54:	b289      	uxth	r1, r1
 801fa56:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fa5a:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801fa5e:	4315      	orrs	r5, r2
 801fa60:	1c4a      	adds	r2, r1, #1
 801fa62:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801fa66:	0949      	lsrs	r1, r1, #5
 801fa68:	9a04      	ldr	r2, [sp, #16]
 801fa6a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801fa6e:	430d      	orrs	r5, r1
 801fa70:	f822 5b02 	strh.w	r5, [r2], #2
 801fa74:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fa78:	9204      	str	r2, [sp, #16]
 801fa7a:	fa1f fa8a 	uxth.w	sl, sl
 801fa7e:	e7c1      	b.n	801fa04 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801fa80:	4649      	mov	r1, r9
 801fa82:	4686      	mov	lr, r0
 801fa84:	b999      	cbnz	r1, 801faae <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x242>
 801fa86:	4563      	cmp	r3, ip
 801fa88:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 801fa8c:	d38a      	bcc.n	801f9a4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 801fa8e:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 801fa92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fa94:	fa1f f68b 	uxth.w	r6, fp
 801fa98:	1ba4      	subs	r4, r4, r6
 801fa9a:	881b      	ldrh	r3, [r3, #0]
 801fa9c:	b2a4      	uxth	r4, r4
 801fa9e:	2c00      	cmp	r4, #0
 801faa0:	eba3 030b 	sub.w	r3, r3, fp
 801faa4:	bf18      	it	ne
 801faa6:	2600      	movne	r6, #0
 801faa8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801faac:	e77a      	b.n	801f9a4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 801faae:	78aa      	ldrb	r2, [r5, #2]
 801fab0:	4f0e      	ldr	r7, [pc, #56]	@ (801faec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 801fab2:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 801fab6:	786a      	ldrb	r2, [r5, #1]
 801fab8:	00d2      	lsls	r2, r2, #3
 801faba:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801fabe:	ea4a 0202 	orr.w	r2, sl, r2
 801fac2:	f895 a000 	ldrb.w	sl, [r5]
 801fac6:	3901      	subs	r1, #1
 801fac8:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 801facc:	f82e 2b02 	strh.w	r2, [lr], #2
 801fad0:	b289      	uxth	r1, r1
 801fad2:	e7d7      	b.n	801fa84 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 801fad4:	4b03      	ldr	r3, [pc, #12]	@ (801fae4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>)
 801fad6:	6818      	ldr	r0, [r3, #0]
 801fad8:	6803      	ldr	r3, [r0, #0]
 801fada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fadc:	4798      	blx	r3
 801fade:	b013      	add	sp, #76	@ 0x4c
 801fae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fae4:	200126e0 	.word	0x200126e0
 801fae8:	200126da 	.word	0x200126da
 801faec:	fffff800 	.word	0xfffff800

0801faf0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801faf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faf4:	b09d      	sub	sp, #116	@ 0x74
 801faf6:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 801fafa:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801fafe:	920e      	str	r2, [sp, #56]	@ 0x38
 801fb00:	461c      	mov	r4, r3
 801fb02:	4683      	mov	fp, r0
 801fb04:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fb06:	2a00      	cmp	r2, #0
 801fb08:	f000 81e0 	beq.w	801fecc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3dc>
 801fb0c:	6820      	ldr	r0, [r4, #0]
 801fb0e:	6861      	ldr	r1, [r4, #4]
 801fb10:	aa18      	add	r2, sp, #96	@ 0x60
 801fb12:	c203      	stmia	r2!, {r0, r1}
 801fb14:	6818      	ldr	r0, [r3, #0]
 801fb16:	6859      	ldr	r1, [r3, #4]
 801fb18:	aa1a      	add	r2, sp, #104	@ 0x68
 801fb1a:	c203      	stmia	r2!, {r0, r1}
 801fb1c:	a818      	add	r0, sp, #96	@ 0x60
 801fb1e:	f7f8 fe1b 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fb22:	4621      	mov	r1, r4
 801fb24:	a81a      	add	r0, sp, #104	@ 0x68
 801fb26:	f7f8 fe3f 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fb2a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801fb2e:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 801fb32:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801fb36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801fb3a:	bfd7      	itett	le
 801fb3c:	b29a      	uxthle	r2, r3
 801fb3e:	2201      	movgt	r2, #1
 801fb40:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801fb44:	fb91 f2f2 	sdivle	r2, r1, r2
 801fb48:	9202      	str	r2, [sp, #8]
 801fb4a:	9802      	ldr	r0, [sp, #8]
 801fb4c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801fb50:	fb92 f0f0 	sdiv	r0, r2, r0
 801fb54:	b280      	uxth	r0, r0
 801fb56:	900f      	str	r0, [sp, #60]	@ 0x3c
 801fb58:	9902      	ldr	r1, [sp, #8]
 801fb5a:	9802      	ldr	r0, [sp, #8]
 801fb5c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801fb5e:	440c      	add	r4, r1
 801fb60:	fb05 2510 	mls	r5, r5, r0, r2
 801fb64:	fb15 f503 	smulbb	r5, r5, r3
 801fb68:	3c01      	subs	r4, #1
 801fb6a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801fb6e:	fb94 f4f1 	sdiv	r4, r4, r1
 801fb72:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801fb76:	440d      	add	r5, r1
 801fb78:	4419      	add	r1, r3
 801fb7a:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801fb7e:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801fb82:	441a      	add	r2, r3
 801fb84:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801fb88:	9306      	str	r3, [sp, #24]
 801fb8a:	4bb3      	ldr	r3, [pc, #716]	@ (801fe58 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801fb8c:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801fb90:	6818      	ldr	r0, [r3, #0]
 801fb92:	6803      	ldr	r3, [r0, #0]
 801fb94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fb96:	4798      	blx	r3
 801fb98:	4bb0      	ldr	r3, [pc, #704]	@ (801fe5c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801fb9a:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801fb9e:	881a      	ldrh	r2, [r3, #0]
 801fba0:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 801fba4:	9316      	str	r3, [sp, #88]	@ 0x58
 801fba6:	fb02 7101 	mla	r1, r2, r1, r7
 801fbaa:	3401      	adds	r4, #1
 801fbac:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 801fbb0:	b2a4      	uxth	r4, r4
 801fbb2:	4356      	muls	r6, r2
 801fbb4:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 801fbb8:	00a4      	lsls	r4, r4, #2
 801fbba:	920a      	str	r2, [sp, #40]	@ 0x28
 801fbbc:	1d22      	adds	r2, r4, #4
 801fbbe:	b2ad      	uxth	r5, r5
 801fbc0:	9213      	str	r2, [sp, #76]	@ 0x4c
 801fbc2:	4ba7      	ldr	r3, [pc, #668]	@ (801fe60 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 801fbc4:	9a06      	ldr	r2, [sp, #24]
 801fbc6:	2d00      	cmp	r5, #0
 801fbc8:	bf0c      	ite	eq
 801fbca:	4611      	moveq	r1, r2
 801fbcc:	2100      	movne	r1, #0
 801fbce:	2200      	movs	r2, #0
 801fbd0:	eba3 030b 	sub.w	r3, r3, fp
 801fbd4:	b289      	uxth	r1, r1
 801fbd6:	920d      	str	r2, [sp, #52]	@ 0x34
 801fbd8:	9317      	str	r3, [sp, #92]	@ 0x5c
 801fbda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fbdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fbde:	fa12 f383 	uxtah	r3, r2, r3
 801fbe2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fbe4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fbe8:	3304      	adds	r3, #4
 801fbea:	9308      	str	r3, [sp, #32]
 801fbec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fbee:	4543      	cmp	r3, r8
 801fbf0:	f240 8167 	bls.w	801fec2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d2>
 801fbf4:	9a02      	ldr	r2, [sp, #8]
 801fbf6:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801fbfa:	fbb5 f3f3 	udiv	r3, r5, r3
 801fbfe:	1ad3      	subs	r3, r2, r3
 801fc00:	b29b      	uxth	r3, r3
 801fc02:	9314      	str	r3, [sp, #80]	@ 0x50
 801fc04:	9b08      	ldr	r3, [sp, #32]
 801fc06:	9808      	ldr	r0, [sp, #32]
 801fc08:	785a      	ldrb	r2, [r3, #1]
 801fc0a:	789b      	ldrb	r3, [r3, #2]
 801fc0c:	7800      	ldrb	r0, [r0, #0]
 801fc0e:	9010      	str	r0, [sp, #64]	@ 0x40
 801fc10:	021b      	lsls	r3, r3, #8
 801fc12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fc16:	9a08      	ldr	r2, [sp, #32]
 801fc18:	78d2      	ldrb	r2, [r2, #3]
 801fc1a:	4313      	orrs	r3, r2
 801fc1c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fc1e:	3001      	adds	r0, #1
 801fc20:	441a      	add	r2, r3
 801fc22:	9007      	str	r0, [sp, #28]
 801fc24:	1c50      	adds	r0, r2, #1
 801fc26:	9005      	str	r0, [sp, #20]
 801fc28:	7852      	ldrb	r2, [r2, #1]
 801fc2a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fc2c:	0212      	lsls	r2, r2, #8
 801fc2e:	5cc3      	ldrb	r3, [r0, r3]
 801fc30:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801fc34:	431a      	orrs	r2, r3
 801fc36:	b293      	uxth	r3, r2
 801fc38:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fc3a:	2300      	movs	r3, #0
 801fc3c:	9309      	str	r3, [sp, #36]	@ 0x24
 801fc3e:	2301      	movs	r3, #1
 801fc40:	9301      	str	r3, [sp, #4]
 801fc42:	9304      	str	r3, [sp, #16]
 801fc44:	2300      	movs	r3, #0
 801fc46:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 801fc4a:	9303      	str	r3, [sp, #12]
 801fc4c:	f04f 0e01 	mov.w	lr, #1
 801fc50:	2d00      	cmp	r5, #0
 801fc52:	d07c      	beq.n	801fd4e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801fc54:	45ae      	cmp	lr, r5
 801fc56:	d26b      	bcs.n	801fd30 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 801fc58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fc5a:	eba5 050e 	sub.w	r5, r5, lr
 801fc5e:	4543      	cmp	r3, r8
 801fc60:	b2ad      	uxth	r5, r5
 801fc62:	460c      	mov	r4, r1
 801fc64:	d802      	bhi.n	801fc6c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 801fc66:	e070      	b.n	801fd4a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	d15c      	bne.n	801fd26 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801fc6c:	9b05      	ldr	r3, [sp, #20]
 801fc6e:	9a04      	ldr	r2, [sp, #16]
 801fc70:	785b      	ldrb	r3, [r3, #1]
 801fc72:	9904      	ldr	r1, [sp, #16]
 801fc74:	f1c2 0207 	rsb	r2, r2, #7
 801fc78:	4093      	lsls	r3, r2
 801fc7a:	005b      	lsls	r3, r3, #1
 801fc7c:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801fc80:	9b05      	ldr	r3, [sp, #20]
 801fc82:	781b      	ldrb	r3, [r3, #0]
 801fc84:	410b      	asrs	r3, r1
 801fc86:	3101      	adds	r1, #1
 801fc88:	b2c9      	uxtb	r1, r1
 801fc8a:	2908      	cmp	r1, #8
 801fc8c:	9104      	str	r1, [sp, #16]
 801fc8e:	9905      	ldr	r1, [sp, #20]
 801fc90:	bf0a      	itet	eq
 801fc92:	3102      	addeq	r1, #2
 801fc94:	3101      	addne	r1, #1
 801fc96:	9105      	streq	r1, [sp, #20]
 801fc98:	b2db      	uxtb	r3, r3
 801fc9a:	bf0a      	itet	eq
 801fc9c:	2100      	moveq	r1, #0
 801fc9e:	9105      	strne	r1, [sp, #20]
 801fca0:	9104      	streq	r1, [sp, #16]
 801fca2:	4313      	orrs	r3, r2
 801fca4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801fca6:	b29a      	uxth	r2, r3
 801fca8:	4291      	cmp	r1, r2
 801fcaa:	d30a      	bcc.n	801fcc2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801fcac:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 801fcb0:	2301      	movs	r3, #1
 801fcb2:	9907      	ldr	r1, [sp, #28]
 801fcb4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801fcb8:	d30f      	bcc.n	801fcda <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ea>
 801fcba:	2100      	movs	r1, #0
 801fcbc:	9301      	str	r3, [sp, #4]
 801fcbe:	9103      	str	r1, [sp, #12]
 801fcc0:	e032      	b.n	801fd28 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 801fcc2:	9b07      	ldr	r3, [sp, #28]
 801fcc4:	429a      	cmp	r2, r3
 801fcc6:	d318      	bcc.n	801fcfa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801fcc8:	9b01      	ldr	r3, [sp, #4]
 801fcca:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 801fcce:	445b      	add	r3, fp
 801fcd0:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801fcd4:	9b01      	ldr	r3, [sp, #4]
 801fcd6:	3301      	adds	r3, #1
 801fcd8:	b29b      	uxth	r3, r3
 801fcda:	9907      	ldr	r1, [sp, #28]
 801fcdc:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 801fce0:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801fce4:	7108      	strb	r0, [r1, #4]
 801fce6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801fce8:	80c8      	strh	r0, [r1, #6]
 801fcea:	9801      	ldr	r0, [sp, #4]
 801fcec:	3001      	adds	r0, #1
 801fcee:	7148      	strb	r0, [r1, #5]
 801fcf0:	9907      	ldr	r1, [sp, #28]
 801fcf2:	3101      	adds	r1, #1
 801fcf4:	b289      	uxth	r1, r1
 801fcf6:	9107      	str	r1, [sp, #28]
 801fcf8:	e7df      	b.n	801fcba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 801fcfa:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 801fcfe:	4611      	mov	r1, r2
 801fd00:	795b      	ldrb	r3, [r3, #5]
 801fd02:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 801fd06:	4458      	add	r0, fp
 801fd08:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 801fd0a:	4406      	add	r6, r0
 801fd0c:	2e00      	cmp	r6, #0
 801fd0e:	dd06      	ble.n	801fd1e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22e>
 801fd10:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801fd14:	790e      	ldrb	r6, [r1, #4]
 801fd16:	f800 6d01 	strb.w	r6, [r0, #-1]!
 801fd1a:	88c9      	ldrh	r1, [r1, #6]
 801fd1c:	e7f4      	b.n	801fd08 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x218>
 801fd1e:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 801fd22:	b29b      	uxth	r3, r3
 801fd24:	e7c5      	b.n	801fcb2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c2>
 801fd26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801fd28:	920b      	str	r2, [sp, #44]	@ 0x2c
 801fd2a:	4621      	mov	r1, r4
 801fd2c:	469e      	mov	lr, r3
 801fd2e:	e78f      	b.n	801fc50 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x160>
 801fd30:	9a03      	ldr	r2, [sp, #12]
 801fd32:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801fd36:	442a      	add	r2, r5
 801fd38:	ebae 0305 	sub.w	r3, lr, r5
 801fd3c:	b292      	uxth	r2, r2
 801fd3e:	b29b      	uxth	r3, r3
 801fd40:	9203      	str	r2, [sp, #12]
 801fd42:	2500      	movs	r5, #0
 801fd44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fd46:	4542      	cmp	r2, r8
 801fd48:	d88e      	bhi.n	801fc68 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 801fd4a:	4621      	mov	r1, r4
 801fd4c:	e74e      	b.n	801fbec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 801fd4e:	458e      	cmp	lr, r1
 801fd50:	bf29      	itett	cs
 801fd52:	ebae 0301 	subcs.w	r3, lr, r1
 801fd56:	eba1 040e 	subcc.w	r4, r1, lr
 801fd5a:	b29b      	uxthcs	r3, r3
 801fd5c:	910c      	strcs	r1, [sp, #48]	@ 0x30
 801fd5e:	bf2f      	iteee	cs
 801fd60:	462c      	movcs	r4, r5
 801fd62:	b2a4      	uxthcc	r4, r4
 801fd64:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 801fd68:	462b      	movcc	r3, r5
 801fd6a:	f04f 0900 	mov.w	r9, #0
 801fd6e:	9a03      	ldr	r2, [sp, #12]
 801fd70:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801fd72:	444a      	add	r2, r9
 801fd74:	4548      	cmp	r0, r9
 801fd76:	b292      	uxth	r2, r2
 801fd78:	d074      	beq.n	801fe64 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>
 801fd7a:	445a      	add	r2, fp
 801fd7c:	2004      	movs	r0, #4
 801fd7e:	4605      	mov	r5, r0
 801fd80:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801fd84:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801fd86:	fb15 0202 	smlabb	r2, r5, r2, r0
 801fd8a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fd8c:	5880      	ldr	r0, [r0, r2]
 801fd8e:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 801fd92:	d014      	beq.n	801fdbe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2ce>
 801fd94:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801fd98:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801fd9c:	d112      	bne.n	801fdc4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d4>
 801fd9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fda0:	2aff      	cmp	r2, #255	@ 0xff
 801fda2:	d10f      	bne.n	801fdc4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d4>
 801fda4:	0942      	lsrs	r2, r0, #5
 801fda6:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801fdaa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801fdae:	f025 0507 	bic.w	r5, r5, #7
 801fdb2:	4315      	orrs	r5, r2
 801fdb4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801fdb8:	4305      	orrs	r5, r0
 801fdba:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 801fdbe:	f109 0901 	add.w	r9, r9, #1
 801fdc2:	e7d4      	b.n	801fd6e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x27e>
 801fdc4:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 801fdc8:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801fdcc:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 801fdd0:	9215      	str	r2, [sp, #84]	@ 0x54
 801fdd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fdd4:	fb02 fa0a 	mul.w	sl, r2, sl
 801fdd8:	f10a 0201 	add.w	r2, sl, #1
 801fddc:	eb02 222a 	add.w	r2, r2, sl, asr #8
 801fde0:	ea4f 272c 	mov.w	r7, ip, asr #8
 801fde4:	1212      	asrs	r2, r2, #8
 801fde6:	fa1f fa82 	uxth.w	sl, r2
 801fdea:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801fdee:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801fdf2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fdf6:	43d2      	mvns	r2, r2
 801fdf8:	b2d2      	uxtb	r2, r2
 801fdfa:	fb16 f60a 	smulbb	r6, r6, sl
 801fdfe:	fa5f fc8c 	uxtb.w	ip, ip
 801fe02:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801fe06:	b2c0      	uxtb	r0, r0
 801fe08:	fb07 6702 	mla	r7, r7, r2, r6
 801fe0c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801fe10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801fe12:	fb10 f00a 	smulbb	r0, r0, sl
 801fe16:	fb0c 0002 	mla	r0, ip, r2, r0
 801fe1a:	b2ed      	uxtb	r5, r5
 801fe1c:	b2bf      	uxth	r7, r7
 801fe1e:	fb15 f50a 	smulbb	r5, r5, sl
 801fe22:	b280      	uxth	r0, r0
 801fe24:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801fe28:	fb06 5602 	mla	r6, r6, r2, r5
 801fe2c:	1c7a      	adds	r2, r7, #1
 801fe2e:	1c45      	adds	r5, r0, #1
 801fe30:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fe34:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801fe38:	b2b6      	uxth	r6, r6
 801fe3a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801fe3e:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801fe42:	432f      	orrs	r7, r5
 801fe44:	1c75      	adds	r5, r6, #1
 801fe46:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801fe4a:	096d      	lsrs	r5, r5, #5
 801fe4c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801fe50:	432f      	orrs	r7, r5
 801fe52:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 801fe56:	e7b2      	b.n	801fdbe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2ce>
 801fe58:	200126e0 	.word	0x200126e0
 801fe5c:	200126da 	.word	0x200126da
 801fe60:	fffff7fb 	.word	0xfffff7fb
 801fe64:	9203      	str	r2, [sp, #12]
 801fe66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fe68:	458e      	cmp	lr, r1
 801fe6a:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801fe6e:	f4ff af68 	bcc.w	801fd42 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 801fe72:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fe74:	9906      	ldr	r1, [sp, #24]
 801fe76:	8812      	ldrh	r2, [r2, #0]
 801fe78:	1a52      	subs	r2, r2, r1
 801fe7a:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801fe7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fe80:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801fe82:	3201      	adds	r2, #1
 801fe84:	428a      	cmp	r2, r1
 801fe86:	9209      	str	r2, [sp, #36]	@ 0x24
 801fe88:	d111      	bne.n	801feae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3be>
 801fe8a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801fe8e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 801fe92:	9b06      	ldr	r3, [sp, #24]
 801fe94:	eba5 0509 	sub.w	r5, r5, r9
 801fe98:	b2ad      	uxth	r5, r5
 801fe9a:	2d00      	cmp	r5, #0
 801fe9c:	bf08      	it	eq
 801fe9e:	4619      	moveq	r1, r3
 801fea0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fea2:	bf18      	it	ne
 801fea4:	2100      	movne	r1, #0
 801fea6:	3301      	adds	r3, #1
 801fea8:	930d      	str	r3, [sp, #52]	@ 0x34
 801feaa:	b289      	uxth	r1, r1
 801feac:	e695      	b.n	801fbda <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801feae:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801feb2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801feb6:	1b2d      	subs	r5, r5, r4
 801feb8:	b2ad      	uxth	r5, r5
 801feba:	2d00      	cmp	r5, #0
 801febc:	bf18      	it	ne
 801febe:	2400      	movne	r4, #0
 801fec0:	e740      	b.n	801fd44 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x254>
 801fec2:	4b04      	ldr	r3, [pc, #16]	@ (801fed4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>)
 801fec4:	6818      	ldr	r0, [r3, #0]
 801fec6:	6803      	ldr	r3, [r0, #0]
 801fec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801feca:	4798      	blx	r3
 801fecc:	b01d      	add	sp, #116	@ 0x74
 801fece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fed2:	bf00      	nop
 801fed4:	200126e0 	.word	0x200126e0

0801fed8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801fed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fedc:	b09f      	sub	sp, #124	@ 0x7c
 801fede:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 801fee2:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801fee6:	920a      	str	r2, [sp, #40]	@ 0x28
 801fee8:	461d      	mov	r5, r3
 801feea:	4604      	mov	r4, r0
 801feec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801feee:	2a00      	cmp	r2, #0
 801fef0:	f000 81fa 	beq.w	80202e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x410>
 801fef4:	6828      	ldr	r0, [r5, #0]
 801fef6:	6869      	ldr	r1, [r5, #4]
 801fef8:	aa1a      	add	r2, sp, #104	@ 0x68
 801fefa:	c203      	stmia	r2!, {r0, r1}
 801fefc:	6818      	ldr	r0, [r3, #0]
 801fefe:	6859      	ldr	r1, [r3, #4]
 801ff00:	aa1c      	add	r2, sp, #112	@ 0x70
 801ff02:	c203      	stmia	r2!, {r0, r1}
 801ff04:	a81a      	add	r0, sp, #104	@ 0x68
 801ff06:	f7f8 fc27 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ff0a:	4629      	mov	r1, r5
 801ff0c:	a81c      	add	r0, sp, #112	@ 0x70
 801ff0e:	f7f8 fc4b 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ff12:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801ff16:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801ff1a:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 801ff1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ff22:	bfd7      	itett	le
 801ff24:	b29a      	uxthle	r2, r3
 801ff26:	2201      	movgt	r2, #1
 801ff28:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801ff2c:	fb91 f2f2 	sdivle	r2, r1, r2
 801ff30:	9201      	str	r2, [sp, #4]
 801ff32:	9801      	ldr	r0, [sp, #4]
 801ff34:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 801ff38:	fb92 f0f0 	sdiv	r0, r2, r0
 801ff3c:	b280      	uxth	r0, r0
 801ff3e:	9010      	str	r0, [sp, #64]	@ 0x40
 801ff40:	9901      	ldr	r1, [sp, #4]
 801ff42:	9801      	ldr	r0, [sp, #4]
 801ff44:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801ff46:	440e      	add	r6, r1
 801ff48:	fb05 2510 	mls	r5, r5, r0, r2
 801ff4c:	fb15 f503 	smulbb	r5, r5, r3
 801ff50:	3e01      	subs	r6, #1
 801ff52:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801ff56:	fb96 f6f1 	sdiv	r6, r6, r1
 801ff5a:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 801ff5e:	440d      	add	r5, r1
 801ff60:	4419      	add	r1, r3
 801ff62:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 801ff66:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 801ff6a:	441a      	add	r2, r3
 801ff6c:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 801ff70:	9304      	str	r3, [sp, #16]
 801ff72:	4b96      	ldr	r3, [pc, #600]	@ (80201cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f4>)
 801ff74:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 801ff78:	6818      	ldr	r0, [r3, #0]
 801ff7a:	6803      	ldr	r3, [r0, #0]
 801ff7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ff7e:	4798      	blx	r3
 801ff80:	4b93      	ldr	r3, [pc, #588]	@ (80201d0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801ff82:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 801ff86:	881a      	ldrh	r2, [r3, #0]
 801ff88:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 801ff8c:	9318      	str	r3, [sp, #96]	@ 0x60
 801ff8e:	fb02 c101 	mla	r1, r2, r1, ip
 801ff92:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 801ff96:	4357      	muls	r7, r2
 801ff98:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 801ff9c:	3601      	adds	r6, #1
 801ff9e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ffa0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ffa2:	4b8c      	ldr	r3, [pc, #560]	@ (80201d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801ffa4:	b2b6      	uxth	r6, r6
 801ffa6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ffaa:	1d32      	adds	r2, r6, #4
 801ffac:	9206      	str	r2, [sp, #24]
 801ffae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ffb0:	43d2      	mvns	r2, r2
 801ffb2:	b2d2      	uxtb	r2, r2
 801ffb4:	b2ad      	uxth	r5, r5
 801ffb6:	9215      	str	r2, [sp, #84]	@ 0x54
 801ffb8:	9a04      	ldr	r2, [sp, #16]
 801ffba:	2d00      	cmp	r5, #0
 801ffbc:	bf0c      	ite	eq
 801ffbe:	4611      	moveq	r1, r2
 801ffc0:	2100      	movne	r1, #0
 801ffc2:	2200      	movs	r2, #0
 801ffc4:	1b1b      	subs	r3, r3, r4
 801ffc6:	b289      	uxth	r1, r1
 801ffc8:	920d      	str	r2, [sp, #52]	@ 0x34
 801ffca:	9319      	str	r3, [sp, #100]	@ 0x64
 801ffcc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ffce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ffd0:	fa12 f383 	uxtah	r3, r2, r3
 801ffd4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ffd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ffda:	3304      	adds	r3, #4
 801ffdc:	9307      	str	r3, [sp, #28]
 801ffde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ffe0:	455b      	cmp	r3, fp
 801ffe2:	f240 817c 	bls.w	80202de <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x406>
 801ffe6:	9a01      	ldr	r2, [sp, #4]
 801ffe8:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 801ffec:	fbb5 f3f3 	udiv	r3, r5, r3
 801fff0:	1ad3      	subs	r3, r2, r3
 801fff2:	b29b      	uxth	r3, r3
 801fff4:	9316      	str	r3, [sp, #88]	@ 0x58
 801fff6:	9b07      	ldr	r3, [sp, #28]
 801fff8:	9807      	ldr	r0, [sp, #28]
 801fffa:	785a      	ldrb	r2, [r3, #1]
 801fffc:	789b      	ldrb	r3, [r3, #2]
 801fffe:	7800      	ldrb	r0, [r0, #0]
 8020000:	9011      	str	r0, [sp, #68]	@ 0x44
 8020002:	021b      	lsls	r3, r3, #8
 8020004:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020008:	9a07      	ldr	r2, [sp, #28]
 802000a:	78d2      	ldrb	r2, [r2, #3]
 802000c:	4313      	orrs	r3, r2
 802000e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020010:	3001      	adds	r0, #1
 8020012:	441a      	add	r2, r3
 8020014:	9005      	str	r0, [sp, #20]
 8020016:	1c50      	adds	r0, r2, #1
 8020018:	9003      	str	r0, [sp, #12]
 802001a:	7852      	ldrb	r2, [r2, #1]
 802001c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802001e:	0212      	lsls	r2, r2, #8
 8020020:	5cc3      	ldrb	r3, [r0, r3]
 8020022:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8020026:	431a      	orrs	r2, r3
 8020028:	b293      	uxth	r3, r2
 802002a:	930c      	str	r3, [sp, #48]	@ 0x30
 802002c:	2300      	movs	r3, #0
 802002e:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8020032:	9308      	str	r3, [sp, #32]
 8020034:	461a      	mov	r2, r3
 8020036:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802003a:	930e      	str	r3, [sp, #56]	@ 0x38
 802003c:	f04f 0801 	mov.w	r8, #1
 8020040:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8020044:	f8cd 8008 	str.w	r8, [sp, #8]
 8020048:	46c4      	mov	ip, r8
 802004a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802004c:	2d00      	cmp	r5, #0
 802004e:	d07c      	beq.n	802014a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 8020050:	45ac      	cmp	ip, r5
 8020052:	d26c      	bcs.n	802012e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 8020054:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020056:	eba5 050c 	sub.w	r5, r5, ip
 802005a:	455b      	cmp	r3, fp
 802005c:	b2ad      	uxth	r5, r5
 802005e:	4608      	mov	r0, r1
 8020060:	d802      	bhi.n	8020068 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 8020062:	e070      	b.n	8020146 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26e>
 8020064:	2b00      	cmp	r3, #0
 8020066:	d15c      	bne.n	8020122 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 8020068:	9b03      	ldr	r3, [sp, #12]
 802006a:	9a02      	ldr	r2, [sp, #8]
 802006c:	785b      	ldrb	r3, [r3, #1]
 802006e:	9902      	ldr	r1, [sp, #8]
 8020070:	f1c2 0207 	rsb	r2, r2, #7
 8020074:	4093      	lsls	r3, r2
 8020076:	005b      	lsls	r3, r3, #1
 8020078:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 802007c:	9b03      	ldr	r3, [sp, #12]
 802007e:	781b      	ldrb	r3, [r3, #0]
 8020080:	410b      	asrs	r3, r1
 8020082:	3101      	adds	r1, #1
 8020084:	b2c9      	uxtb	r1, r1
 8020086:	2908      	cmp	r1, #8
 8020088:	9102      	str	r1, [sp, #8]
 802008a:	9903      	ldr	r1, [sp, #12]
 802008c:	bf0a      	itet	eq
 802008e:	3102      	addeq	r1, #2
 8020090:	3101      	addne	r1, #1
 8020092:	9103      	streq	r1, [sp, #12]
 8020094:	b2db      	uxtb	r3, r3
 8020096:	bf0a      	itet	eq
 8020098:	2100      	moveq	r1, #0
 802009a:	9103      	strne	r1, [sp, #12]
 802009c:	9102      	streq	r1, [sp, #8]
 802009e:	4313      	orrs	r3, r2
 80200a0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80200a2:	b29a      	uxth	r2, r3
 80200a4:	4291      	cmp	r1, r2
 80200a6:	d30a      	bcc.n	80200be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e6>
 80200a8:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 80200ac:	2301      	movs	r3, #1
 80200ae:	9905      	ldr	r1, [sp, #20]
 80200b0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80200b4:	d30f      	bcc.n	80200d6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1fe>
 80200b6:	2100      	movs	r1, #0
 80200b8:	4698      	mov	r8, r3
 80200ba:	9100      	str	r1, [sp, #0]
 80200bc:	e032      	b.n	8020124 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24c>
 80200be:	9b05      	ldr	r3, [sp, #20]
 80200c0:	429a      	cmp	r2, r3
 80200c2:	d318      	bcc.n	80200f6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 80200c4:	eb04 0308 	add.w	r3, r4, r8
 80200c8:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 80200cc:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 80200d0:	f108 0301 	add.w	r3, r8, #1
 80200d4:	b29b      	uxth	r3, r3
 80200d6:	9905      	ldr	r1, [sp, #20]
 80200d8:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 80200dc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80200e0:	710e      	strb	r6, [r1, #4]
 80200e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80200e4:	80ce      	strh	r6, [r1, #6]
 80200e6:	f108 0601 	add.w	r6, r8, #1
 80200ea:	714e      	strb	r6, [r1, #5]
 80200ec:	9905      	ldr	r1, [sp, #20]
 80200ee:	3101      	adds	r1, #1
 80200f0:	b289      	uxth	r1, r1
 80200f2:	9105      	str	r1, [sp, #20]
 80200f4:	e7df      	b.n	80200b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1de>
 80200f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80200fa:	4611      	mov	r1, r2
 80200fc:	795b      	ldrb	r3, [r3, #5]
 80200fe:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8020102:	4426      	add	r6, r4
 8020104:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8020106:	4437      	add	r7, r6
 8020108:	2f00      	cmp	r7, #0
 802010a:	dd06      	ble.n	802011a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x242>
 802010c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8020110:	790f      	ldrb	r7, [r1, #4]
 8020112:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020116:	88c9      	ldrh	r1, [r1, #6]
 8020118:	e7f4      	b.n	8020104 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22c>
 802011a:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 802011e:	b29b      	uxth	r3, r3
 8020120:	e7c5      	b.n	80200ae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8020122:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020124:	920c      	str	r2, [sp, #48]	@ 0x30
 8020126:	4601      	mov	r1, r0
 8020128:	9a00      	ldr	r2, [sp, #0]
 802012a:	469c      	mov	ip, r3
 802012c:	e78e      	b.n	802004c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 802012e:	1957      	adds	r7, r2, r5
 8020130:	ebac 0305 	sub.w	r3, ip, r5
 8020134:	b2ba      	uxth	r2, r7
 8020136:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 802013a:	9200      	str	r2, [sp, #0]
 802013c:	b29b      	uxth	r3, r3
 802013e:	2500      	movs	r5, #0
 8020140:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020142:	455a      	cmp	r2, fp
 8020144:	d88e      	bhi.n	8020064 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18c>
 8020146:	4601      	mov	r1, r0
 8020148:	e749      	b.n	801ffde <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x106>
 802014a:	458c      	cmp	ip, r1
 802014c:	bf2c      	ite	cs
 802014e:	4628      	movcs	r0, r5
 8020150:	462b      	movcc	r3, r5
 8020152:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8020154:	bf27      	ittee	cs
 8020156:	9109      	strcs	r1, [sp, #36]	@ 0x24
 8020158:	ebac 0301 	subcs.w	r3, ip, r1
 802015c:	eba1 000c 	subcc.w	r0, r1, ip
 8020160:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 8020164:	bf2c      	ite	cs
 8020166:	b29b      	uxthcs	r3, r3
 8020168:	b280      	uxthcc	r0, r0
 802016a:	2dff      	cmp	r5, #255	@ 0xff
 802016c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802016e:	eb02 0705 	add.w	r7, r2, r5
 8020172:	b2bd      	uxth	r5, r7
 8020174:	9500      	str	r5, [sp, #0]
 8020176:	d12f      	bne.n	80201d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>
 8020178:	465e      	mov	r6, fp
 802017a:	9d00      	ldr	r5, [sp, #0]
 802017c:	42aa      	cmp	r2, r5
 802017e:	f040 8084 	bne.w	802028a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3b2>
 8020182:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020184:	458c      	cmp	ip, r1
 8020186:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 802018a:	d3d8      	bcc.n	802013e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x266>
 802018c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802018e:	9904      	ldr	r1, [sp, #16]
 8020190:	8812      	ldrh	r2, [r2, #0]
 8020192:	1a52      	subs	r2, r2, r1
 8020194:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8020198:	9a08      	ldr	r2, [sp, #32]
 802019a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 802019c:	3201      	adds	r2, #1
 802019e:	428a      	cmp	r2, r1
 80201a0:	9208      	str	r2, [sp, #32]
 80201a2:	f040 8092 	bne.w	80202ca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f2>
 80201a6:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 80201aa:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 80201ae:	9b04      	ldr	r3, [sp, #16]
 80201b0:	eba5 050c 	sub.w	r5, r5, ip
 80201b4:	b2ad      	uxth	r5, r5
 80201b6:	2d00      	cmp	r5, #0
 80201b8:	bf08      	it	eq
 80201ba:	4619      	moveq	r1, r3
 80201bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80201be:	bf18      	it	ne
 80201c0:	2100      	movne	r1, #0
 80201c2:	3301      	adds	r3, #1
 80201c4:	930d      	str	r3, [sp, #52]	@ 0x34
 80201c6:	b289      	uxth	r1, r1
 80201c8:	e700      	b.n	801ffcc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 80201ca:	bf00      	nop
 80201cc:	200126e0 	.word	0x200126e0
 80201d0:	200126da 	.word	0x200126da
 80201d4:	fffff7fb 	.word	0xfffff7fb
 80201d8:	46d9      	mov	r9, fp
 80201da:	9d00      	ldr	r5, [sp, #0]
 80201dc:	42aa      	cmp	r2, r5
 80201de:	d0d0      	beq.n	8020182 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2aa>
 80201e0:	1c55      	adds	r5, r2, #1
 80201e2:	4422      	add	r2, r4
 80201e4:	9517      	str	r5, [sp, #92]	@ 0x5c
 80201e6:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 80201ea:	9a06      	ldr	r2, [sp, #24]
 80201ec:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80201f0:	4472      	add	r2, lr
 80201f2:	9212      	str	r2, [sp, #72]	@ 0x48
 80201f4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80201f6:	f8b9 2000 	ldrh.w	r2, [r9]
 80201fa:	f897 a002 	ldrb.w	sl, [r7, #2]
 80201fe:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8020200:	1216      	asrs	r6, r2, #8
 8020202:	fb1a fa07 	smulbb	sl, sl, r7
 8020206:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 802020a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 802020c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020210:	fb06 a607 	mla	r6, r6, r7, sl
 8020214:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8020216:	f897 a001 	ldrb.w	sl, [r7, #1]
 802021a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 802021c:	10d5      	asrs	r5, r2, #3
 802021e:	fb1a fa07 	smulbb	sl, sl, r7
 8020222:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8020226:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8020228:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802022c:	fb05 a507 	mla	r5, r5, r7, sl
 8020230:	9f06      	ldr	r7, [sp, #24]
 8020232:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020236:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8020238:	00d2      	lsls	r2, r2, #3
 802023a:	fb1e fe07 	smulbb	lr, lr, r7
 802023e:	b2d2      	uxtb	r2, r2
 8020240:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8020242:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020246:	b2b6      	uxth	r6, r6
 8020248:	fb02 e207 	mla	r2, r2, r7, lr
 802024c:	b292      	uxth	r2, r2
 802024e:	b2ad      	uxth	r5, r5
 8020250:	f106 0a01 	add.w	sl, r6, #1
 8020254:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8020258:	f102 0e01 	add.w	lr, r2, #1
 802025c:	f105 0a01 	add.w	sl, r5, #1
 8020260:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 8020264:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020268:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 802026c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020270:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020274:	ea4e 0606 	orr.w	r6, lr, r6
 8020278:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802027c:	ea46 060a 	orr.w	r6, r6, sl
 8020280:	f829 6b02 	strh.w	r6, [r9], #2
 8020284:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8020288:	e7a7      	b.n	80201da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x302>
 802028a:	f102 0e01 	add.w	lr, r2, #1
 802028e:	4422      	add	r2, r4
 8020290:	9f06      	ldr	r7, [sp, #24]
 8020292:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 8020296:	9a06      	ldr	r2, [sp, #24]
 8020298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802029c:	eb02 0a05 	add.w	sl, r2, r5
 80202a0:	4a13      	ldr	r2, [pc, #76]	@ (80202f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>)
 80202a2:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80202a6:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 80202aa:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80202ae:	00d2      	lsls	r2, r2, #3
 80202b0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80202b4:	ea49 0202 	orr.w	r2, r9, r2
 80202b8:	f817 9005 	ldrb.w	r9, [r7, r5]
 80202bc:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 80202c0:	f826 2b02 	strh.w	r2, [r6], #2
 80202c4:	fa1f f28e 	uxth.w	r2, lr
 80202c8:	e757      	b.n	802017a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a2>
 80202ca:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80202ce:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 80202d2:	1a2d      	subs	r5, r5, r0
 80202d4:	b2ad      	uxth	r5, r5
 80202d6:	2d00      	cmp	r5, #0
 80202d8:	bf18      	it	ne
 80202da:	2000      	movne	r0, #0
 80202dc:	e730      	b.n	8020140 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 80202de:	4b05      	ldr	r3, [pc, #20]	@ (80202f4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x41c>)
 80202e0:	6818      	ldr	r0, [r3, #0]
 80202e2:	6803      	ldr	r3, [r0, #0]
 80202e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80202e6:	4798      	blx	r3
 80202e8:	b01f      	add	sp, #124	@ 0x7c
 80202ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202ee:	bf00      	nop
 80202f0:	fffff800 	.word	0xfffff800
 80202f4:	200126e0 	.word	0x200126e0

080202f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80202f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202fc:	b091      	sub	sp, #68	@ 0x44
 80202fe:	469b      	mov	fp, r3
 8020300:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8020304:	4616      	mov	r6, r2
 8020306:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 802030a:	f9b3 2000 	ldrsh.w	r2, [r3]
 802030e:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8020312:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020316:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 802031a:	4604      	mov	r4, r0
 802031c:	460d      	mov	r5, r1
 802031e:	4640      	mov	r0, r8
 8020320:	4659      	mov	r1, fp
 8020322:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8020326:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 802032a:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 802032e:	f7f2 fdaf 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 8020332:	4631      	mov	r1, r6
 8020334:	4640      	mov	r0, r8
 8020336:	f7f2 fdab 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 802033a:	4b74      	ldr	r3, [pc, #464]	@ (802050c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 802033c:	8818      	ldrh	r0, [r3, #0]
 802033e:	4b74      	ldr	r3, [pc, #464]	@ (8020510 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8020340:	8819      	ldrh	r1, [r3, #0]
 8020342:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8020346:	2b00      	cmp	r3, #0
 8020348:	b202      	sxth	r2, r0
 802034a:	b20e      	sxth	r6, r1
 802034c:	da07      	bge.n	802035e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 802034e:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8020352:	4463      	add	r3, ip
 8020354:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8020358:	2300      	movs	r3, #0
 802035a:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 802035e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8020362:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8020366:	1ad2      	subs	r2, r2, r3
 8020368:	4594      	cmp	ip, r2
 802036a:	bfc4      	itt	gt
 802036c:	1ac2      	subgt	r2, r0, r3
 802036e:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 8020372:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8020376:	2a00      	cmp	r2, #0
 8020378:	da07      	bge.n	802038a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 802037a:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 802037e:	4462      	add	r2, ip
 8020380:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8020384:	2200      	movs	r2, #0
 8020386:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 802038a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 802038e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8020392:	eba6 060a 	sub.w	r6, r6, sl
 8020396:	42b2      	cmp	r2, r6
 8020398:	bfc4      	itt	gt
 802039a:	eba1 020a 	subgt.w	r2, r1, sl
 802039e:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 80203a2:	4a5c      	ldr	r2, [pc, #368]	@ (8020514 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 80203a4:	7812      	ldrb	r2, [r2, #0]
 80203a6:	b9a2      	cbnz	r2, 80203d2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 80203a8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 80203ac:	4286      	cmp	r6, r0
 80203ae:	4640      	mov	r0, r8
 80203b0:	9303      	str	r3, [sp, #12]
 80203b2:	bf14      	ite	ne
 80203b4:	2600      	movne	r6, #0
 80203b6:	2601      	moveq	r6, #1
 80203b8:	f7f2 fdad 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 80203bc:	9b03      	ldr	r3, [sp, #12]
 80203be:	b160      	cbz	r0, 80203da <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 80203c0:	2300      	movs	r3, #0
 80203c2:	8023      	strh	r3, [r4, #0]
 80203c4:	8063      	strh	r3, [r4, #2]
 80203c6:	80a3      	strh	r3, [r4, #4]
 80203c8:	4620      	mov	r0, r4
 80203ca:	80e3      	strh	r3, [r4, #6]
 80203cc:	b011      	add	sp, #68	@ 0x44
 80203ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203d2:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 80203d6:	428e      	cmp	r6, r1
 80203d8:	e7e9      	b.n	80203ae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 80203da:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80203de:	9205      	str	r2, [sp, #20]
 80203e0:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 80203e4:	9206      	str	r2, [sp, #24]
 80203e6:	f8bb 2000 	ldrh.w	r2, [fp]
 80203ea:	900e      	str	r0, [sp, #56]	@ 0x38
 80203ec:	1a9b      	subs	r3, r3, r2
 80203ee:	b21b      	sxth	r3, r3
 80203f0:	9303      	str	r3, [sp, #12]
 80203f2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80203f6:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 80203fa:	ebaa 0a03 	sub.w	sl, sl, r3
 80203fe:	fa0f f38a 	sxth.w	r3, sl
 8020402:	9304      	str	r3, [sp, #16]
 8020404:	9b03      	ldr	r3, [sp, #12]
 8020406:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 802040a:	9b04      	ldr	r3, [sp, #16]
 802040c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8020410:	9b05      	ldr	r3, [sp, #20]
 8020412:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8020416:	a90e      	add	r1, sp, #56	@ 0x38
 8020418:	9b06      	ldr	r3, [sp, #24]
 802041a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 802041e:	a80c      	add	r0, sp, #48	@ 0x30
 8020420:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 8020424:	f7f8 f9c0 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020428:	4640      	mov	r0, r8
 802042a:	f7f8 f995 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802042e:	a80e      	add	r0, sp, #56	@ 0x38
 8020430:	f7f8 f992 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020434:	4b38      	ldr	r3, [pc, #224]	@ (8020518 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8020436:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 802043a:	881b      	ldrh	r3, [r3, #0]
 802043c:	9307      	str	r3, [sp, #28]
 802043e:	682b      	ldr	r3, [r5, #0]
 8020440:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 802051c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8020444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020446:	4628      	mov	r0, r5
 8020448:	4798      	blx	r3
 802044a:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 802044e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8020452:	4681      	mov	r9, r0
 8020454:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8020458:	f8db 0000 	ldr.w	r0, [fp]
 802045c:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 802045e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020462:	6803      	ldr	r3, [r0, #0]
 8020464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020466:	4798      	blx	r3
 8020468:	4607      	mov	r7, r0
 802046a:	f8db 0000 	ldr.w	r0, [fp]
 802046e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8020472:	6803      	ldr	r3, [r0, #0]
 8020474:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8020478:	9109      	str	r1, [sp, #36]	@ 0x24
 802047a:	9208      	str	r2, [sp, #32]
 802047c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802047e:	4798      	blx	r3
 8020480:	f010 0f01 	tst.w	r0, #1
 8020484:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020488:	d012      	beq.n	80204b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 802048a:	f8db 0000 	ldr.w	r0, [fp]
 802048e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8020492:	6803      	ldr	r3, [r0, #0]
 8020494:	9200      	str	r2, [sp, #0]
 8020496:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8020498:	e898 0006 	ldmia.w	r8, {r1, r2}
 802049c:	462b      	mov	r3, r5
 802049e:	47b0      	blx	r6
 80204a0:	9b03      	ldr	r3, [sp, #12]
 80204a2:	8023      	strh	r3, [r4, #0]
 80204a4:	9b04      	ldr	r3, [sp, #16]
 80204a6:	8063      	strh	r3, [r4, #2]
 80204a8:	9b05      	ldr	r3, [sp, #20]
 80204aa:	80a3      	strh	r3, [r4, #4]
 80204ac:	9b06      	ldr	r3, [sp, #24]
 80204ae:	e78b      	b.n	80203c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 80204b0:	fb09 f202 	mul.w	r2, r9, r2
 80204b4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80204b8:	440f      	add	r7, r1
 80204ba:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 80204be:	b166      	cbz	r6, 80204da <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 80204c0:	9a07      	ldr	r2, [sp, #28]
 80204c2:	4592      	cmp	sl, r2
 80204c4:	d109      	bne.n	80204da <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 80204c6:	f8db 0000 	ldr.w	r0, [fp]
 80204ca:	6802      	ldr	r2, [r0, #0]
 80204cc:	fb09 f303 	mul.w	r3, r9, r3
 80204d0:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 80204d2:	4629      	mov	r1, r5
 80204d4:	463a      	mov	r2, r7
 80204d6:	47b0      	blx	r6
 80204d8:	e7e2      	b.n	80204a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 80204da:	fb0a f303 	mul.w	r3, sl, r3
 80204de:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 802051c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 80204e2:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 80204e6:	ea4f 064a 	mov.w	r6, sl, lsl #1
 80204ea:	4545      	cmp	r5, r8
 80204ec:	d2d8      	bcs.n	80204a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 80204ee:	f8db 0000 	ldr.w	r0, [fp]
 80204f2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80204f6:	6802      	ldr	r2, [r0, #0]
 80204f8:	4629      	mov	r1, r5
 80204fa:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 80204fe:	005b      	lsls	r3, r3, #1
 8020500:	463a      	mov	r2, r7
 8020502:	47d0      	blx	sl
 8020504:	444f      	add	r7, r9
 8020506:	4435      	add	r5, r6
 8020508:	e7ef      	b.n	80204ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 802050a:	bf00      	nop
 802050c:	200126d4 	.word	0x200126d4
 8020510:	200126d6 	.word	0x200126d6
 8020514:	200126d8 	.word	0x200126d8
 8020518:	200126da 	.word	0x200126da
 802051c:	200126e0 	.word	0x200126e0

08020520 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020522:	4606      	mov	r6, r0
 8020524:	b087      	sub	sp, #28
 8020526:	460c      	mov	r4, r1
 8020528:	4617      	mov	r7, r2
 802052a:	461d      	mov	r5, r3
 802052c:	b333      	cbz	r3, 802057c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802052e:	4608      	mov	r0, r1
 8020530:	f7f2 fcf1 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020534:	bb10      	cbnz	r0, 802057c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020536:	6820      	ldr	r0, [r4, #0]
 8020538:	6861      	ldr	r1, [r4, #4]
 802053a:	4c1c      	ldr	r4, [pc, #112]	@ (80205ac <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 802053c:	ab04      	add	r3, sp, #16
 802053e:	c303      	stmia	r3!, {r0, r1}
 8020540:	a804      	add	r0, sp, #16
 8020542:	f7f8 f909 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020546:	6820      	ldr	r0, [r4, #0]
 8020548:	6803      	ldr	r3, [r0, #0]
 802054a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802054c:	4798      	blx	r3
 802054e:	2dff      	cmp	r5, #255	@ 0xff
 8020550:	d016      	beq.n	8020580 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8020552:	f010 0f08 	tst.w	r0, #8
 8020556:	6820      	ldr	r0, [r4, #0]
 8020558:	d015      	beq.n	8020586 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 802055a:	2400      	movs	r4, #0
 802055c:	6801      	ldr	r1, [r0, #0]
 802055e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020562:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020566:	e9cd 5402 	strd	r5, r4, [sp, #8]
 802056a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802056e:	9401      	str	r4, [sp, #4]
 8020570:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020574:	9400      	str	r4, [sp, #0]
 8020576:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8020578:	4639      	mov	r1, r7
 802057a:	47a0      	blx	r4
 802057c:	b007      	add	sp, #28
 802057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020580:	f010 0f02 	tst.w	r0, #2
 8020584:	e7e7      	b.n	8020556 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8020586:	6803      	ldr	r3, [r0, #0]
 8020588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802058a:	4798      	blx	r3
 802058c:	4b08      	ldr	r3, [pc, #32]	@ (80205b0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 802058e:	881a      	ldrh	r2, [r3, #0]
 8020590:	6833      	ldr	r3, [r6, #0]
 8020592:	e9cd 7500 	strd	r7, r5, [sp]
 8020596:	4601      	mov	r1, r0
 8020598:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 802059a:	4630      	mov	r0, r6
 802059c:	ab04      	add	r3, sp, #16
 802059e:	47a8      	blx	r5
 80205a0:	6820      	ldr	r0, [r4, #0]
 80205a2:	6803      	ldr	r3, [r0, #0]
 80205a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80205a6:	4798      	blx	r3
 80205a8:	e7e8      	b.n	802057c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80205aa:	bf00      	nop
 80205ac:	200126e0 	.word	0x200126e0
 80205b0:	200126da 	.word	0x200126da

080205b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80205b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80205b8:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 80205bc:	9e08      	ldr	r6, [sp, #32]
 80205be:	4688      	mov	r8, r1
 80205c0:	4614      	mov	r4, r2
 80205c2:	461d      	mov	r5, r3
 80205c4:	2f00      	cmp	r7, #0
 80205c6:	f000 80a9 	beq.w	802071c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80205ca:	4618      	mov	r0, r3
 80205cc:	f7f2 fca3 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 80205d0:	2800      	cmp	r0, #0
 80205d2:	f040 80a3 	bne.w	802071c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80205d6:	f9b5 1000 	ldrsh.w	r1, [r5]
 80205da:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80205de:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80205e2:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 80205e6:	fb04 1303 	mla	r3, r4, r3, r1
 80205ea:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 80205ee:	4365      	muls	r5, r4
 80205f0:	2fff      	cmp	r7, #255	@ 0xff
 80205f2:	eba4 0200 	sub.w	r2, r4, r0
 80205f6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80205fa:	ea4f 2816 	mov.w	r8, r6, lsr #8
 80205fe:	d04a      	beq.n	8020696 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8020600:	b2bc      	uxth	r4, r7
 8020602:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8020606:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 802060a:	fa5f f788 	uxtb.w	r7, r8
 802060e:	b2f3      	uxtb	r3, r6
 8020610:	0040      	lsls	r0, r0, #1
 8020612:	fb0e fe04 	mul.w	lr, lr, r4
 8020616:	4367      	muls	r7, r4
 8020618:	4363      	muls	r3, r4
 802061a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 802061e:	fa1f fc8c 	uxth.w	ip, ip
 8020622:	42a9      	cmp	r1, r5
 8020624:	d27a      	bcs.n	802071c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020626:	eb01 0900 	add.w	r9, r1, r0
 802062a:	4549      	cmp	r1, r9
 802062c:	d231      	bcs.n	8020692 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 802062e:	880a      	ldrh	r2, [r1, #0]
 8020630:	1214      	asrs	r4, r2, #8
 8020632:	10d6      	asrs	r6, r2, #3
 8020634:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8020638:	00d2      	lsls	r2, r2, #3
 802063a:	b2d2      	uxtb	r2, r2
 802063c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020640:	fb14 f40c 	smulbb	r4, r4, ip
 8020644:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020648:	4474      	add	r4, lr
 802064a:	fb12 f20c 	smulbb	r2, r2, ip
 802064e:	b2a4      	uxth	r4, r4
 8020650:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8020654:	441a      	add	r2, r3
 8020656:	b292      	uxth	r2, r2
 8020658:	f104 0a01 	add.w	sl, r4, #1
 802065c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8020660:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8020664:	fb16 f60c 	smulbb	r6, r6, ip
 8020668:	f102 0a01 	add.w	sl, r2, #1
 802066c:	443e      	add	r6, r7
 802066e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8020672:	b2b6      	uxth	r6, r6
 8020674:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8020678:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802067c:	4322      	orrs	r2, r4
 802067e:	1c74      	adds	r4, r6, #1
 8020680:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8020684:	0976      	lsrs	r6, r6, #5
 8020686:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 802068a:	4332      	orrs	r2, r6
 802068c:	f821 2b02 	strh.w	r2, [r1], #2
 8020690:	e7cb      	b.n	802062a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8020692:	4441      	add	r1, r8
 8020694:	e7c5      	b.n	8020622 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8020696:	4f22      	ldr	r7, [pc, #136]	@ (8020720 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8020698:	0973      	lsrs	r3, r6, #5
 802069a:	ea08 0707 	and.w	r7, r8, r7
 802069e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80206a2:	433b      	orrs	r3, r7
 80206a4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80206a8:	4333      	orrs	r3, r6
 80206aa:	07e7      	lsls	r7, r4, #31
 80206ac:	b29b      	uxth	r3, r3
 80206ae:	d50b      	bpl.n	80206c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 80206b0:	0040      	lsls	r0, r0, #1
 80206b2:	0052      	lsls	r2, r2, #1
 80206b4:	42a9      	cmp	r1, r5
 80206b6:	d231      	bcs.n	802071c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80206b8:	180c      	adds	r4, r1, r0
 80206ba:	42a1      	cmp	r1, r4
 80206bc:	d202      	bcs.n	80206c4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 80206be:	f821 3b02 	strh.w	r3, [r1], #2
 80206c2:	e7fa      	b.n	80206ba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 80206c4:	4411      	add	r1, r2
 80206c6:	e7f5      	b.n	80206b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 80206c8:	078e      	lsls	r6, r1, #30
 80206ca:	d008      	beq.n	80206de <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 80206cc:	0066      	lsls	r6, r4, #1
 80206ce:	460a      	mov	r2, r1
 80206d0:	42aa      	cmp	r2, r5
 80206d2:	d202      	bcs.n	80206da <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 80206d4:	8013      	strh	r3, [r2, #0]
 80206d6:	4432      	add	r2, r6
 80206d8:	e7fa      	b.n	80206d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 80206da:	3102      	adds	r1, #2
 80206dc:	3801      	subs	r0, #1
 80206de:	07c2      	lsls	r2, r0, #31
 80206e0:	d50b      	bpl.n	80206fa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 80206e2:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 80206e6:	3a01      	subs	r2, #1
 80206e8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80206ec:	0066      	lsls	r6, r4, #1
 80206ee:	42aa      	cmp	r2, r5
 80206f0:	d202      	bcs.n	80206f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 80206f2:	8013      	strh	r3, [r2, #0]
 80206f4:	4432      	add	r2, r6
 80206f6:	e7fa      	b.n	80206ee <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 80206f8:	3801      	subs	r0, #1
 80206fa:	b178      	cbz	r0, 802071c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80206fc:	1040      	asrs	r0, r0, #1
 80206fe:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8020702:	0080      	lsls	r0, r0, #2
 8020704:	0064      	lsls	r4, r4, #1
 8020706:	42a9      	cmp	r1, r5
 8020708:	d208      	bcs.n	802071c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 802070a:	180e      	adds	r6, r1, r0
 802070c:	460a      	mov	r2, r1
 802070e:	42b2      	cmp	r2, r6
 8020710:	d202      	bcs.n	8020718 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8020712:	f842 3b04 	str.w	r3, [r2], #4
 8020716:	e7fa      	b.n	802070e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8020718:	4421      	add	r1, r4
 802071a:	e7f4      	b.n	8020706 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 802071c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020720:	00fff800 	.word	0x00fff800

08020724 <_ZN8touchgfx8LCD16bppC1Ev>:
 8020724:	2200      	movs	r2, #0
 8020726:	4912      	ldr	r1, [pc, #72]	@ (8020770 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8020728:	6001      	str	r1, [r0, #0]
 802072a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 802072e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8020732:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8020736:	e9c0 2207 	strd	r2, r2, [r0, #28]
 802073a:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 802073e:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8020742:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8020746:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 802074a:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 802074e:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8020752:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8020756:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 802075a:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 802075e:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8020762:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8020766:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 802076a:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
 802076e:	4770      	bx	lr
 8020770:	0802edb4 	.word	0x0802edb4

08020774 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020778:	460d      	mov	r5, r1
 802077a:	b08d      	sub	sp, #52	@ 0x34
 802077c:	4604      	mov	r4, r0
 802077e:	6808      	ldr	r0, [r1, #0]
 8020780:	6849      	ldr	r1, [r1, #4]
 8020782:	4699      	mov	r9, r3
 8020784:	ab08      	add	r3, sp, #32
 8020786:	c303      	stmia	r3!, {r0, r1}
 8020788:	6810      	ldr	r0, [r2, #0]
 802078a:	6851      	ldr	r1, [r2, #4]
 802078c:	ab0a      	add	r3, sp, #40	@ 0x28
 802078e:	c303      	stmia	r3!, {r0, r1}
 8020790:	a808      	add	r0, sp, #32
 8020792:	f7f7 ffe1 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020796:	4629      	mov	r1, r5
 8020798:	a80a      	add	r0, sp, #40	@ 0x28
 802079a:	f7f8 f805 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802079e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 80207a2:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 80207a6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80207aa:	4d63      	ldr	r5, [pc, #396]	@ (8020938 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80207ac:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 80207b0:	6828      	ldr	r0, [r5, #0]
 80207b2:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 80207b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80207ba:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80207be:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80207c2:	440a      	add	r2, r1
 80207c4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80207c8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 80207cc:	4413      	add	r3, r2
 80207ce:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80207d2:	6803      	ldr	r3, [r0, #0]
 80207d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80207d6:	4798      	blx	r3
 80207d8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80207dc:	d119      	bne.n	8020812 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80207de:	f010 0f20 	tst.w	r0, #32
 80207e2:	6828      	ldr	r0, [r5, #0]
 80207e4:	d018      	beq.n	8020818 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80207e6:	2500      	movs	r5, #0
 80207e8:	6801      	ldr	r1, [r0, #0]
 80207ea:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80207ee:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 80207f2:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80207f6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 80207fa:	9502      	str	r5, [sp, #8]
 80207fc:	b2b6      	uxth	r6, r6
 80207fe:	fa1f f588 	uxth.w	r5, r8
 8020802:	9601      	str	r6, [sp, #4]
 8020804:	9500      	str	r5, [sp, #0]
 8020806:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8020808:	4621      	mov	r1, r4
 802080a:	47a8      	blx	r5
 802080c:	b00d      	add	sp, #52	@ 0x34
 802080e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020812:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8020816:	e7e4      	b.n	80207e2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8020818:	6803      	ldr	r3, [r0, #0]
 802081a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802081c:	4798      	blx	r3
 802081e:	4947      	ldr	r1, [pc, #284]	@ (802093c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8020820:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8020824:	880b      	ldrh	r3, [r1, #0]
 8020826:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 802082a:	fb03 5202 	mla	r2, r3, r2, r5
 802082e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020832:	4373      	muls	r3, r6
 8020834:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020838:	9307      	str	r3, [sp, #28]
 802083a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802083e:	9306      	str	r3, [sp, #24]
 8020840:	468a      	mov	sl, r1
 8020842:	9b07      	ldr	r3, [sp, #28]
 8020844:	4298      	cmp	r0, r3
 8020846:	d270      	bcs.n	802092a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8020848:	9b06      	ldr	r3, [sp, #24]
 802084a:	4621      	mov	r1, r4
 802084c:	eb00 0b03 	add.w	fp, r0, r3
 8020850:	4558      	cmp	r0, fp
 8020852:	d25d      	bcs.n	8020910 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8020854:	f851 4b04 	ldr.w	r4, [r1], #4
 8020858:	0e23      	lsrs	r3, r4, #24
 802085a:	d014      	beq.n	8020886 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 802085c:	2bff      	cmp	r3, #255	@ 0xff
 802085e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8020862:	d112      	bne.n	802088a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020864:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8020868:	d10f      	bne.n	802088a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 802086a:	0963      	lsrs	r3, r4, #5
 802086c:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8020870:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020874:	f02c 0c07 	bic.w	ip, ip, #7
 8020878:	ea43 0c0c 	orr.w	ip, r3, ip
 802087c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020880:	ea4c 0404 	orr.w	r4, ip, r4
 8020884:	8004      	strh	r4, [r0, #0]
 8020886:	3002      	adds	r0, #2
 8020888:	e7e2      	b.n	8020850 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 802088a:	fb09 f303 	mul.w	r3, r9, r3
 802088e:	8807      	ldrh	r7, [r0, #0]
 8020890:	1c5a      	adds	r2, r3, #1
 8020892:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8020896:	1212      	asrs	r2, r2, #8
 8020898:	123e      	asrs	r6, r7, #8
 802089a:	b293      	uxth	r3, r2
 802089c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 80208a0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80208a4:	43d2      	mvns	r2, r2
 80208a6:	b2d2      	uxtb	r2, r2
 80208a8:	10fd      	asrs	r5, r7, #3
 80208aa:	fb1e fe03 	smulbb	lr, lr, r3
 80208ae:	00ff      	lsls	r7, r7, #3
 80208b0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80208b4:	fb06 e602 	mla	r6, r6, r2, lr
 80208b8:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80208bc:	b2ff      	uxtb	r7, r7
 80208be:	fa5f fc8c 	uxtb.w	ip, ip
 80208c2:	b2e4      	uxtb	r4, r4
 80208c4:	b2b6      	uxth	r6, r6
 80208c6:	fb1c fc03 	smulbb	ip, ip, r3
 80208ca:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80208ce:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80208d2:	fb14 f403 	smulbb	r4, r4, r3
 80208d6:	fb05 c502 	mla	r5, r5, r2, ip
 80208da:	f106 0e01 	add.w	lr, r6, #1
 80208de:	fb07 4702 	mla	r7, r7, r2, r4
 80208e2:	b2ad      	uxth	r5, r5
 80208e4:	b2bf      	uxth	r7, r7
 80208e6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80208ea:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 80208ee:	f105 0c01 	add.w	ip, r5, #1
 80208f2:	1c7e      	adds	r6, r7, #1
 80208f4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80208f8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80208fc:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020900:	096d      	lsrs	r5, r5, #5
 8020902:	ea46 060e 	orr.w	r6, r6, lr
 8020906:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802090a:	432e      	orrs	r6, r5
 802090c:	8006      	strh	r6, [r0, #0]
 802090e:	e7ba      	b.n	8020886 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8020910:	f8ba 3000 	ldrh.w	r3, [sl]
 8020914:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8020918:	eba3 0308 	sub.w	r3, r3, r8
 802091c:	eba4 0408 	sub.w	r4, r4, r8
 8020920:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020924:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8020928:	e78b      	b.n	8020842 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 802092a:	4b03      	ldr	r3, [pc, #12]	@ (8020938 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 802092c:	6818      	ldr	r0, [r3, #0]
 802092e:	6803      	ldr	r3, [r0, #0]
 8020930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020932:	4798      	blx	r3
 8020934:	e76a      	b.n	802080c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8020936:	bf00      	nop
 8020938:	200126e0 	.word	0x200126e0
 802093c:	200126da 	.word	0x200126da

08020940 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8020940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020944:	460c      	mov	r4, r1
 8020946:	b085      	sub	sp, #20
 8020948:	6810      	ldr	r0, [r2, #0]
 802094a:	6851      	ldr	r1, [r2, #4]
 802094c:	466d      	mov	r5, sp
 802094e:	c503      	stmia	r5!, {r0, r1}
 8020950:	6818      	ldr	r0, [r3, #0]
 8020952:	6859      	ldr	r1, [r3, #4]
 8020954:	4616      	mov	r6, r2
 8020956:	c503      	stmia	r5!, {r0, r1}
 8020958:	4668      	mov	r0, sp
 802095a:	f7f7 fefd 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802095e:	4631      	mov	r1, r6
 8020960:	a802      	add	r0, sp, #8
 8020962:	f7f7 ff21 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020966:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802096a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802096e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8020972:	4d28      	ldr	r5, [pc, #160]	@ (8020a14 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8020974:	4e28      	ldr	r6, [pc, #160]	@ (8020a18 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8020976:	6828      	ldr	r0, [r5, #0]
 8020978:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 802097c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8020980:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020984:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020988:	f8bd 1000 	ldrh.w	r1, [sp]
 802098c:	440a      	add	r2, r1
 802098e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8020992:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8020996:	4413      	add	r3, r2
 8020998:	f8ad 300a 	strh.w	r3, [sp, #10]
 802099c:	6803      	ldr	r3, [r0, #0]
 802099e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80209a0:	4798      	blx	r3
 80209a2:	8833      	ldrh	r3, [r6, #0]
 80209a4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80209a8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80209ac:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8020a1c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 80209b0:	fb03 1202 	mla	r2, r3, r2, r1
 80209b4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80209b8:	fb08 f303 	mul.w	r3, r8, r3
 80209bc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80209c0:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 80209c4:	4298      	cmp	r0, r3
 80209c6:	d21d      	bcs.n	8020a04 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 80209c8:	eb00 080c 	add.w	r8, r0, ip
 80209cc:	4540      	cmp	r0, r8
 80209ce:	d20f      	bcs.n	80209f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 80209d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80209d4:	ea4f 1951 	mov.w	r9, r1, lsr #5
 80209d8:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 80209dc:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80209e0:	ea42 0209 	orr.w	r2, r2, r9
 80209e4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80209e8:	430a      	orrs	r2, r1
 80209ea:	f820 2b02 	strh.w	r2, [r0], #2
 80209ee:	e7ed      	b.n	80209cc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80209f0:	8832      	ldrh	r2, [r6, #0]
 80209f2:	1bd2      	subs	r2, r2, r7
 80209f4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80209f8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80209fc:	1bd2      	subs	r2, r2, r7
 80209fe:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8020a02:	e7df      	b.n	80209c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8020a04:	6828      	ldr	r0, [r5, #0]
 8020a06:	6803      	ldr	r3, [r0, #0]
 8020a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020a0a:	4798      	blx	r3
 8020a0c:	b005      	add	sp, #20
 8020a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020a12:	bf00      	nop
 8020a14:	200126e0 	.word	0x200126e0
 8020a18:	200126da 	.word	0x200126da
 8020a1c:	fffff800 	.word	0xfffff800

08020a20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8020a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a24:	460e      	mov	r6, r1
 8020a26:	b08e      	sub	sp, #56	@ 0x38
 8020a28:	4604      	mov	r4, r0
 8020a2a:	6808      	ldr	r0, [r1, #0]
 8020a2c:	6849      	ldr	r1, [r1, #4]
 8020a2e:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 8020c08 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8020a32:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 8020c0c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8020a36:	461d      	mov	r5, r3
 8020a38:	ab0a      	add	r3, sp, #40	@ 0x28
 8020a3a:	c303      	stmia	r3!, {r0, r1}
 8020a3c:	6810      	ldr	r0, [r2, #0]
 8020a3e:	6851      	ldr	r1, [r2, #4]
 8020a40:	ab0c      	add	r3, sp, #48	@ 0x30
 8020a42:	c303      	stmia	r3!, {r0, r1}
 8020a44:	a80a      	add	r0, sp, #40	@ 0x28
 8020a46:	f7f7 fe87 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a4a:	4631      	mov	r1, r6
 8020a4c:	a80c      	add	r0, sp, #48	@ 0x30
 8020a4e:	f7f7 feab 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020a52:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8020a56:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8020a5a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8020a5e:	f8d8 0000 	ldr.w	r0, [r8]
 8020a62:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8020a66:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8020a6a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020a6e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020a72:	440c      	add	r4, r1
 8020a74:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8020a78:	440a      	add	r2, r1
 8020a7a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8020a7e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8020a82:	4413      	add	r3, r2
 8020a84:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8020a88:	6803      	ldr	r3, [r0, #0]
 8020a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020a8c:	4798      	blx	r3
 8020a8e:	2dff      	cmp	r5, #255	@ 0xff
 8020a90:	d124      	bne.n	8020adc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8020a92:	f010 0f01 	tst.w	r0, #1
 8020a96:	f8d8 0000 	ldr.w	r0, [r8]
 8020a9a:	d022      	beq.n	8020ae2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8020a9c:	2100      	movs	r1, #0
 8020a9e:	f8d0 c000 	ldr.w	ip, [r0]
 8020aa2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8020aa6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8020aaa:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8020aae:	f04f 0e01 	mov.w	lr, #1
 8020ab2:	f8cd e018 	str.w	lr, [sp, #24]
 8020ab6:	f8b9 e000 	ldrh.w	lr, [r9]
 8020aba:	9503      	str	r5, [sp, #12]
 8020abc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8020ac0:	b2b6      	uxth	r6, r6
 8020ac2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8020ac6:	9102      	str	r1, [sp, #8]
 8020ac8:	b2bf      	uxth	r7, r7
 8020aca:	9601      	str	r6, [sp, #4]
 8020acc:	9700      	str	r7, [sp, #0]
 8020ace:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 8020ad2:	4621      	mov	r1, r4
 8020ad4:	47a8      	blx	r5
 8020ad6:	b00e      	add	sp, #56	@ 0x38
 8020ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020adc:	f010 0f04 	tst.w	r0, #4
 8020ae0:	e7d9      	b.n	8020a96 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8020ae2:	6803      	ldr	r3, [r0, #0]
 8020ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020ae6:	4798      	blx	r3
 8020ae8:	f8b9 3000 	ldrh.w	r3, [r9]
 8020aec:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020af0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8020af4:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8020af8:	fb03 1202 	mla	r2, r3, r2, r1
 8020afc:	ebac 0c07 	sub.w	ip, ip, r7
 8020b00:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020b04:	435e      	muls	r6, r3
 8020b06:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8020b0a:	2dff      	cmp	r5, #255	@ 0xff
 8020b0c:	eba3 0707 	sub.w	r7, r3, r7
 8020b10:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8020b14:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020b18:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8020b1c:	d049      	beq.n	8020bb2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8020b1e:	43eb      	mvns	r3, r5
 8020b20:	fa1f f985 	uxth.w	r9, r5
 8020b24:	b2db      	uxtb	r3, r3
 8020b26:	42b0      	cmp	r0, r6
 8020b28:	d266      	bcs.n	8020bf8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8020b2a:	eb00 0a0e 	add.w	sl, r0, lr
 8020b2e:	4550      	cmp	r0, sl
 8020b30:	4621      	mov	r1, r4
 8020b32:	f104 0403 	add.w	r4, r4, #3
 8020b36:	d25b      	bcs.n	8020bf0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8020b38:	8802      	ldrh	r2, [r0, #0]
 8020b3a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8020b3e:	ea4f 2822 	mov.w	r8, r2, asr #8
 8020b42:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8020b46:	fb11 f109 	smulbb	r1, r1, r9
 8020b4a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8020b4e:	10d5      	asrs	r5, r2, #3
 8020b50:	fb08 1803 	mla	r8, r8, r3, r1
 8020b54:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8020b58:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8020b5c:	fb11 f109 	smulbb	r1, r1, r9
 8020b60:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8020b64:	fb05 1503 	mla	r5, r5, r3, r1
 8020b68:	00d2      	lsls	r2, r2, #3
 8020b6a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8020b6e:	b2d2      	uxtb	r2, r2
 8020b70:	fb11 f109 	smulbb	r1, r1, r9
 8020b74:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020b78:	fa1f f888 	uxth.w	r8, r8
 8020b7c:	fb02 1203 	mla	r2, r2, r3, r1
 8020b80:	b292      	uxth	r2, r2
 8020b82:	f108 0101 	add.w	r1, r8, #1
 8020b86:	b2ad      	uxth	r5, r5
 8020b88:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8020b8c:	1c51      	adds	r1, r2, #1
 8020b8e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020b92:	1c69      	adds	r1, r5, #1
 8020b94:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8020b98:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8020b9c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020ba0:	096d      	lsrs	r5, r5, #5
 8020ba2:	ea42 0208 	orr.w	r2, r2, r8
 8020ba6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020baa:	432a      	orrs	r2, r5
 8020bac:	f820 2b02 	strh.w	r2, [r0], #2
 8020bb0:	e7bd      	b.n	8020b2e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8020bb2:	4a14      	ldr	r2, [pc, #80]	@ (8020c04 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8020bb4:	42b0      	cmp	r0, r6
 8020bb6:	d21f      	bcs.n	8020bf8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8020bb8:	eb00 050e 	add.w	r5, r0, lr
 8020bbc:	42a8      	cmp	r0, r5
 8020bbe:	4621      	mov	r1, r4
 8020bc0:	f104 0403 	add.w	r4, r4, #3
 8020bc4:	d210      	bcs.n	8020be8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8020bc6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8020bca:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8020bce:	00db      	lsls	r3, r3, #3
 8020bd0:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8020bd4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020bd8:	430b      	orrs	r3, r1
 8020bda:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8020bde:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8020be2:	f820 3b02 	strh.w	r3, [r0], #2
 8020be6:	e7e9      	b.n	8020bbc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8020be8:	4438      	add	r0, r7
 8020bea:	eb01 040c 	add.w	r4, r1, ip
 8020bee:	e7e1      	b.n	8020bb4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8020bf0:	4438      	add	r0, r7
 8020bf2:	eb01 040c 	add.w	r4, r1, ip
 8020bf6:	e796      	b.n	8020b26 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8020bf8:	4b03      	ldr	r3, [pc, #12]	@ (8020c08 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8020bfa:	6818      	ldr	r0, [r3, #0]
 8020bfc:	6803      	ldr	r3, [r0, #0]
 8020bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020c00:	4798      	blx	r3
 8020c02:	e768      	b.n	8020ad6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8020c04:	fffff800 	.word	0xfffff800
 8020c08:	200126e0 	.word	0x200126e0
 8020c0c:	200126da 	.word	0x200126da

08020c10 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8020c10:	b4f0      	push	{r4, r5, r6, r7}
 8020c12:	4616      	mov	r6, r2
 8020c14:	2e01      	cmp	r6, #1
 8020c16:	461c      	mov	r4, r3
 8020c18:	460d      	mov	r5, r1
 8020c1a:	9a04      	ldr	r2, [sp, #16]
 8020c1c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8020c20:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8020c24:	d012      	beq.n	8020c4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8020c26:	d303      	bcc.n	8020c30 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8020c28:	2e02      	cmp	r6, #2
 8020c2a:	d00a      	beq.n	8020c42 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8020c2c:	bcf0      	pop	{r4, r5, r6, r7}
 8020c2e:	4770      	bx	lr
 8020c30:	6805      	ldr	r5, [r0, #0]
 8020c32:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8020c36:	68ed      	ldr	r5, [r5, #12]
 8020c38:	4613      	mov	r3, r2
 8020c3a:	46ac      	mov	ip, r5
 8020c3c:	4622      	mov	r2, r4
 8020c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8020c40:	4760      	bx	ip
 8020c42:	4621      	mov	r1, r4
 8020c44:	4628      	mov	r0, r5
 8020c46:	bcf0      	pop	{r4, r5, r6, r7}
 8020c48:	f7ff bd94 	b.w	8020774 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020c4c:	4621      	mov	r1, r4
 8020c4e:	4628      	mov	r0, r5
 8020c50:	bcf0      	pop	{r4, r5, r6, r7}
 8020c52:	f7ff bee5 	b.w	8020a20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08020c58 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8020c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c5c:	4681      	mov	r9, r0
 8020c5e:	b093      	sub	sp, #76	@ 0x4c
 8020c60:	6810      	ldr	r0, [r2, #0]
 8020c62:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8020c66:	4f6d      	ldr	r7, [pc, #436]	@ (8020e1c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8020c68:	4688      	mov	r8, r1
 8020c6a:	6851      	ldr	r1, [r2, #4]
 8020c6c:	ac0e      	add	r4, sp, #56	@ 0x38
 8020c6e:	c403      	stmia	r4!, {r0, r1}
 8020c70:	6818      	ldr	r0, [r3, #0]
 8020c72:	6859      	ldr	r1, [r3, #4]
 8020c74:	ac10      	add	r4, sp, #64	@ 0x40
 8020c76:	4616      	mov	r6, r2
 8020c78:	c403      	stmia	r4!, {r0, r1}
 8020c7a:	a80e      	add	r0, sp, #56	@ 0x38
 8020c7c:	f7f7 fd6c 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020c80:	4631      	mov	r1, r6
 8020c82:	a810      	add	r0, sp, #64	@ 0x40
 8020c84:	f7f7 fd90 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020c88:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8020c8c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8020c90:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8020c94:	4e62      	ldr	r6, [pc, #392]	@ (8020e20 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8020c96:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8020c9a:	6830      	ldr	r0, [r6, #0]
 8020c9c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8020ca0:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020ca4:	4489      	add	r9, r1
 8020ca6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8020caa:	440a      	add	r2, r1
 8020cac:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8020cb0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8020cb4:	4413      	add	r3, r2
 8020cb6:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8020cba:	6803      	ldr	r3, [r0, #0]
 8020cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020cbe:	4798      	blx	r3
 8020cc0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8020cc4:	6830      	ldr	r0, [r6, #0]
 8020cc6:	d01d      	beq.n	8020d04 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8020cc8:	2200      	movs	r2, #0
 8020cca:	6801      	ldr	r1, [r0, #0]
 8020ccc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8020cd0:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8020cd4:	220b      	movs	r2, #11
 8020cd6:	9207      	str	r2, [sp, #28]
 8020cd8:	883a      	ldrh	r2, [r7, #0]
 8020cda:	9206      	str	r2, [sp, #24]
 8020cdc:	2201      	movs	r2, #1
 8020cde:	e9cd a204 	strd	sl, r2, [sp, #16]
 8020ce2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8020ce6:	9203      	str	r2, [sp, #12]
 8020ce8:	b2a4      	uxth	r4, r4
 8020cea:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8020cee:	9200      	str	r2, [sp, #0]
 8020cf0:	b2ad      	uxth	r5, r5
 8020cf2:	9502      	str	r5, [sp, #8]
 8020cf4:	9401      	str	r4, [sp, #4]
 8020cf6:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8020cf8:	4642      	mov	r2, r8
 8020cfa:	4649      	mov	r1, r9
 8020cfc:	47a0      	blx	r4
 8020cfe:	b013      	add	sp, #76	@ 0x4c
 8020d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d04:	6803      	ldr	r3, [r0, #0]
 8020d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020d08:	4798      	blx	r3
 8020d0a:	883b      	ldrh	r3, [r7, #0]
 8020d0c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8020d10:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 8020d14:	fb03 1202 	mla	r2, r3, r2, r1
 8020d18:	435d      	muls	r5, r3
 8020d1a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020d1e:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8020d22:	920c      	str	r2, [sp, #48]	@ 0x30
 8020d24:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8020d28:	1b12      	subs	r2, r2, r4
 8020d2a:	920d      	str	r2, [sp, #52]	@ 0x34
 8020d2c:	0062      	lsls	r2, r4, #1
 8020d2e:	1b1c      	subs	r4, r3, r4
 8020d30:	0063      	lsls	r3, r4, #1
 8020d32:	920a      	str	r2, [sp, #40]	@ 0x28
 8020d34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020d36:	f04f 0e04 	mov.w	lr, #4
 8020d3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020d3c:	4298      	cmp	r0, r3
 8020d3e:	d266      	bcs.n	8020e0e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8020d40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020d42:	eb00 0b03 	add.w	fp, r0, r3
 8020d46:	4558      	cmp	r0, fp
 8020d48:	d25c      	bcs.n	8020e04 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8020d4a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8020d4e:	fb1e e303 	smlabb	r3, lr, r3, lr
 8020d52:	f858 2003 	ldr.w	r2, [r8, r3]
 8020d56:	0e11      	lsrs	r1, r2, #24
 8020d58:	d012      	beq.n	8020d80 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8020d5a:	29ff      	cmp	r1, #255	@ 0xff
 8020d5c:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8020d60:	d110      	bne.n	8020d84 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8020d62:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8020d66:	d10d      	bne.n	8020d84 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8020d68:	0953      	lsrs	r3, r2, #5
 8020d6a:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 8020d6e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020d72:	f027 0707 	bic.w	r7, r7, #7
 8020d76:	431f      	orrs	r7, r3
 8020d78:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020d7c:	433a      	orrs	r2, r7
 8020d7e:	8002      	strh	r2, [r0, #0]
 8020d80:	3002      	adds	r0, #2
 8020d82:	e7e0      	b.n	8020d46 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8020d84:	fb0a f101 	mul.w	r1, sl, r1
 8020d88:	8806      	ldrh	r6, [r0, #0]
 8020d8a:	1c4b      	adds	r3, r1, #1
 8020d8c:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8020d90:	1235      	asrs	r5, r6, #8
 8020d92:	10f4      	asrs	r4, r6, #3
 8020d94:	121b      	asrs	r3, r3, #8
 8020d96:	00f6      	lsls	r6, r6, #3
 8020d98:	b299      	uxth	r1, r3
 8020d9a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8020d9e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8020da2:	b2f6      	uxtb	r6, r6
 8020da4:	43db      	mvns	r3, r3
 8020da6:	b2d2      	uxtb	r2, r2
 8020da8:	b2db      	uxtb	r3, r3
 8020daa:	fb1c fc01 	smulbb	ip, ip, r1
 8020dae:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8020db2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020db6:	fb12 f201 	smulbb	r2, r2, r1
 8020dba:	fb05 c503 	mla	r5, r5, r3, ip
 8020dbe:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8020dc2:	b2ff      	uxtb	r7, r7
 8020dc4:	fb06 2203 	mla	r2, r6, r3, r2
 8020dc8:	b2ad      	uxth	r5, r5
 8020dca:	fb17 f701 	smulbb	r7, r7, r1
 8020dce:	b292      	uxth	r2, r2
 8020dd0:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8020dd4:	fb04 7403 	mla	r4, r4, r3, r7
 8020dd8:	f105 0c01 	add.w	ip, r5, #1
 8020ddc:	1c57      	adds	r7, r2, #1
 8020dde:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020de2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8020de6:	b2a4      	uxth	r4, r4
 8020de8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020dec:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8020df0:	433d      	orrs	r5, r7
 8020df2:	1c67      	adds	r7, r4, #1
 8020df4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8020df8:	0964      	lsrs	r4, r4, #5
 8020dfa:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8020dfe:	4325      	orrs	r5, r4
 8020e00:	8005      	strh	r5, [r0, #0]
 8020e02:	e7bd      	b.n	8020d80 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8020e04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020e06:	4418      	add	r0, r3
 8020e08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020e0a:	4499      	add	r9, r3
 8020e0c:	e795      	b.n	8020d3a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8020e0e:	4b04      	ldr	r3, [pc, #16]	@ (8020e20 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8020e10:	6818      	ldr	r0, [r3, #0]
 8020e12:	6803      	ldr	r3, [r0, #0]
 8020e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020e16:	4798      	blx	r3
 8020e18:	e771      	b.n	8020cfe <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 8020e1a:	bf00      	nop
 8020e1c:	200126da 	.word	0x200126da
 8020e20:	200126e0 	.word	0x200126e0

08020e24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8020e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e28:	b087      	sub	sp, #28
 8020e2a:	4680      	mov	r8, r0
 8020e2c:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 8020e30:	460d      	mov	r5, r1
 8020e32:	4614      	mov	r4, r2
 8020e34:	2e00      	cmp	r6, #0
 8020e36:	f000 80b9 	beq.w	8020fac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8020e3a:	6810      	ldr	r0, [r2, #0]
 8020e3c:	6851      	ldr	r1, [r2, #4]
 8020e3e:	af02      	add	r7, sp, #8
 8020e40:	c703      	stmia	r7!, {r0, r1}
 8020e42:	6818      	ldr	r0, [r3, #0]
 8020e44:	6859      	ldr	r1, [r3, #4]
 8020e46:	af04      	add	r7, sp, #16
 8020e48:	c703      	stmia	r7!, {r0, r1}
 8020e4a:	a802      	add	r0, sp, #8
 8020e4c:	f7f7 fc84 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020e50:	4621      	mov	r1, r4
 8020e52:	a804      	add	r0, sp, #16
 8020e54:	f7f7 fca8 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020e58:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020e5c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020e60:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8020e64:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8020e68:	fb14 2103 	smlabb	r1, r4, r3, r2
 8020e6c:	eb08 0401 	add.w	r4, r8, r1
 8020e70:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020e74:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8020e78:	440a      	add	r2, r1
 8020e7a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020e7e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020e82:	4413      	add	r3, r2
 8020e84:	f8ad 3012 	strh.w	r3, [sp, #18]
 8020e88:	4b4a      	ldr	r3, [pc, #296]	@ (8020fb4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8020e8a:	6818      	ldr	r0, [r3, #0]
 8020e8c:	6803      	ldr	r3, [r0, #0]
 8020e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020e90:	4798      	blx	r3
 8020e92:	4b49      	ldr	r3, [pc, #292]	@ (8020fb8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8020e94:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8020e98:	881a      	ldrh	r2, [r3, #0]
 8020e9a:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8020e9e:	2eff      	cmp	r6, #255	@ 0xff
 8020ea0:	fb02 c101 	mla	r1, r2, r1, ip
 8020ea4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020ea8:	fb02 f207 	mul.w	r2, r2, r7
 8020eac:	f105 0104 	add.w	r1, r5, #4
 8020eb0:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8020eb4:	461d      	mov	r5, r3
 8020eb6:	d05a      	beq.n	8020f6e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8020eb8:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8020ebc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020ec0:	b2b6      	uxth	r6, r6
 8020ec2:	fa1f fe8e 	uxth.w	lr, lr
 8020ec6:	9301      	str	r3, [sp, #4]
 8020ec8:	4282      	cmp	r2, r0
 8020eca:	d96a      	bls.n	8020fa2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8020ecc:	eb00 0b0a 	add.w	fp, r0, sl
 8020ed0:	4583      	cmp	fp, r0
 8020ed2:	d940      	bls.n	8020f56 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8020ed4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020ed8:	8805      	ldrh	r5, [r0, #0]
 8020eda:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8020ede:	122f      	asrs	r7, r5, #8
 8020ee0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020ee4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8020ee8:	fb17 f70e 	smulbb	r7, r7, lr
 8020eec:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8020ef0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020ef4:	00ed      	lsls	r5, r5, #3
 8020ef6:	fb0c 7c06 	mla	ip, ip, r6, r7
 8020efa:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8020efe:	10df      	asrs	r7, r3, #3
 8020f00:	b2ed      	uxtb	r5, r5
 8020f02:	00db      	lsls	r3, r3, #3
 8020f04:	fa1f fc8c 	uxth.w	ip, ip
 8020f08:	fb19 f90e 	smulbb	r9, r9, lr
 8020f0c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8020f10:	b2db      	uxtb	r3, r3
 8020f12:	fb15 f50e 	smulbb	r5, r5, lr
 8020f16:	fb07 9706 	mla	r7, r7, r6, r9
 8020f1a:	fb03 5306 	mla	r3, r3, r6, r5
 8020f1e:	f10c 0901 	add.w	r9, ip, #1
 8020f22:	b29b      	uxth	r3, r3
 8020f24:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8020f28:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 8020f2c:	f103 0c01 	add.w	ip, r3, #1
 8020f30:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020f34:	b2bf      	uxth	r7, r7
 8020f36:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020f3a:	ea4c 0c09 	orr.w	ip, ip, r9
 8020f3e:	f107 0901 	add.w	r9, r7, #1
 8020f42:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8020f46:	097f      	lsrs	r7, r7, #5
 8020f48:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8020f4c:	ea4c 0c07 	orr.w	ip, ip, r7
 8020f50:	f820 cb02 	strh.w	ip, [r0], #2
 8020f54:	e7bc      	b.n	8020ed0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8020f56:	9b01      	ldr	r3, [sp, #4]
 8020f58:	881b      	ldrh	r3, [r3, #0]
 8020f5a:	eba3 0308 	sub.w	r3, r3, r8
 8020f5e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020f62:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8020f66:	eba3 0308 	sub.w	r3, r3, r8
 8020f6a:	441c      	add	r4, r3
 8020f6c:	e7ac      	b.n	8020ec8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8020f6e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020f72:	4282      	cmp	r2, r0
 8020f74:	d915      	bls.n	8020fa2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8020f76:	eb00 060a 	add.w	r6, r0, sl
 8020f7a:	4286      	cmp	r6, r0
 8020f7c:	d906      	bls.n	8020f8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8020f7e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020f82:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8020f86:	f820 3b02 	strh.w	r3, [r0], #2
 8020f8a:	e7f6      	b.n	8020f7a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8020f8c:	882b      	ldrh	r3, [r5, #0]
 8020f8e:	eba3 0308 	sub.w	r3, r3, r8
 8020f92:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020f96:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8020f9a:	eba3 0308 	sub.w	r3, r3, r8
 8020f9e:	441c      	add	r4, r3
 8020fa0:	e7e7      	b.n	8020f72 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8020fa2:	4b04      	ldr	r3, [pc, #16]	@ (8020fb4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8020fa4:	6818      	ldr	r0, [r3, #0]
 8020fa6:	6803      	ldr	r3, [r0, #0]
 8020fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020faa:	4798      	blx	r3
 8020fac:	b007      	add	sp, #28
 8020fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fb2:	bf00      	nop
 8020fb4:	200126e0 	.word	0x200126e0
 8020fb8:	200126da 	.word	0x200126da

08020fbc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8020fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fc0:	b091      	sub	sp, #68	@ 0x44
 8020fc2:	4680      	mov	r8, r0
 8020fc4:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 8020fc8:	460f      	mov	r7, r1
 8020fca:	4614      	mov	r4, r2
 8020fcc:	2d00      	cmp	r5, #0
 8020fce:	d051      	beq.n	8021074 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020fd0:	6810      	ldr	r0, [r2, #0]
 8020fd2:	6851      	ldr	r1, [r2, #4]
 8020fd4:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 80211d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8020fd8:	ae0c      	add	r6, sp, #48	@ 0x30
 8020fda:	c603      	stmia	r6!, {r0, r1}
 8020fdc:	6818      	ldr	r0, [r3, #0]
 8020fde:	6859      	ldr	r1, [r3, #4]
 8020fe0:	ae0e      	add	r6, sp, #56	@ 0x38
 8020fe2:	c603      	stmia	r6!, {r0, r1}
 8020fe4:	a80c      	add	r0, sp, #48	@ 0x30
 8020fe6:	f7f7 fbb7 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020fea:	4621      	mov	r1, r4
 8020fec:	a80e      	add	r0, sp, #56	@ 0x38
 8020fee:	f7f7 fbdb 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020ff2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8020ff6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8020ffa:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8020ffe:	f8d9 0000 	ldr.w	r0, [r9]
 8021002:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8021006:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 802100a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802100e:	eb08 0401 	add.w	r4, r8, r1
 8021012:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8021016:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 80211dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 802101a:	440a      	add	r2, r1
 802101c:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8021020:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8021024:	4413      	add	r3, r2
 8021026:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 802102a:	6803      	ldr	r3, [r0, #0]
 802102c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802102e:	4798      	blx	r3
 8021030:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8021034:	f8d9 0000 	ldr.w	r0, [r9]
 8021038:	d01f      	beq.n	802107a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 802103a:	2200      	movs	r2, #0
 802103c:	6801      	ldr	r1, [r0, #0]
 802103e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8021042:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8021046:	220b      	movs	r2, #11
 8021048:	9207      	str	r2, [sp, #28]
 802104a:	f8b8 2000 	ldrh.w	r2, [r8]
 802104e:	9206      	str	r2, [sp, #24]
 8021050:	2201      	movs	r2, #1
 8021052:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8021056:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 802105a:	9203      	str	r2, [sp, #12]
 802105c:	fa1f f28a 	uxth.w	r2, sl
 8021060:	9202      	str	r2, [sp, #8]
 8021062:	b2b6      	uxth	r6, r6
 8021064:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8021068:	9200      	str	r2, [sp, #0]
 802106a:	9601      	str	r6, [sp, #4]
 802106c:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 802106e:	463a      	mov	r2, r7
 8021070:	4621      	mov	r1, r4
 8021072:	47a8      	blx	r5
 8021074:	b011      	add	sp, #68	@ 0x44
 8021076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802107a:	6803      	ldr	r3, [r0, #0]
 802107c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802107e:	4798      	blx	r3
 8021080:	f8b8 2000 	ldrh.w	r2, [r8]
 8021084:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8021088:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 802108c:	2dff      	cmp	r5, #255	@ 0xff
 802108e:	fb02 1303 	mla	r3, r2, r3, r1
 8021092:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021096:	ea4f 0946 	mov.w	r9, r6, lsl #1
 802109a:	fb0a fa02 	mul.w	sl, sl, r2
 802109e:	d062      	beq.n	8021166 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80210a0:	ea6f 0c05 	mvn.w	ip, r5
 80210a4:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 80210a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80210aa:	b2ad      	uxth	r5, r5
 80210ac:	fa5f fc8c 	uxtb.w	ip, ip
 80210b0:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 80210b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80210b6:	4298      	cmp	r0, r3
 80210b8:	f080 8085 	bcs.w	80211c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80210bc:	eb00 0b09 	add.w	fp, r0, r9
 80210c0:	4558      	cmp	r0, fp
 80210c2:	d246      	bcs.n	8021152 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 80210c4:	f814 eb01 	ldrb.w	lr, [r4], #1
 80210c8:	2303      	movs	r3, #3
 80210ca:	2204      	movs	r2, #4
 80210cc:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 80210d0:	eb07 0a0e 	add.w	sl, r7, lr
 80210d4:	8803      	ldrh	r3, [r0, #0]
 80210d6:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80210da:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80210de:	1219      	asrs	r1, r3, #8
 80210e0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80210e4:	fb18 f805 	smulbb	r8, r8, r5
 80210e8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80210ec:	10da      	asrs	r2, r3, #3
 80210ee:	fb01 810c 	mla	r1, r1, ip, r8
 80210f2:	00db      	lsls	r3, r3, #3
 80210f4:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80210f8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80210fc:	b2db      	uxtb	r3, r3
 80210fe:	fb18 f805 	smulbb	r8, r8, r5
 8021102:	fb1e fe05 	smulbb	lr, lr, r5
 8021106:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 802110a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802110e:	b289      	uxth	r1, r1
 8021110:	fb02 820c 	mla	r2, r2, ip, r8
 8021114:	fb03 e30c 	mla	r3, r3, ip, lr
 8021118:	b292      	uxth	r2, r2
 802111a:	b29b      	uxth	r3, r3
 802111c:	f101 0801 	add.w	r8, r1, #1
 8021120:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021124:	f103 0e01 	add.w	lr, r3, #1
 8021128:	f102 0801 	add.w	r8, r2, #1
 802112c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021130:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8021134:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8021138:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802113c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8021140:	ea4e 0101 	orr.w	r1, lr, r1
 8021144:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8021148:	ea41 0108 	orr.w	r1, r1, r8
 802114c:	f820 1b02 	strh.w	r1, [r0], #2
 8021150:	e7b6      	b.n	80210c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8021152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021154:	881b      	ldrh	r3, [r3, #0]
 8021156:	1b9b      	subs	r3, r3, r6
 8021158:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802115c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8021160:	1b9b      	subs	r3, r3, r6
 8021162:	441c      	add	r4, r3
 8021164:	e7a6      	b.n	80210b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8021166:	491b      	ldr	r1, [pc, #108]	@ (80211d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8021168:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 802116c:	2203      	movs	r2, #3
 802116e:	2504      	movs	r5, #4
 8021170:	4550      	cmp	r0, sl
 8021172:	d228      	bcs.n	80211c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8021174:	eb00 0c09 	add.w	ip, r0, r9
 8021178:	4560      	cmp	r0, ip
 802117a:	4623      	mov	r3, r4
 802117c:	d219      	bcs.n	80211b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 802117e:	f893 e000 	ldrb.w	lr, [r3]
 8021182:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8021186:	eb07 0b0e 	add.w	fp, r7, lr
 802118a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802118e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8021192:	f89b b001 	ldrb.w	fp, [fp, #1]
 8021196:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 802119a:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 802119e:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80211a2:	ea43 030b 	orr.w	r3, r3, fp
 80211a6:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 80211aa:	3401      	adds	r4, #1
 80211ac:	f820 3b02 	strh.w	r3, [r0], #2
 80211b0:	e7e2      	b.n	8021178 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 80211b2:	f8b8 3000 	ldrh.w	r3, [r8]
 80211b6:	1b9b      	subs	r3, r3, r6
 80211b8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80211bc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80211c0:	1b9b      	subs	r3, r3, r6
 80211c2:	441c      	add	r4, r3
 80211c4:	e7d4      	b.n	8021170 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80211c6:	4b04      	ldr	r3, [pc, #16]	@ (80211d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 80211c8:	6818      	ldr	r0, [r3, #0]
 80211ca:	6803      	ldr	r3, [r0, #0]
 80211cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80211ce:	4798      	blx	r3
 80211d0:	e750      	b.n	8021074 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80211d2:	bf00      	nop
 80211d4:	fffff800 	.word	0xfffff800
 80211d8:	200126e0 	.word	0x200126e0
 80211dc:	200126da 	.word	0x200126da

080211e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80211e0:	b4f0      	push	{r4, r5, r6, r7}
 80211e2:	460c      	mov	r4, r1
 80211e4:	4611      	mov	r1, r2
 80211e6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80211ea:	780f      	ldrb	r7, [r1, #0]
 80211ec:	784e      	ldrb	r6, [r1, #1]
 80211ee:	2f01      	cmp	r7, #1
 80211f0:	461a      	mov	r2, r3
 80211f2:	9b04      	ldr	r3, [sp, #16]
 80211f4:	d038      	beq.n	8021268 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 80211f6:	d31f      	bcc.n	8021238 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 80211f8:	2f02      	cmp	r7, #2
 80211fa:	d14d      	bne.n	8021298 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80211fc:	2e03      	cmp	r6, #3
 80211fe:	d84b      	bhi.n	8021298 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8021200:	e8df f006 	tbb	[pc, r6]
 8021204:	17140702 	.word	0x17140702
 8021208:	9504      	str	r5, [sp, #16]
 802120a:	4620      	mov	r0, r4
 802120c:	bcf0      	pop	{r4, r5, r6, r7}
 802120e:	f7ff be09 	b.w	8020e24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8021212:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8021214:	2800      	cmp	r0, #0
 8021216:	d03f      	beq.n	8021298 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8021218:	6806      	ldr	r6, [r0, #0]
 802121a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 802121e:	68b5      	ldr	r5, [r6, #8]
 8021220:	4613      	mov	r3, r2
 8021222:	46ac      	mov	ip, r5
 8021224:	460a      	mov	r2, r1
 8021226:	4621      	mov	r1, r4
 8021228:	bcf0      	pop	{r4, r5, r6, r7}
 802122a:	4760      	bx	ip
 802122c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8021230:	e7f0      	b.n	8021214 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8021232:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8021236:	e7ed      	b.n	8021214 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8021238:	2e03      	cmp	r6, #3
 802123a:	d82d      	bhi.n	8021298 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 802123c:	e8df f006 	tbb	[pc, r6]
 8021240:	110e0702 	.word	0x110e0702
 8021244:	9504      	str	r5, [sp, #16]
 8021246:	4620      	mov	r0, r4
 8021248:	bcf0      	pop	{r4, r5, r6, r7}
 802124a:	f7ff bd05 	b.w	8020c58 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 802124e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8021250:	b310      	cbz	r0, 8021298 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8021252:	6806      	ldr	r6, [r0, #0]
 8021254:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8021258:	68f5      	ldr	r5, [r6, #12]
 802125a:	e7e1      	b.n	8021220 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 802125c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8021260:	e7f6      	b.n	8021250 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8021262:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8021266:	e7f3      	b.n	8021250 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8021268:	2e03      	cmp	r6, #3
 802126a:	d815      	bhi.n	8021298 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 802126c:	e8df f006 	tbb	[pc, r6]
 8021270:	110e0702 	.word	0x110e0702
 8021274:	9504      	str	r5, [sp, #16]
 8021276:	4620      	mov	r0, r4
 8021278:	bcf0      	pop	{r4, r5, r6, r7}
 802127a:	f7ff be9f 	b.w	8020fbc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802127e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8021280:	b150      	cbz	r0, 8021298 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8021282:	6806      	ldr	r6, [r0, #0]
 8021284:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8021288:	6935      	ldr	r5, [r6, #16]
 802128a:	e7c9      	b.n	8021220 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 802128c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8021290:	e7f6      	b.n	8021280 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8021292:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8021296:	e7f3      	b.n	8021280 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8021298:	bcf0      	pop	{r4, r5, r6, r7}
 802129a:	4770      	bx	lr

0802129c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 802129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212a0:	4604      	mov	r4, r0
 80212a2:	b087      	sub	sp, #28
 80212a4:	6810      	ldr	r0, [r2, #0]
 80212a6:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 80212aa:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 80214e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80212ae:	460e      	mov	r6, r1
 80212b0:	6851      	ldr	r1, [r2, #4]
 80212b2:	ad02      	add	r5, sp, #8
 80212b4:	c503      	stmia	r5!, {r0, r1}
 80212b6:	6818      	ldr	r0, [r3, #0]
 80212b8:	6859      	ldr	r1, [r3, #4]
 80212ba:	ad04      	add	r5, sp, #16
 80212bc:	4617      	mov	r7, r2
 80212be:	c503      	stmia	r5!, {r0, r1}
 80212c0:	a802      	add	r0, sp, #8
 80212c2:	f7f7 fa49 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80212c6:	4639      	mov	r1, r7
 80212c8:	a804      	add	r0, sp, #16
 80212ca:	f7f7 fa6d 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80212ce:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80212d2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80212d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80212da:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80212de:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80212e2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80212e6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80212ea:	440e      	add	r6, r1
 80212ec:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80212f0:	440a      	add	r2, r1
 80212f2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80212f6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80212fa:	4413      	add	r3, r2
 80212fc:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021300:	4b77      	ldr	r3, [pc, #476]	@ (80214e0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021302:	6818      	ldr	r0, [r3, #0]
 8021304:	6803      	ldr	r3, [r0, #0]
 8021306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021308:	4798      	blx	r3
 802130a:	f8b9 b000 	ldrh.w	fp, [r9]
 802130e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021312:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021316:	fb0b 2303 	mla	r3, fp, r3, r2
 802131a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802131e:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8021322:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021326:	fb05 f50b 	mul.w	r5, r5, fp
 802132a:	9300      	str	r3, [sp, #0]
 802132c:	d069      	beq.n	8021402 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 802132e:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8021332:	4558      	cmp	r0, fp
 8021334:	f080 80cc 	bcs.w	80214d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021338:	9b00      	ldr	r3, [sp, #0]
 802133a:	18c3      	adds	r3, r0, r3
 802133c:	9301      	str	r3, [sp, #4]
 802133e:	4631      	mov	r1, r6
 8021340:	9b01      	ldr	r3, [sp, #4]
 8021342:	4298      	cmp	r0, r3
 8021344:	d24f      	bcs.n	80213e6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8021346:	f811 2b01 	ldrb.w	r2, [r1], #1
 802134a:	2a00      	cmp	r2, #0
 802134c:	d048      	beq.n	80213e0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 802134e:	fb0a f202 	mul.w	r2, sl, r2
 8021352:	1c53      	adds	r3, r2, #1
 8021354:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021358:	121b      	asrs	r3, r3, #8
 802135a:	d041      	beq.n	80213e0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 802135c:	8802      	ldrh	r2, [r0, #0]
 802135e:	f8b4 c000 	ldrh.w	ip, [r4]
 8021362:	b29e      	uxth	r6, r3
 8021364:	1215      	asrs	r5, r2, #8
 8021366:	43db      	mvns	r3, r3
 8021368:	b2db      	uxtb	r3, r3
 802136a:	ea4f 272c 	mov.w	r7, ip, asr #8
 802136e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8021372:	fb15 f503 	smulbb	r5, r5, r3
 8021376:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 802137a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802137e:	00d2      	lsls	r2, r2, #3
 8021380:	fb07 5706 	mla	r7, r7, r6, r5
 8021384:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8021388:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802138c:	b2d2      	uxtb	r2, r2
 802138e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021392:	b2bf      	uxth	r7, r7
 8021394:	fb1e fe03 	smulbb	lr, lr, r3
 8021398:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802139c:	fa5f fc8c 	uxtb.w	ip, ip
 80213a0:	fb12 f203 	smulbb	r2, r2, r3
 80213a4:	fb05 e506 	mla	r5, r5, r6, lr
 80213a8:	fb0c 2c06 	mla	ip, ip, r6, r2
 80213ac:	f107 0e01 	add.w	lr, r7, #1
 80213b0:	fa1f fc8c 	uxth.w	ip, ip
 80213b4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80213b8:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 80213bc:	f10c 0701 	add.w	r7, ip, #1
 80213c0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80213c4:	b2ad      	uxth	r5, r5
 80213c6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80213ca:	ea47 070e 	orr.w	r7, r7, lr
 80213ce:	f105 0e01 	add.w	lr, r5, #1
 80213d2:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80213d6:	096d      	lsrs	r5, r5, #5
 80213d8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80213dc:	432f      	orrs	r7, r5
 80213de:	8007      	strh	r7, [r0, #0]
 80213e0:	3002      	adds	r0, #2
 80213e2:	3402      	adds	r4, #2
 80213e4:	e7ac      	b.n	8021340 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80213e6:	f8b9 3000 	ldrh.w	r3, [r9]
 80213ea:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80213ee:	eba3 0308 	sub.w	r3, r3, r8
 80213f2:	eba6 0608 	sub.w	r6, r6, r8
 80213f6:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80213fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80213fe:	440e      	add	r6, r1
 8021400:	e797      	b.n	8021332 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8021402:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8021406:	42a8      	cmp	r0, r5
 8021408:	d262      	bcs.n	80214d0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 802140a:	9b00      	ldr	r3, [sp, #0]
 802140c:	4631      	mov	r1, r6
 802140e:	eb00 0b03 	add.w	fp, r0, r3
 8021412:	4558      	cmp	r0, fp
 8021414:	d24e      	bcs.n	80214b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8021416:	f811 3b01 	ldrb.w	r3, [r1], #1
 802141a:	b12b      	cbz	r3, 8021428 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 802141c:	2bff      	cmp	r3, #255	@ 0xff
 802141e:	f8b4 e000 	ldrh.w	lr, [r4]
 8021422:	d104      	bne.n	802142e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8021424:	f8a0 e000 	strh.w	lr, [r0]
 8021428:	3002      	adds	r0, #2
 802142a:	3402      	adds	r4, #2
 802142c:	e7f1      	b.n	8021412 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 802142e:	8802      	ldrh	r2, [r0, #0]
 8021430:	b29f      	uxth	r7, r3
 8021432:	1216      	asrs	r6, r2, #8
 8021434:	43db      	mvns	r3, r3
 8021436:	b2db      	uxtb	r3, r3
 8021438:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802143c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8021440:	fb16 f603 	smulbb	r6, r6, r3
 8021444:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8021448:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802144c:	00d2      	lsls	r2, r2, #3
 802144e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021452:	b2d2      	uxtb	r2, r2
 8021454:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021458:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 802145c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021460:	fb1a fa03 	smulbb	sl, sl, r3
 8021464:	fa1f fc8c 	uxth.w	ip, ip
 8021468:	fb12 f303 	smulbb	r3, r2, r3
 802146c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8021470:	fa5f fe8e 	uxtb.w	lr, lr
 8021474:	fb06 a607 	mla	r6, r6, r7, sl
 8021478:	f10c 0201 	add.w	r2, ip, #1
 802147c:	fb0e 3307 	mla	r3, lr, r7, r3
 8021480:	b2b6      	uxth	r6, r6
 8021482:	b29b      	uxth	r3, r3
 8021484:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021488:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 802148c:	f106 0a01 	add.w	sl, r6, #1
 8021490:	f103 0c01 	add.w	ip, r3, #1
 8021494:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021498:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 802149c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80214a0:	0976      	lsrs	r6, r6, #5
 80214a2:	ea4c 0c02 	orr.w	ip, ip, r2
 80214a6:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80214aa:	ea4c 0c06 	orr.w	ip, ip, r6
 80214ae:	f8a0 c000 	strh.w	ip, [r0]
 80214b2:	e7b9      	b.n	8021428 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80214b4:	f8b9 3000 	ldrh.w	r3, [r9]
 80214b8:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80214bc:	eba3 0308 	sub.w	r3, r3, r8
 80214c0:	eba6 0608 	sub.w	r6, r6, r8
 80214c4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80214c8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80214cc:	440e      	add	r6, r1
 80214ce:	e79a      	b.n	8021406 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 80214d0:	4b03      	ldr	r3, [pc, #12]	@ (80214e0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80214d2:	6818      	ldr	r0, [r3, #0]
 80214d4:	6803      	ldr	r3, [r0, #0]
 80214d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80214d8:	4798      	blx	r3
 80214da:	b007      	add	sp, #28
 80214dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214e0:	200126e0 	.word	0x200126e0
 80214e4:	200126da 	.word	0x200126da

080214e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80214e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214ec:	b089      	sub	sp, #36	@ 0x24
 80214ee:	4682      	mov	sl, r0
 80214f0:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 80214f4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80214f6:	460f      	mov	r7, r1
 80214f8:	4691      	mov	r9, r2
 80214fa:	4698      	mov	r8, r3
 80214fc:	2e00      	cmp	r6, #0
 80214fe:	d03d      	beq.n	802157c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021500:	4608      	mov	r0, r1
 8021502:	f7fa fe59 	bl	801c1b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021506:	4605      	mov	r5, r0
 8021508:	4638      	mov	r0, r7
 802150a:	f7fa fe89 	bl	801c220 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802150e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021512:	4638      	mov	r0, r7
 8021514:	f8ad 9008 	strh.w	r9, [sp, #8]
 8021518:	f8ad 500c 	strh.w	r5, [sp, #12]
 802151c:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021520:	f7fa ff3c 	bl	801c39c <_ZNK8touchgfx6Bitmap7getDataEv>
 8021524:	4605      	mov	r5, r0
 8021526:	4638      	mov	r0, r7
 8021528:	f7fa ff68 	bl	801c3fc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802152c:	4681      	mov	r9, r0
 802152e:	4638      	mov	r0, r7
 8021530:	f7fa ffb8 	bl	801c4a4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021534:	280b      	cmp	r0, #11
 8021536:	d821      	bhi.n	802157c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021538:	e8df f000 	tbb	[pc, r0]
 802153c:	2006aebe 	.word	0x2006aebe
 8021540:	20202020 	.word	0x20202020
 8021544:	b5202020 	.word	0xb5202020
 8021548:	4bb0      	ldr	r3, [pc, #704]	@ (802180c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 802154a:	6818      	ldr	r0, [r3, #0]
 802154c:	6803      	ldr	r3, [r0, #0]
 802154e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021550:	4798      	blx	r3
 8021552:	2eff      	cmp	r6, #255	@ 0xff
 8021554:	d101      	bne.n	802155a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 8021556:	0683      	lsls	r3, r0, #26
 8021558:	d506      	bpl.n	8021568 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
 802155a:	4633      	mov	r3, r6
 802155c:	4622      	mov	r2, r4
 802155e:	a902      	add	r1, sp, #8
 8021560:	4628      	mov	r0, r5
 8021562:	f7ff f907 	bl	8020774 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021566:	e009      	b.n	802157c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021568:	4638      	mov	r0, r7
 802156a:	f7fa fedf 	bl	801c32c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 802156e:	b940      	cbnz	r0, 8021582 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8021570:	4623      	mov	r3, r4
 8021572:	aa02      	add	r2, sp, #8
 8021574:	4629      	mov	r1, r5
 8021576:	4650      	mov	r0, sl
 8021578:	f7ff f9e2 	bl	8020940 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 802157c:	b009      	add	sp, #36	@ 0x24
 802157e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021582:	f10d 0818 	add.w	r8, sp, #24
 8021586:	4639      	mov	r1, r7
 8021588:	4640      	mov	r0, r8
 802158a:	f7fa fe7d 	bl	801c288 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 802158e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021592:	af04      	add	r7, sp, #16
 8021594:	e887 0003 	stmia.w	r7, {r0, r1}
 8021598:	4638      	mov	r0, r7
 802159a:	4621      	mov	r1, r4
 802159c:	f7f1 fc78 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 80215a0:	4638      	mov	r0, r7
 80215a2:	f7f1 fcb8 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 80215a6:	2800      	cmp	r0, #0
 80215a8:	d1d7      	bne.n	802155a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 80215aa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80215ae:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80215b2:	4293      	cmp	r3, r2
 80215b4:	dd12      	ble.n	80215dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
 80215b6:	1a9b      	subs	r3, r3, r2
 80215b8:	f9b4 0000 	ldrsh.w	r0, [r4]
 80215bc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80215c0:	f8ad 0018 	strh.w	r0, [sp, #24]
 80215c4:	f8ad 201a 	strh.w	r2, [sp, #26]
 80215c8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80215cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80215d0:	4642      	mov	r2, r8
 80215d2:	4633      	mov	r3, r6
 80215d4:	a902      	add	r1, sp, #8
 80215d6:	4628      	mov	r0, r5
 80215d8:	f7ff f8cc 	bl	8020774 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80215dc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80215e0:	f9b4 2000 	ldrsh.w	r2, [r4]
 80215e4:	4293      	cmp	r3, r2
 80215e6:	dd12      	ble.n	802160e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
 80215e8:	1a9b      	subs	r3, r3, r2
 80215ea:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80215ee:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80215f2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80215f6:	f8ad 001a 	strh.w	r0, [sp, #26]
 80215fa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80215fe:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021602:	23ff      	movs	r3, #255	@ 0xff
 8021604:	4642      	mov	r2, r8
 8021606:	a902      	add	r1, sp, #8
 8021608:	4628      	mov	r0, r5
 802160a:	f7ff f8b3 	bl	8020774 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802160e:	463b      	mov	r3, r7
 8021610:	aa02      	add	r2, sp, #8
 8021612:	4629      	mov	r1, r5
 8021614:	4650      	mov	r0, sl
 8021616:	f7ff f993 	bl	8020940 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 802161a:	88a2      	ldrh	r2, [r4, #4]
 802161c:	8823      	ldrh	r3, [r4, #0]
 802161e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021622:	4413      	add	r3, r2
 8021624:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021628:	440a      	add	r2, r1
 802162a:	b29b      	uxth	r3, r3
 802162c:	b292      	uxth	r2, r2
 802162e:	b211      	sxth	r1, r2
 8021630:	b218      	sxth	r0, r3
 8021632:	4288      	cmp	r0, r1
 8021634:	dd12      	ble.n	802165c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8021636:	1a9b      	subs	r3, r3, r2
 8021638:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 802163c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8021640:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021644:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021648:	f8ad 001e 	strh.w	r0, [sp, #30]
 802164c:	23ff      	movs	r3, #255	@ 0xff
 802164e:	4642      	mov	r2, r8
 8021650:	a902      	add	r1, sp, #8
 8021652:	4628      	mov	r0, r5
 8021654:	f8ad 601a 	strh.w	r6, [sp, #26]
 8021658:	f7ff f88c 	bl	8020774 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802165c:	88e2      	ldrh	r2, [r4, #6]
 802165e:	8863      	ldrh	r3, [r4, #2]
 8021660:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021664:	4413      	add	r3, r2
 8021666:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802166a:	440a      	add	r2, r1
 802166c:	b29b      	uxth	r3, r3
 802166e:	b292      	uxth	r2, r2
 8021670:	b211      	sxth	r1, r2
 8021672:	b218      	sxth	r0, r3
 8021674:	4288      	cmp	r0, r1
 8021676:	dd81      	ble.n	802157c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021678:	1a9b      	subs	r3, r3, r2
 802167a:	f9b4 6000 	ldrsh.w	r6, [r4]
 802167e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021682:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021686:	f8ad 6018 	strh.w	r6, [sp, #24]
 802168a:	f8ad 101a 	strh.w	r1, [sp, #26]
 802168e:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021692:	23ff      	movs	r3, #255	@ 0xff
 8021694:	4642      	mov	r2, r8
 8021696:	e762      	b.n	802155e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8021698:	4633      	mov	r3, r6
 802169a:	4622      	mov	r2, r4
 802169c:	a902      	add	r1, sp, #8
 802169e:	4628      	mov	r0, r5
 80216a0:	f7ff f9be 	bl	8020a20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 80216a4:	e76a      	b.n	802157c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80216a6:	e9cd 4600 	strd	r4, r6, [sp]
 80216aa:	ab02      	add	r3, sp, #8
 80216ac:	464a      	mov	r2, r9
 80216ae:	4629      	mov	r1, r5
 80216b0:	4650      	mov	r0, sl
 80216b2:	f7ff fd95 	bl	80211e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80216b6:	e761      	b.n	802157c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80216b8:	4638      	mov	r0, r7
 80216ba:	f7fa fe37 	bl	801c32c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80216be:	b950      	cbnz	r0, 80216d6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
 80216c0:	e9cd 6000 	strd	r6, r0, [sp]
 80216c4:	f8da 3000 	ldr.w	r3, [sl]
 80216c8:	aa02      	add	r2, sp, #8
 80216ca:	68de      	ldr	r6, [r3, #12]
 80216cc:	4629      	mov	r1, r5
 80216ce:	4623      	mov	r3, r4
 80216d0:	4650      	mov	r0, sl
 80216d2:	47b0      	blx	r6
 80216d4:	e752      	b.n	802157c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80216d6:	f10d 0818 	add.w	r8, sp, #24
 80216da:	4639      	mov	r1, r7
 80216dc:	4640      	mov	r0, r8
 80216de:	f7fa fdd3 	bl	801c288 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80216e2:	e898 0003 	ldmia.w	r8, {r0, r1}
 80216e6:	af04      	add	r7, sp, #16
 80216e8:	e887 0003 	stmia.w	r7, {r0, r1}
 80216ec:	4638      	mov	r0, r7
 80216ee:	4621      	mov	r1, r4
 80216f0:	f7f1 fbce 	bl	8012e90 <_ZN8touchgfx4RectaNERKS0_>
 80216f4:	4638      	mov	r0, r7
 80216f6:	f7f1 fc0e 	bl	8012f16 <_ZNK8touchgfx4Rect7isEmptyEv>
 80216fa:	b138      	cbz	r0, 802170c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 80216fc:	9600      	str	r6, [sp, #0]
 80216fe:	4623      	mov	r3, r4
 8021700:	aa02      	add	r2, sp, #8
 8021702:	4649      	mov	r1, r9
 8021704:	4628      	mov	r0, r5
 8021706:	f7ff fdc9 	bl	802129c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802170a:	e737      	b.n	802157c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802170c:	e9cd 6000 	strd	r6, r0, [sp]
 8021710:	f8da 3000 	ldr.w	r3, [sl]
 8021714:	aa02      	add	r2, sp, #8
 8021716:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 802171a:	4629      	mov	r1, r5
 802171c:	463b      	mov	r3, r7
 802171e:	4650      	mov	r0, sl
 8021720:	47d8      	blx	fp
 8021722:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021726:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802172a:	4293      	cmp	r3, r2
 802172c:	dd13      	ble.n	8021756 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
 802172e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021732:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021736:	f8ad 0018 	strh.w	r0, [sp, #24]
 802173a:	1a9b      	subs	r3, r3, r2
 802173c:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021740:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021744:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021748:	9600      	str	r6, [sp, #0]
 802174a:	4643      	mov	r3, r8
 802174c:	aa02      	add	r2, sp, #8
 802174e:	4649      	mov	r1, r9
 8021750:	4628      	mov	r0, r5
 8021752:	f7ff fda3 	bl	802129c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021756:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 802175a:	f9b4 2000 	ldrsh.w	r2, [r4]
 802175e:	4293      	cmp	r3, r2
 8021760:	dd13      	ble.n	802178a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
 8021762:	1a9b      	subs	r3, r3, r2
 8021764:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021768:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802176c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021770:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021774:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021778:	f8ad 101e 	strh.w	r1, [sp, #30]
 802177c:	9600      	str	r6, [sp, #0]
 802177e:	4643      	mov	r3, r8
 8021780:	aa02      	add	r2, sp, #8
 8021782:	4649      	mov	r1, r9
 8021784:	4628      	mov	r0, r5
 8021786:	f7ff fd89 	bl	802129c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802178a:	88a2      	ldrh	r2, [r4, #4]
 802178c:	8823      	ldrh	r3, [r4, #0]
 802178e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021792:	4413      	add	r3, r2
 8021794:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021798:	440a      	add	r2, r1
 802179a:	b29b      	uxth	r3, r3
 802179c:	b292      	uxth	r2, r2
 802179e:	b211      	sxth	r1, r2
 80217a0:	b218      	sxth	r0, r3
 80217a2:	4288      	cmp	r0, r1
 80217a4:	dd13      	ble.n	80217ce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
 80217a6:	1a9b      	subs	r3, r3, r2
 80217a8:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80217ac:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 80217b0:	f8ad 1018 	strh.w	r1, [sp, #24]
 80217b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80217b8:	f8ad 001e 	strh.w	r0, [sp, #30]
 80217bc:	9600      	str	r6, [sp, #0]
 80217be:	4643      	mov	r3, r8
 80217c0:	aa02      	add	r2, sp, #8
 80217c2:	4649      	mov	r1, r9
 80217c4:	4628      	mov	r0, r5
 80217c6:	f8ad 701a 	strh.w	r7, [sp, #26]
 80217ca:	f7ff fd67 	bl	802129c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80217ce:	88e2      	ldrh	r2, [r4, #6]
 80217d0:	8863      	ldrh	r3, [r4, #2]
 80217d2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80217d6:	4413      	add	r3, r2
 80217d8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80217dc:	440a      	add	r2, r1
 80217de:	b29b      	uxth	r3, r3
 80217e0:	b292      	uxth	r2, r2
 80217e2:	b211      	sxth	r1, r2
 80217e4:	b218      	sxth	r0, r3
 80217e6:	4288      	cmp	r0, r1
 80217e8:	f77f aec8 	ble.w	802157c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80217ec:	f9b4 7000 	ldrsh.w	r7, [r4]
 80217f0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80217f4:	f8ad 7018 	strh.w	r7, [sp, #24]
 80217f8:	1a9b      	subs	r3, r3, r2
 80217fa:	f8ad 301e 	strh.w	r3, [sp, #30]
 80217fe:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021802:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021806:	9600      	str	r6, [sp, #0]
 8021808:	4643      	mov	r3, r8
 802180a:	e779      	b.n	8021700 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
 802180c:	200126e0 	.word	0x200126e0

08021810 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8021810:	b180      	cbz	r0, 8021834 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8021812:	2903      	cmp	r1, #3
 8021814:	d81c      	bhi.n	8021850 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021816:	e8df f001 	tbb	[pc, r1]
 802181a:	1d02      	.short	0x1d02
 802181c:	1f08      	.short	0x1f08
 802181e:	4b10      	ldr	r3, [pc, #64]	@ (8021860 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021820:	8818      	ldrh	r0, [r3, #0]
 8021822:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021826:	4240      	negs	r0, r0
 8021828:	4770      	bx	lr
 802182a:	4b0d      	ldr	r3, [pc, #52]	@ (8021860 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 802182c:	8818      	ldrh	r0, [r3, #0]
 802182e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021832:	4770      	bx	lr
 8021834:	2903      	cmp	r1, #3
 8021836:	d80b      	bhi.n	8021850 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021838:	a301      	add	r3, pc, #4	@ (adr r3, 8021840 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 802183a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802183e:	bf00      	nop
 8021840:	08021855 	.word	0x08021855
 8021844:	0802182b 	.word	0x0802182b
 8021848:	08021859 	.word	0x08021859
 802184c:	0802181f 	.word	0x0802181f
 8021850:	2000      	movs	r0, #0
 8021852:	4770      	bx	lr
 8021854:	2001      	movs	r0, #1
 8021856:	4770      	bx	lr
 8021858:	f04f 30ff 	mov.w	r0, #4294967295
 802185c:	4770      	bx	lr
 802185e:	bf00      	nop
 8021860:	200126da 	.word	0x200126da

08021864 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8021864:	b180      	cbz	r0, 8021888 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8021866:	2903      	cmp	r1, #3
 8021868:	d81c      	bhi.n	80218a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 802186a:	e8df f001 	tbb	[pc, r1]
 802186e:	021d      	.short	0x021d
 8021870:	071f      	.short	0x071f
 8021872:	4b10      	ldr	r3, [pc, #64]	@ (80218b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021874:	8818      	ldrh	r0, [r3, #0]
 8021876:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802187a:	4770      	bx	lr
 802187c:	4b0d      	ldr	r3, [pc, #52]	@ (80218b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 802187e:	8818      	ldrh	r0, [r3, #0]
 8021880:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021884:	4240      	negs	r0, r0
 8021886:	4770      	bx	lr
 8021888:	2903      	cmp	r1, #3
 802188a:	d80b      	bhi.n	80218a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 802188c:	a301      	add	r3, pc, #4	@ (adr r3, 8021894 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 802188e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021892:	bf00      	nop
 8021894:	08021873 	.word	0x08021873
 8021898:	080218ad 	.word	0x080218ad
 802189c:	0802187d 	.word	0x0802187d
 80218a0:	080218a9 	.word	0x080218a9
 80218a4:	2000      	movs	r0, #0
 80218a6:	4770      	bx	lr
 80218a8:	2001      	movs	r0, #1
 80218aa:	4770      	bx	lr
 80218ac:	f04f 30ff 	mov.w	r0, #4294967295
 80218b0:	4770      	bx	lr
 80218b2:	bf00      	nop
 80218b4:	200126da 	.word	0x200126da

080218b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80218b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218bc:	b099      	sub	sp, #100	@ 0x64
 80218be:	910b      	str	r1, [sp, #44]	@ 0x2c
 80218c0:	a914      	add	r1, sp, #80	@ 0x50
 80218c2:	e881 000c 	stmia.w	r1, {r2, r3}
 80218c6:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 80218ca:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 80218ce:	f891 900d 	ldrb.w	r9, [r1, #13]
 80218d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80218d4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80218d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80218da:	ea4f 1749 	mov.w	r7, r9, lsl #5
 80218de:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 80218e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80218e4:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 80218e8:	798f      	ldrb	r7, [r1, #6]
 80218ea:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 80218ee:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 80218f2:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 80218f6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 80218fa:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 80218fe:	431f      	orrs	r7, r3
 8021900:	f000 8195 	beq.w	8021c2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021904:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8021908:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 802190c:	f891 9007 	ldrb.w	r9, [r1, #7]
 8021910:	ea59 0903 	orrs.w	r9, r9, r3
 8021914:	f000 818b 	beq.w	8021c2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021918:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802191c:	b29b      	uxth	r3, r3
 802191e:	2d00      	cmp	r5, #0
 8021920:	f000 812e 	beq.w	8021b80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8021924:	1aed      	subs	r5, r5, r3
 8021926:	b2ad      	uxth	r5, r5
 8021928:	042b      	lsls	r3, r5, #16
 802192a:	d502      	bpl.n	8021932 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 802192c:	1b64      	subs	r4, r4, r5
 802192e:	b224      	sxth	r4, r4
 8021930:	2500      	movs	r5, #0
 8021932:	f9b2 1000 	ldrsh.w	r1, [r2]
 8021936:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 802193a:	428c      	cmp	r4, r1
 802193c:	b28b      	uxth	r3, r1
 802193e:	bfbf      	itttt	lt
 8021940:	18ed      	addlt	r5, r5, r3
 8021942:	1b2c      	sublt	r4, r5, r4
 8021944:	b2a5      	uxthlt	r5, r4
 8021946:	460c      	movlt	r4, r1
 8021948:	8891      	ldrh	r1, [r2, #4]
 802194a:	440b      	add	r3, r1
 802194c:	b21b      	sxth	r3, r3
 802194e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021950:	88d3      	ldrh	r3, [r2, #6]
 8021952:	8852      	ldrh	r2, [r2, #2]
 8021954:	4413      	add	r3, r2
 8021956:	b21b      	sxth	r3, r3
 8021958:	930d      	str	r3, [sp, #52]	@ 0x34
 802195a:	4bbe      	ldr	r3, [pc, #760]	@ (8021c54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 802195c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802195e:	f893 b000 	ldrb.w	fp, [r3]
 8021962:	f10b 3cff 	add.w	ip, fp, #4294967295
 8021966:	f1dc 0300 	rsbs	r3, ip, #0
 802196a:	eb43 030c 	adc.w	r3, r3, ip
 802196e:	930e      	str	r3, [sp, #56]	@ 0x38
 8021970:	4621      	mov	r1, r4
 8021972:	4653      	mov	r3, sl
 8021974:	a814      	add	r0, sp, #80	@ 0x50
 8021976:	f7f6 fd64 	bl	8018442 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 802197a:	4621      	mov	r1, r4
 802197c:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8021980:	4653      	mov	r3, sl
 8021982:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021984:	a814      	add	r0, sp, #80	@ 0x50
 8021986:	f7f6 fd79 	bl	801847c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 802198a:	a918      	add	r1, sp, #96	@ 0x60
 802198c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8021990:	a817      	add	r0, sp, #92	@ 0x5c
 8021992:	f7f6 fe9f 	bl	80186d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8021996:	f1ba 0f00 	cmp.w	sl, #0
 802199a:	f040 80f4 	bne.w	8021b86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 802199e:	f1bb 0f01 	cmp.w	fp, #1
 80219a2:	f040 80f8 	bne.w	8021b96 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 80219a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80219a8:	2b00      	cmp	r3, #0
 80219aa:	f040 8145 	bne.w	8021c38 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 80219ae:	b2ba      	uxth	r2, r7
 80219b0:	b905      	cbnz	r5, 80219b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 80219b2:	b16e      	cbz	r6, 80219d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 80219b4:	fb06 5302 	mla	r3, r6, r2, r5
 80219b8:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 80219ba:	fb08 f303 	mul.w	r3, r8, r3
 80219be:	4631      	mov	r1, r6
 80219c0:	f003 0607 	and.w	r6, r3, #7
 80219c4:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 80219c8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80219ca:	eba9 0301 	sub.w	r3, r9, r1
 80219ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80219d0:	4651      	mov	r1, sl
 80219d2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80219d4:	f7ff ff1c 	bl	8021810 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80219d8:	4681      	mov	r9, r0
 80219da:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80219dc:	f7ff ff42 	bl	8021864 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80219e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80219e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80219e4:	eba3 0a01 	sub.w	sl, r3, r1
 80219e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80219ea:	459a      	cmp	sl, r3
 80219ec:	bfa8      	it	ge
 80219ee:	469a      	movge	sl, r3
 80219f0:	f1ba 0f00 	cmp.w	sl, #0
 80219f4:	4683      	mov	fp, r0
 80219f6:	f340 811a 	ble.w	8021c2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80219fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80219fc:	1b64      	subs	r4, r4, r5
 80219fe:	1b1c      	subs	r4, r3, r4
 8021a00:	42bc      	cmp	r4, r7
 8021a02:	bfd4      	ite	le
 8021a04:	ebc5 0504 	rsble	r5, r5, r4
 8021a08:	ebc5 0507 	rsbgt	r5, r5, r7
 8021a0c:	2d00      	cmp	r5, #0
 8021a0e:	f340 810e 	ble.w	8021c2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021a12:	1b52      	subs	r2, r2, r5
 8021a14:	fb08 f302 	mul.w	r3, r8, r2
 8021a18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021a1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021a1c:	2b00      	cmp	r3, #0
 8021a1e:	f040 8116 	bne.w	8021c4e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8021a22:	4b8d      	ldr	r3, [pc, #564]	@ (8021c58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8021a24:	6818      	ldr	r0, [r3, #0]
 8021a26:	6803      	ldr	r3, [r0, #0]
 8021a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021a2a:	4798      	blx	r3
 8021a2c:	2301      	movs	r3, #1
 8021a2e:	fa03 f308 	lsl.w	r3, r3, r8
 8021a32:	4a8a      	ldr	r2, [pc, #552]	@ (8021c5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8021a34:	3b01      	subs	r3, #1
 8021a36:	b2db      	uxtb	r3, r3
 8021a38:	8811      	ldrh	r1, [r2, #0]
 8021a3a:	930e      	str	r3, [sp, #56]	@ 0x38
 8021a3c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 8021a40:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8021a44:	fb01 2303 	mla	r3, r1, r3, r2
 8021a48:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021a4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8021a4e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021a50:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8021a54:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021a56:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021a58:	0a19      	lsrs	r1, r3, #8
 8021a5a:	b2cb      	uxtb	r3, r1
 8021a5c:	9312      	str	r3, [sp, #72]	@ 0x48
 8021a5e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021a60:	b2db      	uxtb	r3, r3
 8021a62:	9311      	str	r3, [sp, #68]	@ 0x44
 8021a64:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021a66:	095a      	lsrs	r2, r3, #5
 8021a68:	4b7d      	ldr	r3, [pc, #500]	@ (8021c60 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8021a6a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021a6e:	400b      	ands	r3, r1
 8021a70:	4313      	orrs	r3, r2
 8021a72:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8021a74:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021a78:	4313      	orrs	r3, r2
 8021a7a:	b29b      	uxth	r3, r3
 8021a7c:	9310      	str	r3, [sp, #64]	@ 0x40
 8021a7e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021a80:	781a      	ldrb	r2, [r3, #0]
 8021a82:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8021a86:	4132      	asrs	r2, r6
 8021a88:	fb05 b919 	mls	r9, r5, r9, fp
 8021a8c:	fb03 fb05 	mul.w	fp, r3, r5
 8021a90:	b2d2      	uxtb	r2, r2
 8021a92:	930d      	str	r3, [sp, #52]	@ 0x34
 8021a94:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8021a98:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8021a9c:	f0c0 80f5 	bcc.w	8021c8a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8021aa0:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8021aa4:	46ae      	mov	lr, r5
 8021aa6:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8021aaa:	f0c0 80dd 	bcc.w	8021c68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8021aae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021ab0:	4013      	ands	r3, r2
 8021ab2:	d055      	beq.n	8021b60 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8021ab4:	20ff      	movs	r0, #255	@ 0xff
 8021ab6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8021ab8:	fb90 f1f1 	sdiv	r1, r0, r1
 8021abc:	434b      	muls	r3, r1
 8021abe:	2bfe      	cmp	r3, #254	@ 0xfe
 8021ac0:	dd03      	ble.n	8021aca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 8021ac2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021ac4:	4281      	cmp	r1, r0
 8021ac6:	f000 80cd 	beq.w	8021c64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 8021aca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021acc:	f8bc 4000 	ldrh.w	r4, [ip]
 8021ad0:	fb11 f303 	smulbb	r3, r1, r3
 8021ad4:	b29b      	uxth	r3, r3
 8021ad6:	1c59      	adds	r1, r3, #1
 8021ad8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021adc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021ae0:	b29f      	uxth	r7, r3
 8021ae2:	43db      	mvns	r3, r3
 8021ae4:	b2db      	uxtb	r3, r3
 8021ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8021ae8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021aea:	1220      	asrs	r0, r4, #8
 8021aec:	fb13 f907 	smulbb	r9, r3, r7
 8021af0:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8021af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021af6:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8021afa:	fb00 9003 	mla	r0, r0, r3, r9
 8021afe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021b00:	10e1      	asrs	r1, r4, #3
 8021b02:	fb13 f907 	smulbb	r9, r3, r7
 8021b06:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8021b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b0c:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8021b10:	fb01 9103 	mla	r1, r1, r3, r9
 8021b14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021b16:	00e4      	lsls	r4, r4, #3
 8021b18:	fb13 f707 	smulbb	r7, r3, r7
 8021b1c:	b2e4      	uxtb	r4, r4
 8021b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b20:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021b24:	fb04 7403 	mla	r4, r4, r3, r7
 8021b28:	b280      	uxth	r0, r0
 8021b2a:	b2a4      	uxth	r4, r4
 8021b2c:	1c43      	adds	r3, r0, #1
 8021b2e:	f104 0901 	add.w	r9, r4, #1
 8021b32:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021b36:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8021b3a:	b289      	uxth	r1, r1
 8021b3c:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8021b40:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8021b44:	ea49 0000 	orr.w	r0, r9, r0
 8021b48:	f101 0901 	add.w	r9, r1, #1
 8021b4c:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8021b50:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021b54:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8021b58:	ea40 0009 	orr.w	r0, r0, r9
 8021b5c:	f8ac 0000 	strh.w	r0, [ip]
 8021b60:	4446      	add	r6, r8
 8021b62:	b2b6      	uxth	r6, r6
 8021b64:	2e07      	cmp	r6, #7
 8021b66:	bf81      	itttt	hi
 8021b68:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 8021b6a:	785a      	ldrbhi	r2, [r3, #1]
 8021b6c:	3301      	addhi	r3, #1
 8021b6e:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 8021b70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021b72:	bf9a      	itte	ls
 8021b74:	fa42 f208 	asrls.w	r2, r2, r8
 8021b78:	b2d2      	uxtbls	r2, r2
 8021b7a:	2600      	movhi	r6, #0
 8021b7c:	449c      	add	ip, r3
 8021b7e:	e792      	b.n	8021aa6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8021b80:	441c      	add	r4, r3
 8021b82:	b224      	sxth	r4, r4
 8021b84:	e6d5      	b.n	8021932 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8021b86:	f1ba 0f01 	cmp.w	sl, #1
 8021b8a:	f47f af0c 	bne.w	80219a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8021b8e:	f1bb 0f01 	cmp.w	fp, #1
 8021b92:	f47f af08 	bne.w	80219a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8021b96:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 8021c58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 8021b9a:	f8db 0000 	ldr.w	r0, [fp]
 8021b9e:	6803      	ldr	r3, [r0, #0]
 8021ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021ba2:	4798      	blx	r3
 8021ba4:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8021ba8:	465a      	mov	r2, fp
 8021baa:	d006      	beq.n	8021bba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8021bac:	f1b8 0f04 	cmp.w	r8, #4
 8021bb0:	d140      	bne.n	8021c34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8021bb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021bb4:	3300      	adds	r3, #0
 8021bb6:	bf18      	it	ne
 8021bb8:	2301      	movne	r3, #1
 8021bba:	0580      	lsls	r0, r0, #22
 8021bbc:	d56e      	bpl.n	8021c9c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8021bbe:	f1b8 0f08 	cmp.w	r8, #8
 8021bc2:	d16b      	bne.n	8021c9c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8021bc4:	2b00      	cmp	r3, #0
 8021bc6:	bf0c      	ite	eq
 8021bc8:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8021bcc:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8021bd0:	2d00      	cmp	r5, #0
 8021bd2:	f47f aee8 	bne.w	80219a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8021bd6:	2e00      	cmp	r6, #0
 8021bd8:	f47f aee5 	bne.w	80219a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8021bdc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021bde:	19e3      	adds	r3, r4, r7
 8021be0:	4283      	cmp	r3, r0
 8021be2:	f73f aee0 	bgt.w	80219a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8021be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021be8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021bea:	444b      	add	r3, r9
 8021bec:	4283      	cmp	r3, r0
 8021bee:	f73f aeda 	bgt.w	80219a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8021bf2:	6810      	ldr	r0, [r2, #0]
 8021bf4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 8021bf8:	6804      	ldr	r4, [r0, #0]
 8021bfa:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8021bfe:	b2bf      	uxth	r7, r7
 8021c00:	f1b8 0f08 	cmp.w	r8, #8
 8021c04:	f04f 0500 	mov.w	r5, #0
 8021c08:	bf18      	it	ne
 8021c0a:	3701      	addne	r7, #1
 8021c0c:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8021c10:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021c12:	9104      	str	r1, [sp, #16]
 8021c14:	bf18      	it	ne
 8021c16:	f027 0701 	bicne.w	r7, r7, #1
 8021c1a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8021c1c:	bf18      	it	ne
 8021c1e:	b2bf      	uxthne	r7, r7
 8021c20:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8021c24:	e9cd 7900 	strd	r7, r9, [sp]
 8021c28:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8021c2a:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8021c2c:	47a0      	blx	r4
 8021c2e:	b019      	add	sp, #100	@ 0x64
 8021c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c34:	2300      	movs	r3, #0
 8021c36:	e7c0      	b.n	8021bba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8021c38:	2208      	movs	r2, #8
 8021c3a:	fb92 f3f8 	sdiv	r3, r2, r8
 8021c3e:	1e5a      	subs	r2, r3, #1
 8021c40:	443a      	add	r2, r7
 8021c42:	fb92 f2f3 	sdiv	r2, r2, r3
 8021c46:	fb12 f203 	smulbb	r2, r2, r3
 8021c4a:	b292      	uxth	r2, r2
 8021c4c:	e6b0      	b.n	80219b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8021c4e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8021c50:	e6ec      	b.n	8021a2c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8021c52:	bf00      	nop
 8021c54:	200126d8 	.word	0x200126d8
 8021c58:	200126e0 	.word	0x200126e0
 8021c5c:	200126da 	.word	0x200126da
 8021c60:	00fff800 	.word	0x00fff800
 8021c64:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021c66:	e779      	b.n	8021b5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8021c68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021c6a:	b153      	cbz	r3, 8021c82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8021c6c:	441e      	add	r6, r3
 8021c6e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021c70:	b2b6      	uxth	r6, r6
 8021c72:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 8021c76:	f006 0607 	and.w	r6, r6, #7
 8021c7a:	781a      	ldrb	r2, [r3, #0]
 8021c7c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8021c7e:	4132      	asrs	r2, r6
 8021c80:	b2d2      	uxtb	r2, r2
 8021c82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021c84:	445b      	add	r3, fp
 8021c86:	930a      	str	r3, [sp, #40]	@ 0x28
 8021c88:	e706      	b.n	8021a98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 8021c8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021c8c:	2b00      	cmp	r3, #0
 8021c8e:	d1ce      	bne.n	8021c2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021c90:	4b05      	ldr	r3, [pc, #20]	@ (8021ca8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 8021c92:	6818      	ldr	r0, [r3, #0]
 8021c94:	6803      	ldr	r3, [r0, #0]
 8021c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021c98:	4798      	blx	r3
 8021c9a:	e7c8      	b.n	8021c2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021c9c:	2b00      	cmp	r3, #0
 8021c9e:	f43f ae82 	beq.w	80219a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8021ca2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8021ca6:	e793      	b.n	8021bd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8021ca8:	200126e0 	.word	0x200126e0

08021cac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8021cac:	b538      	push	{r3, r4, r5, lr}
 8021cae:	4c15      	ldr	r4, [pc, #84]	@ (8021d04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8021cb0:	7823      	ldrb	r3, [r4, #0]
 8021cb2:	f3bf 8f5b 	dmb	ish
 8021cb6:	07da      	lsls	r2, r3, #31
 8021cb8:	4605      	mov	r5, r0
 8021cba:	d40b      	bmi.n	8021cd4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021cbc:	4620      	mov	r0, r4
 8021cbe:	f008 fc22 	bl	802a506 <__cxa_guard_acquire>
 8021cc2:	b138      	cbz	r0, 8021cd4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021cc4:	4620      	mov	r0, r4
 8021cc6:	f008 fc2a 	bl	802a51e <__cxa_guard_release>
 8021cca:	4a0f      	ldr	r2, [pc, #60]	@ (8021d08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021ccc:	490f      	ldr	r1, [pc, #60]	@ (8021d0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8021cce:	4810      	ldr	r0, [pc, #64]	@ (8021d10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021cd0:	f008 fc12 	bl	802a4f8 <__aeabi_atexit>
 8021cd4:	4c0f      	ldr	r4, [pc, #60]	@ (8021d14 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8021cd6:	7823      	ldrb	r3, [r4, #0]
 8021cd8:	f3bf 8f5b 	dmb	ish
 8021cdc:	07db      	lsls	r3, r3, #31
 8021cde:	d40b      	bmi.n	8021cf8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021ce0:	4620      	mov	r0, r4
 8021ce2:	f008 fc10 	bl	802a506 <__cxa_guard_acquire>
 8021ce6:	b138      	cbz	r0, 8021cf8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021ce8:	4620      	mov	r0, r4
 8021cea:	f008 fc18 	bl	802a51e <__cxa_guard_release>
 8021cee:	4a06      	ldr	r2, [pc, #24]	@ (8021d08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021cf0:	4909      	ldr	r1, [pc, #36]	@ (8021d18 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8021cf2:	480a      	ldr	r0, [pc, #40]	@ (8021d1c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8021cf4:	f008 fc00 	bl	802a4f8 <__aeabi_atexit>
 8021cf8:	4b05      	ldr	r3, [pc, #20]	@ (8021d10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021cfa:	616b      	str	r3, [r5, #20]
 8021cfc:	4b07      	ldr	r3, [pc, #28]	@ (8021d1c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8021cfe:	61ab      	str	r3, [r5, #24]
 8021d00:	bd38      	pop	{r3, r4, r5, pc}
 8021d02:	bf00      	nop
 8021d04:	200127c0 	.word	0x200127c0
 8021d08:	20000000 	.word	0x20000000
 8021d0c:	0801eab9 	.word	0x0801eab9
 8021d10:	200000d8 	.word	0x200000d8
 8021d14:	200127c4 	.word	0x200127c4
 8021d18:	0801eab7 	.word	0x0801eab7
 8021d1c:	200000dc 	.word	0x200000dc

08021d20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8021d20:	b538      	push	{r3, r4, r5, lr}
 8021d22:	4c15      	ldr	r4, [pc, #84]	@ (8021d78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8021d24:	7823      	ldrb	r3, [r4, #0]
 8021d26:	f3bf 8f5b 	dmb	ish
 8021d2a:	07da      	lsls	r2, r3, #31
 8021d2c:	4605      	mov	r5, r0
 8021d2e:	d40b      	bmi.n	8021d48 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8021d30:	4620      	mov	r0, r4
 8021d32:	f008 fbe8 	bl	802a506 <__cxa_guard_acquire>
 8021d36:	b138      	cbz	r0, 8021d48 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8021d38:	4620      	mov	r0, r4
 8021d3a:	f008 fbf0 	bl	802a51e <__cxa_guard_release>
 8021d3e:	4a0f      	ldr	r2, [pc, #60]	@ (8021d7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8021d40:	490f      	ldr	r1, [pc, #60]	@ (8021d80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8021d42:	4810      	ldr	r0, [pc, #64]	@ (8021d84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8021d44:	f008 fbd8 	bl	802a4f8 <__aeabi_atexit>
 8021d48:	4c0f      	ldr	r4, [pc, #60]	@ (8021d88 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8021d4a:	7823      	ldrb	r3, [r4, #0]
 8021d4c:	f3bf 8f5b 	dmb	ish
 8021d50:	07db      	lsls	r3, r3, #31
 8021d52:	d40b      	bmi.n	8021d6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8021d54:	4620      	mov	r0, r4
 8021d56:	f008 fbd6 	bl	802a506 <__cxa_guard_acquire>
 8021d5a:	b138      	cbz	r0, 8021d6c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8021d5c:	4620      	mov	r0, r4
 8021d5e:	f008 fbde 	bl	802a51e <__cxa_guard_release>
 8021d62:	4a06      	ldr	r2, [pc, #24]	@ (8021d7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8021d64:	4909      	ldr	r1, [pc, #36]	@ (8021d8c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8021d66:	480a      	ldr	r0, [pc, #40]	@ (8021d90 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8021d68:	f008 fbc6 	bl	802a4f8 <__aeabi_atexit>
 8021d6c:	4b05      	ldr	r3, [pc, #20]	@ (8021d84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8021d6e:	60eb      	str	r3, [r5, #12]
 8021d70:	4b07      	ldr	r3, [pc, #28]	@ (8021d90 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8021d72:	612b      	str	r3, [r5, #16]
 8021d74:	bd38      	pop	{r3, r4, r5, pc}
 8021d76:	bf00      	nop
 8021d78:	20012798 	.word	0x20012798
 8021d7c:	20000000 	.word	0x20000000
 8021d80:	0801eabd 	.word	0x0801eabd
 8021d84:	200000b0 	.word	0x200000b0
 8021d88:	2001279c 	.word	0x2001279c
 8021d8c:	0801eabb 	.word	0x0801eabb
 8021d90:	200000b4 	.word	0x200000b4

08021d94 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8021d94:	b510      	push	{r4, lr}
 8021d96:	4604      	mov	r4, r0
 8021d98:	f7ff ff88 	bl	8021cac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8021d9c:	4620      	mov	r0, r4
 8021d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021da2:	f7ff bfbd 	b.w	8021d20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08021da8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8021da8:	b538      	push	{r3, r4, r5, lr}
 8021daa:	4c15      	ldr	r4, [pc, #84]	@ (8021e00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021dac:	7823      	ldrb	r3, [r4, #0]
 8021dae:	f3bf 8f5b 	dmb	ish
 8021db2:	07da      	lsls	r2, r3, #31
 8021db4:	4605      	mov	r5, r0
 8021db6:	d40b      	bmi.n	8021dd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021db8:	4620      	mov	r0, r4
 8021dba:	f008 fba4 	bl	802a506 <__cxa_guard_acquire>
 8021dbe:	b138      	cbz	r0, 8021dd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021dc0:	4620      	mov	r0, r4
 8021dc2:	f008 fbac 	bl	802a51e <__cxa_guard_release>
 8021dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8021e04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021dc8:	490f      	ldr	r1, [pc, #60]	@ (8021e08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8021dca:	4810      	ldr	r0, [pc, #64]	@ (8021e0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021dcc:	f008 fb94 	bl	802a4f8 <__aeabi_atexit>
 8021dd0:	4c0f      	ldr	r4, [pc, #60]	@ (8021e10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8021dd2:	7823      	ldrb	r3, [r4, #0]
 8021dd4:	f3bf 8f5b 	dmb	ish
 8021dd8:	07db      	lsls	r3, r3, #31
 8021dda:	d40b      	bmi.n	8021df4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021ddc:	4620      	mov	r0, r4
 8021dde:	f008 fb92 	bl	802a506 <__cxa_guard_acquire>
 8021de2:	b138      	cbz	r0, 8021df4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021de4:	4620      	mov	r0, r4
 8021de6:	f008 fb9a 	bl	802a51e <__cxa_guard_release>
 8021dea:	4a06      	ldr	r2, [pc, #24]	@ (8021e04 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021dec:	4909      	ldr	r1, [pc, #36]	@ (8021e14 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8021dee:	480a      	ldr	r0, [pc, #40]	@ (8021e18 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021df0:	f008 fb82 	bl	802a4f8 <__aeabi_atexit>
 8021df4:	4b05      	ldr	r3, [pc, #20]	@ (8021e0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021df6:	626b      	str	r3, [r5, #36]	@ 0x24
 8021df8:	4b07      	ldr	r3, [pc, #28]	@ (8021e18 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021dfa:	62ab      	str	r3, [r5, #40]	@ 0x28
 8021dfc:	bd38      	pop	{r3, r4, r5, pc}
 8021dfe:	bf00      	nop
 8021e00:	200127c8 	.word	0x200127c8
 8021e04:	20000000 	.word	0x20000000
 8021e08:	0801eab1 	.word	0x0801eab1
 8021e0c:	200000e0 	.word	0x200000e0
 8021e10:	200127cc 	.word	0x200127cc
 8021e14:	0801eaaf 	.word	0x0801eaaf
 8021e18:	200000e4 	.word	0x200000e4

08021e1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8021e1c:	b538      	push	{r3, r4, r5, lr}
 8021e1e:	4c15      	ldr	r4, [pc, #84]	@ (8021e74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8021e20:	7823      	ldrb	r3, [r4, #0]
 8021e22:	f3bf 8f5b 	dmb	ish
 8021e26:	07da      	lsls	r2, r3, #31
 8021e28:	4605      	mov	r5, r0
 8021e2a:	d40b      	bmi.n	8021e44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021e2c:	4620      	mov	r0, r4
 8021e2e:	f008 fb6a 	bl	802a506 <__cxa_guard_acquire>
 8021e32:	b138      	cbz	r0, 8021e44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021e34:	4620      	mov	r0, r4
 8021e36:	f008 fb72 	bl	802a51e <__cxa_guard_release>
 8021e3a:	4a0f      	ldr	r2, [pc, #60]	@ (8021e78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021e3c:	490f      	ldr	r1, [pc, #60]	@ (8021e7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8021e3e:	4810      	ldr	r0, [pc, #64]	@ (8021e80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021e40:	f008 fb5a 	bl	802a4f8 <__aeabi_atexit>
 8021e44:	4c0f      	ldr	r4, [pc, #60]	@ (8021e84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8021e46:	7823      	ldrb	r3, [r4, #0]
 8021e48:	f3bf 8f5b 	dmb	ish
 8021e4c:	07db      	lsls	r3, r3, #31
 8021e4e:	d40b      	bmi.n	8021e68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021e50:	4620      	mov	r0, r4
 8021e52:	f008 fb58 	bl	802a506 <__cxa_guard_acquire>
 8021e56:	b138      	cbz	r0, 8021e68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021e58:	4620      	mov	r0, r4
 8021e5a:	f008 fb60 	bl	802a51e <__cxa_guard_release>
 8021e5e:	4a06      	ldr	r2, [pc, #24]	@ (8021e78 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021e60:	4909      	ldr	r1, [pc, #36]	@ (8021e88 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8021e62:	480a      	ldr	r0, [pc, #40]	@ (8021e8c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021e64:	f008 fb48 	bl	802a4f8 <__aeabi_atexit>
 8021e68:	4b05      	ldr	r3, [pc, #20]	@ (8021e80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021e6a:	61eb      	str	r3, [r5, #28]
 8021e6c:	4b07      	ldr	r3, [pc, #28]	@ (8021e8c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021e6e:	622b      	str	r3, [r5, #32]
 8021e70:	bd38      	pop	{r3, r4, r5, pc}
 8021e72:	bf00      	nop
 8021e74:	200127a0 	.word	0x200127a0
 8021e78:	20000000 	.word	0x20000000
 8021e7c:	0801eab5 	.word	0x0801eab5
 8021e80:	200000b8 	.word	0x200000b8
 8021e84:	200127a4 	.word	0x200127a4
 8021e88:	0801eab3 	.word	0x0801eab3
 8021e8c:	200000bc 	.word	0x200000bc

08021e90 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8021e90:	b510      	push	{r4, lr}
 8021e92:	4604      	mov	r4, r0
 8021e94:	f7ff ff88 	bl	8021da8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8021e98:	4620      	mov	r0, r4
 8021e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e9e:	f7ff bfbd 	b.w	8021e1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021ea4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021ea4:	b538      	push	{r3, r4, r5, lr}
 8021ea6:	4c15      	ldr	r4, [pc, #84]	@ (8021efc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8021ea8:	7823      	ldrb	r3, [r4, #0]
 8021eaa:	f3bf 8f5b 	dmb	ish
 8021eae:	07da      	lsls	r2, r3, #31
 8021eb0:	4605      	mov	r5, r0
 8021eb2:	d40b      	bmi.n	8021ecc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021eb4:	4620      	mov	r0, r4
 8021eb6:	f008 fb26 	bl	802a506 <__cxa_guard_acquire>
 8021eba:	b138      	cbz	r0, 8021ecc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021ebc:	4620      	mov	r0, r4
 8021ebe:	f008 fb2e 	bl	802a51e <__cxa_guard_release>
 8021ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8021f00 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021ec4:	490f      	ldr	r1, [pc, #60]	@ (8021f04 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8021ec6:	4810      	ldr	r0, [pc, #64]	@ (8021f08 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021ec8:	f008 fb16 	bl	802a4f8 <__aeabi_atexit>
 8021ecc:	4c0f      	ldr	r4, [pc, #60]	@ (8021f0c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8021ece:	7823      	ldrb	r3, [r4, #0]
 8021ed0:	f3bf 8f5b 	dmb	ish
 8021ed4:	07db      	lsls	r3, r3, #31
 8021ed6:	d40b      	bmi.n	8021ef0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021ed8:	4620      	mov	r0, r4
 8021eda:	f008 fb14 	bl	802a506 <__cxa_guard_acquire>
 8021ede:	b138      	cbz	r0, 8021ef0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021ee0:	4620      	mov	r0, r4
 8021ee2:	f008 fb1c 	bl	802a51e <__cxa_guard_release>
 8021ee6:	4a06      	ldr	r2, [pc, #24]	@ (8021f00 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021ee8:	4909      	ldr	r1, [pc, #36]	@ (8021f10 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8021eea:	480a      	ldr	r0, [pc, #40]	@ (8021f14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021eec:	f008 fb04 	bl	802a4f8 <__aeabi_atexit>
 8021ef0:	4b05      	ldr	r3, [pc, #20]	@ (8021f08 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021ef2:	636b      	str	r3, [r5, #52]	@ 0x34
 8021ef4:	4b07      	ldr	r3, [pc, #28]	@ (8021f14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021ef6:	63ab      	str	r3, [r5, #56]	@ 0x38
 8021ef8:	bd38      	pop	{r3, r4, r5, pc}
 8021efa:	bf00      	nop
 8021efc:	200127d8 	.word	0x200127d8
 8021f00:	20000000 	.word	0x20000000
 8021f04:	0801eaa9 	.word	0x0801eaa9
 8021f08:	200000f0 	.word	0x200000f0
 8021f0c:	200127dc 	.word	0x200127dc
 8021f10:	0801eaa7 	.word	0x0801eaa7
 8021f14:	200000f4 	.word	0x200000f4

08021f18 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021f18:	b538      	push	{r3, r4, r5, lr}
 8021f1a:	4c15      	ldr	r4, [pc, #84]	@ (8021f70 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8021f1c:	7823      	ldrb	r3, [r4, #0]
 8021f1e:	f3bf 8f5b 	dmb	ish
 8021f22:	07da      	lsls	r2, r3, #31
 8021f24:	4605      	mov	r5, r0
 8021f26:	d40b      	bmi.n	8021f40 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021f28:	4620      	mov	r0, r4
 8021f2a:	f008 faec 	bl	802a506 <__cxa_guard_acquire>
 8021f2e:	b138      	cbz	r0, 8021f40 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021f30:	4620      	mov	r0, r4
 8021f32:	f008 faf4 	bl	802a51e <__cxa_guard_release>
 8021f36:	4a0f      	ldr	r2, [pc, #60]	@ (8021f74 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021f38:	490f      	ldr	r1, [pc, #60]	@ (8021f78 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8021f3a:	4810      	ldr	r0, [pc, #64]	@ (8021f7c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021f3c:	f008 fadc 	bl	802a4f8 <__aeabi_atexit>
 8021f40:	4c0f      	ldr	r4, [pc, #60]	@ (8021f80 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8021f42:	7823      	ldrb	r3, [r4, #0]
 8021f44:	f3bf 8f5b 	dmb	ish
 8021f48:	07db      	lsls	r3, r3, #31
 8021f4a:	d40b      	bmi.n	8021f64 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021f4c:	4620      	mov	r0, r4
 8021f4e:	f008 fada 	bl	802a506 <__cxa_guard_acquire>
 8021f52:	b138      	cbz	r0, 8021f64 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021f54:	4620      	mov	r0, r4
 8021f56:	f008 fae2 	bl	802a51e <__cxa_guard_release>
 8021f5a:	4a06      	ldr	r2, [pc, #24]	@ (8021f74 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021f5c:	4909      	ldr	r1, [pc, #36]	@ (8021f84 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8021f5e:	480a      	ldr	r0, [pc, #40]	@ (8021f88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021f60:	f008 faca 	bl	802a4f8 <__aeabi_atexit>
 8021f64:	4b05      	ldr	r3, [pc, #20]	@ (8021f7c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021f66:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8021f68:	4b07      	ldr	r3, [pc, #28]	@ (8021f88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021f6a:	632b      	str	r3, [r5, #48]	@ 0x30
 8021f6c:	bd38      	pop	{r3, r4, r5, pc}
 8021f6e:	bf00      	nop
 8021f70:	200127a8 	.word	0x200127a8
 8021f74:	20000000 	.word	0x20000000
 8021f78:	0801eaad 	.word	0x0801eaad
 8021f7c:	200000c0 	.word	0x200000c0
 8021f80:	200127ac 	.word	0x200127ac
 8021f84:	0801eaab 	.word	0x0801eaab
 8021f88:	200000c4 	.word	0x200000c4

08021f8c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8021f8c:	b510      	push	{r4, lr}
 8021f8e:	4604      	mov	r4, r0
 8021f90:	f7ff ff88 	bl	8021ea4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021f94:	4620      	mov	r0, r4
 8021f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f9a:	f7ff bfbd 	b.w	8021f18 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021fa0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8021fa0:	b538      	push	{r3, r4, r5, lr}
 8021fa2:	4c15      	ldr	r4, [pc, #84]	@ (8021ff8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8021fa4:	7823      	ldrb	r3, [r4, #0]
 8021fa6:	f3bf 8f5b 	dmb	ish
 8021faa:	07da      	lsls	r2, r3, #31
 8021fac:	4605      	mov	r5, r0
 8021fae:	d40b      	bmi.n	8021fc8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021fb0:	4620      	mov	r0, r4
 8021fb2:	f008 faa8 	bl	802a506 <__cxa_guard_acquire>
 8021fb6:	b138      	cbz	r0, 8021fc8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021fb8:	4620      	mov	r0, r4
 8021fba:	f008 fab0 	bl	802a51e <__cxa_guard_release>
 8021fbe:	4a0f      	ldr	r2, [pc, #60]	@ (8021ffc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021fc0:	490f      	ldr	r1, [pc, #60]	@ (8022000 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8021fc2:	4810      	ldr	r0, [pc, #64]	@ (8022004 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021fc4:	f008 fa98 	bl	802a4f8 <__aeabi_atexit>
 8021fc8:	4c0f      	ldr	r4, [pc, #60]	@ (8022008 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8021fca:	7823      	ldrb	r3, [r4, #0]
 8021fcc:	f3bf 8f5b 	dmb	ish
 8021fd0:	07db      	lsls	r3, r3, #31
 8021fd2:	d40b      	bmi.n	8021fec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021fd4:	4620      	mov	r0, r4
 8021fd6:	f008 fa96 	bl	802a506 <__cxa_guard_acquire>
 8021fda:	b138      	cbz	r0, 8021fec <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021fdc:	4620      	mov	r0, r4
 8021fde:	f008 fa9e 	bl	802a51e <__cxa_guard_release>
 8021fe2:	4a06      	ldr	r2, [pc, #24]	@ (8021ffc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021fe4:	4909      	ldr	r1, [pc, #36]	@ (802200c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8021fe6:	480a      	ldr	r0, [pc, #40]	@ (8022010 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021fe8:	f008 fa86 	bl	802a4f8 <__aeabi_atexit>
 8021fec:	4b05      	ldr	r3, [pc, #20]	@ (8022004 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021fee:	656b      	str	r3, [r5, #84]	@ 0x54
 8021ff0:	4b07      	ldr	r3, [pc, #28]	@ (8022010 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021ff2:	65ab      	str	r3, [r5, #88]	@ 0x58
 8021ff4:	bd38      	pop	{r3, r4, r5, pc}
 8021ff6:	bf00      	nop
 8021ff8:	200127e0 	.word	0x200127e0
 8021ffc:	20000000 	.word	0x20000000
 8022000:	0801ea99 	.word	0x0801ea99
 8022004:	200000f8 	.word	0x200000f8
 8022008:	200127e4 	.word	0x200127e4
 802200c:	0801ea97 	.word	0x0801ea97
 8022010:	200000fc 	.word	0x200000fc

08022014 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8022014:	b538      	push	{r3, r4, r5, lr}
 8022016:	4c15      	ldr	r4, [pc, #84]	@ (802206c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8022018:	7823      	ldrb	r3, [r4, #0]
 802201a:	f3bf 8f5b 	dmb	ish
 802201e:	07da      	lsls	r2, r3, #31
 8022020:	4605      	mov	r5, r0
 8022022:	d40b      	bmi.n	802203c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8022024:	4620      	mov	r0, r4
 8022026:	f008 fa6e 	bl	802a506 <__cxa_guard_acquire>
 802202a:	b138      	cbz	r0, 802203c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 802202c:	4620      	mov	r0, r4
 802202e:	f008 fa76 	bl	802a51e <__cxa_guard_release>
 8022032:	4a0f      	ldr	r2, [pc, #60]	@ (8022070 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022034:	490f      	ldr	r1, [pc, #60]	@ (8022074 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8022036:	4810      	ldr	r0, [pc, #64]	@ (8022078 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8022038:	f008 fa5e 	bl	802a4f8 <__aeabi_atexit>
 802203c:	4c0f      	ldr	r4, [pc, #60]	@ (802207c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 802203e:	7823      	ldrb	r3, [r4, #0]
 8022040:	f3bf 8f5b 	dmb	ish
 8022044:	07db      	lsls	r3, r3, #31
 8022046:	d40b      	bmi.n	8022060 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022048:	4620      	mov	r0, r4
 802204a:	f008 fa5c 	bl	802a506 <__cxa_guard_acquire>
 802204e:	b138      	cbz	r0, 8022060 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022050:	4620      	mov	r0, r4
 8022052:	f008 fa64 	bl	802a51e <__cxa_guard_release>
 8022056:	4a06      	ldr	r2, [pc, #24]	@ (8022070 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022058:	4909      	ldr	r1, [pc, #36]	@ (8022080 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 802205a:	480a      	ldr	r0, [pc, #40]	@ (8022084 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802205c:	f008 fa4c 	bl	802a4f8 <__aeabi_atexit>
 8022060:	4b05      	ldr	r3, [pc, #20]	@ (8022078 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8022062:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8022064:	4b07      	ldr	r3, [pc, #28]	@ (8022084 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8022066:	652b      	str	r3, [r5, #80]	@ 0x50
 8022068:	bd38      	pop	{r3, r4, r5, pc}
 802206a:	bf00      	nop
 802206c:	200127e8 	.word	0x200127e8
 8022070:	20000000 	.word	0x20000000
 8022074:	0801ea9d 	.word	0x0801ea9d
 8022078:	20000100 	.word	0x20000100
 802207c:	200127ec 	.word	0x200127ec
 8022080:	0801ea9b 	.word	0x0801ea9b
 8022084:	20000104 	.word	0x20000104

08022088 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8022088:	b538      	push	{r3, r4, r5, lr}
 802208a:	4c15      	ldr	r4, [pc, #84]	@ (80220e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 802208c:	7823      	ldrb	r3, [r4, #0]
 802208e:	f3bf 8f5b 	dmb	ish
 8022092:	07da      	lsls	r2, r3, #31
 8022094:	4605      	mov	r5, r0
 8022096:	d40b      	bmi.n	80220b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022098:	4620      	mov	r0, r4
 802209a:	f008 fa34 	bl	802a506 <__cxa_guard_acquire>
 802209e:	b138      	cbz	r0, 80220b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80220a0:	4620      	mov	r0, r4
 80220a2:	f008 fa3c 	bl	802a51e <__cxa_guard_release>
 80220a6:	4a0f      	ldr	r2, [pc, #60]	@ (80220e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80220a8:	490f      	ldr	r1, [pc, #60]	@ (80220e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80220aa:	4810      	ldr	r0, [pc, #64]	@ (80220ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80220ac:	f008 fa24 	bl	802a4f8 <__aeabi_atexit>
 80220b0:	4c0f      	ldr	r4, [pc, #60]	@ (80220f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 80220b2:	7823      	ldrb	r3, [r4, #0]
 80220b4:	f3bf 8f5b 	dmb	ish
 80220b8:	07db      	lsls	r3, r3, #31
 80220ba:	d40b      	bmi.n	80220d4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80220bc:	4620      	mov	r0, r4
 80220be:	f008 fa22 	bl	802a506 <__cxa_guard_acquire>
 80220c2:	b138      	cbz	r0, 80220d4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80220c4:	4620      	mov	r0, r4
 80220c6:	f008 fa2a 	bl	802a51e <__cxa_guard_release>
 80220ca:	4a06      	ldr	r2, [pc, #24]	@ (80220e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80220cc:	4909      	ldr	r1, [pc, #36]	@ (80220f4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80220ce:	480a      	ldr	r0, [pc, #40]	@ (80220f8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80220d0:	f008 fa12 	bl	802a4f8 <__aeabi_atexit>
 80220d4:	4b05      	ldr	r3, [pc, #20]	@ (80220ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80220d6:	646b      	str	r3, [r5, #68]	@ 0x44
 80220d8:	4b07      	ldr	r3, [pc, #28]	@ (80220f8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80220da:	64ab      	str	r3, [r5, #72]	@ 0x48
 80220dc:	bd38      	pop	{r3, r4, r5, pc}
 80220de:	bf00      	nop
 80220e0:	200127b0 	.word	0x200127b0
 80220e4:	20000000 	.word	0x20000000
 80220e8:	0801eaa1 	.word	0x0801eaa1
 80220ec:	200000c8 	.word	0x200000c8
 80220f0:	200127b4 	.word	0x200127b4
 80220f4:	0801ea9f 	.word	0x0801ea9f
 80220f8:	200000cc 	.word	0x200000cc

080220fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80220fc:	b538      	push	{r3, r4, r5, lr}
 80220fe:	4c15      	ldr	r4, [pc, #84]	@ (8022154 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8022100:	7823      	ldrb	r3, [r4, #0]
 8022102:	f3bf 8f5b 	dmb	ish
 8022106:	07da      	lsls	r2, r3, #31
 8022108:	4605      	mov	r5, r0
 802210a:	d40b      	bmi.n	8022124 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 802210c:	4620      	mov	r0, r4
 802210e:	f008 f9fa 	bl	802a506 <__cxa_guard_acquire>
 8022112:	b138      	cbz	r0, 8022124 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022114:	4620      	mov	r0, r4
 8022116:	f008 fa02 	bl	802a51e <__cxa_guard_release>
 802211a:	4a0f      	ldr	r2, [pc, #60]	@ (8022158 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 802211c:	490f      	ldr	r1, [pc, #60]	@ (802215c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 802211e:	4810      	ldr	r0, [pc, #64]	@ (8022160 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022120:	f008 f9ea 	bl	802a4f8 <__aeabi_atexit>
 8022124:	4c0f      	ldr	r4, [pc, #60]	@ (8022164 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8022126:	7823      	ldrb	r3, [r4, #0]
 8022128:	f3bf 8f5b 	dmb	ish
 802212c:	07db      	lsls	r3, r3, #31
 802212e:	d40b      	bmi.n	8022148 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022130:	4620      	mov	r0, r4
 8022132:	f008 f9e8 	bl	802a506 <__cxa_guard_acquire>
 8022136:	b138      	cbz	r0, 8022148 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022138:	4620      	mov	r0, r4
 802213a:	f008 f9f0 	bl	802a51e <__cxa_guard_release>
 802213e:	4a06      	ldr	r2, [pc, #24]	@ (8022158 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022140:	4909      	ldr	r1, [pc, #36]	@ (8022168 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8022142:	480a      	ldr	r0, [pc, #40]	@ (802216c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022144:	f008 f9d8 	bl	802a4f8 <__aeabi_atexit>
 8022148:	4b05      	ldr	r3, [pc, #20]	@ (8022160 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 802214a:	63eb      	str	r3, [r5, #60]	@ 0x3c
 802214c:	4b07      	ldr	r3, [pc, #28]	@ (802216c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802214e:	642b      	str	r3, [r5, #64]	@ 0x40
 8022150:	bd38      	pop	{r3, r4, r5, pc}
 8022152:	bf00      	nop
 8022154:	200127d0 	.word	0x200127d0
 8022158:	20000000 	.word	0x20000000
 802215c:	0801eaa5 	.word	0x0801eaa5
 8022160:	200000e8 	.word	0x200000e8
 8022164:	200127d4 	.word	0x200127d4
 8022168:	0801eaa3 	.word	0x0801eaa3
 802216c:	200000ec 	.word	0x200000ec

08022170 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8022170:	b510      	push	{r4, lr}
 8022172:	4604      	mov	r4, r0
 8022174:	f7ff ff14 	bl	8021fa0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8022178:	4620      	mov	r0, r4
 802217a:	f7ff ff85 	bl	8022088 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 802217e:	4620      	mov	r0, r4
 8022180:	f7ff ff48 	bl	8022014 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8022184:	4620      	mov	r0, r4
 8022186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802218a:	f7ff bfb7 	b.w	80220fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08022190 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8022190:	b538      	push	{r3, r4, r5, lr}
 8022192:	4c15      	ldr	r4, [pc, #84]	@ (80221e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8022194:	7823      	ldrb	r3, [r4, #0]
 8022196:	f3bf 8f5b 	dmb	ish
 802219a:	07da      	lsls	r2, r3, #31
 802219c:	4605      	mov	r5, r0
 802219e:	d40b      	bmi.n	80221b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80221a0:	4620      	mov	r0, r4
 80221a2:	f008 f9b0 	bl	802a506 <__cxa_guard_acquire>
 80221a6:	b138      	cbz	r0, 80221b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80221a8:	4620      	mov	r0, r4
 80221aa:	f008 f9b8 	bl	802a51e <__cxa_guard_release>
 80221ae:	4a0f      	ldr	r2, [pc, #60]	@ (80221ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80221b0:	490f      	ldr	r1, [pc, #60]	@ (80221f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80221b2:	4810      	ldr	r0, [pc, #64]	@ (80221f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80221b4:	f008 f9a0 	bl	802a4f8 <__aeabi_atexit>
 80221b8:	4c0f      	ldr	r4, [pc, #60]	@ (80221f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80221ba:	7823      	ldrb	r3, [r4, #0]
 80221bc:	f3bf 8f5b 	dmb	ish
 80221c0:	07db      	lsls	r3, r3, #31
 80221c2:	d40b      	bmi.n	80221dc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80221c4:	4620      	mov	r0, r4
 80221c6:	f008 f99e 	bl	802a506 <__cxa_guard_acquire>
 80221ca:	b138      	cbz	r0, 80221dc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80221cc:	4620      	mov	r0, r4
 80221ce:	f008 f9a6 	bl	802a51e <__cxa_guard_release>
 80221d2:	4a06      	ldr	r2, [pc, #24]	@ (80221ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80221d4:	4909      	ldr	r1, [pc, #36]	@ (80221fc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80221d6:	480a      	ldr	r0, [pc, #40]	@ (8022200 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80221d8:	f008 f98e 	bl	802a4f8 <__aeabi_atexit>
 80221dc:	4b05      	ldr	r3, [pc, #20]	@ (80221f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80221de:	666b      	str	r3, [r5, #100]	@ 0x64
 80221e0:	4b07      	ldr	r3, [pc, #28]	@ (8022200 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80221e2:	66ab      	str	r3, [r5, #104]	@ 0x68
 80221e4:	bd38      	pop	{r3, r4, r5, pc}
 80221e6:	bf00      	nop
 80221e8:	200127b8 	.word	0x200127b8
 80221ec:	20000000 	.word	0x20000000
 80221f0:	0801ea91 	.word	0x0801ea91
 80221f4:	200000d0 	.word	0x200000d0
 80221f8:	200127bc 	.word	0x200127bc
 80221fc:	0801ea8f 	.word	0x0801ea8f
 8022200:	200000d4 	.word	0x200000d4

08022204 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8022204:	b538      	push	{r3, r4, r5, lr}
 8022206:	4c15      	ldr	r4, [pc, #84]	@ (802225c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8022208:	7823      	ldrb	r3, [r4, #0]
 802220a:	f3bf 8f5b 	dmb	ish
 802220e:	07da      	lsls	r2, r3, #31
 8022210:	4605      	mov	r5, r0
 8022212:	d40b      	bmi.n	802222c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022214:	4620      	mov	r0, r4
 8022216:	f008 f976 	bl	802a506 <__cxa_guard_acquire>
 802221a:	b138      	cbz	r0, 802222c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802221c:	4620      	mov	r0, r4
 802221e:	f008 f97e 	bl	802a51e <__cxa_guard_release>
 8022222:	4a0f      	ldr	r2, [pc, #60]	@ (8022260 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022224:	490f      	ldr	r1, [pc, #60]	@ (8022264 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8022226:	4810      	ldr	r0, [pc, #64]	@ (8022268 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022228:	f008 f966 	bl	802a4f8 <__aeabi_atexit>
 802222c:	4c0f      	ldr	r4, [pc, #60]	@ (802226c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 802222e:	7823      	ldrb	r3, [r4, #0]
 8022230:	f3bf 8f5b 	dmb	ish
 8022234:	07db      	lsls	r3, r3, #31
 8022236:	d40b      	bmi.n	8022250 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022238:	4620      	mov	r0, r4
 802223a:	f008 f964 	bl	802a506 <__cxa_guard_acquire>
 802223e:	b138      	cbz	r0, 8022250 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022240:	4620      	mov	r0, r4
 8022242:	f008 f96c 	bl	802a51e <__cxa_guard_release>
 8022246:	4a06      	ldr	r2, [pc, #24]	@ (8022260 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022248:	4909      	ldr	r1, [pc, #36]	@ (8022270 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802224a:	480a      	ldr	r0, [pc, #40]	@ (8022274 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802224c:	f008 f954 	bl	802a4f8 <__aeabi_atexit>
 8022250:	4b05      	ldr	r3, [pc, #20]	@ (8022268 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022252:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8022254:	4b07      	ldr	r3, [pc, #28]	@ (8022274 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022256:	662b      	str	r3, [r5, #96]	@ 0x60
 8022258:	bd38      	pop	{r3, r4, r5, pc}
 802225a:	bf00      	nop
 802225c:	20012790 	.word	0x20012790
 8022260:	20000000 	.word	0x20000000
 8022264:	0801ea95 	.word	0x0801ea95
 8022268:	200000a8 	.word	0x200000a8
 802226c:	20012794 	.word	0x20012794
 8022270:	0801ea93 	.word	0x0801ea93
 8022274:	200000ac 	.word	0x200000ac

08022278 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8022278:	b510      	push	{r4, lr}
 802227a:	4604      	mov	r4, r0
 802227c:	f7ff ff88 	bl	8022190 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8022280:	4620      	mov	r0, r4
 8022282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022286:	f7ff bfbd 	b.w	8022204 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0802228c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 802228c:	b538      	push	{r3, r4, r5, lr}
 802228e:	4c15      	ldr	r4, [pc, #84]	@ (80222e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8022290:	7823      	ldrb	r3, [r4, #0]
 8022292:	f3bf 8f5b 	dmb	ish
 8022296:	07da      	lsls	r2, r3, #31
 8022298:	4605      	mov	r5, r0
 802229a:	d40b      	bmi.n	80222b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802229c:	4620      	mov	r0, r4
 802229e:	f008 f932 	bl	802a506 <__cxa_guard_acquire>
 80222a2:	b138      	cbz	r0, 80222b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80222a4:	4620      	mov	r0, r4
 80222a6:	f008 f93a 	bl	802a51e <__cxa_guard_release>
 80222aa:	4a0f      	ldr	r2, [pc, #60]	@ (80222e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80222ac:	490f      	ldr	r1, [pc, #60]	@ (80222ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80222ae:	4810      	ldr	r0, [pc, #64]	@ (80222f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80222b0:	f008 f922 	bl	802a4f8 <__aeabi_atexit>
 80222b4:	4c0f      	ldr	r4, [pc, #60]	@ (80222f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80222b6:	7823      	ldrb	r3, [r4, #0]
 80222b8:	f3bf 8f5b 	dmb	ish
 80222bc:	07db      	lsls	r3, r3, #31
 80222be:	d40b      	bmi.n	80222d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80222c0:	4620      	mov	r0, r4
 80222c2:	f008 f920 	bl	802a506 <__cxa_guard_acquire>
 80222c6:	b138      	cbz	r0, 80222d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80222c8:	4620      	mov	r0, r4
 80222ca:	f008 f928 	bl	802a51e <__cxa_guard_release>
 80222ce:	4a06      	ldr	r2, [pc, #24]	@ (80222e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80222d0:	4909      	ldr	r1, [pc, #36]	@ (80222f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80222d2:	480a      	ldr	r0, [pc, #40]	@ (80222fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80222d4:	f008 f910 	bl	802a4f8 <__aeabi_atexit>
 80222d8:	4b05      	ldr	r3, [pc, #20]	@ (80222f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80222da:	676b      	str	r3, [r5, #116]	@ 0x74
 80222dc:	4b07      	ldr	r3, [pc, #28]	@ (80222fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80222de:	67ab      	str	r3, [r5, #120]	@ 0x78
 80222e0:	bd38      	pop	{r3, r4, r5, pc}
 80222e2:	bf00      	nop
 80222e4:	20012788 	.word	0x20012788
 80222e8:	20000000 	.word	0x20000000
 80222ec:	0801ea89 	.word	0x0801ea89
 80222f0:	200000a0 	.word	0x200000a0
 80222f4:	2001278c 	.word	0x2001278c
 80222f8:	0801ea87 	.word	0x0801ea87
 80222fc:	200000a4 	.word	0x200000a4

08022300 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8022300:	b538      	push	{r3, r4, r5, lr}
 8022302:	4c15      	ldr	r4, [pc, #84]	@ (8022358 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022304:	7823      	ldrb	r3, [r4, #0]
 8022306:	f3bf 8f5b 	dmb	ish
 802230a:	07da      	lsls	r2, r3, #31
 802230c:	4605      	mov	r5, r0
 802230e:	d40b      	bmi.n	8022328 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022310:	4620      	mov	r0, r4
 8022312:	f008 f8f8 	bl	802a506 <__cxa_guard_acquire>
 8022316:	b138      	cbz	r0, 8022328 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022318:	4620      	mov	r0, r4
 802231a:	f008 f900 	bl	802a51e <__cxa_guard_release>
 802231e:	4a0f      	ldr	r2, [pc, #60]	@ (802235c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022320:	490f      	ldr	r1, [pc, #60]	@ (8022360 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8022322:	4810      	ldr	r0, [pc, #64]	@ (8022364 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022324:	f008 f8e8 	bl	802a4f8 <__aeabi_atexit>
 8022328:	4c0f      	ldr	r4, [pc, #60]	@ (8022368 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802232a:	7823      	ldrb	r3, [r4, #0]
 802232c:	f3bf 8f5b 	dmb	ish
 8022330:	07db      	lsls	r3, r3, #31
 8022332:	d40b      	bmi.n	802234c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022334:	4620      	mov	r0, r4
 8022336:	f008 f8e6 	bl	802a506 <__cxa_guard_acquire>
 802233a:	b138      	cbz	r0, 802234c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802233c:	4620      	mov	r0, r4
 802233e:	f008 f8ee 	bl	802a51e <__cxa_guard_release>
 8022342:	4a06      	ldr	r2, [pc, #24]	@ (802235c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022344:	4909      	ldr	r1, [pc, #36]	@ (802236c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8022346:	480a      	ldr	r0, [pc, #40]	@ (8022370 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022348:	f008 f8d6 	bl	802a4f8 <__aeabi_atexit>
 802234c:	4b05      	ldr	r3, [pc, #20]	@ (8022364 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802234e:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8022350:	4b07      	ldr	r3, [pc, #28]	@ (8022370 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022352:	672b      	str	r3, [r5, #112]	@ 0x70
 8022354:	bd38      	pop	{r3, r4, r5, pc}
 8022356:	bf00      	nop
 8022358:	20012780 	.word	0x20012780
 802235c:	20000000 	.word	0x20000000
 8022360:	0801ea8d 	.word	0x0801ea8d
 8022364:	20000098 	.word	0x20000098
 8022368:	20012784 	.word	0x20012784
 802236c:	0801ea8b 	.word	0x0801ea8b
 8022370:	2000009c 	.word	0x2000009c

08022374 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8022374:	b510      	push	{r4, lr}
 8022376:	4604      	mov	r4, r0
 8022378:	f7ff ff88 	bl	802228c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 802237c:	4620      	mov	r0, r4
 802237e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022382:	f7ff bfbd 	b.w	8022300 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08022386 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8022386:	b510      	push	{r4, lr}
 8022388:	4604      	mov	r4, r0
 802238a:	f7ff fff3 	bl	8022374 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 802238e:	4620      	mov	r0, r4
 8022390:	f7ff ff72 	bl	8022278 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8022394:	4620      	mov	r0, r4
 8022396:	f7ff fdf9 	bl	8021f8c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 802239a:	4620      	mov	r0, r4
 802239c:	f7ff fcfa 	bl	8021d94 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 80223a0:	4620      	mov	r0, r4
 80223a2:	f7ff fd75 	bl	8021e90 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 80223a6:	4620      	mov	r0, r4
 80223a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80223ac:	f7ff bee0 	b.w	8022170 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

080223b0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 80223b0:	b538      	push	{r3, r4, r5, lr}
 80223b2:	4c0b      	ldr	r4, [pc, #44]	@ (80223e0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 80223b4:	7823      	ldrb	r3, [r4, #0]
 80223b6:	f3bf 8f5b 	dmb	ish
 80223ba:	07db      	lsls	r3, r3, #31
 80223bc:	4605      	mov	r5, r0
 80223be:	d40b      	bmi.n	80223d8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 80223c0:	4620      	mov	r0, r4
 80223c2:	f008 f8a0 	bl	802a506 <__cxa_guard_acquire>
 80223c6:	b138      	cbz	r0, 80223d8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 80223c8:	4620      	mov	r0, r4
 80223ca:	f008 f8a8 	bl	802a51e <__cxa_guard_release>
 80223ce:	4a05      	ldr	r2, [pc, #20]	@ (80223e4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 80223d0:	4905      	ldr	r1, [pc, #20]	@ (80223e8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 80223d2:	4806      	ldr	r0, [pc, #24]	@ (80223ec <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 80223d4:	f008 f890 	bl	802a4f8 <__aeabi_atexit>
 80223d8:	4b04      	ldr	r3, [pc, #16]	@ (80223ec <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 80223da:	67eb      	str	r3, [r5, #124]	@ 0x7c
 80223dc:	bd38      	pop	{r3, r4, r5, pc}
 80223de:	bf00      	nop
 80223e0:	20012774 	.word	0x20012774
 80223e4:	20000000 	.word	0x20000000
 80223e8:	0801ea85 	.word	0x0801ea85
 80223ec:	20000090 	.word	0x20000090

080223f0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 80223f0:	b538      	push	{r3, r4, r5, lr}
 80223f2:	4c0b      	ldr	r4, [pc, #44]	@ (8022420 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 80223f4:	7823      	ldrb	r3, [r4, #0]
 80223f6:	f3bf 8f5b 	dmb	ish
 80223fa:	07db      	lsls	r3, r3, #31
 80223fc:	4605      	mov	r5, r0
 80223fe:	d40b      	bmi.n	8022418 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8022400:	4620      	mov	r0, r4
 8022402:	f008 f880 	bl	802a506 <__cxa_guard_acquire>
 8022406:	b138      	cbz	r0, 8022418 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8022408:	4620      	mov	r0, r4
 802240a:	f008 f888 	bl	802a51e <__cxa_guard_release>
 802240e:	4a05      	ldr	r2, [pc, #20]	@ (8022424 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8022410:	4905      	ldr	r1, [pc, #20]	@ (8022428 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8022412:	4806      	ldr	r0, [pc, #24]	@ (802242c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8022414:	f008 f870 	bl	802a4f8 <__aeabi_atexit>
 8022418:	4b04      	ldr	r3, [pc, #16]	@ (802242c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 802241a:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 802241e:	bd38      	pop	{r3, r4, r5, pc}
 8022420:	20012778 	.word	0x20012778
 8022424:	20000000 	.word	0x20000000
 8022428:	0801ea83 	.word	0x0801ea83
 802242c:	20000094 	.word	0x20000094

08022430 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8022430:	b570      	push	{r4, r5, r6, lr}
 8022432:	4d0d      	ldr	r5, [pc, #52]	@ (8022468 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8022434:	4c0d      	ldr	r4, [pc, #52]	@ (802246c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8022436:	782b      	ldrb	r3, [r5, #0]
 8022438:	f3bf 8f5b 	dmb	ish
 802243c:	f013 0f01 	tst.w	r3, #1
 8022440:	4606      	mov	r6, r0
 8022442:	d10d      	bne.n	8022460 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8022444:	4628      	mov	r0, r5
 8022446:	f008 f85e 	bl	802a506 <__cxa_guard_acquire>
 802244a:	b148      	cbz	r0, 8022460 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 802244c:	4b08      	ldr	r3, [pc, #32]	@ (8022470 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 802244e:	6023      	str	r3, [r4, #0]
 8022450:	4628      	mov	r0, r5
 8022452:	f008 f864 	bl	802a51e <__cxa_guard_release>
 8022456:	4a07      	ldr	r2, [pc, #28]	@ (8022474 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8022458:	4907      	ldr	r1, [pc, #28]	@ (8022478 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 802245a:	4620      	mov	r0, r4
 802245c:	f008 f84c 	bl	802a4f8 <__aeabi_atexit>
 8022460:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 8022464:	bd70      	pop	{r4, r5, r6, pc}
 8022466:	bf00      	nop
 8022468:	2001277c 	.word	0x2001277c
 802246c:	200127f0 	.word	0x200127f0
 8022470:	0802eb68 	.word	0x0802eb68
 8022474:	20000000 	.word	0x20000000
 8022478:	0801ea81 	.word	0x0801ea81

0802247c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 802247c:	b510      	push	{r4, lr}
 802247e:	4604      	mov	r4, r0
 8022480:	f7ff ff96 	bl	80223b0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8022484:	4620      	mov	r0, r4
 8022486:	f7ff ffb3 	bl	80223f0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 802248a:	4620      	mov	r0, r4
 802248c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022490:	f7ff bfce 	b.w	8022430 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08022494 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8022494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022498:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 802249c:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 80224a0:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 80224a4:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 80224a8:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 80224ac:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 80224b0:	8808      	ldrh	r0, [r1, #0]
 80224b2:	fb05 4c0e 	mla	ip, r5, lr, r4
 80224b6:	2d00      	cmp	r5, #0
 80224b8:	eb02 0a0c 	add.w	sl, r2, ip
 80224bc:	f2c0 80b0 	blt.w	8022620 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 80224c0:	45ab      	cmp	fp, r5
 80224c2:	f340 80ad 	ble.w	8022620 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 80224c6:	2c00      	cmp	r4, #0
 80224c8:	f2c0 80a8 	blt.w	802261c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 80224cc:	45a6      	cmp	lr, r4
 80224ce:	f340 80a5 	ble.w	802261c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 80224d2:	f812 200c 	ldrb.w	r2, [r2, ip]
 80224d6:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 80224da:	1c62      	adds	r2, r4, #1
 80224dc:	f100 80a3 	bmi.w	8022626 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80224e0:	4596      	cmp	lr, r2
 80224e2:	f340 80a0 	ble.w	8022626 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80224e6:	f1b9 0f00 	cmp.w	r9, #0
 80224ea:	f000 809c 	beq.w	8022626 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80224ee:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80224f2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80224f6:	3501      	adds	r5, #1
 80224f8:	f100 8099 	bmi.w	802262e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80224fc:	45ab      	cmp	fp, r5
 80224fe:	f340 8096 	ble.w	802262e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022502:	2f00      	cmp	r7, #0
 8022504:	f000 8093 	beq.w	802262e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022508:	2c00      	cmp	r4, #0
 802250a:	f2c0 808e 	blt.w	802262a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 802250e:	45a6      	cmp	lr, r4
 8022510:	f340 808b 	ble.w	802262a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8022514:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8022518:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 802251c:	3401      	adds	r4, #1
 802251e:	f100 8089 	bmi.w	8022634 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022522:	45a6      	cmp	lr, r4
 8022524:	f340 8086 	ble.w	8022634 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022528:	f1b9 0f00 	cmp.w	r9, #0
 802252c:	f000 8082 	beq.w	8022634 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022530:	44d6      	add	lr, sl
 8022532:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022536:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802253a:	ea4f 4408 	mov.w	r4, r8, lsl #16
 802253e:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8022542:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8022546:	fb19 fe07 	smulbb	lr, r9, r7
 802254a:	ea44 0808 	orr.w	r8, r4, r8
 802254e:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8022552:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8022556:	f1c7 0210 	rsb	r2, r7, #16
 802255a:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 802255e:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8022562:	ea44 0c0c 	orr.w	ip, r4, ip
 8022566:	eba2 0209 	sub.w	r2, r2, r9
 802256a:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 802256e:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8022572:	fb04 f40c 	mul.w	r4, r4, ip
 8022576:	fb02 4808 	mla	r8, r2, r8, r4
 802257a:	041a      	lsls	r2, r3, #16
 802257c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8022580:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8022584:	4313      	orrs	r3, r2
 8022586:	042a      	lsls	r2, r5, #16
 8022588:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802258c:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8022590:	fb0e 8303 	mla	r3, lr, r3, r8
 8022594:	432a      	orrs	r2, r5
 8022596:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 802259a:	fb07 3202 	mla	r2, r7, r2, r3
 802259e:	0d53      	lsrs	r3, r2, #21
 80225a0:	0952      	lsrs	r2, r2, #5
 80225a2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80225a6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80225aa:	431a      	orrs	r2, r3
 80225ac:	b293      	uxth	r3, r2
 80225ae:	b2b4      	uxth	r4, r6
 80225b0:	1202      	asrs	r2, r0, #8
 80225b2:	43f6      	mvns	r6, r6
 80225b4:	b2f6      	uxtb	r6, r6
 80225b6:	121d      	asrs	r5, r3, #8
 80225b8:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80225bc:	fb12 f206 	smulbb	r2, r2, r6
 80225c0:	10c7      	asrs	r7, r0, #3
 80225c2:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80225c6:	00c0      	lsls	r0, r0, #3
 80225c8:	fb05 2504 	mla	r5, r5, r4, r2
 80225cc:	b2c0      	uxtb	r0, r0
 80225ce:	10da      	asrs	r2, r3, #3
 80225d0:	00db      	lsls	r3, r3, #3
 80225d2:	b2db      	uxtb	r3, r3
 80225d4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80225d8:	fb10 f006 	smulbb	r0, r0, r6
 80225dc:	b2ad      	uxth	r5, r5
 80225de:	fb03 0004 	mla	r0, r3, r4, r0
 80225e2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80225e6:	fb17 f706 	smulbb	r7, r7, r6
 80225ea:	b280      	uxth	r0, r0
 80225ec:	1c6b      	adds	r3, r5, #1
 80225ee:	fb02 7204 	mla	r2, r2, r4, r7
 80225f2:	b292      	uxth	r2, r2
 80225f4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80225f8:	1c43      	adds	r3, r0, #1
 80225fa:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80225fe:	1c50      	adds	r0, r2, #1
 8022600:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022604:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8022608:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802260c:	0952      	lsrs	r2, r2, #5
 802260e:	432b      	orrs	r3, r5
 8022610:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022614:	4313      	orrs	r3, r2
 8022616:	800b      	strh	r3, [r1, #0]
 8022618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802261c:	4680      	mov	r8, r0
 802261e:	e75c      	b.n	80224da <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8022620:	4684      	mov	ip, r0
 8022622:	4680      	mov	r8, r0
 8022624:	e767      	b.n	80224f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8022626:	4684      	mov	ip, r0
 8022628:	e765      	b.n	80224f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 802262a:	4605      	mov	r5, r0
 802262c:	e776      	b.n	802251c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 802262e:	4603      	mov	r3, r0
 8022630:	4605      	mov	r5, r0
 8022632:	e782      	b.n	802253a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022634:	4603      	mov	r3, r0
 8022636:	e780      	b.n	802253a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08022638 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802263c:	b099      	sub	sp, #100	@ 0x64
 802263e:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 8022642:	9215      	str	r2, [sp, #84]	@ 0x54
 8022644:	9309      	str	r3, [sp, #36]	@ 0x24
 8022646:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8022648:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 802264c:	930d      	str	r3, [sp, #52]	@ 0x34
 802264e:	910c      	str	r1, [sp, #48]	@ 0x30
 8022650:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8022654:	9016      	str	r0, [sp, #88]	@ 0x58
 8022656:	6850      	ldr	r0, [r2, #4]
 8022658:	6812      	ldr	r2, [r2, #0]
 802265a:	fb00 1303 	mla	r3, r0, r3, r1
 802265e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8022662:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022664:	681b      	ldr	r3, [r3, #0]
 8022666:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022668:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802266a:	685e      	ldr	r6, [r3, #4]
 802266c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802266e:	43db      	mvns	r3, r3
 8022670:	b2db      	uxtb	r3, r3
 8022672:	3604      	adds	r6, #4
 8022674:	930a      	str	r3, [sp, #40]	@ 0x28
 8022676:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022678:	2b00      	cmp	r3, #0
 802267a:	dc03      	bgt.n	8022684 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802267c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802267e:	2b00      	cmp	r3, #0
 8022680:	f340 8225 	ble.w	8022ace <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8022684:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022686:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802268a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802268e:	1e48      	subs	r0, r1, #1
 8022690:	1e57      	subs	r7, r2, #1
 8022692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022694:	2b00      	cmp	r3, #0
 8022696:	f340 80e3 	ble.w	8022860 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802269a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 802269e:	ea4f 4325 	mov.w	r3, r5, asr #16
 80226a2:	d406      	bmi.n	80226b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80226a4:	4584      	cmp	ip, r0
 80226a6:	da04      	bge.n	80226b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80226a8:	2b00      	cmp	r3, #0
 80226aa:	db02      	blt.n	80226b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80226ac:	42bb      	cmp	r3, r7
 80226ae:	f2c0 80d8 	blt.w	8022862 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80226b2:	f11c 0c01 	adds.w	ip, ip, #1
 80226b6:	f100 80c9 	bmi.w	802284c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80226ba:	4561      	cmp	r1, ip
 80226bc:	f2c0 80c6 	blt.w	802284c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80226c0:	3301      	adds	r3, #1
 80226c2:	f100 80c3 	bmi.w	802284c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80226c6:	429a      	cmp	r2, r3
 80226c8:	f2c0 80c0 	blt.w	802284c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80226cc:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80226d0:	4647      	mov	r7, r8
 80226d2:	f1bb 0f00 	cmp.w	fp, #0
 80226d6:	f340 80e3 	ble.w	80228a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80226da:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80226dc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80226de:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80226e2:	689b      	ldr	r3, [r3, #8]
 80226e4:	ea5f 422a 	movs.w	r2, sl, asr #16
 80226e8:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80226ec:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80226f0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80226f4:	f100 8121 	bmi.w	802293a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80226f8:	f103 39ff 	add.w	r9, r3, #4294967295
 80226fc:	454a      	cmp	r2, r9
 80226fe:	f280 811c 	bge.w	802293a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022702:	f1bc 0f00 	cmp.w	ip, #0
 8022706:	f2c0 8118 	blt.w	802293a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 802270a:	f10e 39ff 	add.w	r9, lr, #4294967295
 802270e:	45cc      	cmp	ip, r9
 8022710:	f280 8113 	bge.w	802293a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022714:	b21b      	sxth	r3, r3
 8022716:	fb0c 2203 	mla	r2, ip, r3, r2
 802271a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802271c:	eb04 0902 	add.w	r9, r4, r2
 8022720:	5ca2      	ldrb	r2, [r4, r2]
 8022722:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8022726:	2800      	cmp	r0, #0
 8022728:	f000 80fe 	beq.w	8022928 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 802272c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022730:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8022734:	9211      	str	r2, [sp, #68]	@ 0x44
 8022736:	b151      	cbz	r1, 802274e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022738:	eb09 0203 	add.w	r2, r9, r3
 802273c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022740:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022744:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022746:	7853      	ldrb	r3, [r2, #1]
 8022748:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802274c:	9312      	str	r3, [sp, #72]	@ 0x48
 802274e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022750:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022752:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022756:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802275a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802275e:	ea4c 0c03 	orr.w	ip, ip, r3
 8022762:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022764:	041b      	lsls	r3, r3, #16
 8022766:	fb10 f201 	smulbb	r2, r0, r1
 802276a:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 802276e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022772:	10d2      	asrs	r2, r2, #3
 8022774:	4323      	orrs	r3, r4
 8022776:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 802277a:	4353      	muls	r3, r2
 802277c:	fb09 330c 	mla	r3, r9, ip, r3
 8022780:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022784:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8022788:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802278c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022790:	f1c1 0c10 	rsb	ip, r1, #16
 8022794:	ebac 0c00 	sub.w	ip, ip, r0
 8022798:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802279c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80227a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80227a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80227a4:	0418      	lsls	r0, r3, #16
 80227a6:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80227aa:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80227ae:	4318      	orrs	r0, r3
 80227b0:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80227b4:	fb02 c200 	mla	r2, r2, r0, ip
 80227b8:	0d53      	lsrs	r3, r2, #21
 80227ba:	0952      	lsrs	r2, r2, #5
 80227bc:	8838      	ldrh	r0, [r7, #0]
 80227be:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80227c2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80227c6:	431a      	orrs	r2, r3
 80227c8:	b292      	uxth	r2, r2
 80227ca:	1201      	asrs	r1, r0, #8
 80227cc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 80227d0:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80227d4:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80227d8:	fb11 f104 	smulbb	r1, r1, r4
 80227dc:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80227e0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80227e4:	00c0      	lsls	r0, r0, #3
 80227e6:	fb0c 1c03 	mla	ip, ip, r3, r1
 80227ea:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80227ee:	10d1      	asrs	r1, r2, #3
 80227f0:	b2c0      	uxtb	r0, r0
 80227f2:	00d2      	lsls	r2, r2, #3
 80227f4:	b2d2      	uxtb	r2, r2
 80227f6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80227fa:	fb1e fe04 	smulbb	lr, lr, r4
 80227fe:	fb10 f004 	smulbb	r0, r0, r4
 8022802:	fa1f fc8c 	uxth.w	ip, ip
 8022806:	fb01 e103 	mla	r1, r1, r3, lr
 802280a:	fb02 0303 	mla	r3, r2, r3, r0
 802280e:	b29a      	uxth	r2, r3
 8022810:	f10c 0301 	add.w	r3, ip, #1
 8022814:	b289      	uxth	r1, r1
 8022816:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802281a:	1c53      	adds	r3, r2, #1
 802281c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022820:	1c4a      	adds	r2, r1, #1
 8022822:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022826:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 802282a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802282e:	0949      	lsrs	r1, r1, #5
 8022830:	ea43 030c 	orr.w	r3, r3, ip
 8022834:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8022838:	430b      	orrs	r3, r1
 802283a:	803b      	strh	r3, [r7, #0]
 802283c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802283e:	449a      	add	sl, r3
 8022840:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022842:	3702      	adds	r7, #2
 8022844:	441d      	add	r5, r3
 8022846:	f10b 3bff 	add.w	fp, fp, #4294967295
 802284a:	e742      	b.n	80226d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802284c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802284e:	449a      	add	sl, r3
 8022850:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022852:	441d      	add	r5, r3
 8022854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022856:	3b01      	subs	r3, #1
 8022858:	9309      	str	r3, [sp, #36]	@ 0x24
 802285a:	f108 0802 	add.w	r8, r8, #2
 802285e:	e718      	b.n	8022692 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022860:	d023      	beq.n	80228aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8022862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022864:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8022866:	3b01      	subs	r3, #1
 8022868:	fb00 a003 	mla	r0, r0, r3, sl
 802286c:	1400      	asrs	r0, r0, #16
 802286e:	f53f af2d 	bmi.w	80226cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022872:	3901      	subs	r1, #1
 8022874:	4288      	cmp	r0, r1
 8022876:	f6bf af29 	bge.w	80226cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802287a:	9926      	ldr	r1, [sp, #152]	@ 0x98
 802287c:	fb01 5303 	mla	r3, r1, r3, r5
 8022880:	141b      	asrs	r3, r3, #16
 8022882:	f53f af23 	bmi.w	80226cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022886:	3a01      	subs	r2, #1
 8022888:	4293      	cmp	r3, r2
 802288a:	f6bf af1f 	bge.w	80226cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802288e:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8022892:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 8022896:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 802289a:	f1be 0f00 	cmp.w	lr, #0
 802289e:	dc6c      	bgt.n	802297a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80228a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80228a2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80228a6:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 80228aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80228ac:	2b00      	cmp	r3, #0
 80228ae:	f340 810e 	ble.w	8022ace <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 80228b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80228b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80228ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80228be:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80228c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80228c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80228c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80228cc:	eef0 6a62 	vmov.f32	s13, s5
 80228d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80228d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80228d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80228dc:	ee16 aa90 	vmov	sl, s13
 80228e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80228e4:	eef0 6a43 	vmov.f32	s13, s6
 80228e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80228ec:	ee12 2a90 	vmov	r2, s5
 80228f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80228f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80228f8:	ee13 2a10 	vmov	r2, s6
 80228fc:	9325      	str	r3, [sp, #148]	@ 0x94
 80228fe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022900:	fb92 f3f3 	sdiv	r3, r2, r3
 8022904:	9326      	str	r3, [sp, #152]	@ 0x98
 8022906:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022908:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802290a:	3b01      	subs	r3, #1
 802290c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022910:	930c      	str	r3, [sp, #48]	@ 0x30
 8022912:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022914:	bf08      	it	eq
 8022916:	4613      	moveq	r3, r2
 8022918:	ee16 5a90 	vmov	r5, s13
 802291c:	9309      	str	r3, [sp, #36]	@ 0x24
 802291e:	eeb0 3a67 	vmov.f32	s6, s15
 8022922:	eef0 2a47 	vmov.f32	s5, s14
 8022926:	e6a6      	b.n	8022676 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8022928:	2900      	cmp	r1, #0
 802292a:	f43f af10 	beq.w	802274e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802292e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022932:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022936:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022938:	e709      	b.n	802274e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802293a:	f112 0901 	adds.w	r9, r2, #1
 802293e:	f53f af7d 	bmi.w	802283c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022942:	454b      	cmp	r3, r9
 8022944:	f6ff af7a 	blt.w	802283c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022948:	f11c 0901 	adds.w	r9, ip, #1
 802294c:	f53f af76 	bmi.w	802283c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022950:	45ce      	cmp	lr, r9
 8022952:	f6ff af73 	blt.w	802283c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022956:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022958:	9202      	str	r2, [sp, #8]
 802295a:	b21b      	sxth	r3, r3
 802295c:	fa0f f28e 	sxth.w	r2, lr
 8022960:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022964:	e9cd c003 	strd	ip, r0, [sp, #12]
 8022968:	9201      	str	r2, [sp, #4]
 802296a:	9300      	str	r3, [sp, #0]
 802296c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802296e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8022970:	4633      	mov	r3, r6
 8022972:	4639      	mov	r1, r7
 8022974:	f7ff fd8e 	bl	8022494 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8022978:	e760      	b.n	802283c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802297a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802297c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802297e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022982:	ea4f 422a 	mov.w	r2, sl, asr #16
 8022986:	1429      	asrs	r1, r5, #16
 8022988:	fb03 2101 	mla	r1, r3, r1, r2
 802298c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802298e:	440a      	add	r2, r1
 8022990:	5c61      	ldrb	r1, [r4, r1]
 8022992:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8022996:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802299a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802299e:	f1bc 0f00 	cmp.w	ip, #0
 80229a2:	f000 808c 	beq.w	8022abe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 80229a6:	7857      	ldrb	r7, [r2, #1]
 80229a8:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 80229ac:	9413      	str	r4, [sp, #76]	@ 0x4c
 80229ae:	b140      	cbz	r0, 80229c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80229b0:	18d7      	adds	r7, r2, r3
 80229b2:	5cd3      	ldrb	r3, [r2, r3]
 80229b4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80229b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80229ba:	787b      	ldrb	r3, [r7, #1]
 80229bc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80229c0:	9314      	str	r3, [sp, #80]	@ 0x50
 80229c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80229c4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80229c6:	fb1c f200 	smulbb	r2, ip, r0
 80229ca:	041f      	lsls	r7, r3, #16
 80229cc:	10d2      	asrs	r2, r2, #3
 80229ce:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80229d2:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 80229d6:	431f      	orrs	r7, r3
 80229d8:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80229dc:	9317      	str	r3, [sp, #92]	@ 0x5c
 80229de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80229e0:	041b      	lsls	r3, r3, #16
 80229e2:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 80229e6:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80229ea:	ea43 030b 	orr.w	r3, r3, fp
 80229ee:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80229f0:	4353      	muls	r3, r2
 80229f2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80229f6:	fb04 3707 	mla	r7, r4, r7, r3
 80229fa:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80229fe:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 8022a02:	ea43 0b01 	orr.w	fp, r3, r1
 8022a06:	f1c0 0110 	rsb	r1, r0, #16
 8022a0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022a0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022a0e:	eba1 0c0c 	sub.w	ip, r1, ip
 8022a12:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022a16:	fb0c 770b 	mla	r7, ip, fp, r7
 8022a1a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022a1e:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 8022a22:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8022a26:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8022a2a:	ea4c 0c0b 	orr.w	ip, ip, fp
 8022a2e:	fb02 770c 	mla	r7, r2, ip, r7
 8022a32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022a34:	0d79      	lsrs	r1, r7, #21
 8022a36:	097f      	lsrs	r7, r7, #5
 8022a38:	8812      	ldrh	r2, [r2, #0]
 8022a3a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8022a3e:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8022a42:	430f      	orrs	r7, r1
 8022a44:	b2bb      	uxth	r3, r7
 8022a46:	1211      	asrs	r1, r2, #8
 8022a48:	1218      	asrs	r0, r3, #8
 8022a4a:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8022a4e:	fb11 f104 	smulbb	r1, r1, r4
 8022a52:	10d7      	asrs	r7, r2, #3
 8022a54:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8022a58:	00d2      	lsls	r2, r2, #3
 8022a5a:	fb00 1009 	mla	r0, r0, r9, r1
 8022a5e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8022a62:	10d9      	asrs	r1, r3, #3
 8022a64:	b2d2      	uxtb	r2, r2
 8022a66:	00db      	lsls	r3, r3, #3
 8022a68:	fb17 f704 	smulbb	r7, r7, r4
 8022a6c:	fb12 f204 	smulbb	r2, r2, r4
 8022a70:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8022a74:	b2db      	uxtb	r3, r3
 8022a76:	b280      	uxth	r0, r0
 8022a78:	fb01 7109 	mla	r1, r1, r9, r7
 8022a7c:	fb03 2309 	mla	r3, r3, r9, r2
 8022a80:	b29b      	uxth	r3, r3
 8022a82:	b289      	uxth	r1, r1
 8022a84:	1c42      	adds	r2, r0, #1
 8022a86:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022a8a:	1c4f      	adds	r7, r1, #1
 8022a8c:	1c5a      	adds	r2, r3, #1
 8022a8e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022a92:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8022a96:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8022a9a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022a9e:	0949      	lsrs	r1, r1, #5
 8022aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022aa2:	4310      	orrs	r0, r2
 8022aa4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8022aa8:	4308      	orrs	r0, r1
 8022aaa:	f823 0b02 	strh.w	r0, [r3], #2
 8022aae:	930e      	str	r3, [sp, #56]	@ 0x38
 8022ab0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022ab2:	449a      	add	sl, r3
 8022ab4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022ab6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022aba:	441d      	add	r5, r3
 8022abc:	e6ed      	b.n	802289a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8022abe:	2800      	cmp	r0, #0
 8022ac0:	f43f af7f 	beq.w	80229c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8022ac4:	5cd3      	ldrb	r3, [r2, r3]
 8022ac6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022aca:	9310      	str	r3, [sp, #64]	@ 0x40
 8022acc:	e779      	b.n	80229c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8022ace:	b019      	add	sp, #100	@ 0x64
 8022ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022ad4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8022ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022ad8:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 8022adc:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8022ae0:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 8022ae4:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 8022ae8:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8022aec:	8808      	ldrh	r0, [r1, #0]
 8022aee:	fb08 470e 	mla	r7, r8, lr, r4
 8022af2:	f1b8 0f00 	cmp.w	r8, #0
 8022af6:	eb02 0907 	add.w	r9, r2, r7
 8022afa:	db67      	blt.n	8022bcc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8022afc:	45c2      	cmp	sl, r8
 8022afe:	dd65      	ble.n	8022bcc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8022b00:	2c00      	cmp	r4, #0
 8022b02:	db61      	blt.n	8022bc8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8022b04:	45a6      	cmp	lr, r4
 8022b06:	dd5f      	ble.n	8022bc8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8022b08:	5dd2      	ldrb	r2, [r2, r7]
 8022b0a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8022b0e:	1c62      	adds	r2, r4, #1
 8022b10:	d45f      	bmi.n	8022bd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8022b12:	4596      	cmp	lr, r2
 8022b14:	dd5d      	ble.n	8022bd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8022b16:	2d00      	cmp	r5, #0
 8022b18:	d05b      	beq.n	8022bd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8022b1a:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022b1e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8022b22:	f118 0801 	adds.w	r8, r8, #1
 8022b26:	d458      	bmi.n	8022bda <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8022b28:	45c2      	cmp	sl, r8
 8022b2a:	dd56      	ble.n	8022bda <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8022b2c:	2e00      	cmp	r6, #0
 8022b2e:	d054      	beq.n	8022bda <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8022b30:	2c00      	cmp	r4, #0
 8022b32:	db50      	blt.n	8022bd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8022b34:	45a6      	cmp	lr, r4
 8022b36:	dd4e      	ble.n	8022bd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8022b38:	f819 200e 	ldrb.w	r2, [r9, lr]
 8022b3c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8022b40:	3401      	adds	r4, #1
 8022b42:	d407      	bmi.n	8022b54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8022b44:	45a6      	cmp	lr, r4
 8022b46:	dd05      	ble.n	8022b54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8022b48:	b125      	cbz	r5, 8022b54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8022b4a:	44ce      	add	lr, r9
 8022b4c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8022b50:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8022b54:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8022b58:	fb15 f406 	smulbb	r4, r5, r6
 8022b5c:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022b60:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8022b64:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8022b68:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8022b6c:	ea43 0c0c 	orr.w	ip, r3, ip
 8022b70:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8022b74:	f1c6 0310 	rsb	r3, r6, #16
 8022b78:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8022b7c:	1b5b      	subs	r3, r3, r5
 8022b7e:	ea4e 0707 	orr.w	r7, lr, r7
 8022b82:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8022b86:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8022b8a:	437d      	muls	r5, r7
 8022b8c:	fb03 5c0c 	mla	ip, r3, ip, r5
 8022b90:	0403      	lsls	r3, r0, #16
 8022b92:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022b96:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8022b9a:	4318      	orrs	r0, r3
 8022b9c:	0413      	lsls	r3, r2, #16
 8022b9e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022ba2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8022ba6:	4313      	orrs	r3, r2
 8022ba8:	fb04 c000 	mla	r0, r4, r0, ip
 8022bac:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8022bb0:	fb06 0003 	mla	r0, r6, r3, r0
 8022bb4:	0d43      	lsrs	r3, r0, #21
 8022bb6:	0940      	lsrs	r0, r0, #5
 8022bb8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022bbc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8022bc0:	4318      	orrs	r0, r3
 8022bc2:	8008      	strh	r0, [r1, #0]
 8022bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022bc8:	4684      	mov	ip, r0
 8022bca:	e7a0      	b.n	8022b0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8022bcc:	4607      	mov	r7, r0
 8022bce:	4684      	mov	ip, r0
 8022bd0:	e7a7      	b.n	8022b22 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8022bd2:	4607      	mov	r7, r0
 8022bd4:	e7a5      	b.n	8022b22 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8022bd6:	4602      	mov	r2, r0
 8022bd8:	e7b2      	b.n	8022b40 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 8022bda:	4602      	mov	r2, r0
 8022bdc:	e7ba      	b.n	8022b54 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08022bde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022bde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022be2:	b093      	sub	sp, #76	@ 0x4c
 8022be4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8022be8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8022bea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8022bec:	9108      	str	r1, [sp, #32]
 8022bee:	9306      	str	r3, [sp, #24]
 8022bf0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8022bf4:	9010      	str	r0, [sp, #64]	@ 0x40
 8022bf6:	6850      	ldr	r0, [r2, #4]
 8022bf8:	6812      	ldr	r2, [r2, #0]
 8022bfa:	fb00 1303 	mla	r3, r0, r3, r1
 8022bfe:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022c02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022c04:	681b      	ldr	r3, [r3, #0]
 8022c06:	9307      	str	r3, [sp, #28]
 8022c08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022c0a:	685f      	ldr	r7, [r3, #4]
 8022c0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022c10:	3704      	adds	r7, #4
 8022c12:	9b08      	ldr	r3, [sp, #32]
 8022c14:	2b00      	cmp	r3, #0
 8022c16:	dc03      	bgt.n	8022c20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8022c18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022c1a:	2b00      	cmp	r3, #0
 8022c1c:	f340 81b2 	ble.w	8022f84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8022c20:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022c22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022c26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022c2a:	1e48      	subs	r0, r1, #1
 8022c2c:	f102 3cff 	add.w	ip, r2, #4294967295
 8022c30:	9b06      	ldr	r3, [sp, #24]
 8022c32:	2b00      	cmp	r3, #0
 8022c34:	f340 80a9 	ble.w	8022d8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022c38:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022c3c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022c40:	d406      	bmi.n	8022c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022c42:	4586      	cmp	lr, r0
 8022c44:	da04      	bge.n	8022c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022c46:	2b00      	cmp	r3, #0
 8022c48:	db02      	blt.n	8022c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022c4a:	4563      	cmp	r3, ip
 8022c4c:	f2c0 809e 	blt.w	8022d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8022c50:	f11e 0e01 	adds.w	lr, lr, #1
 8022c54:	f100 808f 	bmi.w	8022d76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8022c58:	4571      	cmp	r1, lr
 8022c5a:	f2c0 808c 	blt.w	8022d76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8022c5e:	3301      	adds	r3, #1
 8022c60:	f100 8089 	bmi.w	8022d76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8022c64:	429a      	cmp	r2, r3
 8022c66:	f2c0 8086 	blt.w	8022d76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8022c6a:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022c6e:	46c8      	mov	r8, r9
 8022c70:	f1bb 0f00 	cmp.w	fp, #0
 8022c74:	f340 80a6 	ble.w	8022dc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022c78:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022c7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022c7c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022c80:	689b      	ldr	r3, [r3, #8]
 8022c82:	1422      	asrs	r2, r4, #16
 8022c84:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022c88:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022c8c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022c90:	f100 80e3 	bmi.w	8022e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022c94:	f103 3aff 	add.w	sl, r3, #4294967295
 8022c98:	4552      	cmp	r2, sl
 8022c9a:	f280 80de 	bge.w	8022e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022c9e:	f1bc 0f00 	cmp.w	ip, #0
 8022ca2:	f2c0 80da 	blt.w	8022e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022ca6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8022caa:	45d4      	cmp	ip, sl
 8022cac:	f280 80d5 	bge.w	8022e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022cb0:	b21b      	sxth	r3, r3
 8022cb2:	fb0c 2203 	mla	r2, ip, r3, r2
 8022cb6:	9d07      	ldr	r5, [sp, #28]
 8022cb8:	eb05 0a02 	add.w	sl, r5, r2
 8022cbc:	5caa      	ldrb	r2, [r5, r2]
 8022cbe:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8022cc2:	2800      	cmp	r0, #0
 8022cc4:	f000 80c0 	beq.w	8022e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8022cc8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022ccc:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022cd0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022cd2:	b151      	cbz	r1, 8022cea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022cd4:	eb0a 0203 	add.w	r2, sl, r3
 8022cd8:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8022cdc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8022ce2:	7853      	ldrb	r3, [r2, #1]
 8022ce4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022ce8:	930c      	str	r3, [sp, #48]	@ 0x30
 8022cea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022cec:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022cee:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022cf2:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8022cf6:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8022cfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8022cfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022d00:	041b      	lsls	r3, r3, #16
 8022d02:	fb10 f201 	smulbb	r2, r0, r1
 8022d06:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022d0a:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8022d0e:	10d2      	asrs	r2, r2, #3
 8022d10:	432b      	orrs	r3, r5
 8022d12:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8022d16:	4353      	muls	r3, r2
 8022d18:	fb0a 330c 	mla	r3, sl, ip, r3
 8022d1c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022d20:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8022d24:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8022d28:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022d2c:	f1c1 0c10 	rsb	ip, r1, #16
 8022d30:	ebac 0c00 	sub.w	ip, ip, r0
 8022d34:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022d38:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022d3e:	0418      	lsls	r0, r3, #16
 8022d40:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8022d44:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8022d48:	4318      	orrs	r0, r3
 8022d4a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022d4e:	fb02 c200 	mla	r2, r2, r0, ip
 8022d52:	0d53      	lsrs	r3, r2, #21
 8022d54:	0952      	lsrs	r2, r2, #5
 8022d56:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022d5a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8022d5e:	431a      	orrs	r2, r3
 8022d60:	f8a8 2000 	strh.w	r2, [r8]
 8022d64:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022d66:	441c      	add	r4, r3
 8022d68:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022d6a:	f108 0802 	add.w	r8, r8, #2
 8022d6e:	441e      	add	r6, r3
 8022d70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022d74:	e77c      	b.n	8022c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022d76:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022d78:	441c      	add	r4, r3
 8022d7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022d7c:	441e      	add	r6, r3
 8022d7e:	9b06      	ldr	r3, [sp, #24]
 8022d80:	3b01      	subs	r3, #1
 8022d82:	9306      	str	r3, [sp, #24]
 8022d84:	f109 0902 	add.w	r9, r9, #2
 8022d88:	e752      	b.n	8022c30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022d8a:	d020      	beq.n	8022dce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8022d8c:	9b06      	ldr	r3, [sp, #24]
 8022d8e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8022d90:	3b01      	subs	r3, #1
 8022d92:	fb00 4003 	mla	r0, r0, r3, r4
 8022d96:	1400      	asrs	r0, r0, #16
 8022d98:	f53f af67 	bmi.w	8022c6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022d9c:	3901      	subs	r1, #1
 8022d9e:	4288      	cmp	r0, r1
 8022da0:	f6bf af63 	bge.w	8022c6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022da4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8022da6:	fb01 6303 	mla	r3, r1, r3, r6
 8022daa:	141b      	asrs	r3, r3, #16
 8022dac:	f53f af5d 	bmi.w	8022c6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022db0:	3a01      	subs	r2, #1
 8022db2:	4293      	cmp	r3, r2
 8022db4:	f6bf af59 	bge.w	8022c6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022db8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022dbc:	46ca      	mov	sl, r9
 8022dbe:	f1b8 0f00 	cmp.w	r8, #0
 8022dc2:	dc67      	bgt.n	8022e94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8022dc4:	9b06      	ldr	r3, [sp, #24]
 8022dc6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022dca:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8022dce:	9b08      	ldr	r3, [sp, #32]
 8022dd0:	2b00      	cmp	r3, #0
 8022dd2:	f340 80d7 	ble.w	8022f84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8022dd6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022dda:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022dde:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022de2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022de4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022de8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022dec:	eeb0 6a62 	vmov.f32	s12, s5
 8022df0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022df4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022df8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022dfc:	ee16 4a10 	vmov	r4, s12
 8022e00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022e04:	eeb0 6a43 	vmov.f32	s12, s6
 8022e08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022e0c:	ee12 2a90 	vmov	r2, s5
 8022e10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022e14:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e18:	ee13 2a10 	vmov	r2, s6
 8022e1c:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022e1e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022e20:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e24:	9320      	str	r3, [sp, #128]	@ 0x80
 8022e26:	9b08      	ldr	r3, [sp, #32]
 8022e28:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022e2a:	3b01      	subs	r3, #1
 8022e2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022e30:	9308      	str	r3, [sp, #32]
 8022e32:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022e34:	bf08      	it	eq
 8022e36:	4613      	moveq	r3, r2
 8022e38:	ee16 6a10 	vmov	r6, s12
 8022e3c:	9306      	str	r3, [sp, #24]
 8022e3e:	eeb0 3a67 	vmov.f32	s6, s15
 8022e42:	eef0 2a47 	vmov.f32	s5, s14
 8022e46:	e6e4      	b.n	8022c12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8022e48:	2900      	cmp	r1, #0
 8022e4a:	f43f af4e 	beq.w	8022cea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022e4e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8022e52:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022e56:	9309      	str	r3, [sp, #36]	@ 0x24
 8022e58:	e747      	b.n	8022cea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022e5a:	f112 0a01 	adds.w	sl, r2, #1
 8022e5e:	d481      	bmi.n	8022d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022e60:	4553      	cmp	r3, sl
 8022e62:	f6ff af7f 	blt.w	8022d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022e66:	f11c 0a01 	adds.w	sl, ip, #1
 8022e6a:	f53f af7b 	bmi.w	8022d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022e6e:	45d6      	cmp	lr, sl
 8022e70:	f6ff af78 	blt.w	8022d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022e74:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8022e78:	b21b      	sxth	r3, r3
 8022e7a:	fa0f f28e 	sxth.w	r2, lr
 8022e7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022e82:	9201      	str	r2, [sp, #4]
 8022e84:	9300      	str	r3, [sp, #0]
 8022e86:	9a07      	ldr	r2, [sp, #28]
 8022e88:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022e8a:	463b      	mov	r3, r7
 8022e8c:	4641      	mov	r1, r8
 8022e8e:	f7ff fe21 	bl	8022ad4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022e92:	e767      	b.n	8022d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022e94:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022e96:	9d07      	ldr	r5, [sp, #28]
 8022e98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022e9c:	1422      	asrs	r2, r4, #16
 8022e9e:	1431      	asrs	r1, r6, #16
 8022ea0:	fb03 2101 	mla	r1, r3, r1, r2
 8022ea4:	9a07      	ldr	r2, [sp, #28]
 8022ea6:	440a      	add	r2, r1
 8022ea8:	5c69      	ldrb	r1, [r5, r1]
 8022eaa:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8022eae:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022eb2:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8022eb6:	f1be 0f00 	cmp.w	lr, #0
 8022eba:	d05c      	beq.n	8022f76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8022ebc:	f892 c001 	ldrb.w	ip, [r2, #1]
 8022ec0:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8022ec4:	950d      	str	r5, [sp, #52]	@ 0x34
 8022ec6:	b150      	cbz	r0, 8022ede <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022ec8:	eb02 0c03 	add.w	ip, r2, r3
 8022ecc:	5cd3      	ldrb	r3, [r2, r3]
 8022ece:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022ed2:	930a      	str	r3, [sp, #40]	@ 0x28
 8022ed4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022ed8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022edc:	930e      	str	r3, [sp, #56]	@ 0x38
 8022ede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022ee0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8022ee2:	fb1e f200 	smulbb	r2, lr, r0
 8022ee6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022eea:	10d2      	asrs	r2, r2, #3
 8022eec:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8022ef0:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8022ef4:	ea4c 0c03 	orr.w	ip, ip, r3
 8022ef8:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8022efc:	9311      	str	r3, [sp, #68]	@ 0x44
 8022efe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022f00:	041b      	lsls	r3, r3, #16
 8022f02:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 8022f06:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022f0a:	ea43 030b 	orr.w	r3, r3, fp
 8022f0e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8022f10:	4353      	muls	r3, r2
 8022f12:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022f16:	fb05 3c0c 	mla	ip, r5, ip, r3
 8022f1a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8022f1e:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 8022f22:	ea43 0b01 	orr.w	fp, r3, r1
 8022f26:	f1c0 0110 	rsb	r1, r0, #16
 8022f2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022f2c:	eba1 0e0e 	sub.w	lr, r1, lr
 8022f30:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8022f34:	fb0e cc0b 	mla	ip, lr, fp, ip
 8022f38:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8022f3c:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 8022f40:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8022f44:	ea4b 0e0e 	orr.w	lr, fp, lr
 8022f48:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8022f4c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022f50:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8022f54:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022f58:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022f5c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8022f60:	ea43 0c0c 	orr.w	ip, r3, ip
 8022f64:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022f66:	f82a cb02 	strh.w	ip, [sl], #2
 8022f6a:	441c      	add	r4, r3
 8022f6c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022f6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8022f72:	441e      	add	r6, r3
 8022f74:	e723      	b.n	8022dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8022f76:	2800      	cmp	r0, #0
 8022f78:	d0b1      	beq.n	8022ede <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022f7a:	5cd3      	ldrb	r3, [r2, r3]
 8022f7c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022f80:	930a      	str	r3, [sp, #40]	@ 0x28
 8022f82:	e7ac      	b.n	8022ede <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022f84:	b013      	add	sp, #76	@ 0x4c
 8022f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022f8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8022f8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f8e:	880d      	ldrh	r5, [r1, #0]
 8022f90:	b087      	sub	sp, #28
 8022f92:	10ef      	asrs	r7, r5, #3
 8022f94:	ea4f 2a25 	mov.w	sl, r5, asr #8
 8022f98:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8022f9c:	00ed      	lsls	r5, r5, #3
 8022f9e:	9701      	str	r7, [sp, #4]
 8022fa0:	b2ed      	uxtb	r5, r5
 8022fa2:	9502      	str	r5, [sp, #8]
 8022fa4:	9d01      	ldr	r5, [sp, #4]
 8022fa6:	9103      	str	r1, [sp, #12]
 8022fa8:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8022fac:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 8022fb0:	9902      	ldr	r1, [sp, #8]
 8022fb2:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8022fb6:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8022fba:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 8022fbe:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 8022fc2:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 8022fc6:	022d      	lsls	r5, r5, #8
 8022fc8:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8022fcc:	fb06 0709 	mla	r7, r6, r9, r0
 8022fd0:	430d      	orrs	r5, r1
 8022fd2:	2e00      	cmp	r6, #0
 8022fd4:	eb02 0c07 	add.w	ip, r2, r7
 8022fd8:	9505      	str	r5, [sp, #20]
 8022fda:	f2c0 80b6 	blt.w	802314a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8022fde:	45b3      	cmp	fp, r6
 8022fe0:	f340 80b3 	ble.w	802314a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8022fe4:	2800      	cmp	r0, #0
 8022fe6:	f2c0 80ae 	blt.w	8023146 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8022fea:	4581      	cmp	r9, r0
 8022fec:	f340 80ab 	ble.w	8023146 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8022ff0:	5dd7      	ldrb	r7, [r2, r7]
 8022ff2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022ff6:	441f      	add	r7, r3
 8022ff8:	1c42      	adds	r2, r0, #1
 8022ffa:	f100 80a9 	bmi.w	8023150 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8022ffe:	4591      	cmp	r9, r2
 8023000:	f340 80a6 	ble.w	8023150 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8023004:	2c00      	cmp	r4, #0
 8023006:	f000 80a3 	beq.w	8023150 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802300a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802300e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023012:	441d      	add	r5, r3
 8023014:	3601      	adds	r6, #1
 8023016:	f100 809f 	bmi.w	8023158 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802301a:	45b3      	cmp	fp, r6
 802301c:	f340 809c 	ble.w	8023158 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8023020:	f1be 0f00 	cmp.w	lr, #0
 8023024:	f000 8098 	beq.w	8023158 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8023028:	2800      	cmp	r0, #0
 802302a:	f2c0 8093 	blt.w	8023154 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 802302e:	4581      	cmp	r9, r0
 8023030:	f340 8090 	ble.w	8023154 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8023034:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8023038:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802303c:	441e      	add	r6, r3
 802303e:	3001      	adds	r0, #1
 8023040:	f100 808d 	bmi.w	802315e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8023044:	4581      	cmp	r9, r0
 8023046:	f340 808a 	ble.w	802315e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 802304a:	2c00      	cmp	r4, #0
 802304c:	f000 8087 	beq.w	802315e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8023050:	44e1      	add	r9, ip
 8023052:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023056:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802305a:	4413      	add	r3, r2
 802305c:	b2a4      	uxth	r4, r4
 802305e:	fa1f fe8e 	uxth.w	lr, lr
 8023062:	fb04 fb0e 	mul.w	fp, r4, lr
 8023066:	0124      	lsls	r4, r4, #4
 8023068:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 802306c:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 8023070:	eba4 040b 	sub.w	r4, r4, fp
 8023074:	fa1f f08e 	uxth.w	r0, lr
 8023078:	b2a2      	uxth	r2, r4
 802307a:	78ac      	ldrb	r4, [r5, #2]
 802307c:	f897 c002 	ldrb.w	ip, [r7, #2]
 8023080:	9901      	ldr	r1, [sp, #4]
 8023082:	eba9 0900 	sub.w	r9, r9, r0
 8023086:	fa1f f989 	uxth.w	r9, r9
 802308a:	4354      	muls	r4, r2
 802308c:	fb09 440c 	mla	r4, r9, ip, r4
 8023090:	f896 c002 	ldrb.w	ip, [r6, #2]
 8023094:	fb00 440c 	mla	r4, r0, ip, r4
 8023098:	f893 c002 	ldrb.w	ip, [r3, #2]
 802309c:	fa1f fe88 	uxth.w	lr, r8
 80230a0:	ea6f 0808 	mvn.w	r8, r8
 80230a4:	fa5f f888 	uxtb.w	r8, r8
 80230a8:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80230ac:	fb1a fa08 	smulbb	sl, sl, r8
 80230b0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80230b4:	fb0c ac0e 	mla	ip, ip, lr, sl
 80230b8:	f895 a001 	ldrb.w	sl, [r5, #1]
 80230bc:	787c      	ldrb	r4, [r7, #1]
 80230be:	782d      	ldrb	r5, [r5, #0]
 80230c0:	783f      	ldrb	r7, [r7, #0]
 80230c2:	fb02 fa0a 	mul.w	sl, r2, sl
 80230c6:	fb09 aa04 	mla	sl, r9, r4, sl
 80230ca:	7874      	ldrb	r4, [r6, #1]
 80230cc:	436a      	muls	r2, r5
 80230ce:	7835      	ldrb	r5, [r6, #0]
 80230d0:	fb00 aa04 	mla	sl, r0, r4, sl
 80230d4:	fb09 2207 	mla	r2, r9, r7, r2
 80230d8:	785c      	ldrb	r4, [r3, #1]
 80230da:	781b      	ldrb	r3, [r3, #0]
 80230dc:	fb00 2005 	mla	r0, r0, r5, r2
 80230e0:	fb0b a404 	mla	r4, fp, r4, sl
 80230e4:	fb0b 0b03 	mla	fp, fp, r3, r0
 80230e8:	9b02      	ldr	r3, [sp, #8]
 80230ea:	fb11 fa08 	smulbb	sl, r1, r8
 80230ee:	fa1f fc8c 	uxth.w	ip, ip
 80230f2:	fb13 f808 	smulbb	r8, r3, r8
 80230f6:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80230fa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80230fe:	fb04 a40e 	mla	r4, r4, lr, sl
 8023102:	f10c 0301 	add.w	r3, ip, #1
 8023106:	fb0b 8e0e 	mla	lr, fp, lr, r8
 802310a:	fa1f fe8e 	uxth.w	lr, lr
 802310e:	b2a4      	uxth	r4, r4
 8023110:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023114:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 8023118:	f104 0a01 	add.w	sl, r4, #1
 802311c:	f10e 0c01 	add.w	ip, lr, #1
 8023120:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023124:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8023128:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802312c:	0964      	lsrs	r4, r4, #5
 802312e:	ea4c 0c03 	orr.w	ip, ip, r3
 8023132:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8023136:	9b03      	ldr	r3, [sp, #12]
 8023138:	ea4c 0c04 	orr.w	ip, ip, r4
 802313c:	f8a3 c000 	strh.w	ip, [r3]
 8023140:	b007      	add	sp, #28
 8023142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023146:	af05      	add	r7, sp, #20
 8023148:	e756      	b.n	8022ff8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 802314a:	ad05      	add	r5, sp, #20
 802314c:	462f      	mov	r7, r5
 802314e:	e761      	b.n	8023014 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8023150:	ad05      	add	r5, sp, #20
 8023152:	e75f      	b.n	8023014 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8023154:	ae05      	add	r6, sp, #20
 8023156:	e772      	b.n	802303e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8023158:	ab05      	add	r3, sp, #20
 802315a:	461e      	mov	r6, r3
 802315c:	e77e      	b.n	802305c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 802315e:	ab05      	add	r3, sp, #20
 8023160:	e77c      	b.n	802305c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08023162 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023162:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023166:	b095      	sub	sp, #84	@ 0x54
 8023168:	9212      	str	r2, [sp, #72]	@ 0x48
 802316a:	9309      	str	r3, [sp, #36]	@ 0x24
 802316c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802316e:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8023172:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023174:	910e      	str	r1, [sp, #56]	@ 0x38
 8023176:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 802317a:	9013      	str	r0, [sp, #76]	@ 0x4c
 802317c:	6850      	ldr	r0, [r2, #4]
 802317e:	6812      	ldr	r2, [r2, #0]
 8023180:	fb00 1303 	mla	r3, r0, r3, r1
 8023184:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023188:	930a      	str	r3, [sp, #40]	@ 0x28
 802318a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802318c:	681b      	ldr	r3, [r3, #0]
 802318e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023190:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023192:	685c      	ldr	r4, [r3, #4]
 8023194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023196:	43db      	mvns	r3, r3
 8023198:	b2db      	uxtb	r3, r3
 802319a:	3404      	adds	r4, #4
 802319c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802319e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80231a0:	2b00      	cmp	r3, #0
 80231a2:	dc03      	bgt.n	80231ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80231a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80231a6:	2b00      	cmp	r3, #0
 80231a8:	f340 8255 	ble.w	8023656 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80231ac:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80231ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80231b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80231b6:	1e48      	subs	r0, r1, #1
 80231b8:	1e55      	subs	r5, r2, #1
 80231ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231bc:	2b00      	cmp	r3, #0
 80231be:	f340 80f9 	ble.w	80233b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80231c2:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 80231c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80231c6:	1436      	asrs	r6, r6, #16
 80231c8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80231cc:	d406      	bmi.n	80231dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80231ce:	4286      	cmp	r6, r0
 80231d0:	da04      	bge.n	80231dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80231d2:	2b00      	cmp	r3, #0
 80231d4:	db02      	blt.n	80231dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80231d6:	42ab      	cmp	r3, r5
 80231d8:	f2c0 80ed 	blt.w	80233b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80231dc:	3601      	adds	r6, #1
 80231de:	f100 80da 	bmi.w	8023396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80231e2:	42b1      	cmp	r1, r6
 80231e4:	f2c0 80d7 	blt.w	8023396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80231e8:	3301      	adds	r3, #1
 80231ea:	f100 80d4 	bmi.w	8023396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80231ee:	429a      	cmp	r2, r3
 80231f0:	f2c0 80d1 	blt.w	8023396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80231f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231f6:	9311      	str	r3, [sp, #68]	@ 0x44
 80231f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80231fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80231fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80231fe:	2b00      	cmp	r3, #0
 8023200:	f340 80fa 	ble.w	80233f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8023204:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8023206:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023208:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802320a:	68c6      	ldr	r6, [r0, #12]
 802320c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802320e:	141d      	asrs	r5, r3, #16
 8023210:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023214:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023216:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8023218:	1400      	asrs	r0, r0, #16
 802321a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802321e:	6892      	ldr	r2, [r2, #8]
 8023220:	f100 813e 	bmi.w	80234a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023224:	1e57      	subs	r7, r2, #1
 8023226:	42b8      	cmp	r0, r7
 8023228:	f280 813a 	bge.w	80234a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802322c:	2d00      	cmp	r5, #0
 802322e:	f2c0 8137 	blt.w	80234a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023232:	1e77      	subs	r7, r6, #1
 8023234:	42bd      	cmp	r5, r7
 8023236:	f280 8133 	bge.w	80234a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802323a:	b212      	sxth	r2, r2
 802323c:	fb05 0002 	mla	r0, r5, r2, r0
 8023240:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8023242:	f815 a000 	ldrb.w	sl, [r5, r0]
 8023246:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802324a:	182e      	adds	r6, r5, r0
 802324c:	eb04 050a 	add.w	r5, r4, sl
 8023250:	2b00      	cmp	r3, #0
 8023252:	f000 8117 	beq.w	8023484 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023256:	f896 c001 	ldrb.w	ip, [r6, #1]
 802325a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802325e:	44a4      	add	ip, r4
 8023260:	2900      	cmp	r1, #0
 8023262:	f000 8117 	beq.w	8023494 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8023266:	18b0      	adds	r0, r6, r2
 8023268:	5cb2      	ldrb	r2, [r6, r2]
 802326a:	7840      	ldrb	r0, [r0, #1]
 802326c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023270:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023274:	4422      	add	r2, r4
 8023276:	4420      	add	r0, r4
 8023278:	b29b      	uxth	r3, r3
 802327a:	b289      	uxth	r1, r1
 802327c:	fb03 f901 	mul.w	r9, r3, r1
 8023280:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023284:	011b      	lsls	r3, r3, #4
 8023286:	b289      	uxth	r1, r1
 8023288:	f89c 7002 	ldrb.w	r7, [ip, #2]
 802328c:	f895 b002 	ldrb.w	fp, [r5, #2]
 8023290:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023292:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8023296:	f8b6 e000 	ldrh.w	lr, [r6]
 802329a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 802329e:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 80232a2:	eba3 0309 	sub.w	r3, r3, r9
 80232a6:	b29b      	uxth	r3, r3
 80232a8:	eba8 0801 	sub.w	r8, r8, r1
 80232ac:	fa1f f888 	uxth.w	r8, r8
 80232b0:	435f      	muls	r7, r3
 80232b2:	fb08 770b 	mla	r7, r8, fp, r7
 80232b6:	f892 b002 	ldrb.w	fp, [r2, #2]
 80232ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80232bc:	fb01 770b 	mla	r7, r1, fp, r7
 80232c0:	f890 b002 	ldrb.w	fp, [r0, #2]
 80232c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80232c6:	fb09 770b 	mla	r7, r9, fp, r7
 80232ca:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80232ce:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 80232d2:	fb1b fb03 	smulbb	fp, fp, r3
 80232d6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80232da:	fb07 b706 	mla	r7, r7, r6, fp
 80232de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80232e0:	f895 b001 	ldrb.w	fp, [r5, #1]
 80232e4:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80232e8:	f89c c000 	ldrb.w	ip, [ip]
 80232ec:	435d      	muls	r5, r3
 80232ee:	fb08 550b 	mla	r5, r8, fp, r5
 80232f2:	f892 b001 	ldrb.w	fp, [r2, #1]
 80232f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80232f8:	fb01 550b 	mla	r5, r1, fp, r5
 80232fc:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023300:	fb09 550b 	mla	r5, r9, fp, r5
 8023304:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8023308:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 802330c:	fb1b fb03 	smulbb	fp, fp, r3
 8023310:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023312:	fb03 f30c 	mul.w	r3, r3, ip
 8023316:	f892 c000 	ldrb.w	ip, [r2]
 802331a:	fb08 330a 	mla	r3, r8, sl, r3
 802331e:	fb01 330c 	mla	r3, r1, ip, r3
 8023322:	f890 c000 	ldrb.w	ip, [r0]
 8023326:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802332a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802332e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023330:	fa5f fe8e 	uxtb.w	lr, lr
 8023334:	b2bf      	uxth	r7, r7
 8023336:	fb1e fe03 	smulbb	lr, lr, r3
 802333a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802333e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023342:	fb05 b506 	mla	r5, r5, r6, fp
 8023346:	1c7b      	adds	r3, r7, #1
 8023348:	fb0c e606 	mla	r6, ip, r6, lr
 802334c:	b2ad      	uxth	r5, r5
 802334e:	b2b6      	uxth	r6, r6
 8023350:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8023354:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 8023358:	f105 0b01 	add.w	fp, r5, #1
 802335c:	1c77      	adds	r7, r6, #1
 802335e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8023362:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023366:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802336a:	096d      	lsrs	r5, r5, #5
 802336c:	431f      	orrs	r7, r3
 802336e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8023372:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023374:	433d      	orrs	r5, r7
 8023376:	801d      	strh	r5, [r3, #0]
 8023378:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802337a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802337c:	3302      	adds	r3, #2
 802337e:	930c      	str	r3, [sp, #48]	@ 0x30
 8023380:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023382:	4413      	add	r3, r2
 8023384:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023386:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8023388:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802338a:	4413      	add	r3, r2
 802338c:	9320      	str	r3, [sp, #128]	@ 0x80
 802338e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023390:	3b01      	subs	r3, #1
 8023392:	9311      	str	r3, [sp, #68]	@ 0x44
 8023394:	e732      	b.n	80231fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023396:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023398:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 802339a:	4433      	add	r3, r6
 802339c:	931f      	str	r3, [sp, #124]	@ 0x7c
 802339e:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80233a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80233a2:	4433      	add	r3, r6
 80233a4:	9320      	str	r3, [sp, #128]	@ 0x80
 80233a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233a8:	3b01      	subs	r3, #1
 80233aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80233ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80233ae:	3302      	adds	r3, #2
 80233b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80233b2:	e702      	b.n	80231ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80233b4:	d027      	beq.n	8023406 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80233b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233b8:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80233ba:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 80233bc:	3b01      	subs	r3, #1
 80233be:	fb00 5003 	mla	r0, r0, r3, r5
 80233c2:	1400      	asrs	r0, r0, #16
 80233c4:	f53f af16 	bmi.w	80231f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80233c8:	3901      	subs	r1, #1
 80233ca:	4288      	cmp	r0, r1
 80233cc:	f6bf af12 	bge.w	80231f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80233d0:	9922      	ldr	r1, [sp, #136]	@ 0x88
 80233d2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80233d4:	fb01 0303 	mla	r3, r1, r3, r0
 80233d8:	141b      	asrs	r3, r3, #16
 80233da:	f53f af0b 	bmi.w	80231f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80233de:	3a01      	subs	r2, #1
 80233e0:	4293      	cmp	r3, r2
 80233e2:	f6bf af07 	bge.w	80231f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80233e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80233ea:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 80233ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80233f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80233f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80233f4:	2b00      	cmp	r3, #0
 80233f6:	dc70      	bgt.n	80234da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80233f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80233fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023400:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023404:	930a      	str	r3, [sp, #40]	@ 0x28
 8023406:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023408:	2b00      	cmp	r3, #0
 802340a:	f340 8124 	ble.w	8023656 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802340e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023412:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023416:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802341a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802341c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023420:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023424:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023428:	eef0 6a62 	vmov.f32	s13, s5
 802342c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023430:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023434:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023438:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 802343c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023440:	eef0 6a43 	vmov.f32	s13, s6
 8023444:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023448:	ee12 2a90 	vmov	r2, s5
 802344c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023450:	fb92 f3f3 	sdiv	r3, r2, r3
 8023454:	ee13 2a10 	vmov	r2, s6
 8023458:	9321      	str	r3, [sp, #132]	@ 0x84
 802345a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802345c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023460:	9322      	str	r3, [sp, #136]	@ 0x88
 8023462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023464:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023466:	3b01      	subs	r3, #1
 8023468:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802346c:	930e      	str	r3, [sp, #56]	@ 0x38
 802346e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023470:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 8023474:	bf08      	it	eq
 8023476:	4613      	moveq	r3, r2
 8023478:	9309      	str	r3, [sp, #36]	@ 0x24
 802347a:	eeb0 3a67 	vmov.f32	s6, s15
 802347e:	eef0 2a47 	vmov.f32	s5, s14
 8023482:	e68c      	b.n	802319e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023484:	b149      	cbz	r1, 802349a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8023486:	5cb2      	ldrb	r2, [r6, r2]
 8023488:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802348c:	4422      	add	r2, r4
 802348e:	4628      	mov	r0, r5
 8023490:	46ac      	mov	ip, r5
 8023492:	e6f1      	b.n	8023278 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023494:	4628      	mov	r0, r5
 8023496:	462a      	mov	r2, r5
 8023498:	e6ee      	b.n	8023278 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802349a:	4628      	mov	r0, r5
 802349c:	462a      	mov	r2, r5
 802349e:	e7f7      	b.n	8023490 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80234a0:	1c47      	adds	r7, r0, #1
 80234a2:	f53f af69 	bmi.w	8023378 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80234a6:	42ba      	cmp	r2, r7
 80234a8:	f6ff af66 	blt.w	8023378 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80234ac:	1c6f      	adds	r7, r5, #1
 80234ae:	f53f af63 	bmi.w	8023378 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80234b2:	42be      	cmp	r6, r7
 80234b4:	f6ff af60 	blt.w	8023378 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80234b8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80234ba:	9002      	str	r0, [sp, #8]
 80234bc:	b236      	sxth	r6, r6
 80234be:	b212      	sxth	r2, r2
 80234c0:	e9cd 1705 	strd	r1, r7, [sp, #20]
 80234c4:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80234c8:	9200      	str	r2, [sp, #0]
 80234ca:	9601      	str	r6, [sp, #4]
 80234cc:	4623      	mov	r3, r4
 80234ce:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 80234d2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80234d4:	f7ff fd59 	bl	8022f8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80234d8:	e74e      	b.n	8023378 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80234da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80234dc:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80234de:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 80234e0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80234e2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80234e6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80234e8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80234ec:	142d      	asrs	r5, r5, #16
 80234ee:	1400      	asrs	r0, r0, #16
 80234f0:	fb02 5000 	mla	r0, r2, r0, r5
 80234f4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80234f6:	f815 9000 	ldrb.w	r9, [r5, r0]
 80234fa:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80234fe:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023502:	182e      	adds	r6, r5, r0
 8023504:	eb04 0509 	add.w	r5, r4, r9
 8023508:	2b00      	cmp	r3, #0
 802350a:	f000 8096 	beq.w	802363a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802350e:	7877      	ldrb	r7, [r6, #1]
 8023510:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023514:	4427      	add	r7, r4
 8023516:	2900      	cmp	r1, #0
 8023518:	f000 8097 	beq.w	802364a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 802351c:	18b0      	adds	r0, r6, r2
 802351e:	5cb2      	ldrb	r2, [r6, r2]
 8023520:	7840      	ldrb	r0, [r0, #1]
 8023522:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023526:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802352a:	4422      	add	r2, r4
 802352c:	4420      	add	r0, r4
 802352e:	b29b      	uxth	r3, r3
 8023530:	b289      	uxth	r1, r1
 8023532:	fb03 f801 	mul.w	r8, r3, r1
 8023536:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023538:	f895 b002 	ldrb.w	fp, [r5, #2]
 802353c:	f8b6 c000 	ldrh.w	ip, [r6]
 8023540:	78be      	ldrb	r6, [r7, #2]
 8023542:	f814 9009 	ldrb.w	r9, [r4, r9]
 8023546:	011b      	lsls	r3, r3, #4
 8023548:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 802354c:	b289      	uxth	r1, r1
 802354e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8023552:	eba3 0308 	sub.w	r3, r3, r8
 8023556:	b29b      	uxth	r3, r3
 8023558:	ebae 0e01 	sub.w	lr, lr, r1
 802355c:	fa1f fe8e 	uxth.w	lr, lr
 8023560:	435e      	muls	r6, r3
 8023562:	fb0e 660b 	mla	r6, lr, fp, r6
 8023566:	f892 b002 	ldrb.w	fp, [r2, #2]
 802356a:	9310      	str	r3, [sp, #64]	@ 0x40
 802356c:	fb01 660b 	mla	r6, r1, fp, r6
 8023570:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023576:	fb08 660b 	mla	r6, r8, fp, r6
 802357a:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 802357e:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8023582:	fb1b fb03 	smulbb	fp, fp, r3
 8023586:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802358a:	fb06 b60a 	mla	r6, r6, sl, fp
 802358e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023590:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023594:	787d      	ldrb	r5, [r7, #1]
 8023596:	783f      	ldrb	r7, [r7, #0]
 8023598:	435d      	muls	r5, r3
 802359a:	fb0e 550b 	mla	r5, lr, fp, r5
 802359e:	f892 b001 	ldrb.w	fp, [r2, #1]
 80235a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80235a4:	fb01 550b 	mla	r5, r1, fp, r5
 80235a8:	f890 b001 	ldrb.w	fp, [r0, #1]
 80235ac:	fb08 550b 	mla	r5, r8, fp, r5
 80235b0:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80235b4:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80235b8:	fb1b fb03 	smulbb	fp, fp, r3
 80235bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80235be:	437b      	muls	r3, r7
 80235c0:	7817      	ldrb	r7, [r2, #0]
 80235c2:	fb0e 3309 	mla	r3, lr, r9, r3
 80235c6:	fb01 3307 	mla	r3, r1, r7, r3
 80235ca:	7807      	ldrb	r7, [r0, #0]
 80235cc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80235d0:	fb08 3707 	mla	r7, r8, r7, r3
 80235d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80235d6:	fa5f fc8c 	uxtb.w	ip, ip
 80235da:	fb1c fc03 	smulbb	ip, ip, r3
 80235de:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80235e2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80235e6:	fb05 b50a 	mla	r5, r5, sl, fp
 80235ea:	fb07 c70a 	mla	r7, r7, sl, ip
 80235ee:	b2b6      	uxth	r6, r6
 80235f0:	b2ad      	uxth	r5, r5
 80235f2:	b2bf      	uxth	r7, r7
 80235f4:	1c73      	adds	r3, r6, #1
 80235f6:	1c7a      	adds	r2, r7, #1
 80235f8:	f105 0b01 	add.w	fp, r5, #1
 80235fc:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023600:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8023604:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023608:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802360c:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8023610:	096d      	lsrs	r5, r5, #5
 8023612:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023614:	4316      	orrs	r6, r2
 8023616:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802361a:	432e      	orrs	r6, r5
 802361c:	f823 6b02 	strh.w	r6, [r3], #2
 8023620:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023622:	930c      	str	r3, [sp, #48]	@ 0x30
 8023624:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023626:	4413      	add	r3, r2
 8023628:	931f      	str	r3, [sp, #124]	@ 0x7c
 802362a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802362c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802362e:	4413      	add	r3, r2
 8023630:	9320      	str	r3, [sp, #128]	@ 0x80
 8023632:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023634:	3b01      	subs	r3, #1
 8023636:	9311      	str	r3, [sp, #68]	@ 0x44
 8023638:	e6db      	b.n	80233f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802363a:	b149      	cbz	r1, 8023650 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 802363c:	5cb2      	ldrb	r2, [r6, r2]
 802363e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023642:	4422      	add	r2, r4
 8023644:	4628      	mov	r0, r5
 8023646:	462f      	mov	r7, r5
 8023648:	e771      	b.n	802352e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 802364a:	4628      	mov	r0, r5
 802364c:	462a      	mov	r2, r5
 802364e:	e76e      	b.n	802352e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023650:	4628      	mov	r0, r5
 8023652:	462a      	mov	r2, r5
 8023654:	e7f7      	b.n	8023646 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023656:	b015      	add	sp, #84	@ 0x54
 8023658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802365c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 802365c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023660:	880f      	ldrh	r7, [r1, #0]
 8023662:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8023666:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 802366a:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 802366e:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8023672:	023c      	lsls	r4, r7, #8
 8023674:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 8023678:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 802367c:	017c      	lsls	r4, r7, #5
 802367e:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 8023682:	00ff      	lsls	r7, r7, #3
 8023684:	ea4b 0404 	orr.w	r4, fp, r4
 8023688:	b2ff      	uxtb	r7, r7
 802368a:	fb05 ca0e 	mla	sl, r5, lr, ip
 802368e:	4327      	orrs	r7, r4
 8023690:	2d00      	cmp	r5, #0
 8023692:	eb02 080a 	add.w	r8, r2, sl
 8023696:	9701      	str	r7, [sp, #4]
 8023698:	db7e      	blt.n	8023798 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 802369a:	45a9      	cmp	r9, r5
 802369c:	dd7c      	ble.n	8023798 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 802369e:	f1bc 0f00 	cmp.w	ip, #0
 80236a2:	db77      	blt.n	8023794 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80236a4:	45e6      	cmp	lr, ip
 80236a6:	dd75      	ble.n	8023794 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 80236a8:	f812 700a 	ldrb.w	r7, [r2, sl]
 80236ac:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80236b0:	441f      	add	r7, r3
 80236b2:	f11c 0201 	adds.w	r2, ip, #1
 80236b6:	d472      	bmi.n	802379e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80236b8:	4596      	cmp	lr, r2
 80236ba:	dd70      	ble.n	802379e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80236bc:	2800      	cmp	r0, #0
 80236be:	d06e      	beq.n	802379e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80236c0:	f898 4001 	ldrb.w	r4, [r8, #1]
 80236c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80236c8:	441c      	add	r4, r3
 80236ca:	3501      	adds	r5, #1
 80236cc:	d46b      	bmi.n	80237a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80236ce:	45a9      	cmp	r9, r5
 80236d0:	dd69      	ble.n	80237a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80236d2:	2e00      	cmp	r6, #0
 80236d4:	d067      	beq.n	80237a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80236d6:	f1bc 0f00 	cmp.w	ip, #0
 80236da:	db62      	blt.n	80237a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80236dc:	45e6      	cmp	lr, ip
 80236de:	dd60      	ble.n	80237a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80236e0:	f818 500e 	ldrb.w	r5, [r8, lr]
 80236e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80236e8:	441d      	add	r5, r3
 80236ea:	f11c 0201 	adds.w	r2, ip, #1
 80236ee:	d45d      	bmi.n	80237ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80236f0:	4596      	cmp	lr, r2
 80236f2:	dd5b      	ble.n	80237ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80236f4:	2800      	cmp	r0, #0
 80236f6:	d059      	beq.n	80237ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80236f8:	44c6      	add	lr, r8
 80236fa:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80236fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023702:	4413      	add	r3, r2
 8023704:	b280      	uxth	r0, r0
 8023706:	b2b2      	uxth	r2, r6
 8023708:	fb00 f602 	mul.w	r6, r0, r2
 802370c:	0100      	lsls	r0, r0, #4
 802370e:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8023712:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 8023716:	1b80      	subs	r0, r0, r6
 8023718:	fa1f fc82 	uxth.w	ip, r2
 802371c:	b282      	uxth	r2, r0
 802371e:	78a0      	ldrb	r0, [r4, #2]
 8023720:	f897 e002 	ldrb.w	lr, [r7, #2]
 8023724:	f897 9000 	ldrb.w	r9, [r7]
 8023728:	787f      	ldrb	r7, [r7, #1]
 802372a:	eba8 080c 	sub.w	r8, r8, ip
 802372e:	fa1f f888 	uxth.w	r8, r8
 8023732:	4350      	muls	r0, r2
 8023734:	fb08 0e0e 	mla	lr, r8, lr, r0
 8023738:	78a8      	ldrb	r0, [r5, #2]
 802373a:	fb0c e000 	mla	r0, ip, r0, lr
 802373e:	f893 e002 	ldrb.w	lr, [r3, #2]
 8023742:	fb06 0e0e 	mla	lr, r6, lr, r0
 8023746:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 802374a:	f894 e000 	ldrb.w	lr, [r4]
 802374e:	fb02 fe0e 	mul.w	lr, r2, lr
 8023752:	fb08 e909 	mla	r9, r8, r9, lr
 8023756:	f895 e000 	ldrb.w	lr, [r5]
 802375a:	fb0c 990e 	mla	r9, ip, lr, r9
 802375e:	f893 e000 	ldrb.w	lr, [r3]
 8023762:	785b      	ldrb	r3, [r3, #1]
 8023764:	fb06 9e0e 	mla	lr, r6, lr, r9
 8023768:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802376c:	ea4e 0e00 	orr.w	lr, lr, r0
 8023770:	7860      	ldrb	r0, [r4, #1]
 8023772:	4350      	muls	r0, r2
 8023774:	786a      	ldrb	r2, [r5, #1]
 8023776:	fb08 0007 	mla	r0, r8, r7, r0
 802377a:	fb0c 0202 	mla	r2, ip, r2, r0
 802377e:	fb06 2303 	mla	r3, r6, r3, r2
 8023782:	095b      	lsrs	r3, r3, #5
 8023784:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023788:	ea4e 0303 	orr.w	r3, lr, r3
 802378c:	800b      	strh	r3, [r1, #0]
 802378e:	b003      	add	sp, #12
 8023790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023794:	af01      	add	r7, sp, #4
 8023796:	e78c      	b.n	80236b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8023798:	ac01      	add	r4, sp, #4
 802379a:	4627      	mov	r7, r4
 802379c:	e795      	b.n	80236ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802379e:	ac01      	add	r4, sp, #4
 80237a0:	e793      	b.n	80236ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80237a2:	ad01      	add	r5, sp, #4
 80237a4:	e7a1      	b.n	80236ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 80237a6:	ab01      	add	r3, sp, #4
 80237a8:	461d      	mov	r5, r3
 80237aa:	e7ab      	b.n	8023704 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 80237ac:	ab01      	add	r3, sp, #4
 80237ae:	e7a9      	b.n	8023704 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

080237b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80237b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237b4:	b08f      	sub	sp, #60	@ 0x3c
 80237b6:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 80237ba:	920c      	str	r2, [sp, #48]	@ 0x30
 80237bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80237be:	910a      	str	r1, [sp, #40]	@ 0x28
 80237c0:	9306      	str	r3, [sp, #24]
 80237c2:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 80237c6:	900d      	str	r0, [sp, #52]	@ 0x34
 80237c8:	6850      	ldr	r0, [r2, #4]
 80237ca:	6812      	ldr	r2, [r2, #0]
 80237cc:	fb00 1303 	mla	r3, r0, r3, r1
 80237d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80237d4:	9307      	str	r3, [sp, #28]
 80237d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80237d8:	681b      	ldr	r3, [r3, #0]
 80237da:	9308      	str	r3, [sp, #32]
 80237dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80237de:	685c      	ldr	r4, [r3, #4]
 80237e0:	3404      	adds	r4, #4
 80237e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80237e4:	2b00      	cmp	r3, #0
 80237e6:	dc03      	bgt.n	80237f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80237e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80237ea:	2b00      	cmp	r3, #0
 80237ec:	f340 81d6 	ble.w	8023b9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80237f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80237f2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80237f6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80237fa:	1e48      	subs	r0, r1, #1
 80237fc:	1e56      	subs	r6, r2, #1
 80237fe:	9b06      	ldr	r3, [sp, #24]
 8023800:	2b00      	cmp	r3, #0
 8023802:	f340 80b7 	ble.w	8023974 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8023806:	ea5f 472b 	movs.w	r7, fp, asr #16
 802380a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802380e:	d406      	bmi.n	802381e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023810:	4287      	cmp	r7, r0
 8023812:	da04      	bge.n	802381e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023814:	2b00      	cmp	r3, #0
 8023816:	db02      	blt.n	802381e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023818:	42b3      	cmp	r3, r6
 802381a:	f2c0 80ac 	blt.w	8023976 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802381e:	3701      	adds	r7, #1
 8023820:	f100 809d 	bmi.w	802395e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8023824:	42b9      	cmp	r1, r7
 8023826:	f2c0 809a 	blt.w	802395e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802382a:	3301      	adds	r3, #1
 802382c:	f100 8097 	bmi.w	802395e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8023830:	429a      	cmp	r2, r3
 8023832:	f2c0 8094 	blt.w	802395e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8023836:	9b06      	ldr	r3, [sp, #24]
 8023838:	930b      	str	r3, [sp, #44]	@ 0x2c
 802383a:	9b07      	ldr	r3, [sp, #28]
 802383c:	9309      	str	r3, [sp, #36]	@ 0x24
 802383e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023840:	2b00      	cmp	r3, #0
 8023842:	f340 80b5 	ble.w	80239b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023846:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8023848:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802384a:	68c7      	ldr	r7, [r0, #12]
 802384c:	6892      	ldr	r2, [r2, #8]
 802384e:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023852:	ea4f 4625 	mov.w	r6, r5, asr #16
 8023856:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802385a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802385e:	f100 80fb 	bmi.w	8023a58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8023862:	f102 3cff 	add.w	ip, r2, #4294967295
 8023866:	4560      	cmp	r0, ip
 8023868:	f280 80f6 	bge.w	8023a58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802386c:	2e00      	cmp	r6, #0
 802386e:	f2c0 80f3 	blt.w	8023a58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8023872:	f107 3cff 	add.w	ip, r7, #4294967295
 8023876:	4566      	cmp	r6, ip
 8023878:	f280 80ee 	bge.w	8023a58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802387c:	b212      	sxth	r2, r2
 802387e:	fb06 0002 	mla	r0, r6, r2, r0
 8023882:	9e08      	ldr	r6, [sp, #32]
 8023884:	1837      	adds	r7, r6, r0
 8023886:	5c30      	ldrb	r0, [r6, r0]
 8023888:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 802388c:	eb04 0c08 	add.w	ip, r4, r8
 8023890:	2b00      	cmp	r3, #0
 8023892:	f000 80d3 	beq.w	8023a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8023896:	787e      	ldrb	r6, [r7, #1]
 8023898:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802389c:	4426      	add	r6, r4
 802389e:	2900      	cmp	r1, #0
 80238a0:	f000 80d4 	beq.w	8023a4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 80238a4:	18b8      	adds	r0, r7, r2
 80238a6:	5cba      	ldrb	r2, [r7, r2]
 80238a8:	7840      	ldrb	r0, [r0, #1]
 80238aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80238ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80238b2:	4422      	add	r2, r4
 80238b4:	4420      	add	r0, r4
 80238b6:	b29b      	uxth	r3, r3
 80238b8:	b289      	uxth	r1, r1
 80238ba:	fb03 f901 	mul.w	r9, r3, r1
 80238be:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80238c2:	011b      	lsls	r3, r3, #4
 80238c4:	b289      	uxth	r1, r1
 80238c6:	78b7      	ldrb	r7, [r6, #2]
 80238c8:	f89c a002 	ldrb.w	sl, [ip, #2]
 80238cc:	f89c c001 	ldrb.w	ip, [ip, #1]
 80238d0:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80238d4:	eba3 0309 	sub.w	r3, r3, r9
 80238d8:	b29b      	uxth	r3, r3
 80238da:	ebae 0e01 	sub.w	lr, lr, r1
 80238de:	fa1f fe8e 	uxth.w	lr, lr
 80238e2:	435f      	muls	r7, r3
 80238e4:	fb0e 770a 	mla	r7, lr, sl, r7
 80238e8:	f892 a002 	ldrb.w	sl, [r2, #2]
 80238ec:	fb01 770a 	mla	r7, r1, sl, r7
 80238f0:	f890 a002 	ldrb.w	sl, [r0, #2]
 80238f4:	fb09 7a0a 	mla	sl, r9, sl, r7
 80238f8:	f814 7008 	ldrb.w	r7, [r4, r8]
 80238fc:	f896 8000 	ldrb.w	r8, [r6]
 8023900:	7876      	ldrb	r6, [r6, #1]
 8023902:	fb03 f808 	mul.w	r8, r3, r8
 8023906:	fb0e 8807 	mla	r8, lr, r7, r8
 802390a:	7817      	ldrb	r7, [r2, #0]
 802390c:	fb01 8807 	mla	r8, r1, r7, r8
 8023910:	7807      	ldrb	r7, [r0, #0]
 8023912:	fb09 8707 	mla	r7, r9, r7, r8
 8023916:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 802391a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802391e:	ea47 070a 	orr.w	r7, r7, sl
 8023922:	4373      	muls	r3, r6
 8023924:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023928:	fb0e 330c 	mla	r3, lr, ip, r3
 802392c:	fb01 310a 	mla	r1, r1, sl, r3
 8023930:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023936:	fb09 1a0a 	mla	sl, r9, sl, r1
 802393a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802393e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8023942:	ea47 070a 	orr.w	r7, r7, sl
 8023946:	801f      	strh	r7, [r3, #0]
 8023948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802394a:	3302      	adds	r3, #2
 802394c:	9309      	str	r3, [sp, #36]	@ 0x24
 802394e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023950:	449b      	add	fp, r3
 8023952:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023954:	441d      	add	r5, r3
 8023956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023958:	3b01      	subs	r3, #1
 802395a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802395c:	e76f      	b.n	802383e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802395e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023960:	449b      	add	fp, r3
 8023962:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023964:	441d      	add	r5, r3
 8023966:	9b06      	ldr	r3, [sp, #24]
 8023968:	3b01      	subs	r3, #1
 802396a:	9306      	str	r3, [sp, #24]
 802396c:	9b07      	ldr	r3, [sp, #28]
 802396e:	3302      	adds	r3, #2
 8023970:	9307      	str	r3, [sp, #28]
 8023972:	e744      	b.n	80237fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8023974:	d023      	beq.n	80239be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023976:	9b06      	ldr	r3, [sp, #24]
 8023978:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802397a:	3b01      	subs	r3, #1
 802397c:	fb00 b003 	mla	r0, r0, r3, fp
 8023980:	1400      	asrs	r0, r0, #16
 8023982:	f53f af58 	bmi.w	8023836 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023986:	3901      	subs	r1, #1
 8023988:	4288      	cmp	r0, r1
 802398a:	f6bf af54 	bge.w	8023836 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802398e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8023990:	fb01 5303 	mla	r3, r1, r3, r5
 8023994:	141b      	asrs	r3, r3, #16
 8023996:	f53f af4e 	bmi.w	8023836 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802399a:	3a01      	subs	r2, #1
 802399c:	4293      	cmp	r3, r2
 802399e:	f6bf af4a 	bge.w	8023836 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80239a2:	9b06      	ldr	r3, [sp, #24]
 80239a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80239a6:	9b07      	ldr	r3, [sp, #28]
 80239a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80239aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80239ac:	2b00      	cmp	r3, #0
 80239ae:	dc70      	bgt.n	8023a92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80239b0:	9b06      	ldr	r3, [sp, #24]
 80239b2:	9a07      	ldr	r2, [sp, #28]
 80239b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80239b8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80239bc:	9307      	str	r3, [sp, #28]
 80239be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80239c0:	2b00      	cmp	r3, #0
 80239c2:	f340 80eb 	ble.w	8023b9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80239c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80239ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80239ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80239d2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80239d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80239d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80239dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80239e0:	eef0 6a62 	vmov.f32	s13, s5
 80239e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80239e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80239ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 80239f0:	ee16 ba90 	vmov	fp, s13
 80239f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80239f8:	eef0 6a43 	vmov.f32	s13, s6
 80239fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023a00:	ee12 2a90 	vmov	r2, s5
 8023a04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023a08:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a0c:	ee13 2a10 	vmov	r2, s6
 8023a10:	931b      	str	r3, [sp, #108]	@ 0x6c
 8023a12:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023a14:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a18:	931c      	str	r3, [sp, #112]	@ 0x70
 8023a1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023a1c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023a1e:	3b01      	subs	r3, #1
 8023a20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a24:	930a      	str	r3, [sp, #40]	@ 0x28
 8023a26:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023a28:	bf08      	it	eq
 8023a2a:	4613      	moveq	r3, r2
 8023a2c:	ee16 5a90 	vmov	r5, s13
 8023a30:	9306      	str	r3, [sp, #24]
 8023a32:	eeb0 3a67 	vmov.f32	s6, s15
 8023a36:	eef0 2a47 	vmov.f32	s5, s14
 8023a3a:	e6d2      	b.n	80237e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8023a3c:	b149      	cbz	r1, 8023a52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8023a3e:	5cba      	ldrb	r2, [r7, r2]
 8023a40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023a44:	4422      	add	r2, r4
 8023a46:	4660      	mov	r0, ip
 8023a48:	4666      	mov	r6, ip
 8023a4a:	e734      	b.n	80238b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8023a4c:	4660      	mov	r0, ip
 8023a4e:	4662      	mov	r2, ip
 8023a50:	e731      	b.n	80238b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8023a52:	4660      	mov	r0, ip
 8023a54:	4662      	mov	r2, ip
 8023a56:	e7f7      	b.n	8023a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8023a58:	f110 0c01 	adds.w	ip, r0, #1
 8023a5c:	f53f af74 	bmi.w	8023948 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023a60:	4562      	cmp	r2, ip
 8023a62:	f6ff af71 	blt.w	8023948 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023a66:	f116 0c01 	adds.w	ip, r6, #1
 8023a6a:	f53f af6d 	bmi.w	8023948 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023a6e:	4567      	cmp	r7, ip
 8023a70:	f6ff af6a 	blt.w	8023948 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023a74:	b23f      	sxth	r7, r7
 8023a76:	b212      	sxth	r2, r2
 8023a78:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8023a7c:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8023a80:	9200      	str	r2, [sp, #0]
 8023a82:	9701      	str	r7, [sp, #4]
 8023a84:	4623      	mov	r3, r4
 8023a86:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8023a8a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023a8c:	f7ff fde6 	bl	802365c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8023a90:	e75a      	b.n	8023948 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023a92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8023a94:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023a98:	ea4f 462b 	mov.w	r6, fp, asr #16
 8023a9c:	1428      	asrs	r0, r5, #16
 8023a9e:	fb02 6000 	mla	r0, r2, r0, r6
 8023aa2:	9e08      	ldr	r6, [sp, #32]
 8023aa4:	f816 8000 	ldrb.w	r8, [r6, r0]
 8023aa8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023aac:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023ab0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023ab4:	1837      	adds	r7, r6, r0
 8023ab6:	eb04 0c08 	add.w	ip, r4, r8
 8023aba:	2b00      	cmp	r3, #0
 8023abc:	d060      	beq.n	8023b80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8023abe:	787e      	ldrb	r6, [r7, #1]
 8023ac0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023ac4:	4426      	add	r6, r4
 8023ac6:	2900      	cmp	r1, #0
 8023ac8:	d062      	beq.n	8023b90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 8023aca:	18b8      	adds	r0, r7, r2
 8023acc:	5cba      	ldrb	r2, [r7, r2]
 8023ace:	7840      	ldrb	r0, [r0, #1]
 8023ad0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023ad4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023ad8:	4422      	add	r2, r4
 8023ada:	4420      	add	r0, r4
 8023adc:	b29b      	uxth	r3, r3
 8023ade:	b289      	uxth	r1, r1
 8023ae0:	fb03 f901 	mul.w	r9, r3, r1
 8023ae4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023ae8:	011b      	lsls	r3, r3, #4
 8023aea:	b289      	uxth	r1, r1
 8023aec:	78b7      	ldrb	r7, [r6, #2]
 8023aee:	f89c a002 	ldrb.w	sl, [ip, #2]
 8023af2:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023af6:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8023afa:	eba3 0309 	sub.w	r3, r3, r9
 8023afe:	b29b      	uxth	r3, r3
 8023b00:	ebae 0e01 	sub.w	lr, lr, r1
 8023b04:	fa1f fe8e 	uxth.w	lr, lr
 8023b08:	435f      	muls	r7, r3
 8023b0a:	fb0e 770a 	mla	r7, lr, sl, r7
 8023b0e:	f892 a002 	ldrb.w	sl, [r2, #2]
 8023b12:	fb01 770a 	mla	r7, r1, sl, r7
 8023b16:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023b1a:	fb09 7a0a 	mla	sl, r9, sl, r7
 8023b1e:	f814 7008 	ldrb.w	r7, [r4, r8]
 8023b22:	f896 8000 	ldrb.w	r8, [r6]
 8023b26:	7876      	ldrb	r6, [r6, #1]
 8023b28:	fb03 f808 	mul.w	r8, r3, r8
 8023b2c:	fb0e 8807 	mla	r8, lr, r7, r8
 8023b30:	7817      	ldrb	r7, [r2, #0]
 8023b32:	fb01 8807 	mla	r8, r1, r7, r8
 8023b36:	7807      	ldrb	r7, [r0, #0]
 8023b38:	fb09 8707 	mla	r7, r9, r7, r8
 8023b3c:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8023b40:	4373      	muls	r3, r6
 8023b42:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023b46:	7856      	ldrb	r6, [r2, #1]
 8023b48:	ea47 070a 	orr.w	r7, r7, sl
 8023b4c:	fb0e 330c 	mla	r3, lr, ip, r3
 8023b50:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023b54:	fb01 3306 	mla	r3, r1, r6, r3
 8023b58:	fb09 3a0a 	mla	sl, r9, sl, r3
 8023b5c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023b60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023b62:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8023b66:	ea47 070a 	orr.w	r7, r7, sl
 8023b6a:	f823 7b02 	strh.w	r7, [r3], #2
 8023b6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023b70:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023b72:	449b      	add	fp, r3
 8023b74:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023b76:	441d      	add	r5, r3
 8023b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023b7a:	3b01      	subs	r3, #1
 8023b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8023b7e:	e714      	b.n	80239aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023b80:	b149      	cbz	r1, 8023b96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8023b82:	5cba      	ldrb	r2, [r7, r2]
 8023b84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b88:	4422      	add	r2, r4
 8023b8a:	4660      	mov	r0, ip
 8023b8c:	4666      	mov	r6, ip
 8023b8e:	e7a5      	b.n	8023adc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023b90:	4660      	mov	r0, ip
 8023b92:	4662      	mov	r2, ip
 8023b94:	e7a2      	b.n	8023adc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023b96:	4660      	mov	r0, ip
 8023b98:	4662      	mov	r2, ip
 8023b9a:	e7f7      	b.n	8023b8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 8023b9c:	b00f      	add	sp, #60	@ 0x3c
 8023b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023ba2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8023ba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ba6:	b085      	sub	sp, #20
 8023ba8:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 8023bac:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 8023bb0:	9102      	str	r1, [sp, #8]
 8023bb2:	2c00      	cmp	r4, #0
 8023bb4:	fb04 710c 	mla	r1, r4, ip, r7
 8023bb8:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8023bbc:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 8023bc0:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8023bc4:	eb02 0e01 	add.w	lr, r2, r1
 8023bc8:	f2c0 8122 	blt.w	8023e10 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8023bcc:	45a0      	cmp	r8, r4
 8023bce:	f340 811f 	ble.w	8023e10 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8023bd2:	2f00      	cmp	r7, #0
 8023bd4:	f2c0 811a 	blt.w	8023e0c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8023bd8:	45bc      	cmp	ip, r7
 8023bda:	f340 8117 	ble.w	8023e0c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8023bde:	5c52      	ldrb	r2, [r2, r1]
 8023be0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8023be4:	1c7a      	adds	r2, r7, #1
 8023be6:	f100 8116 	bmi.w	8023e16 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8023bea:	4594      	cmp	ip, r2
 8023bec:	f340 8113 	ble.w	8023e16 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8023bf0:	2e00      	cmp	r6, #0
 8023bf2:	f000 8112 	beq.w	8023e1a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8023bf6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023bfa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023bfe:	3401      	adds	r4, #1
 8023c00:	f100 810f 	bmi.w	8023e22 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8023c04:	45a0      	cmp	r8, r4
 8023c06:	f340 810c 	ble.w	8023e22 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8023c0a:	2800      	cmp	r0, #0
 8023c0c:	f000 810c 	beq.w	8023e28 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8023c10:	2f00      	cmp	r7, #0
 8023c12:	f2c0 8104 	blt.w	8023e1e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8023c16:	45bc      	cmp	ip, r7
 8023c18:	f340 8101 	ble.w	8023e1e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8023c1c:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8023c20:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8023c24:	3701      	adds	r7, #1
 8023c26:	f100 8102 	bmi.w	8023e2e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8023c2a:	45bc      	cmp	ip, r7
 8023c2c:	f340 80ff 	ble.w	8023e2e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8023c30:	2e00      	cmp	r6, #0
 8023c32:	f000 80fe 	beq.w	8023e32 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8023c36:	44f4      	add	ip, lr
 8023c38:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8023c3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023c40:	b2b6      	uxth	r6, r6
 8023c42:	b280      	uxth	r0, r0
 8023c44:	fb00 fe06 	mul.w	lr, r0, r6
 8023c48:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8023c4c:	0136      	lsls	r6, r6, #4
 8023c4e:	eba6 070e 	sub.w	r7, r6, lr
 8023c52:	b280      	uxth	r0, r0
 8023c54:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8023c58:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023c5c:	b2bf      	uxth	r7, r7
 8023c5e:	1a1b      	subs	r3, r3, r0
 8023c60:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8023c64:	b29b      	uxth	r3, r3
 8023c66:	fb0a f607 	mul.w	r6, sl, r7
 8023c6a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023c6e:	fb0b 6603 	mla	r6, fp, r3, r6
 8023c72:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023c76:	fb00 6609 	mla	r6, r0, r9, r6
 8023c7a:	fb0e 6608 	mla	r6, lr, r8, r6
 8023c7e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023c82:	9600      	str	r6, [sp, #0]
 8023c84:	2e00      	cmp	r6, #0
 8023c86:	f000 80be 	beq.w	8023e06 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8023c8a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8023c8e:	fb0b fc0c 	mul.w	ip, fp, ip
 8023c92:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8023c96:	fb0b f505 	mul.w	r5, fp, r5
 8023c9a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023c9e:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8023ca2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023ca6:	44dc      	add	ip, fp
 8023ca8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023cac:	9501      	str	r5, [sp, #4]
 8023cae:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8023cb2:	9503      	str	r5, [sp, #12]
 8023cb4:	9d01      	ldr	r5, [sp, #4]
 8023cb6:	9e02      	ldr	r6, [sp, #8]
 8023cb8:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8023cbc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023cc0:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8023cc4:	fb0a fc0c 	mul.w	ip, sl, ip
 8023cc8:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8023ccc:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023cd0:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023cd4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023cd8:	4465      	add	r5, ip
 8023cda:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023cde:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8023ce2:	fb09 fc0c 	mul.w	ip, r9, ip
 8023ce6:	fb09 f904 	mul.w	r9, r9, r4
 8023cea:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8023cee:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8023cf2:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8023cf6:	fb08 f404 	mul.w	r4, r8, r4
 8023cfa:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8023cfe:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023d02:	fb08 f802 	mul.w	r8, r8, r2
 8023d06:	fb0a fa01 	mul.w	sl, sl, r1
 8023d0a:	0a22      	lsrs	r2, r4, #8
 8023d0c:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8023d10:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8023d14:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8023d18:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8023d1c:	4414      	add	r4, r2
 8023d1e:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8023d22:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8023d26:	0a2d      	lsrs	r5, r5, #8
 8023d28:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023d2c:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023d30:	9a03      	ldr	r2, [sp, #12]
 8023d32:	8836      	ldrh	r6, [r6, #0]
 8023d34:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8023d38:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023d3c:	437d      	muls	r5, r7
 8023d3e:	4461      	add	r1, ip
 8023d40:	0a24      	lsrs	r4, r4, #8
 8023d42:	fb02 5503 	mla	r5, r2, r3, r5
 8023d46:	0a09      	lsrs	r1, r1, #8
 8023d48:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8023d4c:	fb04 540e 	mla	r4, r4, lr, r5
 8023d50:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8023d54:	fb01 4100 	mla	r1, r1, r0, r4
 8023d58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d5c:	0a09      	lsrs	r1, r1, #8
 8023d5e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023d62:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8023d66:	fb07 f70a 	mul.w	r7, r7, sl
 8023d6a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023d6e:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8023d72:	fb03 7101 	mla	r1, r3, r1, r7
 8023d76:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023d7a:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8023d7e:	fb0e 1e08 	mla	lr, lr, r8, r1
 8023d82:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8023d86:	fb00 e101 	mla	r1, r0, r1, lr
 8023d8a:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8023d8e:	9a00      	ldr	r2, [sp, #0]
 8023d90:	b287      	uxth	r7, r0
 8023d92:	437a      	muls	r2, r7
 8023d94:	0a09      	lsrs	r1, r1, #8
 8023d96:	1c53      	adds	r3, r2, #1
 8023d98:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8023d9c:	4321      	orrs	r1, r4
 8023d9e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023da2:	1235      	asrs	r5, r6, #8
 8023da4:	0c0a      	lsrs	r2, r1, #16
 8023da6:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8023daa:	b2db      	uxtb	r3, r3
 8023dac:	fb12 f207 	smulbb	r2, r2, r7
 8023db0:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8023db4:	fb05 2503 	mla	r5, r5, r3, r2
 8023db8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8023dbc:	10f2      	asrs	r2, r6, #3
 8023dbe:	b2c8      	uxtb	r0, r1
 8023dc0:	00f6      	lsls	r6, r6, #3
 8023dc2:	fb14 f407 	smulbb	r4, r4, r7
 8023dc6:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023dca:	b2f6      	uxtb	r6, r6
 8023dcc:	fb10 f007 	smulbb	r0, r0, r7
 8023dd0:	fb02 4203 	mla	r2, r2, r3, r4
 8023dd4:	b2ad      	uxth	r5, r5
 8023dd6:	fb06 0303 	mla	r3, r6, r3, r0
 8023dda:	b299      	uxth	r1, r3
 8023ddc:	b294      	uxth	r4, r2
 8023dde:	1c6b      	adds	r3, r5, #1
 8023de0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023de4:	1c62      	adds	r2, r4, #1
 8023de6:	1c4b      	adds	r3, r1, #1
 8023de8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023dec:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023df0:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8023df4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023df8:	0952      	lsrs	r2, r2, #5
 8023dfa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023dfe:	432b      	orrs	r3, r5
 8023e00:	4313      	orrs	r3, r2
 8023e02:	9a02      	ldr	r2, [sp, #8]
 8023e04:	8013      	strh	r3, [r2, #0]
 8023e06:	b005      	add	sp, #20
 8023e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e0c:	2500      	movs	r5, #0
 8023e0e:	e6e9      	b.n	8023be4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8023e10:	2100      	movs	r1, #0
 8023e12:	460d      	mov	r5, r1
 8023e14:	e6f3      	b.n	8023bfe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8023e16:	2100      	movs	r1, #0
 8023e18:	e6f1      	b.n	8023bfe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8023e1a:	4631      	mov	r1, r6
 8023e1c:	e6ef      	b.n	8023bfe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8023e1e:	2400      	movs	r4, #0
 8023e20:	e700      	b.n	8023c24 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8023e22:	2200      	movs	r2, #0
 8023e24:	4614      	mov	r4, r2
 8023e26:	e70b      	b.n	8023c40 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8023e28:	4602      	mov	r2, r0
 8023e2a:	4604      	mov	r4, r0
 8023e2c:	e708      	b.n	8023c40 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8023e2e:	2200      	movs	r2, #0
 8023e30:	e706      	b.n	8023c40 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8023e32:	4632      	mov	r2, r6
 8023e34:	e704      	b.n	8023c40 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08023e36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023e36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e3a:	b09f      	sub	sp, #124	@ 0x7c
 8023e3c:	921b      	str	r2, [sp, #108]	@ 0x6c
 8023e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023e40:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8023e42:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8023e46:	931c      	str	r3, [sp, #112]	@ 0x70
 8023e48:	9119      	str	r1, [sp, #100]	@ 0x64
 8023e4a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8023e4e:	901d      	str	r0, [sp, #116]	@ 0x74
 8023e50:	6850      	ldr	r0, [r2, #4]
 8023e52:	6812      	ldr	r2, [r2, #0]
 8023e54:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8023e56:	fb00 1303 	mla	r3, r0, r3, r1
 8023e5a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023e5e:	930c      	str	r3, [sp, #48]	@ 0x30
 8023e60:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023e62:	681b      	ldr	r3, [r3, #0]
 8023e64:	9312      	str	r3, [sp, #72]	@ 0x48
 8023e66:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023e68:	685e      	ldr	r6, [r3, #4]
 8023e6a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8023e6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023e70:	3604      	adds	r6, #4
 8023e72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023e74:	2b00      	cmp	r3, #0
 8023e76:	dc03      	bgt.n	8023e80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023e78:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023e7a:	2b00      	cmp	r3, #0
 8023e7c:	f340 8388 	ble.w	8024590 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8023e80:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023e82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023e8a:	1e48      	subs	r0, r1, #1
 8023e8c:	1e57      	subs	r7, r2, #1
 8023e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023e90:	2b00      	cmp	r3, #0
 8023e92:	f340 8195 	ble.w	80241c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023e96:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8023e98:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023e9c:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023ea0:	d406      	bmi.n	8023eb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023ea2:	4584      	cmp	ip, r0
 8023ea4:	da04      	bge.n	8023eb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023ea6:	2b00      	cmp	r3, #0
 8023ea8:	db02      	blt.n	8023eb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023eaa:	42bb      	cmp	r3, r7
 8023eac:	f2c0 8189 	blt.w	80241c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8023eb0:	f11c 0c01 	adds.w	ip, ip, #1
 8023eb4:	f100 8177 	bmi.w	80241a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8023eb8:	4561      	cmp	r1, ip
 8023eba:	f2c0 8174 	blt.w	80241a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8023ebe:	3301      	adds	r3, #1
 8023ec0:	f100 8171 	bmi.w	80241a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8023ec4:	429a      	cmp	r2, r3
 8023ec6:	f2c0 816e 	blt.w	80241a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8023eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ecc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8023ece:	931a      	str	r3, [sp, #104]	@ 0x68
 8023ed0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8023ed2:	2b00      	cmp	r3, #0
 8023ed4:	f340 8193 	ble.w	80241fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8023ed8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023eda:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023ede:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023ee0:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8023ee4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023ee6:	141b      	asrs	r3, r3, #16
 8023ee8:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023eec:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023ef0:	f100 81d6 	bmi.w	80242a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8023ef4:	f100 38ff 	add.w	r8, r0, #4294967295
 8023ef8:	4543      	cmp	r3, r8
 8023efa:	f280 81d1 	bge.w	80242a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8023efe:	f1bc 0f00 	cmp.w	ip, #0
 8023f02:	f2c0 81cd 	blt.w	80242a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8023f06:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023f0a:	45c4      	cmp	ip, r8
 8023f0c:	f280 81c8 	bge.w	80242a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8023f10:	b200      	sxth	r0, r0
 8023f12:	fb0c 3300 	mla	r3, ip, r0, r3
 8023f16:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023f18:	eb04 0803 	add.w	r8, r4, r3
 8023f1c:	5ce3      	ldrb	r3, [r4, r3]
 8023f1e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023f22:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023f26:	2a00      	cmp	r2, #0
 8023f28:	f000 81af 	beq.w	802428a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8023f2c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023f30:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023f34:	940e      	str	r4, [sp, #56]	@ 0x38
 8023f36:	0e24      	lsrs	r4, r4, #24
 8023f38:	9415      	str	r4, [sp, #84]	@ 0x54
 8023f3a:	b179      	cbz	r1, 8023f5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8023f3c:	eb08 0c00 	add.w	ip, r8, r0
 8023f40:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023f44:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023f48:	900a      	str	r0, [sp, #40]	@ 0x28
 8023f4a:	0e00      	lsrs	r0, r0, #24
 8023f4c:	9013      	str	r0, [sp, #76]	@ 0x4c
 8023f4e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023f52:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023f56:	900f      	str	r0, [sp, #60]	@ 0x3c
 8023f58:	0e00      	lsrs	r0, r0, #24
 8023f5a:	9016      	str	r0, [sp, #88]	@ 0x58
 8023f5c:	b292      	uxth	r2, r2
 8023f5e:	b289      	uxth	r1, r1
 8023f60:	fb02 f901 	mul.w	r9, r2, r1
 8023f64:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023f68:	0112      	lsls	r2, r2, #4
 8023f6a:	eba2 0809 	sub.w	r8, r2, r9
 8023f6e:	b289      	uxth	r1, r1
 8023f70:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8023f74:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8023f76:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023f78:	fa1f f888 	uxth.w	r8, r8
 8023f7c:	1a52      	subs	r2, r2, r1
 8023f7e:	b292      	uxth	r2, r2
 8023f80:	fb08 f000 	mul.w	r0, r8, r0
 8023f84:	fb02 000e 	mla	r0, r2, lr, r0
 8023f88:	fb01 0004 	mla	r0, r1, r4, r0
 8023f8c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8023f8e:	fb09 0004 	mla	r0, r9, r4, r0
 8023f92:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023f96:	2800      	cmp	r0, #0
 8023f98:	f000 80fa 	beq.w	8024190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8023f9c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8023fa0:	d01b      	beq.n	8023fda <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8023fa2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023fa6:	fb0e fa0a 	mul.w	sl, lr, sl
 8023faa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023fae:	fb0e fe03 	mul.w	lr, lr, r3
 8023fb2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023fb6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023fba:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8023fbe:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8023fc2:	4453      	add	r3, sl
 8023fc4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023fc8:	0a1b      	lsrs	r3, r3, #8
 8023fca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023fce:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023fd2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023fd6:	ea43 030c 	orr.w	r3, r3, ip
 8023fda:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023fdc:	2cff      	cmp	r4, #255	@ 0xff
 8023fde:	d021      	beq.n	8024024 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023fe0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023fe2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023fe6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023fe8:	fb04 fb0b 	mul.w	fp, r4, fp
 8023fec:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023fee:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023ff2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023ff4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023ff8:	fb04 fa0a 	mul.w	sl, r4, sl
 8023ffc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024000:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024004:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024008:	44de      	add	lr, fp
 802400a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802400e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024012:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024016:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802401a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802401e:	ea4e 040a 	orr.w	r4, lr, sl
 8024022:	940e      	str	r4, [sp, #56]	@ 0x38
 8024024:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024026:	2cff      	cmp	r4, #255	@ 0xff
 8024028:	d021      	beq.n	802406e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802402a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802402c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024030:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024032:	fb04 fb0b 	mul.w	fp, r4, fp
 8024036:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024038:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802403c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802403e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024042:	fb04 fa0a 	mul.w	sl, r4, sl
 8024046:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802404a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802404e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024052:	44de      	add	lr, fp
 8024054:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024058:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802405c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024060:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024064:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024068:	ea4e 040a 	orr.w	r4, lr, sl
 802406c:	940a      	str	r4, [sp, #40]	@ 0x28
 802406e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8024070:	2cff      	cmp	r4, #255	@ 0xff
 8024072:	d021      	beq.n	80240b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8024074:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024076:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802407a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802407c:	fb04 fb0b 	mul.w	fp, r4, fp
 8024080:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024082:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024086:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8024088:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802408c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024090:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024094:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024098:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802409c:	44de      	add	lr, fp
 802409e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80240a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80240a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80240aa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80240ae:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80240b2:	ea4e 040a 	orr.w	r4, lr, sl
 80240b6:	940f      	str	r4, [sp, #60]	@ 0x3c
 80240b8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80240ba:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80240be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80240c0:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80240c4:	fb08 fc0c 	mul.w	ip, r8, ip
 80240c8:	fb02 cc0e 	mla	ip, r2, lr, ip
 80240cc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80240d0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80240d2:	fb01 cc0e 	mla	ip, r1, lr, ip
 80240d6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80240da:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80240dc:	fb09 cc0e 	mla	ip, r9, lr, ip
 80240e0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80240e4:	fb08 f80e 	mul.w	r8, r8, lr
 80240e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80240ec:	fb02 8303 	mla	r3, r2, r3, r8
 80240f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80240f2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80240f4:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80240f8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80240fa:	fb01 330a 	mla	r3, r1, sl, r3
 80240fe:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8024102:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024104:	fb09 3901 	mla	r9, r9, r1, r3
 8024108:	4342      	muls	r2, r0
 802410a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802410e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024112:	883b      	ldrh	r3, [r7, #0]
 8024114:	1c50      	adds	r0, r2, #1
 8024116:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802411a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802411e:	ea4c 0c09 	orr.w	ip, ip, r9
 8024122:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024126:	1219      	asrs	r1, r3, #8
 8024128:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802412c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024130:	b2c0      	uxtb	r0, r0
 8024132:	fb12 f204 	smulbb	r2, r2, r4
 8024136:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802413a:	fb01 2100 	mla	r1, r1, r0, r2
 802413e:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8024142:	10da      	asrs	r2, r3, #3
 8024144:	fa5f fc8c 	uxtb.w	ip, ip
 8024148:	00db      	lsls	r3, r3, #3
 802414a:	fb1c fc04 	smulbb	ip, ip, r4
 802414e:	b2db      	uxtb	r3, r3
 8024150:	b289      	uxth	r1, r1
 8024152:	fb03 c300 	mla	r3, r3, r0, ip
 8024156:	fa1f fc83 	uxth.w	ip, r3
 802415a:	1c4b      	adds	r3, r1, #1
 802415c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024160:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8024164:	fb1e fe04 	smulbb	lr, lr, r4
 8024168:	f10c 0301 	add.w	r3, ip, #1
 802416c:	fb02 e200 	mla	r2, r2, r0, lr
 8024170:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8024174:	b292      	uxth	r2, r2
 8024176:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802417a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802417e:	430b      	orrs	r3, r1
 8024180:	1c51      	adds	r1, r2, #1
 8024182:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024186:	0952      	lsrs	r2, r2, #5
 8024188:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802418c:	4313      	orrs	r3, r2
 802418e:	803b      	strh	r3, [r7, #0]
 8024190:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8024192:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8024194:	441a      	add	r2, r3
 8024196:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024198:	9229      	str	r2, [sp, #164]	@ 0xa4
 802419a:	441d      	add	r5, r3
 802419c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802419e:	3b01      	subs	r3, #1
 80241a0:	3702      	adds	r7, #2
 80241a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80241a4:	e694      	b.n	8023ed0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80241a6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80241a8:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80241aa:	441c      	add	r4, r3
 80241ac:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80241ae:	9429      	str	r4, [sp, #164]	@ 0xa4
 80241b0:	441d      	add	r5, r3
 80241b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241b4:	3b01      	subs	r3, #1
 80241b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80241b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80241ba:	3302      	adds	r3, #2
 80241bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80241be:	e666      	b.n	8023e8e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80241c0:	d024      	beq.n	802420c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 80241c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241c4:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80241c6:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80241c8:	3b01      	subs	r3, #1
 80241ca:	fb00 4003 	mla	r0, r0, r3, r4
 80241ce:	1400      	asrs	r0, r0, #16
 80241d0:	f53f ae7b 	bmi.w	8023eca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80241d4:	3901      	subs	r1, #1
 80241d6:	4288      	cmp	r0, r1
 80241d8:	f6bf ae77 	bge.w	8023eca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80241dc:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80241de:	fb01 5303 	mla	r3, r1, r3, r5
 80241e2:	141b      	asrs	r3, r3, #16
 80241e4:	f53f ae71 	bmi.w	8023eca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80241e8:	3a01      	subs	r2, #1
 80241ea:	4293      	cmp	r3, r2
 80241ec:	f6bf ae6d 	bge.w	8023eca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80241f0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80241f4:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80241f8:	f1bb 0f00 	cmp.w	fp, #0
 80241fc:	dc70      	bgt.n	80242e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 80241fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024200:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024204:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024206:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802420a:	930c      	str	r3, [sp, #48]	@ 0x30
 802420c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802420e:	2b00      	cmp	r3, #0
 8024210:	f340 81be 	ble.w	8024590 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8024214:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024218:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802421c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024220:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024222:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024226:	ee31 1a05 	vadd.f32	s2, s2, s10
 802422a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802422e:	eef0 6a62 	vmov.f32	s13, s5
 8024232:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024236:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802423a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802423e:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8024242:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024246:	eef0 6a43 	vmov.f32	s13, s6
 802424a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802424e:	ee12 2a90 	vmov	r2, s5
 8024252:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024256:	fb92 f3f3 	sdiv	r3, r2, r3
 802425a:	ee13 2a10 	vmov	r2, s6
 802425e:	932b      	str	r3, [sp, #172]	@ 0xac
 8024260:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024262:	fb92 f3f3 	sdiv	r3, r2, r3
 8024266:	932c      	str	r3, [sp, #176]	@ 0xb0
 8024268:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802426a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802426c:	3b01      	subs	r3, #1
 802426e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024272:	9319      	str	r3, [sp, #100]	@ 0x64
 8024274:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024276:	bf08      	it	eq
 8024278:	4613      	moveq	r3, r2
 802427a:	ee16 5a90 	vmov	r5, s13
 802427e:	9309      	str	r3, [sp, #36]	@ 0x24
 8024280:	eeb0 3a67 	vmov.f32	s6, s15
 8024284:	eef0 2a47 	vmov.f32	s5, s14
 8024288:	e5f3      	b.n	8023e72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802428a:	2900      	cmp	r1, #0
 802428c:	f43f ae66 	beq.w	8023f5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8024290:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024294:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024298:	900a      	str	r0, [sp, #40]	@ 0x28
 802429a:	0e00      	lsrs	r0, r0, #24
 802429c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802429e:	e65d      	b.n	8023f5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80242a0:	f113 0801 	adds.w	r8, r3, #1
 80242a4:	f53f af74 	bmi.w	8024190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80242a8:	4540      	cmp	r0, r8
 80242aa:	f6ff af71 	blt.w	8024190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80242ae:	f11c 0801 	adds.w	r8, ip, #1
 80242b2:	f53f af6d 	bmi.w	8024190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80242b6:	45c6      	cmp	lr, r8
 80242b8:	f6ff af6a 	blt.w	8024190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80242bc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80242be:	9302      	str	r3, [sp, #8]
 80242c0:	b200      	sxth	r0, r0
 80242c2:	fa0f f38e 	sxth.w	r3, lr
 80242c6:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80242ca:	e9cd c203 	strd	ip, r2, [sp, #12]
 80242ce:	9301      	str	r3, [sp, #4]
 80242d0:	9000      	str	r0, [sp, #0]
 80242d2:	4633      	mov	r3, r6
 80242d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80242d6:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80242d8:	4639      	mov	r1, r7
 80242da:	f7ff fc62 	bl	8023ba2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80242de:	e757      	b.n	8024190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80242e0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80242e2:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80242e4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80242e8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80242ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80242ee:	1427      	asrs	r7, r4, #16
 80242f0:	142b      	asrs	r3, r5, #16
 80242f2:	fb01 7303 	mla	r3, r1, r3, r7
 80242f6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80242f8:	18e7      	adds	r7, r4, r3
 80242fa:	5ce3      	ldrb	r3, [r4, r3]
 80242fc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024300:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024304:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024308:	2a00      	cmp	r2, #0
 802430a:	f000 8137 	beq.w	802457c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 802430e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8024312:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8024316:	9410      	str	r4, [sp, #64]	@ 0x40
 8024318:	0e24      	lsrs	r4, r4, #24
 802431a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802431c:	b170      	cbz	r0, 802433c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802431e:	eb07 0e01 	add.w	lr, r7, r1
 8024322:	5c79      	ldrb	r1, [r7, r1]
 8024324:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024328:	910b      	str	r1, [sp, #44]	@ 0x2c
 802432a:	0e09      	lsrs	r1, r1, #24
 802432c:	9114      	str	r1, [sp, #80]	@ 0x50
 802432e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8024332:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024336:	9111      	str	r1, [sp, #68]	@ 0x44
 8024338:	0e09      	lsrs	r1, r1, #24
 802433a:	9118      	str	r1, [sp, #96]	@ 0x60
 802433c:	b292      	uxth	r2, r2
 802433e:	b280      	uxth	r0, r0
 8024340:	fb02 f800 	mul.w	r8, r2, r0
 8024344:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024348:	0112      	lsls	r2, r2, #4
 802434a:	eba2 0e08 	sub.w	lr, r2, r8
 802434e:	b280      	uxth	r0, r0
 8024350:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8024354:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024356:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024358:	fa1f fe8e 	uxth.w	lr, lr
 802435c:	1a12      	subs	r2, r2, r0
 802435e:	b292      	uxth	r2, r2
 8024360:	fb0e f101 	mul.w	r1, lr, r1
 8024364:	fb02 110c 	mla	r1, r2, ip, r1
 8024368:	fb00 1104 	mla	r1, r0, r4, r1
 802436c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802436e:	fb08 1104 	mla	r1, r8, r4, r1
 8024372:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024376:	2900      	cmp	r1, #0
 8024378:	f000 80f5 	beq.w	8024566 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802437c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8024380:	d019      	beq.n	80243b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8024382:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8024386:	fb0c fa0a 	mul.w	sl, ip, sl
 802438a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802438e:	fb0c fc03 	mul.w	ip, ip, r3
 8024392:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024396:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802439a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802439e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80243a2:	4453      	add	r3, sl
 80243a4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80243a8:	0a1b      	lsrs	r3, r3, #8
 80243aa:	0a3f      	lsrs	r7, r7, #8
 80243ac:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80243b0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80243b4:	433b      	orrs	r3, r7
 80243b6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80243b8:	2cff      	cmp	r4, #255	@ 0xff
 80243ba:	d020      	beq.n	80243fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 80243bc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80243be:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80243c2:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80243c4:	4367      	muls	r7, r4
 80243c6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80243c8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80243cc:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80243ce:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80243d2:	fb04 fa0a 	mul.w	sl, r4, sl
 80243d6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80243da:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80243de:	44bc      	add	ip, r7
 80243e0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80243e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80243e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80243ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80243f0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80243f4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80243f8:	ea4c 040a 	orr.w	r4, ip, sl
 80243fc:	9410      	str	r4, [sp, #64]	@ 0x40
 80243fe:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024400:	2cff      	cmp	r4, #255	@ 0xff
 8024402:	d020      	beq.n	8024446 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8024404:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024406:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802440a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802440c:	4367      	muls	r7, r4
 802440e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024410:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024414:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024416:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802441a:	fb04 fa0a 	mul.w	sl, r4, sl
 802441e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024422:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024426:	44bc      	add	ip, r7
 8024428:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802442c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024430:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024434:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024438:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802443c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024440:	ea4c 040a 	orr.w	r4, ip, sl
 8024444:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024446:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8024448:	2cff      	cmp	r4, #255	@ 0xff
 802444a:	d020      	beq.n	802448e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 802444c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802444e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024452:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8024454:	4367      	muls	r7, r4
 8024456:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024458:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802445c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802445e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024462:	fb04 fa0a 	mul.w	sl, r4, sl
 8024466:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802446a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802446e:	44bc      	add	ip, r7
 8024470:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024474:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024478:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802447c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024480:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024484:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024488:	ea4c 040a 	orr.w	r4, ip, sl
 802448c:	9411      	str	r4, [sp, #68]	@ 0x44
 802448e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024490:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024494:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024496:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802449a:	fb0e f707 	mul.w	r7, lr, r7
 802449e:	fb02 770c 	mla	r7, r2, ip, r7
 80244a2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80244a6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80244a8:	fb00 770c 	mla	r7, r0, ip, r7
 80244ac:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80244b0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80244b2:	fb08 770c 	mla	r7, r8, ip, r7
 80244b6:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80244ba:	fb0e fe0c 	mul.w	lr, lr, ip
 80244be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80244c2:	fb02 e303 	mla	r3, r2, r3, lr
 80244c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80244c8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80244ca:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80244ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80244d0:	fb00 330a 	mla	r3, r0, sl, r3
 80244d4:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80244d8:	fb08 3c0c 	mla	ip, r8, ip, r3
 80244dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80244de:	f8b9 0000 	ldrh.w	r0, [r9]
 80244e2:	434b      	muls	r3, r1
 80244e4:	0a3f      	lsrs	r7, r7, #8
 80244e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80244ea:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80244ee:	1c59      	adds	r1, r3, #1
 80244f0:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80244f4:	ea47 070c 	orr.w	r7, r7, ip
 80244f8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80244fc:	1202      	asrs	r2, r0, #8
 80244fe:	0c3b      	lsrs	r3, r7, #16
 8024500:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024504:	b2c9      	uxtb	r1, r1
 8024506:	fb13 f304 	smulbb	r3, r3, r4
 802450a:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802450e:	fb02 3201 	mla	r2, r2, r1, r3
 8024512:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8024516:	10c3      	asrs	r3, r0, #3
 8024518:	b2ff      	uxtb	r7, r7
 802451a:	00c0      	lsls	r0, r0, #3
 802451c:	b292      	uxth	r2, r2
 802451e:	fb1c fc04 	smulbb	ip, ip, r4
 8024522:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8024526:	b2c0      	uxtb	r0, r0
 8024528:	fb17 f704 	smulbb	r7, r7, r4
 802452c:	fb03 c301 	mla	r3, r3, r1, ip
 8024530:	fb00 7001 	mla	r0, r0, r1, r7
 8024534:	f102 0c01 	add.w	ip, r2, #1
 8024538:	b280      	uxth	r0, r0
 802453a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802453e:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8024542:	1c42      	adds	r2, r0, #1
 8024544:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024548:	b29b      	uxth	r3, r3
 802454a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802454e:	ea42 020c 	orr.w	r2, r2, ip
 8024552:	f103 0c01 	add.w	ip, r3, #1
 8024556:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802455a:	095b      	lsrs	r3, r3, #5
 802455c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024560:	431a      	orrs	r2, r3
 8024562:	f8a9 2000 	strh.w	r2, [r9]
 8024566:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8024568:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802456a:	441a      	add	r2, r3
 802456c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802456e:	9229      	str	r2, [sp, #164]	@ 0xa4
 8024570:	f109 0902 	add.w	r9, r9, #2
 8024574:	441d      	add	r5, r3
 8024576:	f10b 3bff 	add.w	fp, fp, #4294967295
 802457a:	e63d      	b.n	80241f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802457c:	2800      	cmp	r0, #0
 802457e:	f43f aedd 	beq.w	802433c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8024582:	5c79      	ldrb	r1, [r7, r1]
 8024584:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024588:	910b      	str	r1, [sp, #44]	@ 0x2c
 802458a:	0e09      	lsrs	r1, r1, #24
 802458c:	9114      	str	r1, [sp, #80]	@ 0x50
 802458e:	e6d5      	b.n	802433c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8024590:	b01f      	add	sp, #124	@ 0x7c
 8024592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024596 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8024596:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802459a:	b089      	sub	sp, #36	@ 0x24
 802459c:	9101      	str	r1, [sp, #4]
 802459e:	9801      	ldr	r0, [sp, #4]
 80245a0:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 80245a4:	8800      	ldrh	r0, [r0, #0]
 80245a6:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 80245aa:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 80245ae:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 80245b2:	1206      	asrs	r6, r0, #8
 80245b4:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 80245b8:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80245bc:	9602      	str	r6, [sp, #8]
 80245be:	10c6      	asrs	r6, r0, #3
 80245c0:	00c0      	lsls	r0, r0, #3
 80245c2:	b2c0      	uxtb	r0, r0
 80245c4:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80245c8:	9004      	str	r0, [sp, #16]
 80245ca:	2f00      	cmp	r7, #0
 80245cc:	fb07 100c 	mla	r0, r7, ip, r1
 80245d0:	9603      	str	r6, [sp, #12]
 80245d2:	eb02 0e00 	add.w	lr, r2, r0
 80245d6:	f2c0 810a 	blt.w	80247ee <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80245da:	45b8      	cmp	r8, r7
 80245dc:	f340 8107 	ble.w	80247ee <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80245e0:	2900      	cmp	r1, #0
 80245e2:	f2c0 8102 	blt.w	80247ea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80245e6:	458c      	cmp	ip, r1
 80245e8:	f340 80ff 	ble.w	80247ea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80245ec:	5c12      	ldrb	r2, [r2, r0]
 80245ee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80245f2:	1c4a      	adds	r2, r1, #1
 80245f4:	f100 80fe 	bmi.w	80247f4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80245f8:	4594      	cmp	ip, r2
 80245fa:	f340 80fb 	ble.w	80247f4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80245fe:	2d00      	cmp	r5, #0
 8024600:	f000 80fa 	beq.w	80247f8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8024604:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024608:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802460c:	3701      	adds	r7, #1
 802460e:	f100 80f7 	bmi.w	8024800 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8024612:	45b8      	cmp	r8, r7
 8024614:	f340 80f4 	ble.w	8024800 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8024618:	2c00      	cmp	r4, #0
 802461a:	f000 80f4 	beq.w	8024806 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 802461e:	2900      	cmp	r1, #0
 8024620:	eb0e 020c 	add.w	r2, lr, ip
 8024624:	f2c0 80ea 	blt.w	80247fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8024628:	458c      	cmp	ip, r1
 802462a:	f340 80e7 	ble.w	80247fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 802462e:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8024632:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8024636:	3101      	adds	r1, #1
 8024638:	f100 80e8 	bmi.w	802480c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 802463c:	458c      	cmp	ip, r1
 802463e:	f340 80e5 	ble.w	802480c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8024642:	2d00      	cmp	r5, #0
 8024644:	f000 80e4 	beq.w	8024810 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8024648:	7852      	ldrb	r2, [r2, #1]
 802464a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802464e:	0e0b      	lsrs	r3, r1, #24
 8024650:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024654:	9300      	str	r3, [sp, #0]
 8024656:	b2a4      	uxth	r4, r4
 8024658:	b2ab      	uxth	r3, r5
 802465a:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 802465e:	fb03 f904 	mul.w	r9, r3, r4
 8024662:	fb0a f505 	mul.w	r5, sl, r5
 8024666:	011b      	lsls	r3, r3, #4
 8024668:	eba3 0e09 	sub.w	lr, r3, r9
 802466c:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 8024670:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 8024674:	0a28      	lsrs	r0, r5, #8
 8024676:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802467a:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 802467e:	4405      	add	r5, r0
 8024680:	0a2d      	lsrs	r5, r5, #8
 8024682:	fb0a f303 	mul.w	r3, sl, r3
 8024686:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 802468a:	9005      	str	r0, [sp, #20]
 802468c:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8024690:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024694:	0a1b      	lsrs	r3, r3, #8
 8024696:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 802469a:	9306      	str	r3, [sp, #24]
 802469c:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 80246a0:	fb0b f303 	mul.w	r3, fp, r3
 80246a4:	0a1d      	lsrs	r5, r3, #8
 80246a6:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80246aa:	ea4f 6817 	mov.w	r8, r7, lsr #24
 80246ae:	fb0b f606 	mul.w	r6, fp, r6
 80246b2:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 80246b6:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 80246ba:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80246be:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80246c2:	fb08 f707 	mul.w	r7, r8, r7
 80246c6:	441d      	add	r5, r3
 80246c8:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 80246cc:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80246d0:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80246d4:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80246d8:	fb08 fc0c 	mul.w	ip, r8, ip
 80246dc:	0a1b      	lsrs	r3, r3, #8
 80246de:	9307      	str	r3, [sp, #28]
 80246e0:	ea4f 201c 	mov.w	r0, ip, lsr #8
 80246e4:	0e0b      	lsrs	r3, r1, #24
 80246e6:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 80246ea:	435f      	muls	r7, r3
 80246ec:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80246f0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80246f4:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 80246f8:	4460      	add	r0, ip
 80246fa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80246fe:	b2a4      	uxth	r4, r4
 8024700:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024704:	0a2d      	lsrs	r5, r5, #8
 8024706:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802470a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802470e:	fa1f fe8e 	uxth.w	lr, lr
 8024712:	4359      	muls	r1, r3
 8024714:	1b12      	subs	r2, r2, r4
 8024716:	9b05      	ldr	r3, [sp, #20]
 8024718:	44bc      	add	ip, r7
 802471a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802471e:	b292      	uxth	r2, r2
 8024720:	fb05 f50e 	mul.w	r5, r5, lr
 8024724:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024728:	fb03 5502 	mla	r5, r3, r2, r5
 802472c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024730:	9b06      	ldr	r3, [sp, #24]
 8024732:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 8024736:	0a36      	lsrs	r6, r6, #8
 8024738:	0a00      	lsrs	r0, r0, #8
 802473a:	fb0c 5509 	mla	r5, ip, r9, r5
 802473e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024742:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8024746:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802474a:	fb00 5504 	mla	r5, r0, r4, r5
 802474e:	fb0e f606 	mul.w	r6, lr, r6
 8024752:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 8024756:	0a09      	lsrs	r1, r1, #8
 8024758:	9b07      	ldr	r3, [sp, #28]
 802475a:	fb02 6000 	mla	r0, r2, r0, r6
 802475e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8024762:	fb09 0001 	mla	r0, r9, r1, r0
 8024766:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802476a:	fb0e fe0b 	mul.w	lr, lr, fp
 802476e:	fb04 0003 	mla	r0, r4, r3, r0
 8024772:	fb02 e20a 	mla	r2, r2, sl, lr
 8024776:	9b00      	ldr	r3, [sp, #0]
 8024778:	fb04 2408 	mla	r4, r4, r8, r2
 802477c:	fb09 4903 	mla	r9, r9, r3, r4
 8024780:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8024784:	9b02      	ldr	r3, [sp, #8]
 8024786:	9a04      	ldr	r2, [sp, #16]
 8024788:	fa5f f989 	uxtb.w	r9, r9
 802478c:	fb03 f109 	mul.w	r1, r3, r9
 8024790:	9b03      	ldr	r3, [sp, #12]
 8024792:	0a2d      	lsrs	r5, r5, #8
 8024794:	0a00      	lsrs	r0, r0, #8
 8024796:	fb03 f309 	mul.w	r3, r3, r9
 802479a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802479e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80247a2:	4305      	orrs	r5, r0
 80247a4:	fb02 f909 	mul.w	r9, r2, r9
 80247a8:	1c58      	adds	r0, r3, #1
 80247aa:	1c4a      	adds	r2, r1, #1
 80247ac:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80247b0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80247b4:	0a2b      	lsrs	r3, r5, #8
 80247b6:	0c2a      	lsrs	r2, r5, #16
 80247b8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80247bc:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80247c0:	00db      	lsls	r3, r3, #3
 80247c2:	0212      	lsls	r2, r2, #8
 80247c4:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 80247c8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80247cc:	4313      	orrs	r3, r2
 80247ce:	f109 0201 	add.w	r2, r9, #1
 80247d2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80247d6:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 80247da:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80247de:	431d      	orrs	r5, r3
 80247e0:	9b01      	ldr	r3, [sp, #4]
 80247e2:	801d      	strh	r5, [r3, #0]
 80247e4:	b009      	add	sp, #36	@ 0x24
 80247e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247ea:	2000      	movs	r0, #0
 80247ec:	e701      	b.n	80245f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 80247ee:	2600      	movs	r6, #0
 80247f0:	4630      	mov	r0, r6
 80247f2:	e70b      	b.n	802460c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80247f4:	2600      	movs	r6, #0
 80247f6:	e709      	b.n	802460c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80247f8:	462e      	mov	r6, r5
 80247fa:	e707      	b.n	802460c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80247fc:	2700      	movs	r7, #0
 80247fe:	e71a      	b.n	8024636 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8024800:	2100      	movs	r1, #0
 8024802:	460f      	mov	r7, r1
 8024804:	e723      	b.n	802464e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024806:	4621      	mov	r1, r4
 8024808:	4627      	mov	r7, r4
 802480a:	e720      	b.n	802464e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802480c:	2100      	movs	r1, #0
 802480e:	e71e      	b.n	802464e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024810:	4629      	mov	r1, r5
 8024812:	e71c      	b.n	802464e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08024814 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024818:	b09b      	sub	sp, #108	@ 0x6c
 802481a:	9218      	str	r2, [sp, #96]	@ 0x60
 802481c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802481e:	9116      	str	r1, [sp, #88]	@ 0x58
 8024820:	9307      	str	r3, [sp, #28]
 8024822:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8024826:	9019      	str	r0, [sp, #100]	@ 0x64
 8024828:	6850      	ldr	r0, [r2, #4]
 802482a:	6812      	ldr	r2, [r2, #0]
 802482c:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 802482e:	fb00 1303 	mla	r3, r0, r3, r1
 8024832:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024836:	930a      	str	r3, [sp, #40]	@ 0x28
 8024838:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802483a:	681b      	ldr	r3, [r3, #0]
 802483c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802483e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024840:	685e      	ldr	r6, [r3, #4]
 8024842:	3604      	adds	r6, #4
 8024844:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024846:	2b00      	cmp	r3, #0
 8024848:	dc03      	bgt.n	8024852 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802484a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802484c:	2b00      	cmp	r3, #0
 802484e:	f340 8373 	ble.w	8024f38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8024852:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024854:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024858:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802485c:	1e48      	subs	r0, r1, #1
 802485e:	1e57      	subs	r7, r2, #1
 8024860:	9b07      	ldr	r3, [sp, #28]
 8024862:	2b00      	cmp	r3, #0
 8024864:	f340 8190 	ble.w	8024b88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8024868:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802486a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802486e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024872:	d406      	bmi.n	8024882 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024874:	4584      	cmp	ip, r0
 8024876:	da04      	bge.n	8024882 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024878:	2b00      	cmp	r3, #0
 802487a:	db02      	blt.n	8024882 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802487c:	42bb      	cmp	r3, r7
 802487e:	f2c0 8184 	blt.w	8024b8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8024882:	f11c 0c01 	adds.w	ip, ip, #1
 8024886:	f100 8172 	bmi.w	8024b6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802488a:	4561      	cmp	r1, ip
 802488c:	f2c0 816f 	blt.w	8024b6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024890:	3301      	adds	r3, #1
 8024892:	f100 816c 	bmi.w	8024b6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024896:	429a      	cmp	r2, r3
 8024898:	f2c0 8169 	blt.w	8024b6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802489c:	9b07      	ldr	r3, [sp, #28]
 802489e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80248a0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80248a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80248a4:	2b00      	cmp	r3, #0
 80248a6:	f340 818e 	ble.w	8024bc6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b2>
 80248aa:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80248ac:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80248b0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80248b2:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80248b6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80248b8:	141b      	asrs	r3, r3, #16
 80248ba:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80248be:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80248c2:	f100 81d1 	bmi.w	8024c68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80248c6:	f101 38ff 	add.w	r8, r1, #4294967295
 80248ca:	4543      	cmp	r3, r8
 80248cc:	f280 81cc 	bge.w	8024c68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80248d0:	f1bc 0f00 	cmp.w	ip, #0
 80248d4:	f2c0 81c8 	blt.w	8024c68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80248d8:	f10e 38ff 	add.w	r8, lr, #4294967295
 80248dc:	45c4      	cmp	ip, r8
 80248de:	f280 81c3 	bge.w	8024c68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80248e2:	b209      	sxth	r1, r1
 80248e4:	fb0c 3301 	mla	r3, ip, r1, r3
 80248e8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80248ea:	eb04 0803 	add.w	r8, r4, r3
 80248ee:	5ce3      	ldrb	r3, [r4, r3]
 80248f0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80248f4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80248f8:	2a00      	cmp	r2, #0
 80248fa:	f000 81aa 	beq.w	8024c52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43e>
 80248fe:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024902:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024906:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024908:	0e24      	lsrs	r4, r4, #24
 802490a:	9412      	str	r4, [sp, #72]	@ 0x48
 802490c:	b178      	cbz	r0, 802492e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 802490e:	eb08 0c01 	add.w	ip, r8, r1
 8024912:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024916:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802491a:	9108      	str	r1, [sp, #32]
 802491c:	0e09      	lsrs	r1, r1, #24
 802491e:	9110      	str	r1, [sp, #64]	@ 0x40
 8024920:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8024924:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024928:	910c      	str	r1, [sp, #48]	@ 0x30
 802492a:	0e09      	lsrs	r1, r1, #24
 802492c:	9113      	str	r1, [sp, #76]	@ 0x4c
 802492e:	b292      	uxth	r2, r2
 8024930:	b280      	uxth	r0, r0
 8024932:	fb02 f900 	mul.w	r9, r2, r0
 8024936:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802493a:	0112      	lsls	r2, r2, #4
 802493c:	eba2 0809 	sub.w	r8, r2, r9
 8024940:	b280      	uxth	r0, r0
 8024942:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8024946:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8024948:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802494a:	fa1f f888 	uxth.w	r8, r8
 802494e:	1a12      	subs	r2, r2, r0
 8024950:	b292      	uxth	r2, r2
 8024952:	fb08 f101 	mul.w	r1, r8, r1
 8024956:	fb02 110e 	mla	r1, r2, lr, r1
 802495a:	fb00 1104 	mla	r1, r0, r4, r1
 802495e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024960:	fb09 1104 	mla	r1, r9, r4, r1
 8024964:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024968:	2900      	cmp	r1, #0
 802496a:	f000 80f5 	beq.w	8024b58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802496e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8024972:	d01b      	beq.n	80249ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024974:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8024978:	fb0e fa0a 	mul.w	sl, lr, sl
 802497c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024980:	fb0e fe03 	mul.w	lr, lr, r3
 8024984:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024988:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802498c:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8024990:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8024994:	4453      	add	r3, sl
 8024996:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802499a:	0a1b      	lsrs	r3, r3, #8
 802499c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80249a0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80249a4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80249a8:	ea43 030c 	orr.w	r3, r3, ip
 80249ac:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80249ae:	2cff      	cmp	r4, #255	@ 0xff
 80249b0:	d021      	beq.n	80249f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80249b2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80249b4:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80249b8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80249ba:	fb04 fb0b 	mul.w	fp, r4, fp
 80249be:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80249c0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80249c4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80249c6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80249ca:	fb04 fa0a 	mul.w	sl, r4, sl
 80249ce:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80249d2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80249d6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80249da:	44de      	add	lr, fp
 80249dc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80249e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80249e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80249e8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80249ec:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80249f0:	ea4e 040a 	orr.w	r4, lr, sl
 80249f4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80249f6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80249f8:	2cff      	cmp	r4, #255	@ 0xff
 80249fa:	d021      	beq.n	8024a40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80249fc:	9c08      	ldr	r4, [sp, #32]
 80249fe:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024a02:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024a04:	fb04 fb0b 	mul.w	fp, r4, fp
 8024a08:	9c08      	ldr	r4, [sp, #32]
 8024a0a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024a0e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024a10:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024a14:	fb04 fa0a 	mul.w	sl, r4, sl
 8024a18:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024a1c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024a20:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024a24:	44de      	add	lr, fp
 8024a26:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024a2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024a2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a32:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024a36:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024a3a:	ea4e 040a 	orr.w	r4, lr, sl
 8024a3e:	9408      	str	r4, [sp, #32]
 8024a40:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024a42:	2cff      	cmp	r4, #255	@ 0xff
 8024a44:	d021      	beq.n	8024a8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8024a46:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024a48:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024a4c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024a4e:	fb04 fb0b 	mul.w	fp, r4, fp
 8024a52:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024a54:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024a58:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024a5a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024a5e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024a62:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024a66:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024a6a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024a6e:	44de      	add	lr, fp
 8024a70:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024a74:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024a78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a7c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024a80:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024a84:	ea4e 040a 	orr.w	r4, lr, sl
 8024a88:	940c      	str	r4, [sp, #48]	@ 0x30
 8024a8a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024a8c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024a90:	9c08      	ldr	r4, [sp, #32]
 8024a92:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8024a96:	fb08 fc0c 	mul.w	ip, r8, ip
 8024a9a:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024a9e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8024aa2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024aa4:	fb00 cc0e 	mla	ip, r0, lr, ip
 8024aa8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8024aac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024aae:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024ab2:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8024ab6:	fb08 f80e 	mul.w	r8, r8, lr
 8024aba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024abe:	fb02 8303 	mla	r3, r2, r3, r8
 8024ac2:	9a08      	ldr	r2, [sp, #32]
 8024ac4:	f8b7 8000 	ldrh.w	r8, [r7]
 8024ac8:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8024acc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024ace:	fb00 330a 	mla	r3, r0, sl, r3
 8024ad2:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8024ad6:	fb09 3900 	mla	r9, r9, r0, r3
 8024ada:	43c9      	mvns	r1, r1
 8024adc:	ea4f 2228 	mov.w	r2, r8, asr #8
 8024ae0:	fa5f fe81 	uxtb.w	lr, r1
 8024ae4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ae8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024aec:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8024af0:	fb02 f20e 	mul.w	r2, r2, lr
 8024af4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024af8:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8024afc:	ea4c 0c09 	orr.w	ip, ip, r9
 8024b00:	1c53      	adds	r3, r2, #1
 8024b02:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024b06:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8024b0a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8024b0e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024b12:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8024b16:	4a63      	ldr	r2, [pc, #396]	@ (8024ca4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8024b18:	fb00 f00e 	mul.w	r0, r0, lr
 8024b1c:	b2db      	uxtb	r3, r3
 8024b1e:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8024b22:	1c43      	adds	r3, r0, #1
 8024b24:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024b28:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8024b2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8024b30:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024b34:	b2c9      	uxtb	r1, r1
 8024b36:	00db      	lsls	r3, r3, #3
 8024b38:	fb01 f10e 	mul.w	r1, r1, lr
 8024b3c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024b40:	4313      	orrs	r3, r2
 8024b42:	1c4a      	adds	r2, r1, #1
 8024b44:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024b48:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8024b4c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8024b50:	ea4c 0c03 	orr.w	ip, ip, r3
 8024b54:	f8a7 c000 	strh.w	ip, [r7]
 8024b58:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024b5a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8024b5c:	441a      	add	r2, r3
 8024b5e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024b60:	9225      	str	r2, [sp, #148]	@ 0x94
 8024b62:	441d      	add	r5, r3
 8024b64:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024b66:	3b01      	subs	r3, #1
 8024b68:	3702      	adds	r7, #2
 8024b6a:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024b6c:	e699      	b.n	80248a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024b6e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024b70:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8024b72:	441c      	add	r4, r3
 8024b74:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024b76:	9425      	str	r4, [sp, #148]	@ 0x94
 8024b78:	441d      	add	r5, r3
 8024b7a:	9b07      	ldr	r3, [sp, #28]
 8024b7c:	3b01      	subs	r3, #1
 8024b7e:	9307      	str	r3, [sp, #28]
 8024b80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024b82:	3302      	adds	r3, #2
 8024b84:	930a      	str	r3, [sp, #40]	@ 0x28
 8024b86:	e66b      	b.n	8024860 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024b88:	d024      	beq.n	8024bd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8024b8a:	9b07      	ldr	r3, [sp, #28]
 8024b8c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8024b8e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8024b90:	3b01      	subs	r3, #1
 8024b92:	fb00 4003 	mla	r0, r0, r3, r4
 8024b96:	1400      	asrs	r0, r0, #16
 8024b98:	f53f ae80 	bmi.w	802489c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8024b9c:	3901      	subs	r1, #1
 8024b9e:	4288      	cmp	r0, r1
 8024ba0:	f6bf ae7c 	bge.w	802489c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8024ba4:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8024ba6:	fb01 5303 	mla	r3, r1, r3, r5
 8024baa:	141b      	asrs	r3, r3, #16
 8024bac:	f53f ae76 	bmi.w	802489c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8024bb0:	3a01      	subs	r2, #1
 8024bb2:	4293      	cmp	r3, r2
 8024bb4:	f6bf ae72 	bge.w	802489c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8024bb8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024bbc:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8024bc0:	f1bb 0f00 	cmp.w	fp, #0
 8024bc4:	dc70      	bgt.n	8024ca8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024bc6:	9b07      	ldr	r3, [sp, #28]
 8024bc8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024bcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024bce:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024bd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8024bd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024bd6:	2b00      	cmp	r3, #0
 8024bd8:	f340 81ae 	ble.w	8024f38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8024bdc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024be0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024be4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024be8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024bea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024bee:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024bf2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024bf6:	eef0 6a62 	vmov.f32	s13, s5
 8024bfa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024bfe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c02:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024c06:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 8024c0a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024c0e:	eef0 6a43 	vmov.f32	s13, s6
 8024c12:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024c16:	ee12 2a90 	vmov	r2, s5
 8024c1a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024c1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024c22:	ee13 2a10 	vmov	r2, s6
 8024c26:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024c28:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024c2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8024c2e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024c30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024c32:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024c34:	3b01      	subs	r3, #1
 8024c36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c3a:	9316      	str	r3, [sp, #88]	@ 0x58
 8024c3c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024c3e:	bf08      	it	eq
 8024c40:	4613      	moveq	r3, r2
 8024c42:	ee16 5a90 	vmov	r5, s13
 8024c46:	9307      	str	r3, [sp, #28]
 8024c48:	eeb0 3a67 	vmov.f32	s6, s15
 8024c4c:	eef0 2a47 	vmov.f32	s5, s14
 8024c50:	e5f8      	b.n	8024844 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8024c52:	2800      	cmp	r0, #0
 8024c54:	f43f ae6b 	beq.w	802492e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8024c58:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024c5c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024c60:	9108      	str	r1, [sp, #32]
 8024c62:	0e09      	lsrs	r1, r1, #24
 8024c64:	9110      	str	r1, [sp, #64]	@ 0x40
 8024c66:	e662      	b.n	802492e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8024c68:	f113 0801 	adds.w	r8, r3, #1
 8024c6c:	f53f af74 	bmi.w	8024b58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8024c70:	4541      	cmp	r1, r8
 8024c72:	f6ff af71 	blt.w	8024b58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8024c76:	f11c 0801 	adds.w	r8, ip, #1
 8024c7a:	f53f af6d 	bmi.w	8024b58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8024c7e:	45c6      	cmp	lr, r8
 8024c80:	f6ff af6a 	blt.w	8024b58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8024c84:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8024c88:	b209      	sxth	r1, r1
 8024c8a:	fa0f f38e 	sxth.w	r3, lr
 8024c8e:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8024c92:	9301      	str	r3, [sp, #4]
 8024c94:	9100      	str	r1, [sp, #0]
 8024c96:	4633      	mov	r3, r6
 8024c98:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024c9a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8024c9c:	4639      	mov	r1, r7
 8024c9e:	f7ff fc7a 	bl	8024596 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8024ca2:	e759      	b.n	8024b58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8024ca4:	fffff800 	.word	0xfffff800
 8024ca8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024caa:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8024cac:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024cb0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024cb2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024cb6:	1427      	asrs	r7, r4, #16
 8024cb8:	142b      	asrs	r3, r5, #16
 8024cba:	fb01 7303 	mla	r3, r1, r3, r7
 8024cbe:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024cc0:	18e7      	adds	r7, r4, r3
 8024cc2:	5ce3      	ldrb	r3, [r4, r3]
 8024cc4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024cc8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024ccc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024cd0:	2a00      	cmp	r2, #0
 8024cd2:	f000 8127 	beq.w	8024f24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8024cd6:	f897 e001 	ldrb.w	lr, [r7, #1]
 8024cda:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8024cde:	940d      	str	r4, [sp, #52]	@ 0x34
 8024ce0:	0e24      	lsrs	r4, r4, #24
 8024ce2:	9414      	str	r4, [sp, #80]	@ 0x50
 8024ce4:	b170      	cbz	r0, 8024d04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024ce6:	eb07 0e01 	add.w	lr, r7, r1
 8024cea:	5c79      	ldrb	r1, [r7, r1]
 8024cec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024cf0:	9109      	str	r1, [sp, #36]	@ 0x24
 8024cf2:	0e09      	lsrs	r1, r1, #24
 8024cf4:	9111      	str	r1, [sp, #68]	@ 0x44
 8024cf6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8024cfa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024cfe:	910e      	str	r1, [sp, #56]	@ 0x38
 8024d00:	0e09      	lsrs	r1, r1, #24
 8024d02:	9115      	str	r1, [sp, #84]	@ 0x54
 8024d04:	b292      	uxth	r2, r2
 8024d06:	b280      	uxth	r0, r0
 8024d08:	fb02 f800 	mul.w	r8, r2, r0
 8024d0c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024d10:	0112      	lsls	r2, r2, #4
 8024d12:	eba2 0e08 	sub.w	lr, r2, r8
 8024d16:	b280      	uxth	r0, r0
 8024d18:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8024d1c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024d1e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024d20:	fa1f fe8e 	uxth.w	lr, lr
 8024d24:	1a09      	subs	r1, r1, r0
 8024d26:	b289      	uxth	r1, r1
 8024d28:	fb0e f202 	mul.w	r2, lr, r2
 8024d2c:	fb01 220c 	mla	r2, r1, ip, r2
 8024d30:	fb00 2204 	mla	r2, r0, r4, r2
 8024d34:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024d36:	fb08 2204 	mla	r2, r8, r4, r2
 8024d3a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024d3e:	2a00      	cmp	r2, #0
 8024d40:	f000 80e5 	beq.w	8024f0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8024d44:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8024d48:	d019      	beq.n	8024d7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8024d4a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8024d4e:	fb0c fa0a 	mul.w	sl, ip, sl
 8024d52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024d56:	fb0c fc03 	mul.w	ip, ip, r3
 8024d5a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024d5e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024d62:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8024d66:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8024d6a:	4453      	add	r3, sl
 8024d6c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024d70:	0a1b      	lsrs	r3, r3, #8
 8024d72:	0a3f      	lsrs	r7, r7, #8
 8024d74:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024d78:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8024d7c:	433b      	orrs	r3, r7
 8024d7e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024d80:	2cff      	cmp	r4, #255	@ 0xff
 8024d82:	d020      	beq.n	8024dc6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8024d84:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024d86:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024d8a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024d8c:	4367      	muls	r7, r4
 8024d8e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024d90:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024d94:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024d96:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024d9a:	fb04 fa0a 	mul.w	sl, r4, sl
 8024d9e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024da2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024da6:	44bc      	add	ip, r7
 8024da8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024dac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024db0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024db4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024db8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024dbc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024dc0:	ea4c 040a 	orr.w	r4, ip, sl
 8024dc4:	940d      	str	r4, [sp, #52]	@ 0x34
 8024dc6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024dc8:	2cff      	cmp	r4, #255	@ 0xff
 8024dca:	d020      	beq.n	8024e0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8024dcc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8024dce:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024dd2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024dd4:	4367      	muls	r7, r4
 8024dd6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8024dd8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024ddc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024dde:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024de2:	fb04 fa0a 	mul.w	sl, r4, sl
 8024de6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024dea:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024dee:	44bc      	add	ip, r7
 8024df0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024df4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024df8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024dfc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024e00:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024e04:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024e08:	ea4c 040a 	orr.w	r4, ip, sl
 8024e0c:	9409      	str	r4, [sp, #36]	@ 0x24
 8024e0e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024e10:	2cff      	cmp	r4, #255	@ 0xff
 8024e12:	d020      	beq.n	8024e56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8024e14:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024e16:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024e1a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024e1c:	4367      	muls	r7, r4
 8024e1e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024e20:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024e24:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024e26:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024e2a:	fb04 fa0a 	mul.w	sl, r4, sl
 8024e2e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024e32:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024e36:	44bc      	add	ip, r7
 8024e38:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024e3c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024e40:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024e44:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024e48:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024e4c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024e50:	ea4c 040a 	orr.w	r4, ip, sl
 8024e54:	940e      	str	r4, [sp, #56]	@ 0x38
 8024e56:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024e58:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024e5c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8024e5e:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8024e62:	fb0e f707 	mul.w	r7, lr, r7
 8024e66:	fb01 770c 	mla	r7, r1, ip, r7
 8024e6a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024e6e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024e70:	fb00 770c 	mla	r7, r0, ip, r7
 8024e74:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024e78:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024e7a:	fb08 770c 	mla	r7, r8, ip, r7
 8024e7e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8024e82:	fb0e fe0c 	mul.w	lr, lr, ip
 8024e86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024e8a:	fb01 e303 	mla	r3, r1, r3, lr
 8024e8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024e90:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8024e94:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8024e96:	fb00 330a 	mla	r3, r0, sl, r3
 8024e9a:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8024e9e:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024ea2:	f8b9 3000 	ldrh.w	r3, [r9]
 8024ea6:	43d2      	mvns	r2, r2
 8024ea8:	1218      	asrs	r0, r3, #8
 8024eaa:	b2d2      	uxtb	r2, r2
 8024eac:	10d9      	asrs	r1, r3, #3
 8024eae:	0a3f      	lsrs	r7, r7, #8
 8024eb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024eb4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8024eb8:	00db      	lsls	r3, r3, #3
 8024eba:	4350      	muls	r0, r2
 8024ebc:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8024ec0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8024ec4:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8024ec8:	b2db      	uxtb	r3, r3
 8024eca:	ea47 070c 	orr.w	r7, r7, ip
 8024ece:	4351      	muls	r1, r2
 8024ed0:	4353      	muls	r3, r2
 8024ed2:	1c42      	adds	r2, r0, #1
 8024ed4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024ed8:	0c3a      	lsrs	r2, r7, #16
 8024eda:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024ede:	4a18      	ldr	r2, [pc, #96]	@ (8024f40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8024ee0:	b2c0      	uxtb	r0, r0
 8024ee2:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8024ee6:	1c4a      	adds	r2, r1, #1
 8024ee8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024eec:	0a3a      	lsrs	r2, r7, #8
 8024eee:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024ef2:	00c9      	lsls	r1, r1, #3
 8024ef4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024ef8:	4301      	orrs	r1, r0
 8024efa:	1c58      	adds	r0, r3, #1
 8024efc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024f00:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8024f04:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8024f08:	4308      	orrs	r0, r1
 8024f0a:	f8a9 0000 	strh.w	r0, [r9]
 8024f0e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024f10:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8024f12:	441a      	add	r2, r3
 8024f14:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024f16:	9225      	str	r2, [sp, #148]	@ 0x94
 8024f18:	f109 0902 	add.w	r9, r9, #2
 8024f1c:	441d      	add	r5, r3
 8024f1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024f22:	e64d      	b.n	8024bc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8024f24:	2800      	cmp	r0, #0
 8024f26:	f43f aeed 	beq.w	8024d04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024f2a:	5c79      	ldrb	r1, [r7, r1]
 8024f2c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024f30:	9109      	str	r1, [sp, #36]	@ 0x24
 8024f32:	0e09      	lsrs	r1, r1, #24
 8024f34:	9111      	str	r1, [sp, #68]	@ 0x44
 8024f36:	e6e5      	b.n	8024d04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024f38:	b01b      	add	sp, #108	@ 0x6c
 8024f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f3e:	bf00      	nop
 8024f40:	fffff800 	.word	0xfffff800

08024f44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8024f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f48:	b085      	sub	sp, #20
 8024f4a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8024f4e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8024f52:	9103      	str	r1, [sp, #12]
 8024f54:	fb00 7406 	mla	r4, r0, r6, r7
 8024f58:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8024f5c:	2800      	cmp	r0, #0
 8024f5e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8024f62:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 8024f66:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8024f6a:	9501      	str	r5, [sp, #4]
 8024f6c:	eb03 0904 	add.w	r9, r3, r4
 8024f70:	f2c0 8150 	blt.w	8025214 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8024f74:	4583      	cmp	fp, r0
 8024f76:	f340 814d 	ble.w	8025214 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8024f7a:	2f00      	cmp	r7, #0
 8024f7c:	f2c0 8146 	blt.w	802520c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8024f80:	42be      	cmp	r6, r7
 8024f82:	f340 8143 	ble.w	802520c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8024f86:	f813 c004 	ldrb.w	ip, [r3, r4]
 8024f8a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8024f8e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024f92:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 8024f96:	4355      	muls	r5, r2
 8024f98:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024f9c:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8024fa0:	fb0c f203 	mul.w	r2, ip, r3
 8024fa4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8024fa8:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8024fac:	441d      	add	r5, r3
 8024fae:	f102 0320 	add.w	r3, r2, #32
 8024fb2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024fb6:	0a1b      	lsrs	r3, r3, #8
 8024fb8:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8024fbc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024fc0:	431c      	orrs	r4, r3
 8024fc2:	1c7b      	adds	r3, r7, #1
 8024fc4:	f100 812b 	bmi.w	802521e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8024fc8:	429e      	cmp	r6, r3
 8024fca:	f340 8128 	ble.w	802521e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8024fce:	2900      	cmp	r1, #0
 8024fd0:	f000 8128 	beq.w	8025224 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8024fd4:	9a01      	ldr	r2, [sp, #4]
 8024fd6:	f899 3001 	ldrb.w	r3, [r9, #1]
 8024fda:	8855      	ldrh	r5, [r2, #2]
 8024fdc:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8024fe0:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8024fe4:	fb08 f802 	mul.w	r8, r8, r2
 8024fe8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024fec:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8024ff0:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8024ff4:	435d      	muls	r5, r3
 8024ff6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8024ffa:	44d0      	add	r8, sl
 8024ffc:	f105 0a20 	add.w	sl, r5, #32
 8025000:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8025004:	0a2d      	lsrs	r5, r5, #8
 8025006:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802500a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802500e:	432a      	orrs	r2, r5
 8025010:	3001      	adds	r0, #1
 8025012:	f100 810d 	bmi.w	8025230 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8025016:	4583      	cmp	fp, r0
 8025018:	f340 810a 	ble.w	8025230 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802501c:	f1be 0f00 	cmp.w	lr, #0
 8025020:	f000 810b 	beq.w	802523a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8025024:	2f00      	cmp	r7, #0
 8025026:	f2c0 8100 	blt.w	802522a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802502a:	42be      	cmp	r6, r7
 802502c:	f340 80fd 	ble.w	802522a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8025030:	9801      	ldr	r0, [sp, #4]
 8025032:	f819 5006 	ldrb.w	r5, [r9, r6]
 8025036:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802503a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802503e:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 8025042:	fb0a fa00 	mul.w	sl, sl, r0
 8025046:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 802504a:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 802504e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8025052:	fb05 f808 	mul.w	r8, r5, r8
 8025056:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 802505a:	4482      	add	sl, r0
 802505c:	f108 0020 	add.w	r0, r8, #32
 8025060:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025064:	0a00      	lsrs	r0, r0, #8
 8025066:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802506a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802506e:	ea4b 0b00 	orr.w	fp, fp, r0
 8025072:	3701      	adds	r7, #1
 8025074:	f100 80e6 	bmi.w	8025244 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8025078:	42be      	cmp	r6, r7
 802507a:	f340 80e3 	ble.w	8025244 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802507e:	2900      	cmp	r1, #0
 8025080:	f000 80e3 	beq.w	802524a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8025084:	3601      	adds	r6, #1
 8025086:	9801      	ldr	r0, [sp, #4]
 8025088:	f819 7006 	ldrb.w	r7, [r9, r6]
 802508c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8025090:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8025094:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8025098:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802509c:	fb09 f906 	mul.w	r9, r9, r6
 80250a0:	fb07 f800 	mul.w	r8, r7, r0
 80250a4:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80250a8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80250ac:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 80250b0:	44d1      	add	r9, sl
 80250b2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80250b6:	f108 0020 	add.w	r0, r8, #32
 80250ba:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80250be:	0a00      	lsrs	r0, r0, #8
 80250c0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80250c4:	4330      	orrs	r0, r6
 80250c6:	b28e      	uxth	r6, r1
 80250c8:	fa1f f98e 	uxth.w	r9, lr
 80250cc:	fb06 f809 	mul.w	r8, r6, r9
 80250d0:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80250d4:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80250d8:	0136      	lsls	r6, r6, #4
 80250da:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80250de:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 80250e2:	9601      	str	r6, [sp, #4]
 80250e4:	ea4a 0404 	orr.w	r4, sl, r4
 80250e8:	fa1f f689 	uxth.w	r6, r9
 80250ec:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80250f0:	fb11 f90e 	smulbb	r9, r1, lr
 80250f4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80250f8:	9602      	str	r6, [sp, #8]
 80250fa:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80250fe:	4626      	mov	r6, r4
 8025100:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025104:	f1ce 0410 	rsb	r4, lr, #16
 8025108:	1a64      	subs	r4, r4, r1
 802510a:	ea4a 0202 	orr.w	r2, sl, r2
 802510e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8025112:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025116:	434a      	muls	r2, r1
 8025118:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802511c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025120:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8025124:	fb04 2406 	mla	r4, r4, r6, r2
 8025128:	ea4a 0000 	orr.w	r0, sl, r0
 802512c:	fb09 4200 	mla	r2, r9, r0, r4
 8025130:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8025134:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8025138:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 802513c:	ea44 0b0b 	orr.w	fp, r4, fp
 8025140:	9c01      	ldr	r4, [sp, #4]
 8025142:	9e02      	ldr	r6, [sp, #8]
 8025144:	9903      	ldr	r1, [sp, #12]
 8025146:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 802514a:	1ba4      	subs	r4, r4, r6
 802514c:	9e01      	ldr	r6, [sp, #4]
 802514e:	8808      	ldrh	r0, [r1, #0]
 8025150:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 8025154:	eba6 0608 	sub.w	r6, r6, r8
 8025158:	b2b6      	uxth	r6, r6
 802515a:	b2a4      	uxth	r4, r4
 802515c:	4373      	muls	r3, r6
 802515e:	fb0c 3304 	mla	r3, ip, r4, r3
 8025162:	9c02      	ldr	r4, [sp, #8]
 8025164:	fb04 3505 	mla	r5, r4, r5, r3
 8025168:	fb08 5707 	mla	r7, r8, r7, r5
 802516c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8025170:	b289      	uxth	r1, r1
 8025172:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8025176:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802517a:	434f      	muls	r7, r1
 802517c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025180:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025184:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025188:	1c7b      	adds	r3, r7, #1
 802518a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802518e:	ea42 0e0e 	orr.w	lr, r2, lr
 8025192:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8025196:	fa1f f28e 	uxth.w	r2, lr
 802519a:	1203      	asrs	r3, r0, #8
 802519c:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80251a0:	b2ff      	uxtb	r7, r7
 80251a2:	1215      	asrs	r5, r2, #8
 80251a4:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80251a8:	fb13 f307 	smulbb	r3, r3, r7
 80251ac:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80251b0:	fb05 3501 	mla	r5, r5, r1, r3
 80251b4:	10c3      	asrs	r3, r0, #3
 80251b6:	10d4      	asrs	r4, r2, #3
 80251b8:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80251bc:	fb13 f307 	smulbb	r3, r3, r7
 80251c0:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 80251c4:	fb04 3401 	mla	r4, r4, r1, r3
 80251c8:	00c3      	lsls	r3, r0, #3
 80251ca:	00d2      	lsls	r2, r2, #3
 80251cc:	b2db      	uxtb	r3, r3
 80251ce:	fb13 f307 	smulbb	r3, r3, r7
 80251d2:	b2d2      	uxtb	r2, r2
 80251d4:	fb02 3101 	mla	r1, r2, r1, r3
 80251d8:	b2ad      	uxth	r5, r5
 80251da:	b289      	uxth	r1, r1
 80251dc:	b2a4      	uxth	r4, r4
 80251de:	1c6b      	adds	r3, r5, #1
 80251e0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80251e4:	1c62      	adds	r2, r4, #1
 80251e6:	1c4b      	adds	r3, r1, #1
 80251e8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80251ec:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80251f0:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80251f4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80251f8:	0964      	lsrs	r4, r4, #5
 80251fa:	432b      	orrs	r3, r5
 80251fc:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8025200:	9a03      	ldr	r2, [sp, #12]
 8025202:	4323      	orrs	r3, r4
 8025204:	8013      	strh	r3, [r2, #0]
 8025206:	b005      	add	sp, #20
 8025208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802520c:	f04f 0c00 	mov.w	ip, #0
 8025210:	4664      	mov	r4, ip
 8025212:	e6d6      	b.n	8024fc2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8025214:	2300      	movs	r3, #0
 8025216:	469c      	mov	ip, r3
 8025218:	461a      	mov	r2, r3
 802521a:	461c      	mov	r4, r3
 802521c:	e6f8      	b.n	8025010 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802521e:	2300      	movs	r3, #0
 8025220:	461a      	mov	r2, r3
 8025222:	e6f5      	b.n	8025010 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8025224:	460b      	mov	r3, r1
 8025226:	460a      	mov	r2, r1
 8025228:	e6f2      	b.n	8025010 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802522a:	2500      	movs	r5, #0
 802522c:	46ab      	mov	fp, r5
 802522e:	e720      	b.n	8025072 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8025230:	2700      	movs	r7, #0
 8025232:	463d      	mov	r5, r7
 8025234:	4638      	mov	r0, r7
 8025236:	46bb      	mov	fp, r7
 8025238:	e745      	b.n	80250c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802523a:	4677      	mov	r7, lr
 802523c:	4675      	mov	r5, lr
 802523e:	4670      	mov	r0, lr
 8025240:	46f3      	mov	fp, lr
 8025242:	e740      	b.n	80250c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8025244:	2700      	movs	r7, #0
 8025246:	4638      	mov	r0, r7
 8025248:	e73d      	b.n	80250c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802524a:	460f      	mov	r7, r1
 802524c:	4608      	mov	r0, r1
 802524e:	e73a      	b.n	80250c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08025250 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025254:	b097      	sub	sp, #92	@ 0x5c
 8025256:	9214      	str	r2, [sp, #80]	@ 0x50
 8025258:	9308      	str	r3, [sp, #32]
 802525a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802525c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8025260:	9312      	str	r3, [sp, #72]	@ 0x48
 8025262:	9111      	str	r1, [sp, #68]	@ 0x44
 8025264:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8025268:	9015      	str	r0, [sp, #84]	@ 0x54
 802526a:	6850      	ldr	r0, [r2, #4]
 802526c:	6812      	ldr	r2, [r2, #0]
 802526e:	fb00 1303 	mla	r3, r0, r3, r1
 8025272:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025276:	9309      	str	r3, [sp, #36]	@ 0x24
 8025278:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802527a:	681b      	ldr	r3, [r3, #0]
 802527c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802527e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025280:	685b      	ldr	r3, [r3, #4]
 8025282:	930c      	str	r3, [sp, #48]	@ 0x30
 8025284:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8025288:	930a      	str	r3, [sp, #40]	@ 0x28
 802528a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802528c:	2b00      	cmp	r3, #0
 802528e:	dc03      	bgt.n	8025298 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025290:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025292:	2b00      	cmp	r3, #0
 8025294:	f340 83cb 	ble.w	8025a2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8025298:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802529a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802529e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80252a2:	1e48      	subs	r0, r1, #1
 80252a4:	1e55      	subs	r5, r2, #1
 80252a6:	9b08      	ldr	r3, [sp, #32]
 80252a8:	2b00      	cmp	r3, #0
 80252aa:	f340 81a3 	ble.w	80255f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80252ae:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 80252b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80252b2:	1436      	asrs	r6, r6, #16
 80252b4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80252b8:	d406      	bmi.n	80252c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80252ba:	4286      	cmp	r6, r0
 80252bc:	da04      	bge.n	80252c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80252be:	2b00      	cmp	r3, #0
 80252c0:	db02      	blt.n	80252c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80252c2:	42ab      	cmp	r3, r5
 80252c4:	f2c0 8197 	blt.w	80255f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80252c8:	3601      	adds	r6, #1
 80252ca:	f100 8184 	bmi.w	80255d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80252ce:	42b1      	cmp	r1, r6
 80252d0:	f2c0 8181 	blt.w	80255d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80252d4:	3301      	adds	r3, #1
 80252d6:	f100 817e 	bmi.w	80255d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80252da:	429a      	cmp	r2, r3
 80252dc:	f2c0 817b 	blt.w	80255d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80252e0:	9b08      	ldr	r3, [sp, #32]
 80252e2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80252e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80252e6:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 80252ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80252ec:	2b00      	cmp	r3, #0
 80252ee:	f340 81a4 	ble.w	802563a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80252f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80252f4:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 80252f6:	1418      	asrs	r0, r3, #16
 80252f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80252fa:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80252fe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025300:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025304:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025306:	142d      	asrs	r5, r5, #16
 8025308:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802530c:	f100 81f8 	bmi.w	8025700 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025310:	f102 3eff 	add.w	lr, r2, #4294967295
 8025314:	4575      	cmp	r5, lr
 8025316:	f280 81f3 	bge.w	8025700 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802531a:	2800      	cmp	r0, #0
 802531c:	f2c0 81f0 	blt.w	8025700 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025320:	f103 3eff 	add.w	lr, r3, #4294967295
 8025324:	4570      	cmp	r0, lr
 8025326:	f280 81eb 	bge.w	8025700 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802532a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802532c:	b212      	sxth	r2, r2
 802532e:	fb00 5002 	mla	r0, r0, r2, r5
 8025332:	fa1f fe81 	uxth.w	lr, r1
 8025336:	eb03 0a00 	add.w	sl, r3, r0
 802533a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802533e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8025342:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025346:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 802534a:	b29b      	uxth	r3, r3
 802534c:	f1bc 0f00 	cmp.w	ip, #0
 8025350:	f000 81b9 	beq.w	80256c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025354:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025358:	940d      	str	r4, [sp, #52]	@ 0x34
 802535a:	eb0a 0b02 	add.w	fp, sl, r2
 802535e:	fa1f fa8c 	uxth.w	sl, ip
 8025362:	fb0a fe0e 	mul.w	lr, sl, lr
 8025366:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802536a:	fa1f fa8a 	uxth.w	sl, sl
 802536e:	eba5 050e 	sub.w	r5, r5, lr
 8025372:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025376:	940e      	str	r4, [sp, #56]	@ 0x38
 8025378:	eba3 030a 	sub.w	r3, r3, sl
 802537c:	b2ad      	uxth	r5, r5
 802537e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025380:	b29b      	uxth	r3, r3
 8025382:	fb08 f505 	mul.w	r5, r8, r5
 8025386:	fb09 5303 	mla	r3, r9, r3, r5
 802538a:	fb0a 3304 	mla	r3, sl, r4, r3
 802538e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025390:	fb0e 3304 	mla	r3, lr, r4, r3
 8025394:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025398:	2b00      	cmp	r3, #0
 802539a:	f000 810f 	beq.w	80255bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802539e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80253a0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80253a4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80253a8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80253ac:	f000 8190 	beq.w	80256d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 80253b0:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80253b4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80253b8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80253bc:	fb09 f000 	mul.w	r0, r9, r0
 80253c0:	fb0a fe0e 	mul.w	lr, sl, lr
 80253c4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80253c8:	f100 0b20 	add.w	fp, r0, #32
 80253cc:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 80253d0:	44ce      	add	lr, r9
 80253d2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80253d6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80253da:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80253de:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80253e2:	ea4e 0909 	orr.w	r9, lr, r9
 80253e6:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80253ea:	8868      	ldrh	r0, [r5, #2]
 80253ec:	d019      	beq.n	8025422 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80253ee:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80253f2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80253f6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80253fa:	fb08 f800 	mul.w	r8, r8, r0
 80253fe:	fb0a fe0e 	mul.w	lr, sl, lr
 8025402:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025406:	f108 0b20 	add.w	fp, r8, #32
 802540a:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802540e:	4486      	add	lr, r0
 8025410:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025414:	0a00      	lsrs	r0, r0, #8
 8025416:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802541a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802541e:	ea4e 0000 	orr.w	r0, lr, r0
 8025422:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025426:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802542a:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 802542e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8025432:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025436:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802543a:	ea4e 0909 	orr.w	r9, lr, r9
 802543e:	ea4a 0000 	orr.w	r0, sl, r0
 8025442:	f1bc 0f00 	cmp.w	ip, #0
 8025446:	f000 8145 	beq.w	80256d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 802544a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 802544e:	3a01      	subs	r2, #1
 8025450:	0052      	lsls	r2, r2, #1
 8025452:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025454:	3202      	adds	r2, #2
 8025456:	2cff      	cmp	r4, #255	@ 0xff
 8025458:	eb05 0e02 	add.w	lr, r5, r2
 802545c:	5aaa      	ldrh	r2, [r5, r2]
 802545e:	d018      	beq.n	8025492 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8025460:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8025464:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025468:	fb04 fa02 	mul.w	sl, r4, r2
 802546c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025470:	fb08 f805 	mul.w	r8, r8, r5
 8025474:	f10a 0520 	add.w	r5, sl, #32
 8025478:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802547c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025480:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025484:	4442      	add	r2, r8
 8025486:	0a2d      	lsrs	r5, r5, #8
 8025488:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802548c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025490:	432a      	orrs	r2, r5
 8025492:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025494:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025498:	2cff      	cmp	r4, #255	@ 0xff
 802549a:	d01a      	beq.n	80254d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 802549c:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 80254a0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80254a4:	fb04 fa05 	mul.w	sl, r4, r5
 80254a8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80254ac:	fb08 f80e 	mul.w	r8, r8, lr
 80254b0:	f10a 0e20 	add.w	lr, sl, #32
 80254b4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80254b8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80254bc:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80254c0:	4445      	add	r5, r8
 80254c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80254c6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80254ca:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80254ce:	ea45 050e 	orr.w	r5, r5, lr
 80254d2:	fb1c fe01 	smulbb	lr, ip, r1
 80254d6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80254da:	f1cc 0810 	rsb	r8, ip, #16
 80254de:	eba8 0801 	sub.w	r8, r8, r1
 80254e2:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80254e6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80254ea:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80254ee:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80254f2:	4341      	muls	r1, r0
 80254f4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80254f8:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80254fc:	ea4a 0202 	orr.w	r2, sl, r2
 8025500:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025504:	fb09 1108 	mla	r1, r9, r8, r1
 8025508:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802550c:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8025510:	fb0c 1102 	mla	r1, ip, r2, r1
 8025514:	ea4b 0505 	orr.w	r5, fp, r5
 8025518:	fb0e 1e05 	mla	lr, lr, r5, r1
 802551c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025520:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025524:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025528:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802552c:	ea42 0e0e 	orr.w	lr, r2, lr
 8025530:	fa1f f28e 	uxth.w	r2, lr
 8025534:	2bff      	cmp	r3, #255	@ 0xff
 8025536:	d103      	bne.n	8025540 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8025538:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802553a:	29ff      	cmp	r1, #255	@ 0xff
 802553c:	f000 80de 	beq.w	80256fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8025540:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025542:	8838      	ldrh	r0, [r7, #0]
 8025544:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025546:	434b      	muls	r3, r1
 8025548:	f103 0c01 	add.w	ip, r3, #1
 802554c:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8025550:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8025554:	fa5f fc83 	uxtb.w	ip, r3
 8025558:	1203      	asrs	r3, r0, #8
 802555a:	1215      	asrs	r5, r2, #8
 802555c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8025560:	fb13 f30c 	smulbb	r3, r3, ip
 8025564:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8025568:	fb05 3501 	mla	r5, r5, r1, r3
 802556c:	10c3      	asrs	r3, r0, #3
 802556e:	10d1      	asrs	r1, r2, #3
 8025570:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8025574:	fb13 f30c 	smulbb	r3, r3, ip
 8025578:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802557c:	fb01 3104 	mla	r1, r1, r4, r3
 8025580:	00c3      	lsls	r3, r0, #3
 8025582:	00d2      	lsls	r2, r2, #3
 8025584:	b2db      	uxtb	r3, r3
 8025586:	b2d2      	uxtb	r2, r2
 8025588:	fb13 f30c 	smulbb	r3, r3, ip
 802558c:	b2ad      	uxth	r5, r5
 802558e:	fb02 3304 	mla	r3, r2, r4, r3
 8025592:	b29a      	uxth	r2, r3
 8025594:	1c6b      	adds	r3, r5, #1
 8025596:	b289      	uxth	r1, r1
 8025598:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802559c:	1c53      	adds	r3, r2, #1
 802559e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80255a2:	1c4a      	adds	r2, r1, #1
 80255a4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80255a8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80255ac:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80255b0:	0949      	lsrs	r1, r1, #5
 80255b2:	432b      	orrs	r3, r5
 80255b4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80255b8:	430b      	orrs	r3, r1
 80255ba:	803b      	strh	r3, [r7, #0]
 80255bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80255be:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80255c0:	4413      	add	r3, r2
 80255c2:	9321      	str	r3, [sp, #132]	@ 0x84
 80255c4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80255c6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80255c8:	441a      	add	r2, r3
 80255ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80255cc:	9222      	str	r2, [sp, #136]	@ 0x88
 80255ce:	3b01      	subs	r3, #1
 80255d0:	3702      	adds	r7, #2
 80255d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80255d4:	e689      	b.n	80252ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80255d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80255d8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80255da:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 80255dc:	4433      	add	r3, r6
 80255de:	9321      	str	r3, [sp, #132]	@ 0x84
 80255e0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80255e2:	441c      	add	r4, r3
 80255e4:	9b08      	ldr	r3, [sp, #32]
 80255e6:	9422      	str	r4, [sp, #136]	@ 0x88
 80255e8:	3b01      	subs	r3, #1
 80255ea:	9308      	str	r3, [sp, #32]
 80255ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80255ee:	3302      	adds	r3, #2
 80255f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80255f2:	e658      	b.n	80252a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80255f4:	d028      	beq.n	8025648 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80255f6:	9b08      	ldr	r3, [sp, #32]
 80255f8:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 80255fa:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 80255fc:	3b01      	subs	r3, #1
 80255fe:	fb00 5003 	mla	r0, r0, r3, r5
 8025602:	1400      	asrs	r0, r0, #16
 8025604:	f53f ae6c 	bmi.w	80252e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025608:	3901      	subs	r1, #1
 802560a:	4288      	cmp	r0, r1
 802560c:	f6bf ae68 	bge.w	80252e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025610:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8025612:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8025614:	fb01 0303 	mla	r3, r1, r3, r0
 8025618:	141b      	asrs	r3, r3, #16
 802561a:	f53f ae61 	bmi.w	80252e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802561e:	3a01      	subs	r2, #1
 8025620:	4293      	cmp	r3, r2
 8025622:	f6bf ae5d 	bge.w	80252e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025626:	9b08      	ldr	r3, [sp, #32]
 8025628:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 802562c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802562e:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8025632:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025634:	2b00      	cmp	r3, #0
 8025636:	f300 8082 	bgt.w	802573e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 802563a:	9b08      	ldr	r3, [sp, #32]
 802563c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025642:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025646:	9309      	str	r3, [sp, #36]	@ 0x24
 8025648:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802564a:	2b00      	cmp	r3, #0
 802564c:	f340 81ef 	ble.w	8025a2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8025650:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025654:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025658:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802565c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802565e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025662:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025666:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802566a:	eef0 6a62 	vmov.f32	s13, s5
 802566e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025672:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025676:	ee77 2a62 	vsub.f32	s5, s14, s5
 802567a:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 802567e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025682:	eef0 6a43 	vmov.f32	s13, s6
 8025686:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802568a:	ee12 2a90 	vmov	r2, s5
 802568e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025692:	fb92 f3f3 	sdiv	r3, r2, r3
 8025696:	ee13 2a10 	vmov	r2, s6
 802569a:	9323      	str	r3, [sp, #140]	@ 0x8c
 802569c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802569e:	fb92 f3f3 	sdiv	r3, r2, r3
 80256a2:	9324      	str	r3, [sp, #144]	@ 0x90
 80256a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80256a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80256a8:	3b01      	subs	r3, #1
 80256aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80256ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80256b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80256b2:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 80256b6:	bf08      	it	eq
 80256b8:	4613      	moveq	r3, r2
 80256ba:	9308      	str	r3, [sp, #32]
 80256bc:	eeb0 3a67 	vmov.f32	s6, s15
 80256c0:	eef0 2a47 	vmov.f32	s5, s14
 80256c4:	e5e1      	b.n	802528a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80256c6:	fb08 f505 	mul.w	r5, r8, r5
 80256ca:	fb09 5303 	mla	r3, r9, r3, r5
 80256ce:	e661      	b.n	8025394 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 80256d0:	4681      	mov	r9, r0
 80256d2:	e688      	b.n	80253e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80256d4:	f1c1 0210 	rsb	r2, r1, #16
 80256d8:	4341      	muls	r1, r0
 80256da:	fb09 1902 	mla	r9, r9, r2, r1
 80256de:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80256e2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80256e6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80256ea:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80256ee:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80256f2:	ea42 0909 	orr.w	r9, r2, r9
 80256f6:	fa1f f289 	uxth.w	r2, r9
 80256fa:	e71b      	b.n	8025534 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80256fc:	803a      	strh	r2, [r7, #0]
 80256fe:	e75d      	b.n	80255bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025700:	f115 0e01 	adds.w	lr, r5, #1
 8025704:	f53f af5a 	bmi.w	80255bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025708:	4572      	cmp	r2, lr
 802570a:	f6ff af57 	blt.w	80255bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802570e:	f110 0e01 	adds.w	lr, r0, #1
 8025712:	f53f af53 	bmi.w	80255bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025716:	4573      	cmp	r3, lr
 8025718:	f6ff af50 	blt.w	80255bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802571c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802571e:	9502      	str	r5, [sp, #8]
 8025720:	b21b      	sxth	r3, r3
 8025722:	b212      	sxth	r2, r2
 8025724:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8025728:	9301      	str	r3, [sp, #4]
 802572a:	9200      	str	r2, [sp, #0]
 802572c:	e9cd c405 	strd	ip, r4, [sp, #20]
 8025730:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8025734:	4639      	mov	r1, r7
 8025736:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8025738:	f7ff fc04 	bl	8024f44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 802573c:	e73e      	b.n	80255bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802573e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8025740:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025744:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025746:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802574a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802574c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025750:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025752:	141f      	asrs	r7, r3, #16
 8025754:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8025756:	141b      	asrs	r3, r3, #16
 8025758:	fb01 3707 	mla	r7, r1, r7, r3
 802575c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802575e:	fa1f fc82 	uxth.w	ip, r2
 8025762:	eb03 0a07 	add.w	sl, r3, r7
 8025766:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802576a:	f813 9007 	ldrb.w	r9, [r3, r7]
 802576e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025772:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8025776:	b29b      	uxth	r3, r3
 8025778:	2d00      	cmp	r5, #0
 802577a:	f000 813d 	beq.w	80259f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 802577e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025782:	940f      	str	r4, [sp, #60]	@ 0x3c
 8025784:	eb0a 0b01 	add.w	fp, sl, r1
 8025788:	fa1f fa85 	uxth.w	sl, r5
 802578c:	fb0a fc0c 	mul.w	ip, sl, ip
 8025790:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025794:	fa1f fa8a 	uxth.w	sl, sl
 8025798:	eba0 000c 	sub.w	r0, r0, ip
 802579c:	eba3 030a 	sub.w	r3, r3, sl
 80257a0:	b280      	uxth	r0, r0
 80257a2:	fb08 f000 	mul.w	r0, r8, r0
 80257a6:	b29b      	uxth	r3, r3
 80257a8:	fb09 0303 	mla	r3, r9, r3, r0
 80257ac:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80257ae:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80257b2:	9410      	str	r4, [sp, #64]	@ 0x40
 80257b4:	fb0a 3300 	mla	r3, sl, r0, r3
 80257b8:	fb0c 3304 	mla	r3, ip, r4, r3
 80257bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80257c0:	2b00      	cmp	r3, #0
 80257c2:	f000 810b 	beq.w	80259dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 80257c6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80257c8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80257ca:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80257ce:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80257d2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80257d6:	f000 8114 	beq.w	8025a02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 80257da:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 80257de:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80257e2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80257e6:	fb09 f707 	mul.w	r7, r9, r7
 80257ea:	fb0a fc0c 	mul.w	ip, sl, ip
 80257ee:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80257f2:	f107 0b20 	add.w	fp, r7, #32
 80257f6:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80257fa:	44cc      	add	ip, r9
 80257fc:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025800:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025804:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025808:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802580c:	ea4c 0909 	orr.w	r9, ip, r9
 8025810:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8025814:	8847      	ldrh	r7, [r0, #2]
 8025816:	d019      	beq.n	802584c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8025818:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 802581c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025820:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8025824:	fb08 f807 	mul.w	r8, r8, r7
 8025828:	fb0a fc0c 	mul.w	ip, sl, ip
 802582c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025830:	f108 0b20 	add.w	fp, r8, #32
 8025834:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8025838:	44bc      	add	ip, r7
 802583a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802583e:	0a3f      	lsrs	r7, r7, #8
 8025840:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025844:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8025848:	ea4c 0707 	orr.w	r7, ip, r7
 802584c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025850:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025854:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025858:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802585c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025860:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8025864:	ea4c 0909 	orr.w	r9, ip, r9
 8025868:	ea4a 0707 	orr.w	r7, sl, r7
 802586c:	2d00      	cmp	r5, #0
 802586e:	f000 80ca 	beq.w	8025a06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8025872:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8025876:	3901      	subs	r1, #1
 8025878:	0049      	lsls	r1, r1, #1
 802587a:	3102      	adds	r1, #2
 802587c:	eb00 0c01 	add.w	ip, r0, r1
 8025880:	5a41      	ldrh	r1, [r0, r1]
 8025882:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8025884:	28ff      	cmp	r0, #255	@ 0xff
 8025886:	d019      	beq.n	80258bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8025888:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802588a:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 802588e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025892:	fb04 fa01 	mul.w	sl, r4, r1
 8025896:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802589a:	fb08 f800 	mul.w	r8, r8, r0
 802589e:	f10a 0020 	add.w	r0, sl, #32
 80258a2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80258a6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80258aa:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80258ae:	4441      	add	r1, r8
 80258b0:	0a00      	lsrs	r0, r0, #8
 80258b2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80258b6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80258ba:	4301      	orrs	r1, r0
 80258bc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80258be:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80258c2:	2cff      	cmp	r4, #255	@ 0xff
 80258c4:	d01a      	beq.n	80258fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 80258c6:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 80258ca:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80258ce:	fb04 fa00 	mul.w	sl, r4, r0
 80258d2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80258d6:	fb08 f80c 	mul.w	r8, r8, ip
 80258da:	f10a 0c20 	add.w	ip, sl, #32
 80258de:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80258e2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80258e6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80258ea:	4440      	add	r0, r8
 80258ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80258f0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80258f4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80258f8:	ea40 000c 	orr.w	r0, r0, ip
 80258fc:	fb15 fc02 	smulbb	ip, r5, r2
 8025900:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025904:	f1c5 0810 	rsb	r8, r5, #16
 8025908:	eba8 0802 	sub.w	r8, r8, r2
 802590c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025910:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8025914:	437a      	muls	r2, r7
 8025916:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802591a:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802591e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025922:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8025926:	fb09 2208 	mla	r2, r9, r8, r2
 802592a:	ea4a 0101 	orr.w	r1, sl, r1
 802592e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8025932:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8025936:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802593a:	fb05 2201 	mla	r2, r5, r1, r2
 802593e:	ea4b 0000 	orr.w	r0, fp, r0
 8025942:	fb0c 2200 	mla	r2, ip, r0, r2
 8025946:	0d57      	lsrs	r7, r2, #21
 8025948:	0952      	lsrs	r2, r2, #5
 802594a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802594e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025952:	433a      	orrs	r2, r7
 8025954:	2bff      	cmp	r3, #255	@ 0xff
 8025956:	b292      	uxth	r2, r2
 8025958:	d102      	bne.n	8025960 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802595a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802595c:	29ff      	cmp	r1, #255	@ 0xff
 802595e:	d063      	beq.n	8025a28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8025960:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025962:	f8be 1000 	ldrh.w	r1, [lr]
 8025966:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025968:	4343      	muls	r3, r0
 802596a:	1c58      	adds	r0, r3, #1
 802596c:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8025970:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8025974:	1208      	asrs	r0, r1, #8
 8025976:	b2db      	uxtb	r3, r3
 8025978:	1215      	asrs	r5, r2, #8
 802597a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802597e:	fb10 f003 	smulbb	r0, r0, r3
 8025982:	10cf      	asrs	r7, r1, #3
 8025984:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8025988:	00c9      	lsls	r1, r1, #3
 802598a:	fb05 0504 	mla	r5, r5, r4, r0
 802598e:	b2c9      	uxtb	r1, r1
 8025990:	10d0      	asrs	r0, r2, #3
 8025992:	00d2      	lsls	r2, r2, #3
 8025994:	fb11 f103 	smulbb	r1, r1, r3
 8025998:	b2d2      	uxtb	r2, r2
 802599a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802599e:	fb02 1204 	mla	r2, r2, r4, r1
 80259a2:	fb17 f703 	smulbb	r7, r7, r3
 80259a6:	b2ad      	uxth	r5, r5
 80259a8:	b292      	uxth	r2, r2
 80259aa:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80259ae:	fb00 7004 	mla	r0, r0, r4, r7
 80259b2:	1c6b      	adds	r3, r5, #1
 80259b4:	1c57      	adds	r7, r2, #1
 80259b6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80259ba:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80259be:	b280      	uxth	r0, r0
 80259c0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80259c4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80259c8:	433d      	orrs	r5, r7
 80259ca:	1c47      	adds	r7, r0, #1
 80259cc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80259d0:	097f      	lsrs	r7, r7, #5
 80259d2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80259d6:	433d      	orrs	r5, r7
 80259d8:	f8ae 5000 	strh.w	r5, [lr]
 80259dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80259de:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80259e0:	4413      	add	r3, r2
 80259e2:	9321      	str	r3, [sp, #132]	@ 0x84
 80259e4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80259e6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80259e8:	441a      	add	r2, r3
 80259ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80259ec:	9222      	str	r2, [sp, #136]	@ 0x88
 80259ee:	3b01      	subs	r3, #1
 80259f0:	f10e 0e02 	add.w	lr, lr, #2
 80259f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80259f6:	e61c      	b.n	8025632 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80259f8:	fb08 f000 	mul.w	r0, r8, r0
 80259fc:	fb09 0303 	mla	r3, r9, r3, r0
 8025a00:	e6dc      	b.n	80257bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 8025a02:	46b9      	mov	r9, r7
 8025a04:	e704      	b.n	8025810 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 8025a06:	f1c2 0110 	rsb	r1, r2, #16
 8025a0a:	437a      	muls	r2, r7
 8025a0c:	fb09 2901 	mla	r9, r9, r1, r2
 8025a10:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025a14:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8025a18:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8025a1c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025a20:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025a24:	4302      	orrs	r2, r0
 8025a26:	e795      	b.n	8025954 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8025a28:	f8ae 2000 	strh.w	r2, [lr]
 8025a2c:	e7d6      	b.n	80259dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8025a2e:	b017      	add	sp, #92	@ 0x5c
 8025a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025a34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8025a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a38:	b085      	sub	sp, #20
 8025a3a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8025a3e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8025a42:	9103      	str	r1, [sp, #12]
 8025a44:	fb00 7406 	mla	r4, r0, r6, r7
 8025a48:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8025a4c:	2800      	cmp	r0, #0
 8025a4e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8025a52:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 8025a56:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8025a5a:	9501      	str	r5, [sp, #4]
 8025a5c:	eb02 0904 	add.w	r9, r2, r4
 8025a60:	f2c0 8141 	blt.w	8025ce6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8025a64:	4583      	cmp	fp, r0
 8025a66:	f340 813e 	ble.w	8025ce6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8025a6a:	2f00      	cmp	r7, #0
 8025a6c:	f2c0 8137 	blt.w	8025cde <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8025a70:	42be      	cmp	r6, r7
 8025a72:	f340 8134 	ble.w	8025cde <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8025a76:	f812 c004 	ldrb.w	ip, [r2, r4]
 8025a7a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8025a7e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025a82:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 8025a86:	4355      	muls	r5, r2
 8025a88:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025a8c:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8025a90:	fb0c f203 	mul.w	r2, ip, r3
 8025a94:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8025a98:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8025a9c:	441d      	add	r5, r3
 8025a9e:	f102 0320 	add.w	r3, r2, #32
 8025aa2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025aa6:	0a1b      	lsrs	r3, r3, #8
 8025aa8:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8025aac:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025ab0:	431c      	orrs	r4, r3
 8025ab2:	1c7b      	adds	r3, r7, #1
 8025ab4:	f100 811c 	bmi.w	8025cf0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8025ab8:	429e      	cmp	r6, r3
 8025aba:	f340 8119 	ble.w	8025cf0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8025abe:	2900      	cmp	r1, #0
 8025ac0:	f000 8119 	beq.w	8025cf6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8025ac4:	9a01      	ldr	r2, [sp, #4]
 8025ac6:	f899 3001 	ldrb.w	r3, [r9, #1]
 8025aca:	8855      	ldrh	r5, [r2, #2]
 8025acc:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8025ad0:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8025ad4:	fb08 f802 	mul.w	r8, r8, r2
 8025ad8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025adc:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8025ae0:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8025ae4:	435d      	muls	r5, r3
 8025ae6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025aea:	44d0      	add	r8, sl
 8025aec:	f105 0a20 	add.w	sl, r5, #32
 8025af0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8025af4:	0a2d      	lsrs	r5, r5, #8
 8025af6:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8025afa:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025afe:	432a      	orrs	r2, r5
 8025b00:	3001      	adds	r0, #1
 8025b02:	f100 80fe 	bmi.w	8025d02 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8025b06:	4583      	cmp	fp, r0
 8025b08:	f340 80fb 	ble.w	8025d02 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8025b0c:	f1be 0f00 	cmp.w	lr, #0
 8025b10:	f000 80fc 	beq.w	8025d0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8025b14:	2f00      	cmp	r7, #0
 8025b16:	f2c0 80f1 	blt.w	8025cfc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8025b1a:	42be      	cmp	r6, r7
 8025b1c:	f340 80ee 	ble.w	8025cfc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8025b20:	9801      	ldr	r0, [sp, #4]
 8025b22:	f819 5006 	ldrb.w	r5, [r9, r6]
 8025b26:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8025b2a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8025b2e:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 8025b32:	fb0a fa00 	mul.w	sl, sl, r0
 8025b36:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8025b3a:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8025b3e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8025b42:	fb05 f808 	mul.w	r8, r5, r8
 8025b46:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 8025b4a:	4482      	add	sl, r0
 8025b4c:	f108 0020 	add.w	r0, r8, #32
 8025b50:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025b54:	0a00      	lsrs	r0, r0, #8
 8025b56:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8025b5a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025b5e:	ea4b 0b00 	orr.w	fp, fp, r0
 8025b62:	3701      	adds	r7, #1
 8025b64:	f100 80d7 	bmi.w	8025d16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8025b68:	42be      	cmp	r6, r7
 8025b6a:	f340 80d4 	ble.w	8025d16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8025b6e:	2900      	cmp	r1, #0
 8025b70:	f000 80d4 	beq.w	8025d1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8025b74:	3601      	adds	r6, #1
 8025b76:	9801      	ldr	r0, [sp, #4]
 8025b78:	f819 7006 	ldrb.w	r7, [r9, r6]
 8025b7c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8025b80:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8025b84:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8025b88:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025b8c:	fb09 f906 	mul.w	r9, r9, r6
 8025b90:	fb07 f800 	mul.w	r8, r7, r0
 8025b94:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8025b98:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8025b9c:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8025ba0:	44d1      	add	r9, sl
 8025ba2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8025ba6:	f108 0020 	add.w	r0, r8, #32
 8025baa:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025bae:	0a00      	lsrs	r0, r0, #8
 8025bb0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025bb4:	4330      	orrs	r0, r6
 8025bb6:	b28e      	uxth	r6, r1
 8025bb8:	fa1f f98e 	uxth.w	r9, lr
 8025bbc:	fb06 f809 	mul.w	r8, r6, r9
 8025bc0:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8025bc4:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8025bc8:	0136      	lsls	r6, r6, #4
 8025bca:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025bce:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8025bd2:	9601      	str	r6, [sp, #4]
 8025bd4:	ea4a 0404 	orr.w	r4, sl, r4
 8025bd8:	fa1f f689 	uxth.w	r6, r9
 8025bdc:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025be0:	fb11 f90e 	smulbb	r9, r1, lr
 8025be4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8025be8:	9602      	str	r6, [sp, #8]
 8025bea:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025bee:	4626      	mov	r6, r4
 8025bf0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025bf4:	f1ce 0410 	rsb	r4, lr, #16
 8025bf8:	1a64      	subs	r4, r4, r1
 8025bfa:	ea4a 0202 	orr.w	r2, sl, r2
 8025bfe:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8025c02:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025c06:	434a      	muls	r2, r1
 8025c08:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8025c0c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025c10:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8025c14:	fb04 2406 	mla	r4, r4, r6, r2
 8025c18:	ea4a 0000 	orr.w	r0, sl, r0
 8025c1c:	fb09 4200 	mla	r2, r9, r0, r4
 8025c20:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8025c24:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8025c28:	9801      	ldr	r0, [sp, #4]
 8025c2a:	9903      	ldr	r1, [sp, #12]
 8025c2c:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8025c30:	ea44 0b0b 	orr.w	fp, r4, fp
 8025c34:	9c02      	ldr	r4, [sp, #8]
 8025c36:	8809      	ldrh	r1, [r1, #0]
 8025c38:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8025c3c:	1b00      	subs	r0, r0, r4
 8025c3e:	9c01      	ldr	r4, [sp, #4]
 8025c40:	eba4 0608 	sub.w	r6, r4, r8
 8025c44:	b2b6      	uxth	r6, r6
 8025c46:	b280      	uxth	r0, r0
 8025c48:	4373      	muls	r3, r6
 8025c4a:	fb0c 3300 	mla	r3, ip, r0, r3
 8025c4e:	9802      	ldr	r0, [sp, #8]
 8025c50:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8025c54:	fb00 3505 	mla	r5, r0, r5, r3
 8025c58:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8025c5c:	fb08 5707 	mla	r7, r8, r7, r5
 8025c60:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025c64:	120b      	asrs	r3, r1, #8
 8025c66:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025c6a:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8025c6e:	b2ff      	uxtb	r7, r7
 8025c70:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025c74:	10c8      	asrs	r0, r1, #3
 8025c76:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8025c7a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8025c7e:	00c9      	lsls	r1, r1, #3
 8025c80:	437b      	muls	r3, r7
 8025c82:	ea42 0e0e 	orr.w	lr, r2, lr
 8025c86:	b2c9      	uxtb	r1, r1
 8025c88:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8025c8c:	fa1f f28e 	uxth.w	r2, lr
 8025c90:	4378      	muls	r0, r7
 8025c92:	434f      	muls	r7, r1
 8025c94:	1c59      	adds	r1, r3, #1
 8025c96:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025c9a:	1213      	asrs	r3, r2, #8
 8025c9c:	f023 0307 	bic.w	r3, r3, #7
 8025ca0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025ca4:	1c41      	adds	r1, r0, #1
 8025ca6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8025caa:	10d1      	asrs	r1, r2, #3
 8025cac:	f021 0103 	bic.w	r1, r1, #3
 8025cb0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025cb4:	021b      	lsls	r3, r3, #8
 8025cb6:	00c9      	lsls	r1, r1, #3
 8025cb8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025cbc:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8025cc0:	430b      	orrs	r3, r1
 8025cc2:	1c79      	adds	r1, r7, #1
 8025cc4:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8025cc8:	00d2      	lsls	r2, r2, #3
 8025cca:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8025cce:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025cd2:	431a      	orrs	r2, r3
 8025cd4:	9b03      	ldr	r3, [sp, #12]
 8025cd6:	801a      	strh	r2, [r3, #0]
 8025cd8:	b005      	add	sp, #20
 8025cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025cde:	f04f 0c00 	mov.w	ip, #0
 8025ce2:	4664      	mov	r4, ip
 8025ce4:	e6e5      	b.n	8025ab2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8025ce6:	2300      	movs	r3, #0
 8025ce8:	469c      	mov	ip, r3
 8025cea:	461a      	mov	r2, r3
 8025cec:	461c      	mov	r4, r3
 8025cee:	e707      	b.n	8025b00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8025cf0:	2300      	movs	r3, #0
 8025cf2:	461a      	mov	r2, r3
 8025cf4:	e704      	b.n	8025b00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8025cf6:	460b      	mov	r3, r1
 8025cf8:	460a      	mov	r2, r1
 8025cfa:	e701      	b.n	8025b00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8025cfc:	2500      	movs	r5, #0
 8025cfe:	46ab      	mov	fp, r5
 8025d00:	e72f      	b.n	8025b62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8025d02:	2700      	movs	r7, #0
 8025d04:	463d      	mov	r5, r7
 8025d06:	4638      	mov	r0, r7
 8025d08:	46bb      	mov	fp, r7
 8025d0a:	e754      	b.n	8025bb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8025d0c:	4677      	mov	r7, lr
 8025d0e:	4675      	mov	r5, lr
 8025d10:	4670      	mov	r0, lr
 8025d12:	46f3      	mov	fp, lr
 8025d14:	e74f      	b.n	8025bb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8025d16:	2700      	movs	r7, #0
 8025d18:	4638      	mov	r0, r7
 8025d1a:	e74c      	b.n	8025bb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8025d1c:	460f      	mov	r7, r1
 8025d1e:	4608      	mov	r0, r1
 8025d20:	e749      	b.n	8025bb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08025d24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d28:	b093      	sub	sp, #76	@ 0x4c
 8025d2a:	9210      	str	r2, [sp, #64]	@ 0x40
 8025d2c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8025d2e:	910e      	str	r1, [sp, #56]	@ 0x38
 8025d30:	9306      	str	r3, [sp, #24]
 8025d32:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8025d36:	9011      	str	r0, [sp, #68]	@ 0x44
 8025d38:	6850      	ldr	r0, [r2, #4]
 8025d3a:	6812      	ldr	r2, [r2, #0]
 8025d3c:	fb00 1303 	mla	r3, r0, r3, r1
 8025d40:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025d44:	9307      	str	r3, [sp, #28]
 8025d46:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025d48:	681b      	ldr	r3, [r3, #0]
 8025d4a:	9308      	str	r3, [sp, #32]
 8025d4c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025d4e:	685b      	ldr	r3, [r3, #4]
 8025d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8025d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025d54:	2b00      	cmp	r3, #0
 8025d56:	dc03      	bgt.n	8025d60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025d58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025d5a:	2b00      	cmp	r3, #0
 8025d5c:	f340 83b4 	ble.w	80264c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8025d60:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025d62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025d66:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025d6a:	1e48      	subs	r0, r1, #1
 8025d6c:	1e55      	subs	r5, r2, #1
 8025d6e:	9b06      	ldr	r3, [sp, #24]
 8025d70:	2b00      	cmp	r3, #0
 8025d72:	f340 8163 	ble.w	802603c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8025d76:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8025d78:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025d7a:	1436      	asrs	r6, r6, #16
 8025d7c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025d80:	d406      	bmi.n	8025d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025d82:	4286      	cmp	r6, r0
 8025d84:	da04      	bge.n	8025d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025d86:	2b00      	cmp	r3, #0
 8025d88:	db02      	blt.n	8025d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025d8a:	42ab      	cmp	r3, r5
 8025d8c:	f2c0 8157 	blt.w	802603e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025d90:	3601      	adds	r6, #1
 8025d92:	f100 8144 	bmi.w	802601e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8025d96:	42b1      	cmp	r1, r6
 8025d98:	f2c0 8141 	blt.w	802601e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8025d9c:	3301      	adds	r3, #1
 8025d9e:	f100 813e 	bmi.w	802601e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8025da2:	429a      	cmp	r2, r3
 8025da4:	f2c0 813b 	blt.w	802601e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8025da8:	9b06      	ldr	r3, [sp, #24]
 8025daa:	9f07      	ldr	r7, [sp, #28]
 8025dac:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025dae:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8025db2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025db4:	2b00      	cmp	r3, #0
 8025db6:	f340 8164 	ble.w	8026082 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8025dba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025dbc:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8025dbe:	1418      	asrs	r0, r3, #16
 8025dc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025dc2:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025dc6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025dc8:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025dcc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025dce:	142d      	asrs	r5, r5, #16
 8025dd0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025dd4:	f100 81ee 	bmi.w	80261b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8025dd8:	f102 3eff 	add.w	lr, r2, #4294967295
 8025ddc:	4575      	cmp	r5, lr
 8025dde:	f280 81e9 	bge.w	80261b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8025de2:	2800      	cmp	r0, #0
 8025de4:	f2c0 81e6 	blt.w	80261b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8025de8:	f103 3eff 	add.w	lr, r3, #4294967295
 8025dec:	4570      	cmp	r0, lr
 8025dee:	f280 81e1 	bge.w	80261b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8025df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025df4:	b212      	sxth	r2, r2
 8025df6:	fb00 5002 	mla	r0, r0, r2, r5
 8025dfa:	fa1f fe81 	uxth.w	lr, r1
 8025dfe:	eb03 0a00 	add.w	sl, r3, r0
 8025e02:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025e06:	f813 9000 	ldrb.w	r9, [r3, r0]
 8025e0a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025e0e:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8025e12:	b29b      	uxth	r3, r3
 8025e14:	f1bc 0f00 	cmp.w	ip, #0
 8025e18:	f000 8179 	beq.w	802610e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8025e1c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025e20:	940a      	str	r4, [sp, #40]	@ 0x28
 8025e22:	eb0a 0b02 	add.w	fp, sl, r2
 8025e26:	fa1f fa8c 	uxth.w	sl, ip
 8025e2a:	fb0a fe0e 	mul.w	lr, sl, lr
 8025e2e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025e32:	fa1f fa8a 	uxth.w	sl, sl
 8025e36:	eba5 050e 	sub.w	r5, r5, lr
 8025e3a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025e3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025e40:	eba3 030a 	sub.w	r3, r3, sl
 8025e44:	b2ad      	uxth	r5, r5
 8025e46:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025e48:	b29b      	uxth	r3, r3
 8025e4a:	fb08 f505 	mul.w	r5, r8, r5
 8025e4e:	fb09 5303 	mla	r3, r9, r3, r5
 8025e52:	fb0a 3304 	mla	r3, sl, r4, r3
 8025e56:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025e58:	fb0e 3304 	mla	r3, lr, r4, r3
 8025e5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025e60:	2b00      	cmp	r3, #0
 8025e62:	f000 80cf 	beq.w	8026004 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8025e66:	9c08      	ldr	r4, [sp, #32]
 8025e68:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8025e6c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025e70:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025e74:	f000 8150 	beq.w	8026118 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8025e78:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8025e7c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025e80:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025e84:	fb09 f000 	mul.w	r0, r9, r0
 8025e88:	fb0a fe0e 	mul.w	lr, sl, lr
 8025e8c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8025e90:	f100 0b20 	add.w	fp, r0, #32
 8025e94:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8025e98:	44ce      	add	lr, r9
 8025e9a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025e9e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025ea2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025ea6:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8025eaa:	ea4e 0909 	orr.w	r9, lr, r9
 8025eae:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8025eb2:	8868      	ldrh	r0, [r5, #2]
 8025eb4:	d019      	beq.n	8025eea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025eb6:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8025eba:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025ebe:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025ec2:	fb08 f800 	mul.w	r8, r8, r0
 8025ec6:	fb0a fe0e 	mul.w	lr, sl, lr
 8025eca:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025ece:	f108 0b20 	add.w	fp, r8, #32
 8025ed2:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8025ed6:	4486      	add	lr, r0
 8025ed8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025edc:	0a00      	lsrs	r0, r0, #8
 8025ede:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025ee2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025ee6:	ea4e 0000 	orr.w	r0, lr, r0
 8025eea:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025eee:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025ef2:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8025ef6:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8025efa:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025efe:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8025f02:	ea4e 0909 	orr.w	r9, lr, r9
 8025f06:	ea4a 0000 	orr.w	r0, sl, r0
 8025f0a:	f1bc 0f00 	cmp.w	ip, #0
 8025f0e:	f000 8105 	beq.w	802611c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025f12:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8025f16:	3a01      	subs	r2, #1
 8025f18:	0052      	lsls	r2, r2, #1
 8025f1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025f1c:	3202      	adds	r2, #2
 8025f1e:	2cff      	cmp	r4, #255	@ 0xff
 8025f20:	eb05 0e02 	add.w	lr, r5, r2
 8025f24:	5aaa      	ldrh	r2, [r5, r2]
 8025f26:	d018      	beq.n	8025f5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8025f28:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8025f2c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025f30:	fb04 fa02 	mul.w	sl, r4, r2
 8025f34:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025f38:	fb08 f805 	mul.w	r8, r8, r5
 8025f3c:	f10a 0520 	add.w	r5, sl, #32
 8025f40:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8025f44:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025f48:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025f4c:	4442      	add	r2, r8
 8025f4e:	0a2d      	lsrs	r5, r5, #8
 8025f50:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025f54:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025f58:	432a      	orrs	r2, r5
 8025f5a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025f5c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025f60:	2cff      	cmp	r4, #255	@ 0xff
 8025f62:	d01a      	beq.n	8025f9a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8025f64:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8025f68:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025f6c:	fb04 fa05 	mul.w	sl, r4, r5
 8025f70:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025f74:	fb08 f80e 	mul.w	r8, r8, lr
 8025f78:	f10a 0e20 	add.w	lr, sl, #32
 8025f7c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025f80:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025f84:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025f88:	4445      	add	r5, r8
 8025f8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f8e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025f92:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8025f96:	ea45 050e 	orr.w	r5, r5, lr
 8025f9a:	fb1c fe01 	smulbb	lr, ip, r1
 8025f9e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025fa2:	f1cc 0810 	rsb	r8, ip, #16
 8025fa6:	eba8 0801 	sub.w	r8, r8, r1
 8025faa:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025fae:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025fb2:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025fb6:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8025fba:	4341      	muls	r1, r0
 8025fbc:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025fc0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025fc4:	ea4a 0202 	orr.w	r2, sl, r2
 8025fc8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025fcc:	fb09 1108 	mla	r1, r9, r8, r1
 8025fd0:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8025fd4:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8025fd8:	fb0c 1102 	mla	r1, ip, r2, r1
 8025fdc:	ea4b 0505 	orr.w	r5, fp, r5
 8025fe0:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025fe4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025fe8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025fec:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025ff0:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8025ff4:	ea42 0e0e 	orr.w	lr, r2, lr
 8025ff8:	fa1f f28e 	uxth.w	r2, lr
 8025ffc:	2bff      	cmp	r3, #255	@ 0xff
 8025ffe:	f040 80a1 	bne.w	8026144 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8026002:	803a      	strh	r2, [r7, #0]
 8026004:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026006:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8026008:	4413      	add	r3, r2
 802600a:	931d      	str	r3, [sp, #116]	@ 0x74
 802600c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802600e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026010:	441a      	add	r2, r3
 8026012:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026014:	921e      	str	r2, [sp, #120]	@ 0x78
 8026016:	3b01      	subs	r3, #1
 8026018:	3702      	adds	r7, #2
 802601a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802601c:	e6c9      	b.n	8025db2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802601e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026020:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8026022:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8026024:	4433      	add	r3, r6
 8026026:	931d      	str	r3, [sp, #116]	@ 0x74
 8026028:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802602a:	441c      	add	r4, r3
 802602c:	9b06      	ldr	r3, [sp, #24]
 802602e:	941e      	str	r4, [sp, #120]	@ 0x78
 8026030:	3b01      	subs	r3, #1
 8026032:	9306      	str	r3, [sp, #24]
 8026034:	9b07      	ldr	r3, [sp, #28]
 8026036:	3302      	adds	r3, #2
 8026038:	9307      	str	r3, [sp, #28]
 802603a:	e698      	b.n	8025d6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802603c:	d028      	beq.n	8026090 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802603e:	9b06      	ldr	r3, [sp, #24]
 8026040:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8026042:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8026044:	3b01      	subs	r3, #1
 8026046:	fb00 5003 	mla	r0, r0, r3, r5
 802604a:	1400      	asrs	r0, r0, #16
 802604c:	f53f aeac 	bmi.w	8025da8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026050:	3901      	subs	r1, #1
 8026052:	4288      	cmp	r0, r1
 8026054:	f6bf aea8 	bge.w	8025da8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026058:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802605a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802605c:	fb01 0303 	mla	r3, r1, r3, r0
 8026060:	141b      	asrs	r3, r3, #16
 8026062:	f53f aea1 	bmi.w	8025da8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026066:	3a01      	subs	r2, #1
 8026068:	4293      	cmp	r3, r2
 802606a:	f6bf ae9d 	bge.w	8025da8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802606e:	9b06      	ldr	r3, [sp, #24]
 8026070:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8026074:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026076:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 802607a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802607c:	2b00      	cmp	r3, #0
 802607e:	f300 80b6 	bgt.w	80261ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 8026082:	9b06      	ldr	r3, [sp, #24]
 8026084:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026088:	9b07      	ldr	r3, [sp, #28]
 802608a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802608e:	9307      	str	r3, [sp, #28]
 8026090:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026092:	2b00      	cmp	r3, #0
 8026094:	f340 8218 	ble.w	80264c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8026098:	ee30 0a04 	vadd.f32	s0, s0, s8
 802609c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80260a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80260a4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80260a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80260aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80260ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80260b2:	eef0 6a62 	vmov.f32	s13, s5
 80260b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80260ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80260be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80260c2:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 80260c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80260ca:	eef0 6a43 	vmov.f32	s13, s6
 80260ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80260d2:	ee12 2a90 	vmov	r2, s5
 80260d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80260da:	fb92 f3f3 	sdiv	r3, r2, r3
 80260de:	ee13 2a10 	vmov	r2, s6
 80260e2:	931f      	str	r3, [sp, #124]	@ 0x7c
 80260e4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80260e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80260ea:	9320      	str	r3, [sp, #128]	@ 0x80
 80260ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80260ee:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80260f0:	3b01      	subs	r3, #1
 80260f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80260f6:	930e      	str	r3, [sp, #56]	@ 0x38
 80260f8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80260fa:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 80260fe:	bf08      	it	eq
 8026100:	4613      	moveq	r3, r2
 8026102:	9306      	str	r3, [sp, #24]
 8026104:	eeb0 3a67 	vmov.f32	s6, s15
 8026108:	eef0 2a47 	vmov.f32	s5, s14
 802610c:	e621      	b.n	8025d52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802610e:	fb08 f505 	mul.w	r5, r8, r5
 8026112:	fb09 5303 	mla	r3, r9, r3, r5
 8026116:	e6a1      	b.n	8025e5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8026118:	4681      	mov	r9, r0
 802611a:	e6c8      	b.n	8025eae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802611c:	f1c1 0210 	rsb	r2, r1, #16
 8026120:	4341      	muls	r1, r0
 8026122:	fb09 1902 	mla	r9, r9, r2, r1
 8026126:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802612a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802612e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026132:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026136:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802613a:	ea42 0909 	orr.w	r9, r2, r9
 802613e:	fa1f f289 	uxth.w	r2, r9
 8026142:	e75b      	b.n	8025ffc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026144:	f8b7 c000 	ldrh.w	ip, [r7]
 8026148:	43db      	mvns	r3, r3
 802614a:	ea4f 202c 	mov.w	r0, ip, asr #8
 802614e:	fa5f fe83 	uxtb.w	lr, r3
 8026152:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026156:	fb00 f00e 	mul.w	r0, r0, lr
 802615a:	1c41      	adds	r1, r0, #1
 802615c:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026160:	1211      	asrs	r1, r2, #8
 8026162:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8026166:	f021 0107 	bic.w	r1, r1, #7
 802616a:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802616e:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8026172:	48d7      	ldr	r0, [pc, #860]	@ (80264d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8026174:	fb05 f50e 	mul.w	r5, r5, lr
 8026178:	b2c9      	uxtb	r1, r1
 802617a:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 802617e:	1c69      	adds	r1, r5, #1
 8026180:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8026184:	10d1      	asrs	r1, r2, #3
 8026186:	f021 0103 	bic.w	r1, r1, #3
 802618a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802618e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8026192:	b2db      	uxtb	r3, r3
 8026194:	00c9      	lsls	r1, r1, #3
 8026196:	fb03 f30e 	mul.w	r3, r3, lr
 802619a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802619e:	4301      	orrs	r1, r0
 80261a0:	1c58      	adds	r0, r3, #1
 80261a2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80261a6:	00d2      	lsls	r2, r2, #3
 80261a8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80261ac:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80261b0:	430a      	orrs	r2, r1
 80261b2:	e726      	b.n	8026002 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 80261b4:	f115 0e01 	adds.w	lr, r5, #1
 80261b8:	f53f af24 	bmi.w	8026004 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80261bc:	4572      	cmp	r2, lr
 80261be:	f6ff af21 	blt.w	8026004 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80261c2:	f110 0e01 	adds.w	lr, r0, #1
 80261c6:	f53f af1d 	bmi.w	8026004 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80261ca:	4573      	cmp	r3, lr
 80261cc:	f6ff af1a 	blt.w	8026004 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80261d0:	b21b      	sxth	r3, r3
 80261d2:	b212      	sxth	r2, r2
 80261d4:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80261d8:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80261dc:	9301      	str	r3, [sp, #4]
 80261de:	9200      	str	r2, [sp, #0]
 80261e0:	4639      	mov	r1, r7
 80261e2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80261e6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80261e8:	f7ff fc24 	bl	8025a34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80261ec:	e70a      	b.n	8026004 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80261ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80261f0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80261f4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80261f6:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80261fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80261fc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026200:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8026202:	141f      	asrs	r7, r3, #16
 8026204:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026206:	141b      	asrs	r3, r3, #16
 8026208:	fb01 3707 	mla	r7, r1, r7, r3
 802620c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802620e:	fa1f fc82 	uxth.w	ip, r2
 8026212:	eb03 0a07 	add.w	sl, r3, r7
 8026216:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802621a:	f813 9007 	ldrb.w	r9, [r3, r7]
 802621e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026222:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8026226:	b29b      	uxth	r3, r3
 8026228:	2d00      	cmp	r5, #0
 802622a:	f000 80fe 	beq.w	802642a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 802622e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026232:	940c      	str	r4, [sp, #48]	@ 0x30
 8026234:	eb0a 0b01 	add.w	fp, sl, r1
 8026238:	fa1f fa85 	uxth.w	sl, r5
 802623c:	fb0a fc0c 	mul.w	ip, sl, ip
 8026240:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026244:	fa1f fa8a 	uxth.w	sl, sl
 8026248:	eba0 000c 	sub.w	r0, r0, ip
 802624c:	eba3 030a 	sub.w	r3, r3, sl
 8026250:	b280      	uxth	r0, r0
 8026252:	fb08 f000 	mul.w	r0, r8, r0
 8026256:	b29b      	uxth	r3, r3
 8026258:	fb09 0303 	mla	r3, r9, r3, r0
 802625c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802625e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026262:	940d      	str	r4, [sp, #52]	@ 0x34
 8026264:	fb0a 3300 	mla	r3, sl, r0, r3
 8026268:	fb0c 3304 	mla	r3, ip, r4, r3
 802626c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026270:	2b00      	cmp	r3, #0
 8026272:	f000 80cc 	beq.w	802640e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8026276:	9808      	ldr	r0, [sp, #32]
 8026278:	9c08      	ldr	r4, [sp, #32]
 802627a:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802627e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026282:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026286:	f000 80d5 	beq.w	8026434 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802628a:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 802628e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026292:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8026296:	fb09 f707 	mul.w	r7, r9, r7
 802629a:	fb0a fc0c 	mul.w	ip, sl, ip
 802629e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80262a2:	f107 0b20 	add.w	fp, r7, #32
 80262a6:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80262aa:	44cc      	add	ip, r9
 80262ac:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80262b0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80262b4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80262b8:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80262bc:	ea4c 0909 	orr.w	r9, ip, r9
 80262c0:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80262c4:	8847      	ldrh	r7, [r0, #2]
 80262c6:	d019      	beq.n	80262fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 80262c8:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 80262cc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80262d0:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80262d4:	fb08 f807 	mul.w	r8, r8, r7
 80262d8:	fb0a fc0c 	mul.w	ip, sl, ip
 80262dc:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80262e0:	f108 0b20 	add.w	fp, r8, #32
 80262e4:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80262e8:	44bc      	add	ip, r7
 80262ea:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80262ee:	0a3f      	lsrs	r7, r7, #8
 80262f0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80262f4:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80262f8:	ea4c 0707 	orr.w	r7, ip, r7
 80262fc:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026300:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026304:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8026308:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802630c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026310:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8026314:	ea4c 0909 	orr.w	r9, ip, r9
 8026318:	ea4a 0707 	orr.w	r7, sl, r7
 802631c:	2d00      	cmp	r5, #0
 802631e:	f000 808b 	beq.w	8026438 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8026322:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8026326:	3901      	subs	r1, #1
 8026328:	0049      	lsls	r1, r1, #1
 802632a:	3102      	adds	r1, #2
 802632c:	eb00 0c01 	add.w	ip, r0, r1
 8026330:	5a41      	ldrh	r1, [r0, r1]
 8026332:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8026334:	28ff      	cmp	r0, #255	@ 0xff
 8026336:	d019      	beq.n	802636c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 8026338:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802633a:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 802633e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026342:	fb04 fa01 	mul.w	sl, r4, r1
 8026346:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802634a:	fb08 f800 	mul.w	r8, r8, r0
 802634e:	f10a 0020 	add.w	r0, sl, #32
 8026352:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026356:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802635a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802635e:	4441      	add	r1, r8
 8026360:	0a00      	lsrs	r0, r0, #8
 8026362:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026366:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802636a:	4301      	orrs	r1, r0
 802636c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802636e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8026372:	2cff      	cmp	r4, #255	@ 0xff
 8026374:	d01a      	beq.n	80263ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 8026376:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 802637a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802637e:	fb04 fa00 	mul.w	sl, r4, r0
 8026382:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026386:	fb08 f80c 	mul.w	r8, r8, ip
 802638a:	f10a 0c20 	add.w	ip, sl, #32
 802638e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8026392:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026396:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802639a:	4440      	add	r0, r8
 802639c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80263a0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80263a4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80263a8:	ea40 000c 	orr.w	r0, r0, ip
 80263ac:	fb15 fc02 	smulbb	ip, r5, r2
 80263b0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80263b4:	f1c5 0810 	rsb	r8, r5, #16
 80263b8:	eba8 0802 	sub.w	r8, r8, r2
 80263bc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80263c0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80263c4:	437a      	muls	r2, r7
 80263c6:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80263ca:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80263ce:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80263d2:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80263d6:	fb09 2208 	mla	r2, r9, r8, r2
 80263da:	ea4a 0101 	orr.w	r1, sl, r1
 80263de:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80263e2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80263e6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80263ea:	fb05 2201 	mla	r2, r5, r1, r2
 80263ee:	ea4b 0000 	orr.w	r0, fp, r0
 80263f2:	fb0c 2200 	mla	r2, ip, r0, r2
 80263f6:	0d57      	lsrs	r7, r2, #21
 80263f8:	0952      	lsrs	r2, r2, #5
 80263fa:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80263fe:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026402:	433a      	orrs	r2, r7
 8026404:	2bff      	cmp	r3, #255	@ 0xff
 8026406:	b292      	uxth	r2, r2
 8026408:	d127      	bne.n	802645a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 802640a:	f8ae 2000 	strh.w	r2, [lr]
 802640e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026410:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8026412:	4413      	add	r3, r2
 8026414:	931d      	str	r3, [sp, #116]	@ 0x74
 8026416:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8026418:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802641a:	441a      	add	r2, r3
 802641c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802641e:	921e      	str	r2, [sp, #120]	@ 0x78
 8026420:	3b01      	subs	r3, #1
 8026422:	f10e 0e02 	add.w	lr, lr, #2
 8026426:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026428:	e627      	b.n	802607a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802642a:	fb08 f000 	mul.w	r0, r8, r0
 802642e:	fb09 0303 	mla	r3, r9, r3, r0
 8026432:	e71b      	b.n	802626c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8026434:	46b9      	mov	r9, r7
 8026436:	e743      	b.n	80262c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8026438:	f1c2 0110 	rsb	r1, r2, #16
 802643c:	437a      	muls	r2, r7
 802643e:	fb09 2901 	mla	r9, r9, r1, r2
 8026442:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026446:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802644a:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802644e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026452:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026456:	4302      	orrs	r2, r0
 8026458:	e7d4      	b.n	8026404 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 802645a:	f8be 7000 	ldrh.w	r7, [lr]
 802645e:	4c1c      	ldr	r4, [pc, #112]	@ (80264d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8026460:	43db      	mvns	r3, r3
 8026462:	1238      	asrs	r0, r7, #8
 8026464:	fa5f fc83 	uxtb.w	ip, r3
 8026468:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802646c:	10fd      	asrs	r5, r7, #3
 802646e:	fb00 f00c 	mul.w	r0, r0, ip
 8026472:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8026476:	fb05 f10c 	mul.w	r1, r5, ip
 802647a:	1c45      	adds	r5, r0, #1
 802647c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026480:	1215      	asrs	r5, r2, #8
 8026482:	f025 0507 	bic.w	r5, r5, #7
 8026486:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802648a:	1c4d      	adds	r5, r1, #1
 802648c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8026490:	10d1      	asrs	r1, r2, #3
 8026492:	f021 0103 	bic.w	r1, r1, #3
 8026496:	00fb      	lsls	r3, r7, #3
 8026498:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802649c:	b2db      	uxtb	r3, r3
 802649e:	b2c0      	uxtb	r0, r0
 80264a0:	00c9      	lsls	r1, r1, #3
 80264a2:	fb03 f30c 	mul.w	r3, r3, ip
 80264a6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80264aa:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80264ae:	4308      	orrs	r0, r1
 80264b0:	1c59      	adds	r1, r3, #1
 80264b2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80264b6:	00d2      	lsls	r2, r2, #3
 80264b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80264bc:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80264c0:	4318      	orrs	r0, r3
 80264c2:	f8ae 0000 	strh.w	r0, [lr]
 80264c6:	e7a2      	b.n	802640e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 80264c8:	b013      	add	sp, #76	@ 0x4c
 80264ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80264ce:	bf00      	nop
 80264d0:	fffff800 	.word	0xfffff800

080264d4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80264d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80264d8:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 80264dc:	fb05 4c03 	mla	ip, r5, r3, r4
 80264e0:	2d00      	cmp	r5, #0
 80264e2:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80264e6:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 80264ea:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 80264ee:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 80264f2:	8808      	ldrh	r0, [r1, #0]
 80264f4:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80264f8:	f2c0 80a7 	blt.w	802664a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80264fc:	45aa      	cmp	sl, r5
 80264fe:	f340 80a4 	ble.w	802664a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8026502:	2c00      	cmp	r4, #0
 8026504:	f2c0 809f 	blt.w	8026646 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8026508:	42a3      	cmp	r3, r4
 802650a:	f340 809c 	ble.w	8026646 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802650e:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8026512:	1c62      	adds	r2, r4, #1
 8026514:	f100 809c 	bmi.w	8026650 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026518:	4293      	cmp	r3, r2
 802651a:	f340 8099 	ble.w	8026650 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802651e:	f1b9 0f00 	cmp.w	r9, #0
 8026522:	f000 8095 	beq.w	8026650 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026526:	f8be c002 	ldrh.w	ip, [lr, #2]
 802652a:	3501      	adds	r5, #1
 802652c:	f100 8094 	bmi.w	8026658 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026530:	45aa      	cmp	sl, r5
 8026532:	f340 8091 	ble.w	8026658 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026536:	2f00      	cmp	r7, #0
 8026538:	f000 808e 	beq.w	8026658 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802653c:	2c00      	cmp	r4, #0
 802653e:	f2c0 8089 	blt.w	8026654 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8026542:	42a3      	cmp	r3, r4
 8026544:	f340 8086 	ble.w	8026654 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8026548:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 802654c:	3401      	adds	r4, #1
 802654e:	f100 8086 	bmi.w	802665e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026552:	42a3      	cmp	r3, r4
 8026554:	f340 8083 	ble.w	802665e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026558:	f1b9 0f00 	cmp.w	r9, #0
 802655c:	d07f      	beq.n	802665e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802655e:	3301      	adds	r3, #1
 8026560:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8026564:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8026568:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 802656c:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8026570:	fb19 fe07 	smulbb	lr, r9, r7
 8026574:	ea44 0808 	orr.w	r8, r4, r8
 8026578:	ea4f 440c 	mov.w	r4, ip, lsl #16
 802657c:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8026580:	f1c7 0210 	rsb	r2, r7, #16
 8026584:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8026588:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802658c:	ea44 0c0c 	orr.w	ip, r4, ip
 8026590:	eba2 0209 	sub.w	r2, r2, r9
 8026594:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8026598:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 802659c:	fb04 f40c 	mul.w	r4, r4, ip
 80265a0:	fb02 4808 	mla	r8, r2, r8, r4
 80265a4:	041a      	lsls	r2, r3, #16
 80265a6:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80265aa:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80265ae:	4313      	orrs	r3, r2
 80265b0:	042a      	lsls	r2, r5, #16
 80265b2:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80265b6:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80265ba:	fb0e 8303 	mla	r3, lr, r3, r8
 80265be:	432a      	orrs	r2, r5
 80265c0:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80265c4:	fb07 3202 	mla	r2, r7, r2, r3
 80265c8:	0d53      	lsrs	r3, r2, #21
 80265ca:	0952      	lsrs	r2, r2, #5
 80265cc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80265d0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80265d4:	431a      	orrs	r2, r3
 80265d6:	b293      	uxth	r3, r2
 80265d8:	b2b4      	uxth	r4, r6
 80265da:	1202      	asrs	r2, r0, #8
 80265dc:	43f6      	mvns	r6, r6
 80265de:	b2f6      	uxtb	r6, r6
 80265e0:	121d      	asrs	r5, r3, #8
 80265e2:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80265e6:	fb12 f206 	smulbb	r2, r2, r6
 80265ea:	10c7      	asrs	r7, r0, #3
 80265ec:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80265f0:	00c0      	lsls	r0, r0, #3
 80265f2:	fb05 2504 	mla	r5, r5, r4, r2
 80265f6:	b2c0      	uxtb	r0, r0
 80265f8:	10da      	asrs	r2, r3, #3
 80265fa:	00db      	lsls	r3, r3, #3
 80265fc:	b2db      	uxtb	r3, r3
 80265fe:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8026602:	fb10 f006 	smulbb	r0, r0, r6
 8026606:	b2ad      	uxth	r5, r5
 8026608:	fb03 0004 	mla	r0, r3, r4, r0
 802660c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8026610:	fb17 f706 	smulbb	r7, r7, r6
 8026614:	b280      	uxth	r0, r0
 8026616:	1c6b      	adds	r3, r5, #1
 8026618:	fb02 7204 	mla	r2, r2, r4, r7
 802661c:	b292      	uxth	r2, r2
 802661e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026622:	1c43      	adds	r3, r0, #1
 8026624:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026628:	1c50      	adds	r0, r2, #1
 802662a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802662e:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8026632:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026636:	0952      	lsrs	r2, r2, #5
 8026638:	432b      	orrs	r3, r5
 802663a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802663e:	4313      	orrs	r3, r2
 8026640:	800b      	strh	r3, [r1, #0]
 8026642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026646:	4680      	mov	r8, r0
 8026648:	e763      	b.n	8026512 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 802664a:	4684      	mov	ip, r0
 802664c:	4680      	mov	r8, r0
 802664e:	e76c      	b.n	802652a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8026650:	4684      	mov	ip, r0
 8026652:	e76a      	b.n	802652a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8026654:	4605      	mov	r5, r0
 8026656:	e779      	b.n	802654c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8026658:	4603      	mov	r3, r0
 802665a:	4605      	mov	r5, r0
 802665c:	e782      	b.n	8026564 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 802665e:	4603      	mov	r3, r0
 8026660:	e780      	b.n	8026564 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08026662 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026666:	b093      	sub	sp, #76	@ 0x4c
 8026668:	461d      	mov	r5, r3
 802666a:	9210      	str	r2, [sp, #64]	@ 0x40
 802666c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802666e:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8026672:	920b      	str	r2, [sp, #44]	@ 0x2c
 8026674:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 8026678:	910a      	str	r1, [sp, #40]	@ 0x28
 802667a:	6859      	ldr	r1, [r3, #4]
 802667c:	681b      	ldr	r3, [r3, #0]
 802667e:	9011      	str	r0, [sp, #68]	@ 0x44
 8026680:	fb01 2707 	mla	r7, r1, r7, r2
 8026684:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8026688:	9307      	str	r3, [sp, #28]
 802668a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802668c:	681b      	ldr	r3, [r3, #0]
 802668e:	9309      	str	r3, [sp, #36]	@ 0x24
 8026690:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026692:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8026696:	43db      	mvns	r3, r3
 8026698:	b2db      	uxtb	r3, r3
 802669a:	9308      	str	r3, [sp, #32]
 802669c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802669e:	2b00      	cmp	r3, #0
 80266a0:	dc03      	bgt.n	80266aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80266a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80266a4:	2b00      	cmp	r3, #0
 80266a6:	f340 8203 	ble.w	8026ab0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80266aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80266ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80266b0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80266b4:	1e48      	subs	r0, r1, #1
 80266b6:	f102 3cff 	add.w	ip, r2, #4294967295
 80266ba:	2d00      	cmp	r5, #0
 80266bc:	f340 80da 	ble.w	8026874 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80266c0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80266c4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80266c8:	d406      	bmi.n	80266d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80266ca:	4586      	cmp	lr, r0
 80266cc:	da04      	bge.n	80266d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80266ce:	2b00      	cmp	r3, #0
 80266d0:	db02      	blt.n	80266d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80266d2:	4563      	cmp	r3, ip
 80266d4:	f2c0 80cf 	blt.w	8026876 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80266d8:	f11e 0e01 	adds.w	lr, lr, #1
 80266dc:	f100 80c1 	bmi.w	8026862 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80266e0:	4571      	cmp	r1, lr
 80266e2:	f2c0 80be 	blt.w	8026862 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80266e6:	3301      	adds	r3, #1
 80266e8:	f100 80bb 	bmi.w	8026862 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80266ec:	429a      	cmp	r2, r3
 80266ee:	f2c0 80b8 	blt.w	8026862 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80266f2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80266f6:	46a9      	mov	r9, r5
 80266f8:	f1b9 0f00 	cmp.w	r9, #0
 80266fc:	f340 80d8 	ble.w	80268b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8026700:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026702:	1421      	asrs	r1, r4, #16
 8026704:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026708:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802670c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026710:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026714:	f100 8111 	bmi.w	802693a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026718:	f10e 3aff 	add.w	sl, lr, #4294967295
 802671c:	4551      	cmp	r1, sl
 802671e:	f280 810c 	bge.w	802693a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026722:	2800      	cmp	r0, #0
 8026724:	f2c0 8109 	blt.w	802693a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026728:	f103 3aff 	add.w	sl, r3, #4294967295
 802672c:	4550      	cmp	r0, sl
 802672e:	f280 8104 	bge.w	802693a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026732:	fa0f f38e 	sxth.w	r3, lr
 8026736:	fb00 1103 	mla	r1, r0, r3, r1
 802673a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802673c:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8026740:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8026744:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8026748:	f1bc 0f00 	cmp.w	ip, #0
 802674c:	d007      	beq.n	802675e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 802674e:	005b      	lsls	r3, r3, #1
 8026750:	eb0a 0003 	add.w	r0, sl, r3
 8026754:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8026758:	930c      	str	r3, [sp, #48]	@ 0x30
 802675a:	8843      	ldrh	r3, [r0, #2]
 802675c:	930d      	str	r3, [sp, #52]	@ 0x34
 802675e:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8026762:	fb12 f30c 	smulbb	r3, r2, ip
 8026766:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802676a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802676e:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8026772:	10db      	asrs	r3, r3, #3
 8026774:	ea40 000e 	orr.w	r0, r0, lr
 8026778:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802677c:	f1cc 0e10 	rsb	lr, ip, #16
 8026780:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8026784:	ebae 0e02 	sub.w	lr, lr, r2
 8026788:	ea4a 0101 	orr.w	r1, sl, r1
 802678c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026790:	4351      	muls	r1, r2
 8026792:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026794:	9f08      	ldr	r7, [sp, #32]
 8026796:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802679a:	fb0e 1e00 	mla	lr, lr, r0, r1
 802679e:	0410      	lsls	r0, r2, #16
 80267a0:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80267a4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80267a8:	4310      	orrs	r0, r2
 80267aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80267ac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80267ae:	0412      	lsls	r2, r2, #16
 80267b0:	fb03 e000 	mla	r0, r3, r0, lr
 80267b4:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80267b8:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 80267bc:	ea42 020e 	orr.w	r2, r2, lr
 80267c0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80267c4:	fb03 0302 	mla	r3, r3, r2, r0
 80267c8:	0d5a      	lsrs	r2, r3, #21
 80267ca:	095b      	lsrs	r3, r3, #5
 80267cc:	f8b8 0000 	ldrh.w	r0, [r8]
 80267d0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80267d4:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80267d8:	4313      	orrs	r3, r2
 80267da:	b29b      	uxth	r3, r3
 80267dc:	1201      	asrs	r1, r0, #8
 80267de:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80267e2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80267e6:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80267ea:	fb11 f107 	smulbb	r1, r1, r7
 80267ee:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80267f2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80267f6:	00c0      	lsls	r0, r0, #3
 80267f8:	fb0c 1c02 	mla	ip, ip, r2, r1
 80267fc:	b2c0      	uxtb	r0, r0
 80267fe:	10d9      	asrs	r1, r3, #3
 8026800:	00db      	lsls	r3, r3, #3
 8026802:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8026806:	b2db      	uxtb	r3, r3
 8026808:	fb10 f007 	smulbb	r0, r0, r7
 802680c:	fa1f fc8c 	uxth.w	ip, ip
 8026810:	fb03 0302 	mla	r3, r3, r2, r0
 8026814:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026818:	fb1e fe07 	smulbb	lr, lr, r7
 802681c:	fb01 e102 	mla	r1, r1, r2, lr
 8026820:	b29a      	uxth	r2, r3
 8026822:	f10c 0301 	add.w	r3, ip, #1
 8026826:	b289      	uxth	r1, r1
 8026828:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802682c:	1c53      	adds	r3, r2, #1
 802682e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026832:	1c4a      	adds	r2, r1, #1
 8026834:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026838:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 802683c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026840:	0949      	lsrs	r1, r1, #5
 8026842:	ea43 030c 	orr.w	r3, r3, ip
 8026846:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802684a:	430b      	orrs	r3, r1
 802684c:	f8a8 3000 	strh.w	r3, [r8]
 8026850:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026852:	441c      	add	r4, r3
 8026854:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026856:	f108 0802 	add.w	r8, r8, #2
 802685a:	441e      	add	r6, r3
 802685c:	f109 39ff 	add.w	r9, r9, #4294967295
 8026860:	e74a      	b.n	80266f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026862:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026864:	441c      	add	r4, r3
 8026866:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026868:	441e      	add	r6, r3
 802686a:	9b07      	ldr	r3, [sp, #28]
 802686c:	3302      	adds	r3, #2
 802686e:	3d01      	subs	r5, #1
 8026870:	9307      	str	r3, [sp, #28]
 8026872:	e722      	b.n	80266ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026874:	d022      	beq.n	80268bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8026876:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8026878:	1e6b      	subs	r3, r5, #1
 802687a:	fb00 4003 	mla	r0, r0, r3, r4
 802687e:	1400      	asrs	r0, r0, #16
 8026880:	f53f af37 	bmi.w	80266f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026884:	3901      	subs	r1, #1
 8026886:	4288      	cmp	r0, r1
 8026888:	f6bf af33 	bge.w	80266f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802688c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802688e:	fb01 6303 	mla	r3, r1, r3, r6
 8026892:	141b      	asrs	r3, r3, #16
 8026894:	f53f af2d 	bmi.w	80266f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026898:	3a01      	subs	r2, #1
 802689a:	4293      	cmp	r3, r2
 802689c:	f6bf af29 	bge.w	80266f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80268a0:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80268a4:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 80268a8:	46a8      	mov	r8, r5
 80268aa:	f1b8 0f00 	cmp.w	r8, #0
 80268ae:	dc5e      	bgt.n	802696e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80268b0:	9b07      	ldr	r3, [sp, #28]
 80268b2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80268b6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80268ba:	9307      	str	r3, [sp, #28]
 80268bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80268be:	2b00      	cmp	r3, #0
 80268c0:	f340 80f6 	ble.w	8026ab0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80268c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80268c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80268cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80268d0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80268d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80268d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80268da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80268de:	eef0 6a62 	vmov.f32	s13, s5
 80268e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80268e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80268ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80268ee:	ee16 4a90 	vmov	r4, s13
 80268f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80268f6:	eef0 6a43 	vmov.f32	s13, s6
 80268fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80268fe:	ee12 2a90 	vmov	r2, s5
 8026902:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026906:	fb92 f3f3 	sdiv	r3, r2, r3
 802690a:	ee13 2a10 	vmov	r2, s6
 802690e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8026910:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026912:	fb92 f3f3 	sdiv	r3, r2, r3
 8026916:	9320      	str	r3, [sp, #128]	@ 0x80
 8026918:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802691a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802691c:	3b01      	subs	r3, #1
 802691e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026922:	930a      	str	r3, [sp, #40]	@ 0x28
 8026924:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026926:	ee16 6a90 	vmov	r6, s13
 802692a:	bf14      	ite	ne
 802692c:	461d      	movne	r5, r3
 802692e:	4615      	moveq	r5, r2
 8026930:	eeb0 3a67 	vmov.f32	s6, s15
 8026934:	eef0 2a47 	vmov.f32	s5, s14
 8026938:	e6b0      	b.n	802669c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802693a:	f111 0a01 	adds.w	sl, r1, #1
 802693e:	d487      	bmi.n	8026850 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026940:	45d6      	cmp	lr, sl
 8026942:	db85      	blt.n	8026850 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026944:	f110 0a01 	adds.w	sl, r0, #1
 8026948:	d482      	bmi.n	8026850 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802694a:	4553      	cmp	r3, sl
 802694c:	db80      	blt.n	8026850 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802694e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026950:	9101      	str	r1, [sp, #4]
 8026952:	b21b      	sxth	r3, r3
 8026954:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8026958:	9300      	str	r3, [sp, #0]
 802695a:	e9cd c704 	strd	ip, r7, [sp, #16]
 802695e:	fa0f f38e 	sxth.w	r3, lr
 8026962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026964:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8026966:	4641      	mov	r1, r8
 8026968:	f7ff fdb4 	bl	80264d4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802696c:	e770      	b.n	8026850 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802696e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026970:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8026972:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026976:	1430      	asrs	r0, r6, #16
 8026978:	1423      	asrs	r3, r4, #16
 802697a:	fb01 3000 	mla	r0, r1, r0, r3
 802697e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026980:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8026984:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8026988:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802698c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026990:	8858      	ldrh	r0, [r3, #2]
 8026992:	f1be 0f00 	cmp.w	lr, #0
 8026996:	d00b      	beq.n	80269b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8026998:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 802699c:	3901      	subs	r1, #1
 802699e:	0049      	lsls	r1, r1, #1
 80269a0:	3102      	adds	r1, #2
 80269a2:	eb03 0b01 	add.w	fp, r3, r1
 80269a6:	5a5b      	ldrh	r3, [r3, r1]
 80269a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80269aa:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80269ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80269b0:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80269b4:	fb12 f30e 	smulbb	r3, r2, lr
 80269b8:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80269bc:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80269c0:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 80269c4:	10db      	asrs	r3, r3, #3
 80269c6:	ea41 010c 	orr.w	r1, r1, ip
 80269ca:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80269ce:	f1ce 0c10 	rsb	ip, lr, #16
 80269d2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80269d6:	ebac 0c02 	sub.w	ip, ip, r2
 80269da:	ea4b 0000 	orr.w	r0, fp, r0
 80269de:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80269e2:	4350      	muls	r0, r2
 80269e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80269e6:	9f08      	ldr	r7, [sp, #32]
 80269e8:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80269ec:	fb0c 0c01 	mla	ip, ip, r1, r0
 80269f0:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80269f4:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 80269f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80269fa:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80269fc:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026a00:	0412      	lsls	r2, r2, #16
 8026a02:	ea4b 0101 	orr.w	r1, fp, r1
 8026a06:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026a0a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8026a0e:	fb03 c101 	mla	r1, r3, r1, ip
 8026a12:	4302      	orrs	r2, r0
 8026a14:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026a18:	fb03 1202 	mla	r2, r3, r2, r1
 8026a1c:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8026a20:	0952      	lsrs	r2, r2, #5
 8026a22:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 8026a26:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8026a2a:	f8b9 2000 	ldrh.w	r2, [r9]
 8026a2e:	ea4b 0303 	orr.w	r3, fp, r3
 8026a32:	b29b      	uxth	r3, r3
 8026a34:	1211      	asrs	r1, r2, #8
 8026a36:	1218      	asrs	r0, r3, #8
 8026a38:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8026a3c:	fb11 f107 	smulbb	r1, r1, r7
 8026a40:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8026a44:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026a48:	00d2      	lsls	r2, r2, #3
 8026a4a:	fb00 100a 	mla	r0, r0, sl, r1
 8026a4e:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8026a52:	10d9      	asrs	r1, r3, #3
 8026a54:	b2d2      	uxtb	r2, r2
 8026a56:	00db      	lsls	r3, r3, #3
 8026a58:	fb1c fc07 	smulbb	ip, ip, r7
 8026a5c:	fb12 f207 	smulbb	r2, r2, r7
 8026a60:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026a64:	b2db      	uxtb	r3, r3
 8026a66:	b280      	uxth	r0, r0
 8026a68:	fb01 c10a 	mla	r1, r1, sl, ip
 8026a6c:	fb03 230a 	mla	r3, r3, sl, r2
 8026a70:	b29b      	uxth	r3, r3
 8026a72:	b289      	uxth	r1, r1
 8026a74:	1c42      	adds	r2, r0, #1
 8026a76:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026a7a:	f101 0c01 	add.w	ip, r1, #1
 8026a7e:	1c5a      	adds	r2, r3, #1
 8026a80:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026a84:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8026a88:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026a8a:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8026a8e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026a92:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8026a96:	4310      	orrs	r0, r2
 8026a98:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8026a9c:	441c      	add	r4, r3
 8026a9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026aa0:	ea40 000c 	orr.w	r0, r0, ip
 8026aa4:	f829 0b02 	strh.w	r0, [r9], #2
 8026aa8:	441e      	add	r6, r3
 8026aaa:	f108 38ff 	add.w	r8, r8, #4294967295
 8026aae:	e6fc      	b.n	80268aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8026ab0:	b013      	add	sp, #76	@ 0x4c
 8026ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026ab6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8026ab6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026aba:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8026abe:	fb0e 4703 	mla	r7, lr, r3, r4
 8026ac2:	f1be 0f00 	cmp.w	lr, #0
 8026ac6:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8026aca:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8026ace:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 8026ad2:	8808      	ldrh	r0, [r1, #0]
 8026ad4:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8026ad8:	db60      	blt.n	8026b9c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8026ada:	45f1      	cmp	r9, lr
 8026adc:	dd5e      	ble.n	8026b9c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8026ade:	2c00      	cmp	r4, #0
 8026ae0:	db5a      	blt.n	8026b98 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8026ae2:	42a3      	cmp	r3, r4
 8026ae4:	dd58      	ble.n	8026b98 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8026ae6:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8026aea:	1c62      	adds	r2, r4, #1
 8026aec:	d459      	bmi.n	8026ba2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8026aee:	4293      	cmp	r3, r2
 8026af0:	dd57      	ble.n	8026ba2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8026af2:	2d00      	cmp	r5, #0
 8026af4:	d055      	beq.n	8026ba2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8026af6:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8026afa:	f11e 0e01 	adds.w	lr, lr, #1
 8026afe:	d454      	bmi.n	8026baa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8026b00:	45f1      	cmp	r9, lr
 8026b02:	dd52      	ble.n	8026baa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8026b04:	2e00      	cmp	r6, #0
 8026b06:	d050      	beq.n	8026baa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8026b08:	2c00      	cmp	r4, #0
 8026b0a:	db4c      	blt.n	8026ba6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8026b0c:	42a3      	cmp	r3, r4
 8026b0e:	dd4a      	ble.n	8026ba6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8026b10:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8026b14:	3401      	adds	r4, #1
 8026b16:	d405      	bmi.n	8026b24 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026b18:	42a3      	cmp	r3, r4
 8026b1a:	dd03      	ble.n	8026b24 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026b1c:	b115      	cbz	r5, 8026b24 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026b1e:	3301      	adds	r3, #1
 8026b20:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8026b24:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8026b28:	fb15 f406 	smulbb	r4, r5, r6
 8026b2c:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8026b30:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8026b34:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8026b38:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8026b3c:	ea43 0c0c 	orr.w	ip, r3, ip
 8026b40:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8026b44:	f1c6 0310 	rsb	r3, r6, #16
 8026b48:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8026b4c:	1b5b      	subs	r3, r3, r5
 8026b4e:	ea4e 0707 	orr.w	r7, lr, r7
 8026b52:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8026b56:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8026b5a:	437d      	muls	r5, r7
 8026b5c:	fb03 5c0c 	mla	ip, r3, ip, r5
 8026b60:	0403      	lsls	r3, r0, #16
 8026b62:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8026b66:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026b6a:	4318      	orrs	r0, r3
 8026b6c:	0413      	lsls	r3, r2, #16
 8026b6e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8026b72:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026b76:	4313      	orrs	r3, r2
 8026b78:	fb04 c000 	mla	r0, r4, r0, ip
 8026b7c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8026b80:	fb06 0003 	mla	r0, r6, r3, r0
 8026b84:	0d43      	lsrs	r3, r0, #21
 8026b86:	0940      	lsrs	r0, r0, #5
 8026b88:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026b8c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026b90:	4318      	orrs	r0, r3
 8026b92:	8008      	strh	r0, [r1, #0]
 8026b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026b98:	4684      	mov	ip, r0
 8026b9a:	e7a6      	b.n	8026aea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8026b9c:	4607      	mov	r7, r0
 8026b9e:	4684      	mov	ip, r0
 8026ba0:	e7ab      	b.n	8026afa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8026ba2:	4607      	mov	r7, r0
 8026ba4:	e7a9      	b.n	8026afa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8026ba6:	4602      	mov	r2, r0
 8026ba8:	e7b4      	b.n	8026b14 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8026baa:	4602      	mov	r2, r0
 8026bac:	e7ba      	b.n	8026b24 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08026bae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026bae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bb2:	b08f      	sub	sp, #60	@ 0x3c
 8026bb4:	461d      	mov	r5, r3
 8026bb6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026bb8:	920c      	str	r2, [sp, #48]	@ 0x30
 8026bba:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 8026bbe:	9107      	str	r1, [sp, #28]
 8026bc0:	6859      	ldr	r1, [r3, #4]
 8026bc2:	681b      	ldr	r3, [r3, #0]
 8026bc4:	900d      	str	r0, [sp, #52]	@ 0x34
 8026bc6:	fb01 2707 	mla	r7, r1, r7, r2
 8026bca:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8026bce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026bd0:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 8026bd4:	f8d3 8000 	ldr.w	r8, [r3]
 8026bd8:	9b07      	ldr	r3, [sp, #28]
 8026bda:	2b00      	cmp	r3, #0
 8026bdc:	dc03      	bgt.n	8026be6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8026bde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026be0:	2b00      	cmp	r3, #0
 8026be2:	f340 8181 	ble.w	8026ee8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8026be6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026be8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026bec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026bf0:	1e48      	subs	r0, r1, #1
 8026bf2:	f102 3cff 	add.w	ip, r2, #4294967295
 8026bf6:	2d00      	cmp	r5, #0
 8026bf8:	f340 809b 	ble.w	8026d32 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8026bfc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026c00:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026c04:	d406      	bmi.n	8026c14 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026c06:	4586      	cmp	lr, r0
 8026c08:	da04      	bge.n	8026c14 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026c0a:	2b00      	cmp	r3, #0
 8026c0c:	db02      	blt.n	8026c14 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026c0e:	4563      	cmp	r3, ip
 8026c10:	f2c0 8090 	blt.w	8026d34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8026c14:	f11e 0e01 	adds.w	lr, lr, #1
 8026c18:	f100 8084 	bmi.w	8026d24 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8026c1c:	4571      	cmp	r1, lr
 8026c1e:	f2c0 8081 	blt.w	8026d24 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8026c22:	3301      	adds	r3, #1
 8026c24:	d47e      	bmi.n	8026d24 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8026c26:	429a      	cmp	r2, r3
 8026c28:	db7c      	blt.n	8026d24 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8026c2a:	46aa      	mov	sl, r5
 8026c2c:	46b9      	mov	r9, r7
 8026c2e:	f1ba 0f00 	cmp.w	sl, #0
 8026c32:	f340 8099 	ble.w	8026d68 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026c36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026c38:	1421      	asrs	r1, r4, #16
 8026c3a:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026c3e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026c42:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026c46:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026c4a:	f100 80d0 	bmi.w	8026dee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8026c4e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026c52:	4559      	cmp	r1, fp
 8026c54:	f280 80cb 	bge.w	8026dee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8026c58:	2800      	cmp	r0, #0
 8026c5a:	f2c0 80c8 	blt.w	8026dee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8026c5e:	f103 3bff 	add.w	fp, r3, #4294967295
 8026c62:	4558      	cmp	r0, fp
 8026c64:	f280 80c3 	bge.w	8026dee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8026c68:	fa0f fe8e 	sxth.w	lr, lr
 8026c6c:	fb00 110e 	mla	r1, r0, lr, r1
 8026c70:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026c74:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8026c78:	8841      	ldrh	r1, [r0, #2]
 8026c7a:	f1bc 0f00 	cmp.w	ip, #0
 8026c7e:	d00b      	beq.n	8026c98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8026c80:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 8026c84:	3b01      	subs	r3, #1
 8026c86:	005b      	lsls	r3, r3, #1
 8026c88:	3302      	adds	r3, #2
 8026c8a:	eb00 0e03 	add.w	lr, r0, r3
 8026c8e:	5ac3      	ldrh	r3, [r0, r3]
 8026c90:	9308      	str	r3, [sp, #32]
 8026c92:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8026c96:	9309      	str	r3, [sp, #36]	@ 0x24
 8026c98:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8026c9c:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8026ca0:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8026ca4:	ea40 000b 	orr.w	r0, r0, fp
 8026ca8:	fb12 f30c 	smulbb	r3, r2, ip
 8026cac:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026cb0:	10db      	asrs	r3, r3, #3
 8026cb2:	f1cc 0e10 	rsb	lr, ip, #16
 8026cb6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026cba:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8026cbe:	ebae 0e02 	sub.w	lr, lr, r2
 8026cc2:	ea4b 0101 	orr.w	r1, fp, r1
 8026cc6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026cca:	4351      	muls	r1, r2
 8026ccc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026cce:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026cd2:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026cd6:	0410      	lsls	r0, r2, #16
 8026cd8:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8026cdc:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026ce0:	4310      	orrs	r0, r2
 8026ce2:	9a08      	ldr	r2, [sp, #32]
 8026ce4:	9908      	ldr	r1, [sp, #32]
 8026ce6:	0412      	lsls	r2, r2, #16
 8026ce8:	fb03 e000 	mla	r0, r3, r0, lr
 8026cec:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8026cf0:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8026cf4:	ea42 020e 	orr.w	r2, r2, lr
 8026cf8:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026cfc:	fb03 0302 	mla	r3, r3, r2, r0
 8026d00:	0d5a      	lsrs	r2, r3, #21
 8026d02:	095b      	lsrs	r3, r3, #5
 8026d04:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026d08:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8026d0c:	4313      	orrs	r3, r2
 8026d0e:	f8a9 3000 	strh.w	r3, [r9]
 8026d12:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026d14:	441c      	add	r4, r3
 8026d16:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026d18:	f109 0902 	add.w	r9, r9, #2
 8026d1c:	441e      	add	r6, r3
 8026d1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026d22:	e784      	b.n	8026c2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8026d24:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026d26:	441c      	add	r4, r3
 8026d28:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026d2a:	3d01      	subs	r5, #1
 8026d2c:	441e      	add	r6, r3
 8026d2e:	3702      	adds	r7, #2
 8026d30:	e761      	b.n	8026bf6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026d32:	d01d      	beq.n	8026d70 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8026d34:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8026d36:	1e6b      	subs	r3, r5, #1
 8026d38:	fb00 4003 	mla	r0, r0, r3, r4
 8026d3c:	1400      	asrs	r0, r0, #16
 8026d3e:	f53f af74 	bmi.w	8026c2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026d42:	3901      	subs	r1, #1
 8026d44:	4288      	cmp	r0, r1
 8026d46:	f6bf af70 	bge.w	8026c2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026d4a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8026d4c:	fb01 6303 	mla	r3, r1, r3, r6
 8026d50:	141b      	asrs	r3, r3, #16
 8026d52:	f53f af6a 	bmi.w	8026c2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026d56:	3a01      	subs	r2, #1
 8026d58:	4293      	cmp	r3, r2
 8026d5a:	f6bf af66 	bge.w	8026c2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026d5e:	46a9      	mov	r9, r5
 8026d60:	46ba      	mov	sl, r7
 8026d62:	f1b9 0f00 	cmp.w	r9, #0
 8026d66:	dc5a      	bgt.n	8026e1e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 8026d68:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026d6c:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8026d70:	9b07      	ldr	r3, [sp, #28]
 8026d72:	2b00      	cmp	r3, #0
 8026d74:	f340 80b8 	ble.w	8026ee8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8026d78:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026d7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026d80:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026d84:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026d86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026d8a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026d8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026d92:	eef0 6a62 	vmov.f32	s13, s5
 8026d96:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026d9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026d9e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026da2:	ee16 4a90 	vmov	r4, s13
 8026da6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026daa:	eef0 6a43 	vmov.f32	s13, s6
 8026dae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026db2:	ee12 2a90 	vmov	r2, s5
 8026db6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026dba:	fb92 f3f3 	sdiv	r3, r2, r3
 8026dbe:	ee13 2a10 	vmov	r2, s6
 8026dc2:	931b      	str	r3, [sp, #108]	@ 0x6c
 8026dc4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026dc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8026dca:	931c      	str	r3, [sp, #112]	@ 0x70
 8026dcc:	9b07      	ldr	r3, [sp, #28]
 8026dce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026dd0:	3b01      	subs	r3, #1
 8026dd2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026dd6:	9307      	str	r3, [sp, #28]
 8026dd8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026dda:	ee16 6a90 	vmov	r6, s13
 8026dde:	bf14      	ite	ne
 8026de0:	461d      	movne	r5, r3
 8026de2:	4615      	moveq	r5, r2
 8026de4:	eeb0 3a67 	vmov.f32	s6, s15
 8026de8:	eef0 2a47 	vmov.f32	s5, s14
 8026dec:	e6f4      	b.n	8026bd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8026dee:	f111 0b01 	adds.w	fp, r1, #1
 8026df2:	d48e      	bmi.n	8026d12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026df4:	45de      	cmp	lr, fp
 8026df6:	db8c      	blt.n	8026d12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026df8:	f110 0b01 	adds.w	fp, r0, #1
 8026dfc:	d489      	bmi.n	8026d12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026dfe:	455b      	cmp	r3, fp
 8026e00:	db87      	blt.n	8026d12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026e02:	b21b      	sxth	r3, r3
 8026e04:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8026e08:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8026e0c:	9300      	str	r3, [sp, #0]
 8026e0e:	4642      	mov	r2, r8
 8026e10:	fa0f f38e 	sxth.w	r3, lr
 8026e14:	4649      	mov	r1, r9
 8026e16:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8026e18:	f7ff fe4d 	bl	8026ab6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8026e1c:	e779      	b.n	8026d12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026e1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026e20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8026e24:	1420      	asrs	r0, r4, #16
 8026e26:	1431      	asrs	r1, r6, #16
 8026e28:	fb03 0101 	mla	r1, r3, r1, r0
 8026e2c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026e30:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8026e34:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8026e38:	8841      	ldrh	r1, [r0, #2]
 8026e3a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026e3e:	f1be 0f00 	cmp.w	lr, #0
 8026e42:	d00b      	beq.n	8026e5c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8026e44:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8026e48:	3b01      	subs	r3, #1
 8026e4a:	005b      	lsls	r3, r3, #1
 8026e4c:	3302      	adds	r3, #2
 8026e4e:	eb00 0b03 	add.w	fp, r0, r3
 8026e52:	5ac3      	ldrh	r3, [r0, r3]
 8026e54:	930a      	str	r3, [sp, #40]	@ 0x28
 8026e56:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026e5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026e5c:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8026e60:	fb12 f30e 	smulbb	r3, r2, lr
 8026e64:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8026e68:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026e6c:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8026e70:	10db      	asrs	r3, r3, #3
 8026e72:	ea40 000c 	orr.w	r0, r0, ip
 8026e76:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026e7a:	f1ce 0c10 	rsb	ip, lr, #16
 8026e7e:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8026e82:	ebac 0c02 	sub.w	ip, ip, r2
 8026e86:	ea4b 0101 	orr.w	r1, fp, r1
 8026e8a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026e8e:	4351      	muls	r1, r2
 8026e90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026e92:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026e96:	fb0c 1c00 	mla	ip, ip, r0, r1
 8026e9a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026e9e:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 8026ea2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026ea4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8026ea6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026eaa:	0412      	lsls	r2, r2, #16
 8026eac:	ea4b 0000 	orr.w	r0, fp, r0
 8026eb0:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8026eb4:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 8026eb8:	fb03 c000 	mla	r0, r3, r0, ip
 8026ebc:	ea42 0b0b 	orr.w	fp, r2, fp
 8026ec0:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026ec4:	fb03 000b 	mla	r0, r3, fp, r0
 8026ec8:	0d43      	lsrs	r3, r0, #21
 8026eca:	0940      	lsrs	r0, r0, #5
 8026ecc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026ed0:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026ed4:	4318      	orrs	r0, r3
 8026ed6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026ed8:	f82a 0b02 	strh.w	r0, [sl], #2
 8026edc:	441c      	add	r4, r3
 8026ede:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026ee0:	f109 39ff 	add.w	r9, r9, #4294967295
 8026ee4:	441e      	add	r6, r3
 8026ee6:	e73c      	b.n	8026d62 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026ee8:	b00f      	add	sp, #60	@ 0x3c
 8026eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026eee <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8026eee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ef2:	b085      	sub	sp, #20
 8026ef4:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8026ef8:	9102      	str	r1, [sp, #8]
 8026efa:	2c00      	cmp	r4, #0
 8026efc:	fb04 7103 	mla	r1, r4, r3, r7
 8026f00:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8026f04:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8026f08:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8026f0c:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8026f10:	f2c0 811b 	blt.w	802714a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8026f14:	45a6      	cmp	lr, r4
 8026f16:	f340 8118 	ble.w	802714a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8026f1a:	2f00      	cmp	r7, #0
 8026f1c:	f2c0 8113 	blt.w	8027146 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8026f20:	42bb      	cmp	r3, r7
 8026f22:	f340 8110 	ble.w	8027146 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8026f26:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8026f2a:	1c7a      	adds	r2, r7, #1
 8026f2c:	f100 8110 	bmi.w	8027150 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8026f30:	4293      	cmp	r3, r2
 8026f32:	f340 810d 	ble.w	8027150 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8026f36:	2e00      	cmp	r6, #0
 8026f38:	f000 810c 	beq.w	8027154 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8026f3c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8026f40:	3401      	adds	r4, #1
 8026f42:	f100 810b 	bmi.w	802715c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8026f46:	45a6      	cmp	lr, r4
 8026f48:	f340 8108 	ble.w	802715c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8026f4c:	2800      	cmp	r0, #0
 8026f4e:	f000 8108 	beq.w	8027162 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8026f52:	2f00      	cmp	r7, #0
 8026f54:	f2c0 8100 	blt.w	8027158 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8026f58:	42bb      	cmp	r3, r7
 8026f5a:	f340 80fd 	ble.w	8027158 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8026f5e:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8026f62:	3701      	adds	r7, #1
 8026f64:	f100 8100 	bmi.w	8027168 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8026f68:	42bb      	cmp	r3, r7
 8026f6a:	f340 80fd 	ble.w	8027168 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8026f6e:	2e00      	cmp	r6, #0
 8026f70:	f000 80fc 	beq.w	802716c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8026f74:	3301      	adds	r3, #1
 8026f76:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8026f7a:	b2b6      	uxth	r6, r6
 8026f7c:	b280      	uxth	r0, r0
 8026f7e:	fb00 fe06 	mul.w	lr, r0, r6
 8026f82:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8026f86:	0136      	lsls	r6, r6, #4
 8026f88:	eba6 070e 	sub.w	r7, r6, lr
 8026f8c:	b280      	uxth	r0, r0
 8026f8e:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8026f92:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8026f96:	b2bf      	uxth	r7, r7
 8026f98:	1a1b      	subs	r3, r3, r0
 8026f9a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026f9e:	b29b      	uxth	r3, r3
 8026fa0:	fb0a f607 	mul.w	r6, sl, r7
 8026fa4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026fa8:	fb0b 6603 	mla	r6, fp, r3, r6
 8026fac:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8026fb0:	fb00 6609 	mla	r6, r0, r9, r6
 8026fb4:	fb0e 6608 	mla	r6, lr, r8, r6
 8026fb8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026fbc:	9600      	str	r6, [sp, #0]
 8026fbe:	2e00      	cmp	r6, #0
 8026fc0:	f000 80be 	beq.w	8027140 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8026fc4:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026fc8:	fb0b fc0c 	mul.w	ip, fp, ip
 8026fcc:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8026fd0:	fb0b f505 	mul.w	r5, fp, r5
 8026fd4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026fd8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8026fdc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026fe0:	44dc      	add	ip, fp
 8026fe2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026fe6:	9501      	str	r5, [sp, #4]
 8026fe8:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8026fec:	9503      	str	r5, [sp, #12]
 8026fee:	9d01      	ldr	r5, [sp, #4]
 8026ff0:	9e02      	ldr	r6, [sp, #8]
 8026ff2:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8026ff6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026ffa:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8026ffe:	fb0a fc0c 	mul.w	ip, sl, ip
 8027002:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8027006:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802700a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802700e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027012:	4465      	add	r5, ip
 8027014:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027018:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802701c:	fb09 fc0c 	mul.w	ip, r9, ip
 8027020:	fb09 f904 	mul.w	r9, r9, r4
 8027024:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8027028:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802702c:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8027030:	fb08 f404 	mul.w	r4, r8, r4
 8027034:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8027038:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802703c:	fb08 f802 	mul.w	r8, r8, r2
 8027040:	fb0a fa01 	mul.w	sl, sl, r1
 8027044:	0a22      	lsrs	r2, r4, #8
 8027046:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 802704a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802704e:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8027052:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8027056:	4414      	add	r4, r2
 8027058:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802705c:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8027060:	0a2d      	lsrs	r5, r5, #8
 8027062:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8027066:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802706a:	9a03      	ldr	r2, [sp, #12]
 802706c:	8836      	ldrh	r6, [r6, #0]
 802706e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8027072:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027076:	437d      	muls	r5, r7
 8027078:	4461      	add	r1, ip
 802707a:	0a24      	lsrs	r4, r4, #8
 802707c:	fb02 5503 	mla	r5, r2, r3, r5
 8027080:	0a09      	lsrs	r1, r1, #8
 8027082:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027086:	fb04 540e 	mla	r4, r4, lr, r5
 802708a:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802708e:	fb01 4100 	mla	r1, r1, r0, r4
 8027092:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027096:	0a09      	lsrs	r1, r1, #8
 8027098:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802709c:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 80270a0:	fb07 f70a 	mul.w	r7, r7, sl
 80270a4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80270a8:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 80270ac:	fb03 7101 	mla	r1, r3, r1, r7
 80270b0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80270b4:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80270b8:	fb0e 1e08 	mla	lr, lr, r8, r1
 80270bc:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 80270c0:	fb00 e101 	mla	r1, r0, r1, lr
 80270c4:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 80270c8:	9a00      	ldr	r2, [sp, #0]
 80270ca:	b287      	uxth	r7, r0
 80270cc:	437a      	muls	r2, r7
 80270ce:	0a09      	lsrs	r1, r1, #8
 80270d0:	1c53      	adds	r3, r2, #1
 80270d2:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80270d6:	4321      	orrs	r1, r4
 80270d8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80270dc:	1235      	asrs	r5, r6, #8
 80270de:	0c0a      	lsrs	r2, r1, #16
 80270e0:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80270e4:	b2db      	uxtb	r3, r3
 80270e6:	fb12 f207 	smulbb	r2, r2, r7
 80270ea:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80270ee:	fb05 2503 	mla	r5, r5, r3, r2
 80270f2:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80270f6:	10f2      	asrs	r2, r6, #3
 80270f8:	b2c8      	uxtb	r0, r1
 80270fa:	00f6      	lsls	r6, r6, #3
 80270fc:	fb14 f407 	smulbb	r4, r4, r7
 8027100:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8027104:	b2f6      	uxtb	r6, r6
 8027106:	fb10 f007 	smulbb	r0, r0, r7
 802710a:	fb02 4203 	mla	r2, r2, r3, r4
 802710e:	b2ad      	uxth	r5, r5
 8027110:	fb06 0303 	mla	r3, r6, r3, r0
 8027114:	b299      	uxth	r1, r3
 8027116:	b294      	uxth	r4, r2
 8027118:	1c6b      	adds	r3, r5, #1
 802711a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802711e:	1c62      	adds	r2, r4, #1
 8027120:	1c4b      	adds	r3, r1, #1
 8027122:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027126:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802712a:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802712e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027132:	0952      	lsrs	r2, r2, #5
 8027134:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027138:	432b      	orrs	r3, r5
 802713a:	4313      	orrs	r3, r2
 802713c:	9a02      	ldr	r2, [sp, #8]
 802713e:	8013      	strh	r3, [r2, #0]
 8027140:	b005      	add	sp, #20
 8027142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027146:	2500      	movs	r5, #0
 8027148:	e6ef      	b.n	8026f2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 802714a:	2100      	movs	r1, #0
 802714c:	460d      	mov	r5, r1
 802714e:	e6f7      	b.n	8026f40 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8027150:	2100      	movs	r1, #0
 8027152:	e6f5      	b.n	8026f40 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8027154:	4631      	mov	r1, r6
 8027156:	e6f3      	b.n	8026f40 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8027158:	2400      	movs	r4, #0
 802715a:	e702      	b.n	8026f62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 802715c:	2200      	movs	r2, #0
 802715e:	4614      	mov	r4, r2
 8027160:	e70b      	b.n	8026f7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8027162:	4602      	mov	r2, r0
 8027164:	4604      	mov	r4, r0
 8027166:	e708      	b.n	8026f7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8027168:	2200      	movs	r2, #0
 802716a:	e706      	b.n	8026f7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802716c:	4632      	mov	r2, r6
 802716e:	e704      	b.n	8026f7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08027170 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027174:	b09d      	sub	sp, #116	@ 0x74
 8027176:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 802717a:	9219      	str	r2, [sp, #100]	@ 0x64
 802717c:	9307      	str	r3, [sp, #28]
 802717e:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8027180:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8027184:	931a      	str	r3, [sp, #104]	@ 0x68
 8027186:	9117      	str	r1, [sp, #92]	@ 0x5c
 8027188:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 802718c:	901b      	str	r0, [sp, #108]	@ 0x6c
 802718e:	6850      	ldr	r0, [r2, #4]
 8027190:	6812      	ldr	r2, [r2, #0]
 8027192:	fb00 1303 	mla	r3, r0, r3, r1
 8027196:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802719a:	930a      	str	r3, [sp, #40]	@ 0x28
 802719c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802719e:	681b      	ldr	r3, [r3, #0]
 80271a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80271a2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80271a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80271a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80271aa:	2b00      	cmp	r3, #0
 80271ac:	dc03      	bgt.n	80271b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80271ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80271b0:	2b00      	cmp	r3, #0
 80271b2:	f340 8375 	ble.w	80278a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80271b6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80271b8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80271bc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80271c0:	1e48      	subs	r0, r1, #1
 80271c2:	1e57      	subs	r7, r2, #1
 80271c4:	9b07      	ldr	r3, [sp, #28]
 80271c6:	2b00      	cmp	r3, #0
 80271c8:	f340 818e 	ble.w	80274e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80271cc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80271d0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80271d4:	d406      	bmi.n	80271e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80271d6:	4584      	cmp	ip, r0
 80271d8:	da04      	bge.n	80271e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80271da:	2b00      	cmp	r3, #0
 80271dc:	db02      	blt.n	80271e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80271de:	42bb      	cmp	r3, r7
 80271e0:	f2c0 8183 	blt.w	80274ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80271e4:	f11c 0c01 	adds.w	ip, ip, #1
 80271e8:	f100 8173 	bmi.w	80274d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80271ec:	4561      	cmp	r1, ip
 80271ee:	f2c0 8170 	blt.w	80274d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80271f2:	3301      	adds	r3, #1
 80271f4:	f100 816d 	bmi.w	80274d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80271f8:	429a      	cmp	r2, r3
 80271fa:	f2c0 816a 	blt.w	80274d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80271fe:	9b07      	ldr	r3, [sp, #28]
 8027200:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8027202:	9318      	str	r3, [sp, #96]	@ 0x60
 8027204:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8027206:	2b00      	cmp	r3, #0
 8027208:	f340 818c 	ble.w	8027524 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802720c:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 802720e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027210:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027214:	689b      	ldr	r3, [r3, #8]
 8027216:	1422      	asrs	r2, r4, #16
 8027218:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802721c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8027220:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027224:	f100 81cd 	bmi.w	80275c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027228:	f103 38ff 	add.w	r8, r3, #4294967295
 802722c:	4542      	cmp	r2, r8
 802722e:	f280 81c8 	bge.w	80275c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027232:	f1bc 0f00 	cmp.w	ip, #0
 8027236:	f2c0 81c4 	blt.w	80275c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802723a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802723e:	45c4      	cmp	ip, r8
 8027240:	f280 81bf 	bge.w	80275c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027244:	b21b      	sxth	r3, r3
 8027246:	fb0c 2203 	mla	r2, ip, r3, r2
 802724a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802724c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027250:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027254:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027258:	2800      	cmp	r0, #0
 802725a:	f000 81a9 	beq.w	80275b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802725e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027262:	950c      	str	r5, [sp, #48]	@ 0x30
 8027264:	0e2d      	lsrs	r5, r5, #24
 8027266:	9513      	str	r5, [sp, #76]	@ 0x4c
 8027268:	b181      	cbz	r1, 802728c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802726a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802726e:	3b01      	subs	r3, #1
 8027270:	009b      	lsls	r3, r3, #2
 8027272:	3304      	adds	r3, #4
 8027274:	eb08 0c03 	add.w	ip, r8, r3
 8027278:	f858 3003 	ldr.w	r3, [r8, r3]
 802727c:	9308      	str	r3, [sp, #32]
 802727e:	0e1b      	lsrs	r3, r3, #24
 8027280:	9311      	str	r3, [sp, #68]	@ 0x44
 8027282:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8027286:	930d      	str	r3, [sp, #52]	@ 0x34
 8027288:	0e1b      	lsrs	r3, r3, #24
 802728a:	9314      	str	r3, [sp, #80]	@ 0x50
 802728c:	b280      	uxth	r0, r0
 802728e:	b289      	uxth	r1, r1
 8027290:	fb00 f901 	mul.w	r9, r0, r1
 8027294:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8027298:	0100      	lsls	r0, r0, #4
 802729a:	eba0 0809 	sub.w	r8, r0, r9
 802729e:	b289      	uxth	r1, r1
 80272a0:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80272a4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80272a6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80272a8:	fa1f f888 	uxth.w	r8, r8
 80272ac:	1a5b      	subs	r3, r3, r1
 80272ae:	b29b      	uxth	r3, r3
 80272b0:	fb08 f000 	mul.w	r0, r8, r0
 80272b4:	fb03 000e 	mla	r0, r3, lr, r0
 80272b8:	fb01 0005 	mla	r0, r1, r5, r0
 80272bc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80272be:	fb09 0005 	mla	r0, r9, r5, r0
 80272c2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80272c6:	2800      	cmp	r0, #0
 80272c8:	f000 80fa 	beq.w	80274c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80272cc:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80272d0:	d01b      	beq.n	802730a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80272d2:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 80272d6:	fb0e fa0a 	mul.w	sl, lr, sl
 80272da:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80272de:	fb0e fe02 	mul.w	lr, lr, r2
 80272e2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80272e6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80272ea:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80272ee:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80272f2:	4452      	add	r2, sl
 80272f4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80272f8:	0a12      	lsrs	r2, r2, #8
 80272fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80272fe:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027302:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027306:	ea42 020c 	orr.w	r2, r2, ip
 802730a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802730c:	2dff      	cmp	r5, #255	@ 0xff
 802730e:	d021      	beq.n	8027354 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8027310:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8027312:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8027316:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027318:	fb05 fb0b 	mul.w	fp, r5, fp
 802731c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802731e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8027322:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027324:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027328:	fb05 fa0a 	mul.w	sl, r5, sl
 802732c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027330:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027334:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027338:	44de      	add	lr, fp
 802733a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802733e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027342:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027346:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802734a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802734e:	ea4e 050a 	orr.w	r5, lr, sl
 8027352:	950c      	str	r5, [sp, #48]	@ 0x30
 8027354:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8027356:	2dff      	cmp	r5, #255	@ 0xff
 8027358:	d021      	beq.n	802739e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802735a:	9d08      	ldr	r5, [sp, #32]
 802735c:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8027360:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8027362:	fb05 fb0b 	mul.w	fp, r5, fp
 8027366:	9d08      	ldr	r5, [sp, #32]
 8027368:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802736c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802736e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027372:	fb05 fa0a 	mul.w	sl, r5, sl
 8027376:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802737a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802737e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027382:	44de      	add	lr, fp
 8027384:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027388:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802738c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027390:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027394:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027398:	ea4e 050a 	orr.w	r5, lr, sl
 802739c:	9508      	str	r5, [sp, #32]
 802739e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80273a0:	2dff      	cmp	r5, #255	@ 0xff
 80273a2:	d021      	beq.n	80273e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80273a4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80273a6:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80273aa:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80273ac:	fb05 fb0b 	mul.w	fp, r5, fp
 80273b0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80273b2:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80273b6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80273b8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80273bc:	fb05 fa0a 	mul.w	sl, r5, sl
 80273c0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80273c4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80273c8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80273cc:	44de      	add	lr, fp
 80273ce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80273d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80273d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80273da:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80273de:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80273e2:	ea4e 050a 	orr.w	r5, lr, sl
 80273e6:	950d      	str	r5, [sp, #52]	@ 0x34
 80273e8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80273ea:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80273ee:	9d08      	ldr	r5, [sp, #32]
 80273f0:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80273f4:	fb08 fc0c 	mul.w	ip, r8, ip
 80273f8:	fb03 cc0e 	mla	ip, r3, lr, ip
 80273fc:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8027400:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8027402:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027406:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802740a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802740c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027410:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8027414:	fb08 f80e 	mul.w	r8, r8, lr
 8027418:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802741c:	fb03 8202 	mla	r2, r3, r2, r8
 8027420:	9b08      	ldr	r3, [sp, #32]
 8027422:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027424:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8027428:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802742a:	fb01 220a 	mla	r2, r1, sl, r2
 802742e:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8027432:	fb09 2901 	mla	r9, r9, r1, r2
 8027436:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027438:	883b      	ldrh	r3, [r7, #0]
 802743a:	4342      	muls	r2, r0
 802743c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027440:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027444:	1c50      	adds	r0, r2, #1
 8027446:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802744a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802744e:	ea4c 0c09 	orr.w	ip, ip, r9
 8027452:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8027456:	1219      	asrs	r1, r3, #8
 8027458:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802745c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8027460:	b2c0      	uxtb	r0, r0
 8027462:	fb12 f205 	smulbb	r2, r2, r5
 8027466:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802746a:	fb01 2100 	mla	r1, r1, r0, r2
 802746e:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8027472:	10da      	asrs	r2, r3, #3
 8027474:	fa5f fc8c 	uxtb.w	ip, ip
 8027478:	00db      	lsls	r3, r3, #3
 802747a:	fb1c fc05 	smulbb	ip, ip, r5
 802747e:	b2db      	uxtb	r3, r3
 8027480:	b289      	uxth	r1, r1
 8027482:	fb03 c300 	mla	r3, r3, r0, ip
 8027486:	fa1f fc83 	uxth.w	ip, r3
 802748a:	1c4b      	adds	r3, r1, #1
 802748c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027490:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8027494:	fb1e fe05 	smulbb	lr, lr, r5
 8027498:	f10c 0301 	add.w	r3, ip, #1
 802749c:	fb02 e200 	mla	r2, r2, r0, lr
 80274a0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80274a4:	b292      	uxth	r2, r2
 80274a6:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80274aa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80274ae:	430b      	orrs	r3, r1
 80274b0:	1c51      	adds	r1, r2, #1
 80274b2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80274b6:	0952      	lsrs	r2, r2, #5
 80274b8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80274bc:	4313      	orrs	r3, r2
 80274be:	803b      	strh	r3, [r7, #0]
 80274c0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80274c2:	441c      	add	r4, r3
 80274c4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80274c6:	441e      	add	r6, r3
 80274c8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80274ca:	3b01      	subs	r3, #1
 80274cc:	3702      	adds	r7, #2
 80274ce:	9318      	str	r3, [sp, #96]	@ 0x60
 80274d0:	e698      	b.n	8027204 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80274d2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80274d4:	441c      	add	r4, r3
 80274d6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80274d8:	441e      	add	r6, r3
 80274da:	9b07      	ldr	r3, [sp, #28]
 80274dc:	3b01      	subs	r3, #1
 80274de:	9307      	str	r3, [sp, #28]
 80274e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80274e2:	3302      	adds	r3, #2
 80274e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80274e6:	e66d      	b.n	80271c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80274e8:	d023      	beq.n	8027532 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80274ea:	9b07      	ldr	r3, [sp, #28]
 80274ec:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 80274ee:	3b01      	subs	r3, #1
 80274f0:	fb00 4003 	mla	r0, r0, r3, r4
 80274f4:	1400      	asrs	r0, r0, #16
 80274f6:	f53f ae82 	bmi.w	80271fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80274fa:	3901      	subs	r1, #1
 80274fc:	4288      	cmp	r0, r1
 80274fe:	f6bf ae7e 	bge.w	80271fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027502:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8027504:	fb01 6303 	mla	r3, r1, r3, r6
 8027508:	141b      	asrs	r3, r3, #16
 802750a:	f53f ae78 	bmi.w	80271fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802750e:	3a01      	subs	r2, #1
 8027510:	4293      	cmp	r3, r2
 8027512:	f6bf ae74 	bge.w	80271fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027516:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802751a:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802751e:	f1bb 0f00 	cmp.w	fp, #0
 8027522:	dc6c      	bgt.n	80275fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8027524:	9b07      	ldr	r3, [sp, #28]
 8027526:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802752a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802752c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027530:	930a      	str	r3, [sp, #40]	@ 0x28
 8027532:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027534:	2b00      	cmp	r3, #0
 8027536:	f340 81b3 	ble.w	80278a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802753a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802753e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027542:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027546:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027548:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802754c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027550:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027554:	eef0 6a62 	vmov.f32	s13, s5
 8027558:	ee61 7a27 	vmul.f32	s15, s2, s15
 802755c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027560:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027564:	ee16 4a90 	vmov	r4, s13
 8027568:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802756c:	eef0 6a43 	vmov.f32	s13, s6
 8027570:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027574:	ee12 2a90 	vmov	r2, s5
 8027578:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802757c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027580:	ee13 2a10 	vmov	r2, s6
 8027584:	9329      	str	r3, [sp, #164]	@ 0xa4
 8027586:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027588:	fb92 f3f3 	sdiv	r3, r2, r3
 802758c:	932a      	str	r3, [sp, #168]	@ 0xa8
 802758e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027590:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8027592:	3b01      	subs	r3, #1
 8027594:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027598:	9317      	str	r3, [sp, #92]	@ 0x5c
 802759a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802759c:	bf08      	it	eq
 802759e:	4613      	moveq	r3, r2
 80275a0:	ee16 6a90 	vmov	r6, s13
 80275a4:	9307      	str	r3, [sp, #28]
 80275a6:	eeb0 3a67 	vmov.f32	s6, s15
 80275aa:	eef0 2a47 	vmov.f32	s5, s14
 80275ae:	e5fb      	b.n	80271a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80275b0:	2900      	cmp	r1, #0
 80275b2:	f43f ae6b 	beq.w	802728c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80275b6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80275ba:	9308      	str	r3, [sp, #32]
 80275bc:	0e1b      	lsrs	r3, r3, #24
 80275be:	9311      	str	r3, [sp, #68]	@ 0x44
 80275c0:	e664      	b.n	802728c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80275c2:	f112 0801 	adds.w	r8, r2, #1
 80275c6:	f53f af7b 	bmi.w	80274c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80275ca:	4543      	cmp	r3, r8
 80275cc:	f6ff af78 	blt.w	80274c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80275d0:	f11c 0801 	adds.w	r8, ip, #1
 80275d4:	f53f af74 	bmi.w	80274c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80275d8:	45c6      	cmp	lr, r8
 80275da:	f6ff af71 	blt.w	80274c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80275de:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80275e0:	9201      	str	r2, [sp, #4]
 80275e2:	fa0f f28e 	sxth.w	r2, lr
 80275e6:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80275ea:	e9cd c002 	strd	ip, r0, [sp, #8]
 80275ee:	9200      	str	r2, [sp, #0]
 80275f0:	b21b      	sxth	r3, r3
 80275f2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80275f4:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80275f6:	4639      	mov	r1, r7
 80275f8:	f7ff fc79 	bl	8026eee <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80275fc:	e760      	b.n	80274c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80275fe:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027600:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027602:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027606:	1427      	asrs	r7, r4, #16
 8027608:	1433      	asrs	r3, r6, #16
 802760a:	fb01 7303 	mla	r3, r1, r3, r7
 802760e:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8027612:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027616:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802761a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802761e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027622:	2a00      	cmp	r2, #0
 8027624:	f000 8133 	beq.w	802788e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8027628:	687d      	ldr	r5, [r7, #4]
 802762a:	950e      	str	r5, [sp, #56]	@ 0x38
 802762c:	0e2d      	lsrs	r5, r5, #24
 802762e:	9515      	str	r5, [sp, #84]	@ 0x54
 8027630:	b178      	cbz	r0, 8027652 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027632:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8027636:	3901      	subs	r1, #1
 8027638:	0089      	lsls	r1, r1, #2
 802763a:	3104      	adds	r1, #4
 802763c:	eb07 0e01 	add.w	lr, r7, r1
 8027640:	5879      	ldr	r1, [r7, r1]
 8027642:	9109      	str	r1, [sp, #36]	@ 0x24
 8027644:	0e09      	lsrs	r1, r1, #24
 8027646:	9112      	str	r1, [sp, #72]	@ 0x48
 8027648:	f8de 1004 	ldr.w	r1, [lr, #4]
 802764c:	910f      	str	r1, [sp, #60]	@ 0x3c
 802764e:	0e09      	lsrs	r1, r1, #24
 8027650:	9116      	str	r1, [sp, #88]	@ 0x58
 8027652:	b292      	uxth	r2, r2
 8027654:	b280      	uxth	r0, r0
 8027656:	fb02 f800 	mul.w	r8, r2, r0
 802765a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802765e:	0112      	lsls	r2, r2, #4
 8027660:	eba2 0e08 	sub.w	lr, r2, r8
 8027664:	b280      	uxth	r0, r0
 8027666:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802766a:	9915      	ldr	r1, [sp, #84]	@ 0x54
 802766c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802766e:	fa1f fe8e 	uxth.w	lr, lr
 8027672:	1a12      	subs	r2, r2, r0
 8027674:	b292      	uxth	r2, r2
 8027676:	fb0e f101 	mul.w	r1, lr, r1
 802767a:	fb02 110c 	mla	r1, r2, ip, r1
 802767e:	fb00 1105 	mla	r1, r0, r5, r1
 8027682:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8027684:	fb08 1105 	mla	r1, r8, r5, r1
 8027688:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802768c:	2900      	cmp	r1, #0
 802768e:	f000 80f5 	beq.w	802787c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8027692:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8027696:	d019      	beq.n	80276cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8027698:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802769c:	fb0c fa0a 	mul.w	sl, ip, sl
 80276a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80276a4:	fb0c fc03 	mul.w	ip, ip, r3
 80276a8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80276ac:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80276b0:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80276b4:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80276b8:	4453      	add	r3, sl
 80276ba:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80276be:	0a1b      	lsrs	r3, r3, #8
 80276c0:	0a3f      	lsrs	r7, r7, #8
 80276c2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80276c6:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80276ca:	433b      	orrs	r3, r7
 80276cc:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80276ce:	2dff      	cmp	r5, #255	@ 0xff
 80276d0:	d020      	beq.n	8027714 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 80276d2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80276d4:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80276d8:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80276da:	436f      	muls	r7, r5
 80276dc:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80276de:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80276e2:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80276e4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80276e8:	fb05 fa0a 	mul.w	sl, r5, sl
 80276ec:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80276f0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80276f4:	44bc      	add	ip, r7
 80276f6:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80276fa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80276fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027702:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027706:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802770a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802770e:	ea4c 050a 	orr.w	r5, ip, sl
 8027712:	950e      	str	r5, [sp, #56]	@ 0x38
 8027714:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027716:	2dff      	cmp	r5, #255	@ 0xff
 8027718:	d020      	beq.n	802775c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 802771a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802771c:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8027720:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027722:	436f      	muls	r7, r5
 8027724:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027726:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802772a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802772c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027730:	fb05 fa0a 	mul.w	sl, r5, sl
 8027734:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027738:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802773c:	44bc      	add	ip, r7
 802773e:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027742:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027746:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802774a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802774e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027752:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027756:	ea4c 050a 	orr.w	r5, ip, sl
 802775a:	9509      	str	r5, [sp, #36]	@ 0x24
 802775c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 802775e:	2dff      	cmp	r5, #255	@ 0xff
 8027760:	d020      	beq.n	80277a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8027762:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027764:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8027768:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 802776a:	436f      	muls	r7, r5
 802776c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802776e:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8027772:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8027774:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027778:	fb05 fa0a 	mul.w	sl, r5, sl
 802777c:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027780:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027784:	44bc      	add	ip, r7
 8027786:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802778a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802778e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027792:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027796:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802779a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802779e:	ea4c 050a 	orr.w	r5, ip, sl
 80277a2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80277a4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80277a6:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80277aa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80277ac:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80277b0:	fb0e f707 	mul.w	r7, lr, r7
 80277b4:	fb02 770c 	mla	r7, r2, ip, r7
 80277b8:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80277bc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80277be:	fb00 770c 	mla	r7, r0, ip, r7
 80277c2:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80277c6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80277c8:	fb08 770c 	mla	r7, r8, ip, r7
 80277cc:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 80277d0:	fb0e fe0c 	mul.w	lr, lr, ip
 80277d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80277d8:	fb02 e303 	mla	r3, r2, r3, lr
 80277dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80277de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80277e0:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80277e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80277e6:	fb00 330a 	mla	r3, r0, sl, r3
 80277ea:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80277ee:	fb08 3c0c 	mla	ip, r8, ip, r3
 80277f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80277f4:	f8b9 0000 	ldrh.w	r0, [r9]
 80277f8:	4359      	muls	r1, r3
 80277fa:	0a3f      	lsrs	r7, r7, #8
 80277fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027800:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027804:	1c4b      	adds	r3, r1, #1
 8027806:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802780a:	ea47 070c 	orr.w	r7, r7, ip
 802780e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027812:	1202      	asrs	r2, r0, #8
 8027814:	0c3b      	lsrs	r3, r7, #16
 8027816:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802781a:	b2c9      	uxtb	r1, r1
 802781c:	fb13 f305 	smulbb	r3, r3, r5
 8027820:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8027824:	fb02 3201 	mla	r2, r2, r1, r3
 8027828:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802782c:	10c3      	asrs	r3, r0, #3
 802782e:	b2ff      	uxtb	r7, r7
 8027830:	00c0      	lsls	r0, r0, #3
 8027832:	b2c0      	uxtb	r0, r0
 8027834:	fb17 f705 	smulbb	r7, r7, r5
 8027838:	fb00 7001 	mla	r0, r0, r1, r7
 802783c:	b292      	uxth	r2, r2
 802783e:	fb1c fc05 	smulbb	ip, ip, r5
 8027842:	b280      	uxth	r0, r0
 8027844:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8027848:	fb03 c301 	mla	r3, r3, r1, ip
 802784c:	1c51      	adds	r1, r2, #1
 802784e:	f100 0c01 	add.w	ip, r0, #1
 8027852:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027856:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802785a:	b29b      	uxth	r3, r3
 802785c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8027860:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8027864:	ea4c 0202 	orr.w	r2, ip, r2
 8027868:	f103 0c01 	add.w	ip, r3, #1
 802786c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8027870:	095b      	lsrs	r3, r3, #5
 8027872:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027876:	431a      	orrs	r2, r3
 8027878:	f8a9 2000 	strh.w	r2, [r9]
 802787c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802787e:	441c      	add	r4, r3
 8027880:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027882:	f109 0902 	add.w	r9, r9, #2
 8027886:	441e      	add	r6, r3
 8027888:	f10b 3bff 	add.w	fp, fp, #4294967295
 802788c:	e647      	b.n	802751e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802788e:	2800      	cmp	r0, #0
 8027890:	f43f aedf 	beq.w	8027652 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027894:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8027898:	9109      	str	r1, [sp, #36]	@ 0x24
 802789a:	0e09      	lsrs	r1, r1, #24
 802789c:	9112      	str	r1, [sp, #72]	@ 0x48
 802789e:	e6d8      	b.n	8027652 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80278a0:	b01d      	add	sp, #116	@ 0x74
 80278a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080278a6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80278a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80278aa:	b085      	sub	sp, #20
 80278ac:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 80278b0:	9102      	str	r1, [sp, #8]
 80278b2:	2c00      	cmp	r4, #0
 80278b4:	fb04 7103 	mla	r1, r4, r3, r7
 80278b8:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 80278bc:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 80278c0:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 80278c4:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80278c8:	f2c0 810c 	blt.w	8027ae4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 80278cc:	45a6      	cmp	lr, r4
 80278ce:	f340 8109 	ble.w	8027ae4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 80278d2:	2f00      	cmp	r7, #0
 80278d4:	f2c0 8104 	blt.w	8027ae0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80278d8:	42bb      	cmp	r3, r7
 80278da:	f340 8101 	ble.w	8027ae0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80278de:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80278e2:	1c7a      	adds	r2, r7, #1
 80278e4:	f100 8101 	bmi.w	8027aea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80278e8:	4293      	cmp	r3, r2
 80278ea:	f340 80fe 	ble.w	8027aea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80278ee:	2e00      	cmp	r6, #0
 80278f0:	f000 80fd 	beq.w	8027aee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 80278f4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80278f8:	3401      	adds	r4, #1
 80278fa:	f100 80fc 	bmi.w	8027af6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80278fe:	45a6      	cmp	lr, r4
 8027900:	f340 80f9 	ble.w	8027af6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8027904:	2800      	cmp	r0, #0
 8027906:	f000 80f9 	beq.w	8027afc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 802790a:	2f00      	cmp	r7, #0
 802790c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8027910:	f2c0 80ef 	blt.w	8027af2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8027914:	42bb      	cmp	r3, r7
 8027916:	f340 80ec 	ble.w	8027af2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802791a:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802791e:	3701      	adds	r7, #1
 8027920:	f100 80ef 	bmi.w	8027b02 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8027924:	42bb      	cmp	r3, r7
 8027926:	f340 80ec 	ble.w	8027b02 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802792a:	2e00      	cmp	r6, #0
 802792c:	f000 80eb 	beq.w	8027b06 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8027930:	6852      	ldr	r2, [r2, #4]
 8027932:	b2b6      	uxth	r6, r6
 8027934:	b280      	uxth	r0, r0
 8027936:	fb00 fe06 	mul.w	lr, r0, r6
 802793a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802793e:	0136      	lsls	r6, r6, #4
 8027940:	eba6 070e 	sub.w	r7, r6, lr
 8027944:	b280      	uxth	r0, r0
 8027946:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802794a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802794e:	b2bf      	uxth	r7, r7
 8027950:	1a1b      	subs	r3, r3, r0
 8027952:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8027956:	b29b      	uxth	r3, r3
 8027958:	fb07 f60a 	mul.w	r6, r7, sl
 802795c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027960:	fb0b 6603 	mla	r6, fp, r3, r6
 8027964:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8027968:	fb00 6609 	mla	r6, r0, r9, r6
 802796c:	fb0e 6608 	mla	r6, lr, r8, r6
 8027970:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8027974:	9600      	str	r6, [sp, #0]
 8027976:	2e00      	cmp	r6, #0
 8027978:	f000 80af 	beq.w	8027ada <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 802797c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027980:	fb0b fc0c 	mul.w	ip, fp, ip
 8027984:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8027988:	fb0b f505 	mul.w	r5, fp, r5
 802798c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8027990:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8027994:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027998:	44dc      	add	ip, fp
 802799a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802799e:	9501      	str	r5, [sp, #4]
 80279a0:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 80279a4:	9503      	str	r5, [sp, #12]
 80279a6:	9d01      	ldr	r5, [sp, #4]
 80279a8:	9e02      	ldr	r6, [sp, #8]
 80279aa:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 80279ae:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80279b2:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 80279b6:	fb0a fc0c 	mul.w	ip, sl, ip
 80279ba:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80279be:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80279c2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80279c6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80279ca:	4465      	add	r5, ip
 80279cc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80279d0:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80279d4:	fb09 fc0c 	mul.w	ip, r9, ip
 80279d8:	fb09 f904 	mul.w	r9, r9, r4
 80279dc:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80279e0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80279e4:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80279e8:	fb08 f404 	mul.w	r4, r8, r4
 80279ec:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80279f0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80279f4:	fb08 f802 	mul.w	r8, r8, r2
 80279f8:	fb0a fa01 	mul.w	sl, sl, r1
 80279fc:	0a22      	lsrs	r2, r4, #8
 80279fe:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8027a02:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027a06:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8027a0a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8027a0e:	4414      	add	r4, r2
 8027a10:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8027a14:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8027a18:	0a2d      	lsrs	r5, r5, #8
 8027a1a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8027a1e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8027a22:	9a03      	ldr	r2, [sp, #12]
 8027a24:	8836      	ldrh	r6, [r6, #0]
 8027a26:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8027a2a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027a2e:	437d      	muls	r5, r7
 8027a30:	4461      	add	r1, ip
 8027a32:	0a24      	lsrs	r4, r4, #8
 8027a34:	fb02 5503 	mla	r5, r2, r3, r5
 8027a38:	0a09      	lsrs	r1, r1, #8
 8027a3a:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027a3e:	fb04 540e 	mla	r4, r4, lr, r5
 8027a42:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8027a46:	fb01 4100 	mla	r1, r1, r0, r4
 8027a4a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027a4e:	0a09      	lsrs	r1, r1, #8
 8027a50:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027a54:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8027a58:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027a5c:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8027a60:	fb07 f70a 	mul.w	r7, r7, sl
 8027a64:	fb03 7101 	mla	r1, r3, r1, r7
 8027a68:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027a6c:	9b00      	ldr	r3, [sp, #0]
 8027a6e:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8027a72:	fb0e 1e08 	mla	lr, lr, r8, r1
 8027a76:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8027a7a:	fb00 e101 	mla	r1, r0, r1, lr
 8027a7e:	43da      	mvns	r2, r3
 8027a80:	1233      	asrs	r3, r6, #8
 8027a82:	b2d2      	uxtb	r2, r2
 8027a84:	10f0      	asrs	r0, r6, #3
 8027a86:	0a09      	lsrs	r1, r1, #8
 8027a88:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8027a8c:	00f6      	lsls	r6, r6, #3
 8027a8e:	4353      	muls	r3, r2
 8027a90:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8027a94:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8027a98:	b2f6      	uxtb	r6, r6
 8027a9a:	4321      	orrs	r1, r4
 8027a9c:	4350      	muls	r0, r2
 8027a9e:	4356      	muls	r6, r2
 8027aa0:	1c5a      	adds	r2, r3, #1
 8027aa2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027aa6:	0c0b      	lsrs	r3, r1, #16
 8027aa8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027aac:	1c42      	adds	r2, r0, #1
 8027aae:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027ab2:	0a0a      	lsrs	r2, r1, #8
 8027ab4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8027ab8:	021b      	lsls	r3, r3, #8
 8027aba:	00d2      	lsls	r2, r2, #3
 8027abc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027ac0:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8027ac4:	4313      	orrs	r3, r2
 8027ac6:	1c72      	adds	r2, r6, #1
 8027ac8:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8027acc:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8027ad0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8027ad4:	4319      	orrs	r1, r3
 8027ad6:	9b02      	ldr	r3, [sp, #8]
 8027ad8:	8019      	strh	r1, [r3, #0]
 8027ada:	b005      	add	sp, #20
 8027adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ae0:	2500      	movs	r5, #0
 8027ae2:	e6fe      	b.n	80278e2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8027ae4:	2100      	movs	r1, #0
 8027ae6:	460d      	mov	r5, r1
 8027ae8:	e706      	b.n	80278f8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8027aea:	2100      	movs	r1, #0
 8027aec:	e704      	b.n	80278f8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8027aee:	4631      	mov	r1, r6
 8027af0:	e702      	b.n	80278f8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8027af2:	2400      	movs	r4, #0
 8027af4:	e713      	b.n	802791e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8027af6:	2200      	movs	r2, #0
 8027af8:	4614      	mov	r4, r2
 8027afa:	e71a      	b.n	8027932 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8027afc:	4602      	mov	r2, r0
 8027afe:	4604      	mov	r4, r0
 8027b00:	e717      	b.n	8027932 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8027b02:	2200      	movs	r2, #0
 8027b04:	e715      	b.n	8027932 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8027b06:	4632      	mov	r2, r6
 8027b08:	e713      	b.n	8027932 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

08027b0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b10:	b09b      	sub	sp, #108	@ 0x6c
 8027b12:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 8027b16:	9218      	str	r2, [sp, #96]	@ 0x60
 8027b18:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8027b1a:	9116      	str	r1, [sp, #88]	@ 0x58
 8027b1c:	9307      	str	r3, [sp, #28]
 8027b1e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8027b22:	9019      	str	r0, [sp, #100]	@ 0x64
 8027b24:	6850      	ldr	r0, [r2, #4]
 8027b26:	6812      	ldr	r2, [r2, #0]
 8027b28:	fb00 1303 	mla	r3, r0, r3, r1
 8027b2c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027b30:	930a      	str	r3, [sp, #40]	@ 0x28
 8027b32:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027b34:	681b      	ldr	r3, [r3, #0]
 8027b36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027b38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027b3a:	2b00      	cmp	r3, #0
 8027b3c:	dc03      	bgt.n	8027b46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027b3e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8027b40:	2b00      	cmp	r3, #0
 8027b42:	f340 8386 	ble.w	8028252 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8027b46:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027b48:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027b4c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027b50:	1e48      	subs	r0, r1, #1
 8027b52:	1e57      	subs	r7, r2, #1
 8027b54:	9b07      	ldr	r3, [sp, #28]
 8027b56:	2b00      	cmp	r3, #0
 8027b58:	f340 8166 	ble.w	8027e28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8027b5c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027b60:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027b64:	d406      	bmi.n	8027b74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8027b66:	4584      	cmp	ip, r0
 8027b68:	da04      	bge.n	8027b74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8027b6a:	2b00      	cmp	r3, #0
 8027b6c:	db02      	blt.n	8027b74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8027b6e:	42bb      	cmp	r3, r7
 8027b70:	f2c0 815b 	blt.w	8027e2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8027b74:	f11c 0c01 	adds.w	ip, ip, #1
 8027b78:	f100 814b 	bmi.w	8027e12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8027b7c:	4561      	cmp	r1, ip
 8027b7e:	f2c0 8148 	blt.w	8027e12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8027b82:	3301      	adds	r3, #1
 8027b84:	f100 8145 	bmi.w	8027e12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8027b88:	429a      	cmp	r2, r3
 8027b8a:	f2c0 8142 	blt.w	8027e12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8027b8e:	9b07      	ldr	r3, [sp, #28]
 8027b90:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8027b92:	9317      	str	r3, [sp, #92]	@ 0x5c
 8027b94:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027b96:	2b00      	cmp	r3, #0
 8027b98:	f340 8165 	ble.w	8027e66 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8027b9c:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8027b9e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027ba0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027ba4:	689b      	ldr	r3, [r3, #8]
 8027ba6:	1422      	asrs	r2, r4, #16
 8027ba8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027bac:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027bb0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027bb4:	f100 81d5 	bmi.w	8027f62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8027bb8:	f103 38ff 	add.w	r8, r3, #4294967295
 8027bbc:	4542      	cmp	r2, r8
 8027bbe:	f280 81d0 	bge.w	8027f62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8027bc2:	f1bc 0f00 	cmp.w	ip, #0
 8027bc6:	f2c0 81cc 	blt.w	8027f62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8027bca:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027bce:	45c4      	cmp	ip, r8
 8027bd0:	f280 81c7 	bge.w	8027f62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8027bd4:	b21b      	sxth	r3, r3
 8027bd6:	fb0c 2203 	mla	r2, ip, r3, r2
 8027bda:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027bdc:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027be0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027be4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027be8:	2900      	cmp	r1, #0
 8027bea:	f000 8182 	beq.w	8027ef2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8027bee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027bf2:	950b      	str	r5, [sp, #44]	@ 0x2c
 8027bf4:	0e2d      	lsrs	r5, r5, #24
 8027bf6:	9512      	str	r5, [sp, #72]	@ 0x48
 8027bf8:	b180      	cbz	r0, 8027c1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8027bfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8027bfe:	3b01      	subs	r3, #1
 8027c00:	009b      	lsls	r3, r3, #2
 8027c02:	3304      	adds	r3, #4
 8027c04:	eb08 0c03 	add.w	ip, r8, r3
 8027c08:	f858 3003 	ldr.w	r3, [r8, r3]
 8027c0c:	9308      	str	r3, [sp, #32]
 8027c0e:	0e1b      	lsrs	r3, r3, #24
 8027c10:	9310      	str	r3, [sp, #64]	@ 0x40
 8027c12:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8027c16:	930c      	str	r3, [sp, #48]	@ 0x30
 8027c18:	0e1b      	lsrs	r3, r3, #24
 8027c1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027c1c:	b289      	uxth	r1, r1
 8027c1e:	b280      	uxth	r0, r0
 8027c20:	fb01 f900 	mul.w	r9, r1, r0
 8027c24:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027c28:	0109      	lsls	r1, r1, #4
 8027c2a:	eba1 0809 	sub.w	r8, r1, r9
 8027c2e:	b280      	uxth	r0, r0
 8027c30:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8027c34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027c36:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027c38:	fa1f f888 	uxth.w	r8, r8
 8027c3c:	1a09      	subs	r1, r1, r0
 8027c3e:	b289      	uxth	r1, r1
 8027c40:	fb08 f303 	mul.w	r3, r8, r3
 8027c44:	fb01 330e 	mla	r3, r1, lr, r3
 8027c48:	fb00 3305 	mla	r3, r0, r5, r3
 8027c4c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027c4e:	fb09 3305 	mla	r3, r9, r5, r3
 8027c52:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c56:	2b00      	cmp	r3, #0
 8027c58:	f000 80d2 	beq.w	8027e00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027c5c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8027c60:	d01b      	beq.n	8027c9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8027c62:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8027c66:	fb0e fa0a 	mul.w	sl, lr, sl
 8027c6a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027c6e:	fb0e fe02 	mul.w	lr, lr, r2
 8027c72:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027c76:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027c7a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8027c7e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8027c82:	4452      	add	r2, sl
 8027c84:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027c88:	0a12      	lsrs	r2, r2, #8
 8027c8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027c8e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027c92:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027c96:	ea42 020c 	orr.w	r2, r2, ip
 8027c9a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027c9c:	2dff      	cmp	r5, #255	@ 0xff
 8027c9e:	d021      	beq.n	8027ce4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8027ca0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027ca2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8027ca6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027ca8:	fb05 fb0b 	mul.w	fp, r5, fp
 8027cac:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027cae:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8027cb2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027cb4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027cb8:	fb05 fa0a 	mul.w	sl, r5, sl
 8027cbc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027cc0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027cc4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027cc8:	44de      	add	lr, fp
 8027cca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027cce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027cd2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027cd6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027cda:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027cde:	ea4e 050a 	orr.w	r5, lr, sl
 8027ce2:	950b      	str	r5, [sp, #44]	@ 0x2c
 8027ce4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027ce6:	2dff      	cmp	r5, #255	@ 0xff
 8027ce8:	d021      	beq.n	8027d2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8027cea:	9d08      	ldr	r5, [sp, #32]
 8027cec:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8027cf0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027cf2:	fb05 fb0b 	mul.w	fp, r5, fp
 8027cf6:	9d08      	ldr	r5, [sp, #32]
 8027cf8:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8027cfc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027cfe:	fb05 fa0e 	mul.w	sl, r5, lr
 8027d02:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027d06:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027d0a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027d0e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027d12:	44de      	add	lr, fp
 8027d14:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027d18:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027d1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027d20:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027d24:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027d28:	ea4e 050a 	orr.w	r5, lr, sl
 8027d2c:	9508      	str	r5, [sp, #32]
 8027d2e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027d30:	2dff      	cmp	r5, #255	@ 0xff
 8027d32:	d021      	beq.n	8027d78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8027d34:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8027d36:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8027d3a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027d3c:	fb05 fb0b 	mul.w	fp, r5, fp
 8027d40:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8027d42:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8027d46:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027d48:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027d4c:	fb05 fa0a 	mul.w	sl, r5, sl
 8027d50:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027d54:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027d58:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027d5c:	44de      	add	lr, fp
 8027d5e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027d62:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027d66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027d6a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027d6e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027d72:	ea4e 050a 	orr.w	r5, lr, sl
 8027d76:	950c      	str	r5, [sp, #48]	@ 0x30
 8027d78:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027d7a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027d7e:	9d08      	ldr	r5, [sp, #32]
 8027d80:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8027d84:	fb08 fc0c 	mul.w	ip, r8, ip
 8027d88:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027d8c:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8027d90:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8027d92:	fb00 cc0e 	mla	ip, r0, lr, ip
 8027d96:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8027d9a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027d9c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027da0:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8027da4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027da8:	fb08 f80e 	mul.w	r8, r8, lr
 8027dac:	fb01 8202 	mla	r2, r1, r2, r8
 8027db0:	9908      	ldr	r1, [sp, #32]
 8027db2:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8027db6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8027db8:	fb00 220a 	mla	r2, r0, sl, r2
 8027dbc:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8027dc0:	fb09 2900 	mla	r9, r9, r0, r2
 8027dc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027dc8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027dcc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027dd0:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8027dd4:	ea4c 0c09 	orr.w	ip, ip, r9
 8027dd8:	2bff      	cmp	r3, #255	@ 0xff
 8027dda:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8027dde:	f040 8091 	bne.w	8027f04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8027de2:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8027de6:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 8027dea:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027dee:	f022 0207 	bic.w	r2, r2, #7
 8027df2:	431a      	orrs	r2, r3
 8027df4:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8027df8:	ea4c 0c02 	orr.w	ip, ip, r2
 8027dfc:	f8a7 c000 	strh.w	ip, [r7]
 8027e00:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027e02:	441c      	add	r4, r3
 8027e04:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027e06:	441e      	add	r6, r3
 8027e08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027e0a:	3b01      	subs	r3, #1
 8027e0c:	3702      	adds	r7, #2
 8027e0e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8027e10:	e6c0      	b.n	8027b94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8027e12:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027e14:	441c      	add	r4, r3
 8027e16:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027e18:	441e      	add	r6, r3
 8027e1a:	9b07      	ldr	r3, [sp, #28]
 8027e1c:	3b01      	subs	r3, #1
 8027e1e:	9307      	str	r3, [sp, #28]
 8027e20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027e22:	3302      	adds	r3, #2
 8027e24:	930a      	str	r3, [sp, #40]	@ 0x28
 8027e26:	e695      	b.n	8027b54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027e28:	d024      	beq.n	8027e74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8027e2a:	9b07      	ldr	r3, [sp, #28]
 8027e2c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8027e2e:	3b01      	subs	r3, #1
 8027e30:	fb00 4003 	mla	r0, r0, r3, r4
 8027e34:	1400      	asrs	r0, r0, #16
 8027e36:	f53f aeaa 	bmi.w	8027b8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027e3a:	3901      	subs	r1, #1
 8027e3c:	4288      	cmp	r0, r1
 8027e3e:	f6bf aea6 	bge.w	8027b8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027e42:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8027e44:	fb01 6303 	mla	r3, r1, r3, r6
 8027e48:	141b      	asrs	r3, r3, #16
 8027e4a:	f53f aea0 	bmi.w	8027b8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027e4e:	3a01      	subs	r2, #1
 8027e50:	4293      	cmp	r3, r2
 8027e52:	f6bf ae9c 	bge.w	8027b8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027e56:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027e5a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8027e5e:	f1bb 0f00 	cmp.w	fp, #0
 8027e62:	f300 809a 	bgt.w	8027f9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8027e66:	9b07      	ldr	r3, [sp, #28]
 8027e68:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027e6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027e6e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8027e74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027e76:	2b00      	cmp	r3, #0
 8027e78:	f340 81eb 	ble.w	8028252 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8027e7c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027e80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027e84:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027e88:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027e8a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027e8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027e92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027e96:	eef0 6a62 	vmov.f32	s13, s5
 8027e9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027e9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ea2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027ea6:	ee16 4a90 	vmov	r4, s13
 8027eaa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027eae:	eef0 6a43 	vmov.f32	s13, s6
 8027eb2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027eb6:	ee12 2a90 	vmov	r2, s5
 8027eba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027ebe:	fb92 f3f3 	sdiv	r3, r2, r3
 8027ec2:	ee13 2a10 	vmov	r2, s6
 8027ec6:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027ec8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027eca:	fb92 f3f3 	sdiv	r3, r2, r3
 8027ece:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027ed0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027ed2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8027ed4:	3b01      	subs	r3, #1
 8027ed6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027eda:	9316      	str	r3, [sp, #88]	@ 0x58
 8027edc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027ede:	bf08      	it	eq
 8027ee0:	4613      	moveq	r3, r2
 8027ee2:	ee16 6a90 	vmov	r6, s13
 8027ee6:	9307      	str	r3, [sp, #28]
 8027ee8:	eeb0 3a67 	vmov.f32	s6, s15
 8027eec:	eef0 2a47 	vmov.f32	s5, s14
 8027ef0:	e622      	b.n	8027b38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8027ef2:	2800      	cmp	r0, #0
 8027ef4:	f43f ae92 	beq.w	8027c1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8027ef8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027efc:	9308      	str	r3, [sp, #32]
 8027efe:	0e1b      	lsrs	r3, r3, #24
 8027f00:	9310      	str	r3, [sp, #64]	@ 0x40
 8027f02:	e68b      	b.n	8027c1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8027f04:	8839      	ldrh	r1, [r7, #0]
 8027f06:	4dd4      	ldr	r5, [pc, #848]	@ (8028258 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8027f08:	43db      	mvns	r3, r3
 8027f0a:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8027f0e:	fa5f f883 	uxtb.w	r8, r3
 8027f12:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8027f16:	fb0e fe08 	mul.w	lr, lr, r8
 8027f1a:	10c8      	asrs	r0, r1, #3
 8027f1c:	00cb      	lsls	r3, r1, #3
 8027f1e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8027f22:	f10e 0101 	add.w	r1, lr, #1
 8027f26:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8027f2a:	fb00 f008 	mul.w	r0, r0, r8
 8027f2e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8027f32:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8027f36:	f100 0e01 	add.w	lr, r0, #1
 8027f3a:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8027f3e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8027f42:	b2db      	uxtb	r3, r3
 8027f44:	b2c9      	uxtb	r1, r1
 8027f46:	00d2      	lsls	r2, r2, #3
 8027f48:	fb03 f308 	mul.w	r3, r3, r8
 8027f4c:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8027f50:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027f54:	430a      	orrs	r2, r1
 8027f56:	1c59      	adds	r1, r3, #1
 8027f58:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027f5c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8027f60:	e748      	b.n	8027df4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8027f62:	f112 0801 	adds.w	r8, r2, #1
 8027f66:	f53f af4b 	bmi.w	8027e00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027f6a:	4543      	cmp	r3, r8
 8027f6c:	f6ff af48 	blt.w	8027e00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027f70:	f11c 0801 	adds.w	r8, ip, #1
 8027f74:	f53f af44 	bmi.w	8027e00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027f78:	45c6      	cmp	lr, r8
 8027f7a:	f6ff af41 	blt.w	8027e00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027f7e:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8027f82:	fa0f f28e 	sxth.w	r2, lr
 8027f86:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027f8a:	9200      	str	r2, [sp, #0]
 8027f8c:	b21b      	sxth	r3, r3
 8027f8e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027f90:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8027f92:	4639      	mov	r1, r7
 8027f94:	f7ff fc87 	bl	80278a6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8027f98:	e732      	b.n	8027e00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027f9a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027f9c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027f9e:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8027fa2:	1421      	asrs	r1, r4, #16
 8027fa4:	1433      	asrs	r3, r6, #16
 8027fa6:	fb07 1303 	mla	r3, r7, r3, r1
 8027faa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8027fac:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8027fb0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027fb4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027fb8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027fbc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027fc0:	2a00      	cmp	r2, #0
 8027fc2:	f000 8107 	beq.w	80281d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c8>
 8027fc6:	684d      	ldr	r5, [r1, #4]
 8027fc8:	950d      	str	r5, [sp, #52]	@ 0x34
 8027fca:	0e2d      	lsrs	r5, r5, #24
 8027fcc:	9514      	str	r5, [sp, #80]	@ 0x50
 8027fce:	b178      	cbz	r0, 8027ff0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8027fd0:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8027fd4:	3f01      	subs	r7, #1
 8027fd6:	00bf      	lsls	r7, r7, #2
 8027fd8:	3704      	adds	r7, #4
 8027fda:	eb01 0e07 	add.w	lr, r1, r7
 8027fde:	59c9      	ldr	r1, [r1, r7]
 8027fe0:	9109      	str	r1, [sp, #36]	@ 0x24
 8027fe2:	0e09      	lsrs	r1, r1, #24
 8027fe4:	9111      	str	r1, [sp, #68]	@ 0x44
 8027fe6:	f8de 1004 	ldr.w	r1, [lr, #4]
 8027fea:	910e      	str	r1, [sp, #56]	@ 0x38
 8027fec:	0e09      	lsrs	r1, r1, #24
 8027fee:	9115      	str	r1, [sp, #84]	@ 0x54
 8027ff0:	b292      	uxth	r2, r2
 8027ff2:	b280      	uxth	r0, r0
 8027ff4:	fb02 f900 	mul.w	r9, r2, r0
 8027ff8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027ffc:	0112      	lsls	r2, r2, #4
 8027ffe:	eba2 0e09 	sub.w	lr, r2, r9
 8028002:	b280      	uxth	r0, r0
 8028004:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8028008:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802800a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802800c:	fa1f fe8e 	uxth.w	lr, lr
 8028010:	1a09      	subs	r1, r1, r0
 8028012:	b289      	uxth	r1, r1
 8028014:	fb0e f202 	mul.w	r2, lr, r2
 8028018:	fb01 220c 	mla	r2, r1, ip, r2
 802801c:	fb00 2205 	mla	r2, r0, r5, r2
 8028020:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028022:	fb09 2205 	mla	r2, r9, r5, r2
 8028026:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802802a:	2a00      	cmp	r2, #0
 802802c:	f000 80c9 	beq.w	80281c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 8028030:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8028034:	d019      	beq.n	802806a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8028036:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802803a:	fb0c fa0a 	mul.w	sl, ip, sl
 802803e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028042:	fb0c fc03 	mul.w	ip, ip, r3
 8028046:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802804a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802804e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028052:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8028056:	4453      	add	r3, sl
 8028058:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802805c:	0a1b      	lsrs	r3, r3, #8
 802805e:	0a3f      	lsrs	r7, r7, #8
 8028060:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028064:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8028068:	433b      	orrs	r3, r7
 802806a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802806c:	2dff      	cmp	r5, #255	@ 0xff
 802806e:	d020      	beq.n	80280b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8028070:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028072:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028076:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028078:	436f      	muls	r7, r5
 802807a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802807c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028080:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028082:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028086:	fb05 fa0a 	mul.w	sl, r5, sl
 802808a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802808e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028092:	44bc      	add	ip, r7
 8028094:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028098:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802809c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80280a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80280a4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80280a8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80280ac:	ea4c 050a 	orr.w	r5, ip, sl
 80280b0:	950d      	str	r5, [sp, #52]	@ 0x34
 80280b2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80280b4:	2dff      	cmp	r5, #255	@ 0xff
 80280b6:	d020      	beq.n	80280fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 80280b8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80280ba:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80280be:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80280c0:	436f      	muls	r7, r5
 80280c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80280c4:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 80280c8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80280ca:	fb05 fa0c 	mul.w	sl, r5, ip
 80280ce:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80280d2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80280d6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80280da:	44bc      	add	ip, r7
 80280dc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80280e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80280e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80280e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80280ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80280f0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80280f4:	ea4c 050a 	orr.w	r5, ip, sl
 80280f8:	9509      	str	r5, [sp, #36]	@ 0x24
 80280fa:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80280fc:	2dff      	cmp	r5, #255	@ 0xff
 80280fe:	d020      	beq.n	8028142 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8028100:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028102:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028106:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028108:	436f      	muls	r7, r5
 802810a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802810c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028110:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8028112:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028116:	fb05 fa0a 	mul.w	sl, r5, sl
 802811a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802811e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028122:	44bc      	add	ip, r7
 8028124:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8028128:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802812c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028130:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028134:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028138:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802813c:	ea4c 050a 	orr.w	r5, ip, sl
 8028140:	950e      	str	r5, [sp, #56]	@ 0x38
 8028142:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028144:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8028148:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802814a:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802814e:	fb0e f707 	mul.w	r7, lr, r7
 8028152:	fb01 770c 	mla	r7, r1, ip, r7
 8028156:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802815a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802815c:	fb00 770c 	mla	r7, r0, ip, r7
 8028160:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028164:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028166:	fb09 770c 	mla	r7, r9, ip, r7
 802816a:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 802816e:	fb0e fe0c 	mul.w	lr, lr, ip
 8028172:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028176:	fb01 e303 	mla	r3, r1, r3, lr
 802817a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802817c:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8028180:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8028182:	fb00 330a 	mla	r3, r0, sl, r3
 8028186:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 802818a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802818e:	0a3f      	lsrs	r7, r7, #8
 8028190:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028194:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8028198:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802819c:	ea47 070c 	orr.w	r7, r7, ip
 80281a0:	2aff      	cmp	r2, #255	@ 0xff
 80281a2:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80281a6:	d11e      	bne.n	80281e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 80281a8:	097a      	lsrs	r2, r7, #5
 80281aa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80281ae:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80281b2:	f023 0307 	bic.w	r3, r3, #7
 80281b6:	4313      	orrs	r3, r2
 80281b8:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80281bc:	431f      	orrs	r7, r3
 80281be:	f8a8 7000 	strh.w	r7, [r8]
 80281c2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80281c4:	441c      	add	r4, r3
 80281c6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80281c8:	f108 0802 	add.w	r8, r8, #2
 80281cc:	441e      	add	r6, r3
 80281ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80281d2:	e644      	b.n	8027e5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80281d4:	2800      	cmp	r0, #0
 80281d6:	f43f af0b 	beq.w	8027ff0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80281da:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80281de:	9109      	str	r1, [sp, #36]	@ 0x24
 80281e0:	0e09      	lsrs	r1, r1, #24
 80281e2:	9111      	str	r1, [sp, #68]	@ 0x44
 80281e4:	e704      	b.n	8027ff0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80281e6:	f8b8 1000 	ldrh.w	r1, [r8]
 80281ea:	43d2      	mvns	r2, r2
 80281ec:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80281f0:	fa5f fe82 	uxtb.w	lr, r2
 80281f4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80281f8:	fb0c fc0e 	mul.w	ip, ip, lr
 80281fc:	10c8      	asrs	r0, r1, #3
 80281fe:	00ca      	lsls	r2, r1, #3
 8028200:	f10c 0101 	add.w	r1, ip, #1
 8028204:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028208:	0c39      	lsrs	r1, r7, #16
 802820a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802820e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8028212:	4911      	ldr	r1, [pc, #68]	@ (8028258 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8028214:	fb00 f00e 	mul.w	r0, r0, lr
 8028218:	fa5f fc8c 	uxtb.w	ip, ip
 802821c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8028220:	b2d2      	uxtb	r2, r2
 8028222:	1c41      	adds	r1, r0, #1
 8028224:	fb02 f20e 	mul.w	r2, r2, lr
 8028228:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802822c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028230:	1c51      	adds	r1, r2, #1
 8028232:	00c0      	lsls	r0, r0, #3
 8028234:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028238:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802823c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8028240:	ea4c 0c00 	orr.w	ip, ip, r0
 8028244:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8028248:	ea47 0c0c 	orr.w	ip, r7, ip
 802824c:	f8a8 c000 	strh.w	ip, [r8]
 8028250:	e7b7      	b.n	80281c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 8028252:	b01b      	add	sp, #108	@ 0x6c
 8028254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028258:	fffff800 	.word	0xfffff800

0802825c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802825c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028260:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8028264:	2d00      	cmp	r5, #0
 8028266:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802826a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802826e:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8028272:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8028276:	fb05 0e03 	mla	lr, r5, r3, r0
 802827a:	f2c0 808c 	blt.w	8028396 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802827e:	45a9      	cmp	r9, r5
 8028280:	f340 8089 	ble.w	8028396 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8028284:	2800      	cmp	r0, #0
 8028286:	f2c0 8084 	blt.w	8028392 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802828a:	4580      	cmp	r8, r0
 802828c:	f340 8081 	ble.w	8028392 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8028290:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028294:	f01e 0f01 	tst.w	lr, #1
 8028298:	5d16      	ldrb	r6, [r2, r4]
 802829a:	bf0c      	ite	eq
 802829c:	f006 060f 	andeq.w	r6, r6, #15
 80282a0:	1136      	asrne	r6, r6, #4
 80282a2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80282a6:	b2f6      	uxtb	r6, r6
 80282a8:	1c44      	adds	r4, r0, #1
 80282aa:	d477      	bmi.n	802839c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80282ac:	45a0      	cmp	r8, r4
 80282ae:	dd75      	ble.n	802839c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80282b0:	2f00      	cmp	r7, #0
 80282b2:	d075      	beq.n	80283a0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 80282b4:	f10e 0a01 	add.w	sl, lr, #1
 80282b8:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80282bc:	f01a 0f01 	tst.w	sl, #1
 80282c0:	5d14      	ldrb	r4, [r2, r4]
 80282c2:	bf0c      	ite	eq
 80282c4:	f004 040f 	andeq.w	r4, r4, #15
 80282c8:	1124      	asrne	r4, r4, #4
 80282ca:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80282ce:	b2e4      	uxtb	r4, r4
 80282d0:	3501      	adds	r5, #1
 80282d2:	d469      	bmi.n	80283a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80282d4:	45a9      	cmp	r9, r5
 80282d6:	dd67      	ble.n	80283a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80282d8:	f1bc 0f00 	cmp.w	ip, #0
 80282dc:	d067      	beq.n	80283ae <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 80282de:	2800      	cmp	r0, #0
 80282e0:	db60      	blt.n	80283a4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80282e2:	4580      	cmp	r8, r0
 80282e4:	dd5e      	ble.n	80283a4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80282e6:	eb03 090e 	add.w	r9, r3, lr
 80282ea:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80282ee:	f019 0f01 	tst.w	r9, #1
 80282f2:	5d55      	ldrb	r5, [r2, r5]
 80282f4:	bf0c      	ite	eq
 80282f6:	f005 050f 	andeq.w	r5, r5, #15
 80282fa:	112d      	asrne	r5, r5, #4
 80282fc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8028300:	b2ed      	uxtb	r5, r5
 8028302:	3001      	adds	r0, #1
 8028304:	d456      	bmi.n	80283b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8028306:	4580      	cmp	r8, r0
 8028308:	dd54      	ble.n	80283b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802830a:	2f00      	cmp	r7, #0
 802830c:	d054      	beq.n	80283b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802830e:	3301      	adds	r3, #1
 8028310:	449e      	add	lr, r3
 8028312:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028316:	f01e 0f01 	tst.w	lr, #1
 802831a:	5cd0      	ldrb	r0, [r2, r3]
 802831c:	bf0c      	ite	eq
 802831e:	f000 000f 	andeq.w	r0, r0, #15
 8028322:	1100      	asrne	r0, r0, #4
 8028324:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028328:	b2c3      	uxtb	r3, r0
 802832a:	b2ba      	uxth	r2, r7
 802832c:	fa1f fc8c 	uxth.w	ip, ip
 8028330:	fb02 f00c 	mul.w	r0, r2, ip
 8028334:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8028338:	0112      	lsls	r2, r2, #4
 802833a:	fa1f fc8c 	uxth.w	ip, ip
 802833e:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8028342:	1a12      	subs	r2, r2, r0
 8028344:	eba7 070c 	sub.w	r7, r7, ip
 8028348:	b292      	uxth	r2, r2
 802834a:	b2bf      	uxth	r7, r7
 802834c:	4362      	muls	r2, r4
 802834e:	fb06 2207 	mla	r2, r6, r7, r2
 8028352:	fb0c 2505 	mla	r5, ip, r5, r2
 8028356:	fb00 5303 	mla	r3, r0, r3, r5
 802835a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802835e:	b1b3      	cbz	r3, 802838e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8028360:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 8028364:	435a      	muls	r2, r3
 8028366:	1c53      	adds	r3, r2, #1
 8028368:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802836c:	4a2d      	ldr	r2, [pc, #180]	@ (8028424 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802836e:	121b      	asrs	r3, r3, #8
 8028370:	6812      	ldr	r2, [r2, #0]
 8028372:	2bff      	cmp	r3, #255	@ 0xff
 8028374:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8028378:	d120      	bne.n	80283bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802837a:	4b2b      	ldr	r3, [pc, #172]	@ (8028428 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802837c:	0950      	lsrs	r0, r2, #5
 802837e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028382:	4033      	ands	r3, r6
 8028384:	4318      	orrs	r0, r3
 8028386:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802838a:	4302      	orrs	r2, r0
 802838c:	800a      	strh	r2, [r1, #0]
 802838e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028392:	2600      	movs	r6, #0
 8028394:	e788      	b.n	80282a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8028396:	2400      	movs	r4, #0
 8028398:	4626      	mov	r6, r4
 802839a:	e799      	b.n	80282d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802839c:	2400      	movs	r4, #0
 802839e:	e797      	b.n	80282d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80283a0:	463c      	mov	r4, r7
 80283a2:	e795      	b.n	80282d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80283a4:	2500      	movs	r5, #0
 80283a6:	e7ac      	b.n	8028302 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 80283a8:	2300      	movs	r3, #0
 80283aa:	461d      	mov	r5, r3
 80283ac:	e7bd      	b.n	802832a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80283ae:	4663      	mov	r3, ip
 80283b0:	4665      	mov	r5, ip
 80283b2:	e7ba      	b.n	802832a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80283b4:	2300      	movs	r3, #0
 80283b6:	e7b8      	b.n	802832a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80283b8:	463b      	mov	r3, r7
 80283ba:	e7b6      	b.n	802832a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80283bc:	880d      	ldrh	r5, [r1, #0]
 80283be:	b29f      	uxth	r7, r3
 80283c0:	122c      	asrs	r4, r5, #8
 80283c2:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80283c6:	43db      	mvns	r3, r3
 80283c8:	b2db      	uxtb	r3, r3
 80283ca:	fb10 f007 	smulbb	r0, r0, r7
 80283ce:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80283d2:	fb04 0403 	mla	r4, r4, r3, r0
 80283d6:	b2f6      	uxtb	r6, r6
 80283d8:	10e8      	asrs	r0, r5, #3
 80283da:	b2d2      	uxtb	r2, r2
 80283dc:	00ed      	lsls	r5, r5, #3
 80283de:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80283e2:	fb12 f207 	smulbb	r2, r2, r7
 80283e6:	fb16 f607 	smulbb	r6, r6, r7
 80283ea:	b2ed      	uxtb	r5, r5
 80283ec:	b2a4      	uxth	r4, r4
 80283ee:	fb00 6603 	mla	r6, r0, r3, r6
 80283f2:	fb05 2303 	mla	r3, r5, r3, r2
 80283f6:	b29a      	uxth	r2, r3
 80283f8:	1c63      	adds	r3, r4, #1
 80283fa:	b2b0      	uxth	r0, r6
 80283fc:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028400:	1c53      	adds	r3, r2, #1
 8028402:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028406:	1c42      	adds	r2, r0, #1
 8028408:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802840c:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8028410:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028414:	0940      	lsrs	r0, r0, #5
 8028416:	4323      	orrs	r3, r4
 8028418:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802841c:	4303      	orrs	r3, r0
 802841e:	800b      	strh	r3, [r1, #0]
 8028420:	e7b5      	b.n	802838e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8028422:	bf00      	nop
 8028424:	200126f0 	.word	0x200126f0
 8028428:	00fff800 	.word	0x00fff800

0802842c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802842c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028430:	b097      	sub	sp, #92	@ 0x5c
 8028432:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 8028436:	9214      	str	r2, [sp, #80]	@ 0x50
 8028438:	9309      	str	r3, [sp, #36]	@ 0x24
 802843a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802843c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8028440:	910d      	str	r1, [sp, #52]	@ 0x34
 8028442:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028444:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8028448:	9015      	str	r0, [sp, #84]	@ 0x54
 802844a:	6850      	ldr	r0, [r2, #4]
 802844c:	6812      	ldr	r2, [r2, #0]
 802844e:	fb00 1303 	mla	r3, r0, r3, r1
 8028452:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8028456:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028458:	689b      	ldr	r3, [r3, #8]
 802845a:	3301      	adds	r3, #1
 802845c:	f023 0301 	bic.w	r3, r3, #1
 8028460:	930a      	str	r3, [sp, #40]	@ 0x28
 8028462:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028464:	681f      	ldr	r7, [r3, #0]
 8028466:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028468:	2b00      	cmp	r3, #0
 802846a:	dc03      	bgt.n	8028474 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802846c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802846e:	2b00      	cmp	r3, #0
 8028470:	f340 8287 	ble.w	8028982 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8028474:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028476:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802847a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802847e:	1e48      	subs	r0, r1, #1
 8028480:	f102 3cff 	add.w	ip, r2, #4294967295
 8028484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028486:	2b00      	cmp	r3, #0
 8028488:	f340 80c4 	ble.w	8028614 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802848c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028490:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028494:	d406      	bmi.n	80284a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028496:	4586      	cmp	lr, r0
 8028498:	da04      	bge.n	80284a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802849a:	2b00      	cmp	r3, #0
 802849c:	db02      	blt.n	80284a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802849e:	4563      	cmp	r3, ip
 80284a0:	f2c0 80b9 	blt.w	8028616 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80284a4:	f11e 0e01 	adds.w	lr, lr, #1
 80284a8:	f100 80aa 	bmi.w	8028600 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80284ac:	4571      	cmp	r1, lr
 80284ae:	f2c0 80a7 	blt.w	8028600 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80284b2:	3301      	adds	r3, #1
 80284b4:	f100 80a4 	bmi.w	8028600 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80284b8:	429a      	cmp	r2, r3
 80284ba:	f2c0 80a1 	blt.w	8028600 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80284be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80284c0:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 80284c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80284c6:	46c8      	mov	r8, r9
 80284c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80284ca:	2b00      	cmp	r3, #0
 80284cc:	f340 80c3 	ble.w	8028656 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80284d0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80284d2:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80284d6:	1423      	asrs	r3, r4, #16
 80284d8:	ea4f 4026 	mov.w	r0, r6, asr #16
 80284dc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80284e0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80284e4:	f100 814d 	bmi.w	8028782 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80284e8:	f10c 3bff 	add.w	fp, ip, #4294967295
 80284ec:	455b      	cmp	r3, fp
 80284ee:	f280 8148 	bge.w	8028782 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80284f2:	2800      	cmp	r0, #0
 80284f4:	f2c0 8145 	blt.w	8028782 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80284f8:	f10e 3bff 	add.w	fp, lr, #4294967295
 80284fc:	4558      	cmp	r0, fp
 80284fe:	f280 8140 	bge.w	8028782 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028502:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8028504:	fb00 3305 	mla	r3, r0, r5, r3
 8028508:	0858      	lsrs	r0, r3, #1
 802850a:	07dd      	lsls	r5, r3, #31
 802850c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8028510:	bf54      	ite	pl
 8028512:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028516:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802851a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802851e:	fa5f fc8c 	uxtb.w	ip, ip
 8028522:	2a00      	cmp	r2, #0
 8028524:	f000 80db 	beq.w	80286de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 8028528:	1c58      	adds	r0, r3, #1
 802852a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802852e:	07c0      	lsls	r0, r0, #31
 8028530:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028534:	bf54      	ite	pl
 8028536:	f00e 0e0f 	andpl.w	lr, lr, #15
 802853a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802853e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028542:	fa5f f08e 	uxtb.w	r0, lr
 8028546:	9010      	str	r0, [sp, #64]	@ 0x40
 8028548:	b1c9      	cbz	r1, 802857e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802854a:	4453      	add	r3, sl
 802854c:	0858      	lsrs	r0, r3, #1
 802854e:	07dd      	lsls	r5, r3, #31
 8028550:	5c38      	ldrb	r0, [r7, r0]
 8028552:	bf54      	ite	pl
 8028554:	f000 000f 	andpl.w	r0, r0, #15
 8028558:	1100      	asrmi	r0, r0, #4
 802855a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802855e:	3301      	adds	r3, #1
 8028560:	b2c0      	uxtb	r0, r0
 8028562:	900b      	str	r0, [sp, #44]	@ 0x2c
 8028564:	0858      	lsrs	r0, r3, #1
 8028566:	07dd      	lsls	r5, r3, #31
 8028568:	f817 e000 	ldrb.w	lr, [r7, r0]
 802856c:	bf54      	ite	pl
 802856e:	f00e 030f 	andpl.w	r3, lr, #15
 8028572:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8028576:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802857a:	b2db      	uxtb	r3, r3
 802857c:	9311      	str	r3, [sp, #68]	@ 0x44
 802857e:	b292      	uxth	r2, r2
 8028580:	b289      	uxth	r1, r1
 8028582:	fb02 f301 	mul.w	r3, r2, r1
 8028586:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802858a:	0112      	lsls	r2, r2, #4
 802858c:	b289      	uxth	r1, r1
 802858e:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8028592:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8028594:	1ad2      	subs	r2, r2, r3
 8028596:	1a40      	subs	r0, r0, r1
 8028598:	b292      	uxth	r2, r2
 802859a:	436a      	muls	r2, r5
 802859c:	b280      	uxth	r0, r0
 802859e:	fb0c 2c00 	mla	ip, ip, r0, r2
 80285a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80285a4:	fb01 c102 	mla	r1, r1, r2, ip
 80285a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80285aa:	fb03 1302 	mla	r3, r3, r2, r1
 80285ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80285b2:	b1db      	cbz	r3, 80285ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80285b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80285b6:	4353      	muls	r3, r2
 80285b8:	1c5a      	adds	r2, r3, #1
 80285ba:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80285be:	4ac6      	ldr	r2, [pc, #792]	@ (80288d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 80285c0:	121b      	asrs	r3, r3, #8
 80285c2:	6812      	ldr	r2, [r2, #0]
 80285c4:	2bff      	cmp	r3, #255	@ 0xff
 80285c6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80285ca:	f040 8099 	bne.w	8028700 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80285ce:	0953      	lsrs	r3, r2, #5
 80285d0:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 80285d4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80285d8:	f02c 0c07 	bic.w	ip, ip, #7
 80285dc:	ea43 0c0c 	orr.w	ip, r3, ip
 80285e0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80285e4:	ea4c 0202 	orr.w	r2, ip, r2
 80285e8:	f8a8 2000 	strh.w	r2, [r8]
 80285ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80285ee:	441c      	add	r4, r3
 80285f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80285f2:	441e      	add	r6, r3
 80285f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80285f6:	3b01      	subs	r3, #1
 80285f8:	f108 0802 	add.w	r8, r8, #2
 80285fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80285fe:	e763      	b.n	80284c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8028600:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028602:	441c      	add	r4, r3
 8028604:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028606:	441e      	add	r6, r3
 8028608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802860a:	3b01      	subs	r3, #1
 802860c:	9309      	str	r3, [sp, #36]	@ 0x24
 802860e:	f109 0902 	add.w	r9, r9, #2
 8028612:	e737      	b.n	8028484 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028614:	d024      	beq.n	8028660 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028618:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802861a:	3b01      	subs	r3, #1
 802861c:	fb00 4003 	mla	r0, r0, r3, r4
 8028620:	1400      	asrs	r0, r0, #16
 8028622:	f53f af4c 	bmi.w	80284be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028626:	3901      	subs	r1, #1
 8028628:	4288      	cmp	r0, r1
 802862a:	f6bf af48 	bge.w	80284be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802862e:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8028630:	fb01 6303 	mla	r3, r1, r3, r6
 8028634:	141b      	asrs	r3, r3, #16
 8028636:	f53f af42 	bmi.w	80284be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802863a:	3a01      	subs	r2, #1
 802863c:	4293      	cmp	r3, r2
 802863e:	f6bf af3e 	bge.w	80284be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028642:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8028646:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802864a:	930e      	str	r3, [sp, #56]	@ 0x38
 802864c:	46c8      	mov	r8, r9
 802864e:	f1bb 0f00 	cmp.w	fp, #0
 8028652:	f300 80b7 	bgt.w	80287c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8028656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028658:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802865c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8028660:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028662:	2b00      	cmp	r3, #0
 8028664:	f340 818d 	ble.w	8028982 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8028668:	ee30 0a04 	vadd.f32	s0, s0, s8
 802866c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028670:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028674:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028676:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802867a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802867e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028682:	eef0 6a62 	vmov.f32	s13, s5
 8028686:	ee61 7a27 	vmul.f32	s15, s2, s15
 802868a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802868e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028692:	ee16 4a90 	vmov	r4, s13
 8028696:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802869a:	eef0 6a43 	vmov.f32	s13, s6
 802869e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80286a2:	ee12 2a90 	vmov	r2, s5
 80286a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80286aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80286ae:	ee13 2a10 	vmov	r2, s6
 80286b2:	9323      	str	r3, [sp, #140]	@ 0x8c
 80286b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80286b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80286ba:	9324      	str	r3, [sp, #144]	@ 0x90
 80286bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80286be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80286c0:	3b01      	subs	r3, #1
 80286c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80286c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80286c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80286ca:	bf08      	it	eq
 80286cc:	4613      	moveq	r3, r2
 80286ce:	ee16 6a90 	vmov	r6, s13
 80286d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80286d4:	eeb0 3a67 	vmov.f32	s6, s15
 80286d8:	eef0 2a47 	vmov.f32	s5, s14
 80286dc:	e6c3      	b.n	8028466 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80286de:	2900      	cmp	r1, #0
 80286e0:	f43f af4d 	beq.w	802857e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80286e4:	eb0a 0003 	add.w	r0, sl, r3
 80286e8:	0843      	lsrs	r3, r0, #1
 80286ea:	07c0      	lsls	r0, r0, #31
 80286ec:	5cfb      	ldrb	r3, [r7, r3]
 80286ee:	bf54      	ite	pl
 80286f0:	f003 030f 	andpl.w	r3, r3, #15
 80286f4:	111b      	asrmi	r3, r3, #4
 80286f6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80286fa:	b2db      	uxtb	r3, r3
 80286fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80286fe:	e73e      	b.n	802857e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8028700:	f8b8 e000 	ldrh.w	lr, [r8]
 8028704:	fa1f fb83 	uxth.w	fp, r3
 8028708:	ea4f 202e 	mov.w	r0, lr, asr #8
 802870c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8028710:	43db      	mvns	r3, r3
 8028712:	b2db      	uxtb	r3, r3
 8028714:	fb11 f10b 	smulbb	r1, r1, fp
 8028718:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802871c:	fb00 1003 	mla	r0, r0, r3, r1
 8028720:	fa5f fc8c 	uxtb.w	ip, ip
 8028724:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8028728:	b2d2      	uxtb	r2, r2
 802872a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802872e:	b280      	uxth	r0, r0
 8028730:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8028734:	fb1c fc0b 	smulbb	ip, ip, fp
 8028738:	fa5f fe8e 	uxtb.w	lr, lr
 802873c:	fb12 fb0b 	smulbb	fp, r2, fp
 8028740:	fb01 cc03 	mla	ip, r1, r3, ip
 8028744:	fb0e bb03 	mla	fp, lr, r3, fp
 8028748:	1c43      	adds	r3, r0, #1
 802874a:	fa1f fc8c 	uxth.w	ip, ip
 802874e:	fa1f fb8b 	uxth.w	fp, fp
 8028752:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028756:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 802875a:	f10c 0101 	add.w	r1, ip, #1
 802875e:	f10b 0001 	add.w	r0, fp, #1
 8028762:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028766:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802876a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802876e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028772:	4318      	orrs	r0, r3
 8028774:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8028778:	ea40 000c 	orr.w	r0, r0, ip
 802877c:	f8a8 0000 	strh.w	r0, [r8]
 8028780:	e734      	b.n	80285ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8028782:	f113 0b01 	adds.w	fp, r3, #1
 8028786:	f53f af31 	bmi.w	80285ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802878a:	45dc      	cmp	ip, fp
 802878c:	f6ff af2e 	blt.w	80285ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8028790:	f110 0b01 	adds.w	fp, r0, #1
 8028794:	f53f af2a 	bmi.w	80285ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8028798:	45de      	cmp	lr, fp
 802879a:	f6ff af27 	blt.w	80285ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802879e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80287a0:	9302      	str	r3, [sp, #8]
 80287a2:	fa0f f38e 	sxth.w	r3, lr
 80287a6:	9301      	str	r3, [sp, #4]
 80287a8:	fa0f f38c 	sxth.w	r3, ip
 80287ac:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80287b0:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80287b4:	9300      	str	r3, [sp, #0]
 80287b6:	463a      	mov	r2, r7
 80287b8:	4653      	mov	r3, sl
 80287ba:	4641      	mov	r1, r8
 80287bc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80287be:	f7ff fd4d 	bl	802825c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 80287c2:	e713      	b.n	80285ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80287c4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80287c6:	1422      	asrs	r2, r4, #16
 80287c8:	1433      	asrs	r3, r6, #16
 80287ca:	fb05 2303 	mla	r3, r5, r3, r2
 80287ce:	085a      	lsrs	r2, r3, #1
 80287d0:	07dd      	lsls	r5, r3, #31
 80287d2:	5cba      	ldrb	r2, [r7, r2]
 80287d4:	bf54      	ite	pl
 80287d6:	f002 020f 	andpl.w	r2, r2, #15
 80287da:	1112      	asrmi	r2, r2, #4
 80287dc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80287e0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80287e4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80287e8:	b2d2      	uxtb	r2, r2
 80287ea:	2900      	cmp	r1, #0
 80287ec:	d076      	beq.n	80288dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80287ee:	f103 0e01 	add.w	lr, r3, #1
 80287f2:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80287f6:	f01e 0f01 	tst.w	lr, #1
 80287fa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80287fe:	bf0c      	ite	eq
 8028800:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028804:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028808:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802880c:	fa5f f58c 	uxtb.w	r5, ip
 8028810:	9512      	str	r5, [sp, #72]	@ 0x48
 8028812:	b300      	cbz	r0, 8028856 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8028814:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028816:	442b      	add	r3, r5
 8028818:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802881c:	07dd      	lsls	r5, r3, #31
 802881e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028822:	bf54      	ite	pl
 8028824:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028828:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802882c:	3301      	adds	r3, #1
 802882e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028832:	fa5f f58c 	uxtb.w	r5, ip
 8028836:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802883a:	950c      	str	r5, [sp, #48]	@ 0x30
 802883c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028840:	07dd      	lsls	r5, r3, #31
 8028842:	bf54      	ite	pl
 8028844:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028848:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802884c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028850:	fa5f f38c 	uxtb.w	r3, ip
 8028854:	9313      	str	r3, [sp, #76]	@ 0x4c
 8028856:	b289      	uxth	r1, r1
 8028858:	b280      	uxth	r0, r0
 802885a:	fb01 f300 	mul.w	r3, r1, r0
 802885e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8028862:	0109      	lsls	r1, r1, #4
 8028864:	b280      	uxth	r0, r0
 8028866:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 802886a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802886c:	1ac9      	subs	r1, r1, r3
 802886e:	ebac 0c00 	sub.w	ip, ip, r0
 8028872:	b289      	uxth	r1, r1
 8028874:	4369      	muls	r1, r5
 8028876:	fa1f fc8c 	uxth.w	ip, ip
 802887a:	fb02 120c 	mla	r2, r2, ip, r1
 802887e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8028880:	fb00 2001 	mla	r0, r0, r1, r2
 8028884:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8028886:	fb03 0302 	mla	r3, r3, r2, r0
 802888a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802888e:	b1d3      	cbz	r3, 80288c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8028890:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028892:	4353      	muls	r3, r2
 8028894:	1c5a      	adds	r2, r3, #1
 8028896:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802889a:	4a0f      	ldr	r2, [pc, #60]	@ (80288d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802889c:	121b      	asrs	r3, r3, #8
 802889e:	6812      	ldr	r2, [r2, #0]
 80288a0:	2bff      	cmp	r3, #255	@ 0xff
 80288a2:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80288a6:	d12d      	bne.n	8028904 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80288a8:	0953      	lsrs	r3, r2, #5
 80288aa:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 80288ae:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80288b2:	f02c 0c07 	bic.w	ip, ip, #7
 80288b6:	ea43 0c0c 	orr.w	ip, r3, ip
 80288ba:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80288be:	ea4c 0202 	orr.w	r2, ip, r2
 80288c2:	f8a8 2000 	strh.w	r2, [r8]
 80288c6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80288c8:	441c      	add	r4, r3
 80288ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80288cc:	f108 0802 	add.w	r8, r8, #2
 80288d0:	441e      	add	r6, r3
 80288d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80288d6:	e6ba      	b.n	802864e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80288d8:	200126f0 	.word	0x200126f0
 80288dc:	2800      	cmp	r0, #0
 80288de:	d0ba      	beq.n	8028856 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80288e0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80288e2:	442b      	add	r3, r5
 80288e4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80288e8:	07db      	lsls	r3, r3, #31
 80288ea:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80288ee:	bf54      	ite	pl
 80288f0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80288f4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80288f8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80288fc:	fa5f f38c 	uxtb.w	r3, ip
 8028900:	930c      	str	r3, [sp, #48]	@ 0x30
 8028902:	e7a8      	b.n	8028856 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8028904:	f8b8 e000 	ldrh.w	lr, [r8]
 8028908:	fa1f fa83 	uxth.w	sl, r3
 802890c:	ea4f 202e 	mov.w	r0, lr, asr #8
 8028910:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8028914:	43db      	mvns	r3, r3
 8028916:	b2db      	uxtb	r3, r3
 8028918:	fb11 f10a 	smulbb	r1, r1, sl
 802891c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8028920:	fb00 1003 	mla	r0, r0, r3, r1
 8028924:	b2d2      	uxtb	r2, r2
 8028926:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802892a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802892e:	fa5f fe8e 	uxtb.w	lr, lr
 8028932:	fb12 f20a 	smulbb	r2, r2, sl
 8028936:	fb0e 2203 	mla	r2, lr, r3, r2
 802893a:	fa5f fc8c 	uxtb.w	ip, ip
 802893e:	b280      	uxth	r0, r0
 8028940:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8028944:	b292      	uxth	r2, r2
 8028946:	fb1c fc0a 	smulbb	ip, ip, sl
 802894a:	fb01 cc03 	mla	ip, r1, r3, ip
 802894e:	1c43      	adds	r3, r0, #1
 8028950:	1c51      	adds	r1, r2, #1
 8028952:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028956:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802895a:	fa1f fc8c 	uxth.w	ip, ip
 802895e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8028962:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8028966:	4308      	orrs	r0, r1
 8028968:	f10c 0101 	add.w	r1, ip, #1
 802896c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028970:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028974:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8028978:	ea40 000c 	orr.w	r0, r0, ip
 802897c:	f8a8 0000 	strh.w	r0, [r8]
 8028980:	e7a1      	b.n	80288c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8028982:	b017      	add	sp, #92	@ 0x5c
 8028984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028988 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8028988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802898c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8028990:	2d00      	cmp	r5, #0
 8028992:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8028996:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802899a:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802899e:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 80289a2:	fb05 0e03 	mla	lr, r5, r3, r0
 80289a6:	f2c0 80b0 	blt.w	8028b0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80289aa:	45a9      	cmp	r9, r5
 80289ac:	f340 80ad 	ble.w	8028b0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80289b0:	2800      	cmp	r0, #0
 80289b2:	f2c0 80a8 	blt.w	8028b06 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80289b6:	4580      	cmp	r8, r0
 80289b8:	f340 80a5 	ble.w	8028b06 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80289bc:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80289c0:	f01e 0f01 	tst.w	lr, #1
 80289c4:	5d16      	ldrb	r6, [r2, r4]
 80289c6:	bf0c      	ite	eq
 80289c8:	f006 060f 	andeq.w	r6, r6, #15
 80289cc:	1136      	asrne	r6, r6, #4
 80289ce:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80289d2:	b2f6      	uxtb	r6, r6
 80289d4:	1c44      	adds	r4, r0, #1
 80289d6:	f100 809b 	bmi.w	8028b10 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80289da:	45a0      	cmp	r8, r4
 80289dc:	f340 8098 	ble.w	8028b10 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80289e0:	2f00      	cmp	r7, #0
 80289e2:	f000 8097 	beq.w	8028b14 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 80289e6:	f10e 0a01 	add.w	sl, lr, #1
 80289ea:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80289ee:	f01a 0f01 	tst.w	sl, #1
 80289f2:	5d14      	ldrb	r4, [r2, r4]
 80289f4:	bf0c      	ite	eq
 80289f6:	f004 040f 	andeq.w	r4, r4, #15
 80289fa:	1124      	asrne	r4, r4, #4
 80289fc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028a00:	b2e4      	uxtb	r4, r4
 8028a02:	3501      	adds	r5, #1
 8028a04:	f100 808a 	bmi.w	8028b1c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8028a08:	45a9      	cmp	r9, r5
 8028a0a:	f340 8087 	ble.w	8028b1c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8028a0e:	f1bc 0f00 	cmp.w	ip, #0
 8028a12:	f000 8086 	beq.w	8028b22 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8028a16:	2800      	cmp	r0, #0
 8028a18:	db7e      	blt.n	8028b18 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8028a1a:	4580      	cmp	r8, r0
 8028a1c:	dd7c      	ble.n	8028b18 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8028a1e:	eb03 090e 	add.w	r9, r3, lr
 8028a22:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8028a26:	f019 0f01 	tst.w	r9, #1
 8028a2a:	5d55      	ldrb	r5, [r2, r5]
 8028a2c:	bf0c      	ite	eq
 8028a2e:	f005 050f 	andeq.w	r5, r5, #15
 8028a32:	112d      	asrne	r5, r5, #4
 8028a34:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8028a38:	b2ed      	uxtb	r5, r5
 8028a3a:	3001      	adds	r0, #1
 8028a3c:	d474      	bmi.n	8028b28 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8028a3e:	4580      	cmp	r8, r0
 8028a40:	dd72      	ble.n	8028b28 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8028a42:	2f00      	cmp	r7, #0
 8028a44:	d072      	beq.n	8028b2c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8028a46:	3301      	adds	r3, #1
 8028a48:	449e      	add	lr, r3
 8028a4a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028a4e:	f01e 0f01 	tst.w	lr, #1
 8028a52:	5cd0      	ldrb	r0, [r2, r3]
 8028a54:	bf0c      	ite	eq
 8028a56:	f000 000f 	andeq.w	r0, r0, #15
 8028a5a:	1100      	asrne	r0, r0, #4
 8028a5c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028a60:	b2c3      	uxtb	r3, r0
 8028a62:	b2ba      	uxth	r2, r7
 8028a64:	fa1f fc8c 	uxth.w	ip, ip
 8028a68:	fb02 f00c 	mul.w	r0, r2, ip
 8028a6c:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8028a70:	0112      	lsls	r2, r2, #4
 8028a72:	fa1f fc8c 	uxth.w	ip, ip
 8028a76:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8028a7a:	1a12      	subs	r2, r2, r0
 8028a7c:	eba7 070c 	sub.w	r7, r7, ip
 8028a80:	b292      	uxth	r2, r2
 8028a82:	b2bf      	uxth	r7, r7
 8028a84:	4362      	muls	r2, r4
 8028a86:	fb06 2207 	mla	r2, r6, r7, r2
 8028a8a:	fb0c 2505 	mla	r5, ip, r5, r2
 8028a8e:	fb00 5303 	mla	r3, r0, r3, r5
 8028a92:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028a96:	b3a3      	cbz	r3, 8028b02 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8028a98:	4a25      	ldr	r2, [pc, #148]	@ (8028b30 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8028a9a:	880e      	ldrh	r6, [r1, #0]
 8028a9c:	6815      	ldr	r5, [r2, #0]
 8028a9e:	1234      	asrs	r4, r6, #8
 8028aa0:	b29a      	uxth	r2, r3
 8028aa2:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8028aa6:	43db      	mvns	r3, r3
 8028aa8:	b2db      	uxtb	r3, r3
 8028aaa:	fb10 f002 	smulbb	r0, r0, r2
 8028aae:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8028ab2:	fb04 0403 	mla	r4, r4, r3, r0
 8028ab6:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8028aba:	10f0      	asrs	r0, r6, #3
 8028abc:	b2ed      	uxtb	r5, r5
 8028abe:	00f6      	lsls	r6, r6, #3
 8028ac0:	fb17 f702 	smulbb	r7, r7, r2
 8028ac4:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8028ac8:	fb15 f202 	smulbb	r2, r5, r2
 8028acc:	b2f6      	uxtb	r6, r6
 8028ace:	b2a4      	uxth	r4, r4
 8028ad0:	fb00 7003 	mla	r0, r0, r3, r7
 8028ad4:	fb06 2303 	mla	r3, r6, r3, r2
 8028ad8:	b29a      	uxth	r2, r3
 8028ada:	1c63      	adds	r3, r4, #1
 8028adc:	b280      	uxth	r0, r0
 8028ade:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028ae2:	1c53      	adds	r3, r2, #1
 8028ae4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028ae8:	1c42      	adds	r2, r0, #1
 8028aea:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028aee:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8028af2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028af6:	0940      	lsrs	r0, r0, #5
 8028af8:	4323      	orrs	r3, r4
 8028afa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028afe:	4303      	orrs	r3, r0
 8028b00:	800b      	strh	r3, [r1, #0]
 8028b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028b06:	2600      	movs	r6, #0
 8028b08:	e764      	b.n	80289d4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8028b0a:	2400      	movs	r4, #0
 8028b0c:	4626      	mov	r6, r4
 8028b0e:	e778      	b.n	8028a02 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8028b10:	2400      	movs	r4, #0
 8028b12:	e776      	b.n	8028a02 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8028b14:	463c      	mov	r4, r7
 8028b16:	e774      	b.n	8028a02 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8028b18:	2500      	movs	r5, #0
 8028b1a:	e78e      	b.n	8028a3a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8028b1c:	2300      	movs	r3, #0
 8028b1e:	461d      	mov	r5, r3
 8028b20:	e79f      	b.n	8028a62 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028b22:	4663      	mov	r3, ip
 8028b24:	4665      	mov	r5, ip
 8028b26:	e79c      	b.n	8028a62 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028b28:	2300      	movs	r3, #0
 8028b2a:	e79a      	b.n	8028a62 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028b2c:	463b      	mov	r3, r7
 8028b2e:	e798      	b.n	8028a62 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028b30:	200126f0 	.word	0x200126f0

08028b34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b38:	b093      	sub	sp, #76	@ 0x4c
 8028b3a:	461d      	mov	r5, r3
 8028b3c:	920c      	str	r2, [sp, #48]	@ 0x30
 8028b3e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8028b40:	9107      	str	r1, [sp, #28]
 8028b42:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8028b46:	9011      	str	r0, [sp, #68]	@ 0x44
 8028b48:	6850      	ldr	r0, [r2, #4]
 8028b4a:	6812      	ldr	r2, [r2, #0]
 8028b4c:	fb00 1303 	mla	r3, r0, r3, r1
 8028b50:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8028b54:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028b56:	689b      	ldr	r3, [r3, #8]
 8028b58:	3301      	adds	r3, #1
 8028b5a:	f023 0301 	bic.w	r3, r3, #1
 8028b5e:	9306      	str	r3, [sp, #24]
 8028b60:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028b62:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8028b66:	681f      	ldr	r7, [r3, #0]
 8028b68:	9b07      	ldr	r3, [sp, #28]
 8028b6a:	2b00      	cmp	r3, #0
 8028b6c:	dc03      	bgt.n	8028b76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8028b6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028b70:	2b00      	cmp	r3, #0
 8028b72:	f340 8267 	ble.w	8029044 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8028b76:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028b78:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028b7c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028b80:	1e48      	subs	r0, r1, #1
 8028b82:	f102 3cff 	add.w	ip, r2, #4294967295
 8028b86:	2d00      	cmp	r5, #0
 8028b88:	f340 80b8 	ble.w	8028cfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8028b8c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028b90:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028b94:	d406      	bmi.n	8028ba4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8028b96:	4586      	cmp	lr, r0
 8028b98:	da04      	bge.n	8028ba4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8028b9a:	2b00      	cmp	r3, #0
 8028b9c:	db02      	blt.n	8028ba4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8028b9e:	4563      	cmp	r3, ip
 8028ba0:	f2c0 80ad 	blt.w	8028cfe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8028ba4:	f11e 0e01 	adds.w	lr, lr, #1
 8028ba8:	f100 80a0 	bmi.w	8028cec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8028bac:	4571      	cmp	r1, lr
 8028bae:	f2c0 809d 	blt.w	8028cec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8028bb2:	3301      	adds	r3, #1
 8028bb4:	f100 809a 	bmi.w	8028cec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8028bb8:	429a      	cmp	r2, r3
 8028bba:	f2c0 8097 	blt.w	8028cec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8028bbe:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8028bc2:	9509      	str	r5, [sp, #36]	@ 0x24
 8028bc4:	46c8      	mov	r8, r9
 8028bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028bc8:	2b00      	cmp	r3, #0
 8028bca:	f340 80b6 	ble.w	8028d3a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8028bce:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8028bd2:	9308      	str	r3, [sp, #32]
 8028bd4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028bd6:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028bda:	1423      	asrs	r3, r4, #16
 8028bdc:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028be0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028be4:	f100 813e 	bmi.w	8028e64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028be8:	f10c 3bff 	add.w	fp, ip, #4294967295
 8028bec:	455b      	cmp	r3, fp
 8028bee:	f280 8139 	bge.w	8028e64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028bf2:	2800      	cmp	r0, #0
 8028bf4:	f2c0 8136 	blt.w	8028e64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028bf8:	f10e 3bff 	add.w	fp, lr, #4294967295
 8028bfc:	4558      	cmp	r0, fp
 8028bfe:	f280 8131 	bge.w	8028e64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028c02:	9a06      	ldr	r2, [sp, #24]
 8028c04:	fb00 3302 	mla	r3, r0, r2, r3
 8028c08:	0858      	lsrs	r0, r3, #1
 8028c0a:	07da      	lsls	r2, r3, #31
 8028c0c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8028c10:	9a08      	ldr	r2, [sp, #32]
 8028c12:	bf54      	ite	pl
 8028c14:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028c18:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028c1c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028c20:	fa5f fc8c 	uxtb.w	ip, ip
 8028c24:	2a00      	cmp	r2, #0
 8028c26:	f000 80cb 	beq.w	8028dc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8028c2a:	1c58      	adds	r0, r3, #1
 8028c2c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028c30:	07c0      	lsls	r0, r0, #31
 8028c32:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028c36:	bf54      	ite	pl
 8028c38:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028c3c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028c40:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028c44:	fa5f fe8e 	uxtb.w	lr, lr
 8028c48:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8028c4c:	b1b9      	cbz	r1, 8028c7e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8028c4e:	4453      	add	r3, sl
 8028c50:	0858      	lsrs	r0, r3, #1
 8028c52:	07da      	lsls	r2, r3, #31
 8028c54:	5c38      	ldrb	r0, [r7, r0]
 8028c56:	bf54      	ite	pl
 8028c58:	f000 000f 	andpl.w	r0, r0, #15
 8028c5c:	1100      	asrmi	r0, r0, #4
 8028c5e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028c62:	b2c0      	uxtb	r0, r0
 8028c64:	900a      	str	r0, [sp, #40]	@ 0x28
 8028c66:	1c58      	adds	r0, r3, #1
 8028c68:	0843      	lsrs	r3, r0, #1
 8028c6a:	07c2      	lsls	r2, r0, #31
 8028c6c:	5cfb      	ldrb	r3, [r7, r3]
 8028c6e:	bf54      	ite	pl
 8028c70:	f003 030f 	andpl.w	r3, r3, #15
 8028c74:	111b      	asrmi	r3, r3, #4
 8028c76:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028c7a:	b2db      	uxtb	r3, r3
 8028c7c:	930e      	str	r3, [sp, #56]	@ 0x38
 8028c7e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8028c82:	b289      	uxth	r1, r1
 8028c84:	fb02 f301 	mul.w	r3, r2, r1
 8028c88:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028c8c:	0112      	lsls	r2, r2, #4
 8028c8e:	b289      	uxth	r1, r1
 8028c90:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8028c94:	1a40      	subs	r0, r0, r1
 8028c96:	fa1f fe80 	uxth.w	lr, r0
 8028c9a:	1ad2      	subs	r2, r2, r3
 8028c9c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028c9e:	b292      	uxth	r2, r2
 8028ca0:	4342      	muls	r2, r0
 8028ca2:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8028ca6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028ca8:	fb01 c102 	mla	r1, r1, r2, ip
 8028cac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028cae:	fb03 1302 	mla	r3, r3, r2, r1
 8028cb2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028cb6:	2bff      	cmp	r3, #255	@ 0xff
 8028cb8:	f040 8093 	bne.w	8028de2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8028cbc:	4bbe      	ldr	r3, [pc, #760]	@ (8028fb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8028cbe:	681a      	ldr	r2, [r3, #0]
 8028cc0:	4bbe      	ldr	r3, [pc, #760]	@ (8028fbc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8028cc2:	0951      	lsrs	r1, r2, #5
 8028cc4:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8028cc8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028ccc:	430b      	orrs	r3, r1
 8028cce:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028cd2:	4313      	orrs	r3, r2
 8028cd4:	f8a8 3000 	strh.w	r3, [r8]
 8028cd8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028cda:	441c      	add	r4, r3
 8028cdc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028cde:	441e      	add	r6, r3
 8028ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028ce2:	3b01      	subs	r3, #1
 8028ce4:	f108 0802 	add.w	r8, r8, #2
 8028ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8028cea:	e76c      	b.n	8028bc6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028cec:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028cee:	441c      	add	r4, r3
 8028cf0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028cf2:	3d01      	subs	r5, #1
 8028cf4:	441e      	add	r6, r3
 8028cf6:	f109 0902 	add.w	r9, r9, #2
 8028cfa:	e744      	b.n	8028b86 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8028cfc:	d021      	beq.n	8028d42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8028cfe:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8028d00:	1e6b      	subs	r3, r5, #1
 8028d02:	fb00 4003 	mla	r0, r0, r3, r4
 8028d06:	1400      	asrs	r0, r0, #16
 8028d08:	f53f af59 	bmi.w	8028bbe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028d0c:	3901      	subs	r1, #1
 8028d0e:	4288      	cmp	r0, r1
 8028d10:	f6bf af55 	bge.w	8028bbe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028d14:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8028d16:	fb01 6303 	mla	r3, r1, r3, r6
 8028d1a:	141b      	asrs	r3, r3, #16
 8028d1c:	f53f af4f 	bmi.w	8028bbe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028d20:	3a01      	subs	r2, #1
 8028d22:	4293      	cmp	r3, r2
 8028d24:	f6bf af4b 	bge.w	8028bbe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028d28:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8028d2c:	9308      	str	r3, [sp, #32]
 8028d2e:	46a8      	mov	r8, r5
 8028d30:	46ce      	mov	lr, r9
 8028d32:	f1b8 0f00 	cmp.w	r8, #0
 8028d36:	f300 80b5 	bgt.w	8028ea4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8028d3a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028d3e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8028d42:	9b07      	ldr	r3, [sp, #28]
 8028d44:	2b00      	cmp	r3, #0
 8028d46:	f340 817d 	ble.w	8029044 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8028d4a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028d4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028d52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028d56:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028d58:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028d5c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028d60:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028d64:	eef0 6a62 	vmov.f32	s13, s5
 8028d68:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028d6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028d70:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028d74:	ee16 4a90 	vmov	r4, s13
 8028d78:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028d7c:	eef0 6a43 	vmov.f32	s13, s6
 8028d80:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028d84:	ee12 2a90 	vmov	r2, s5
 8028d88:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028d8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d90:	ee13 2a10 	vmov	r2, s6
 8028d94:	931f      	str	r3, [sp, #124]	@ 0x7c
 8028d96:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028d98:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d9c:	9320      	str	r3, [sp, #128]	@ 0x80
 8028d9e:	9b07      	ldr	r3, [sp, #28]
 8028da0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8028da2:	3b01      	subs	r3, #1
 8028da4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028da8:	9307      	str	r3, [sp, #28]
 8028daa:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028dac:	ee16 6a90 	vmov	r6, s13
 8028db0:	bf14      	ite	ne
 8028db2:	461d      	movne	r5, r3
 8028db4:	4615      	moveq	r5, r2
 8028db6:	eeb0 3a67 	vmov.f32	s6, s15
 8028dba:	eef0 2a47 	vmov.f32	s5, s14
 8028dbe:	e6d3      	b.n	8028b68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8028dc0:	2900      	cmp	r1, #0
 8028dc2:	f43f af5c 	beq.w	8028c7e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8028dc6:	eb0a 0003 	add.w	r0, sl, r3
 8028dca:	0843      	lsrs	r3, r0, #1
 8028dcc:	07c0      	lsls	r0, r0, #31
 8028dce:	5cfb      	ldrb	r3, [r7, r3]
 8028dd0:	bf54      	ite	pl
 8028dd2:	f003 030f 	andpl.w	r3, r3, #15
 8028dd6:	111b      	asrmi	r3, r3, #4
 8028dd8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028ddc:	b2db      	uxtb	r3, r3
 8028dde:	930a      	str	r3, [sp, #40]	@ 0x28
 8028de0:	e74d      	b.n	8028c7e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8028de2:	2b00      	cmp	r3, #0
 8028de4:	f43f af78 	beq.w	8028cd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8028de8:	4a73      	ldr	r2, [pc, #460]	@ (8028fb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8028dea:	f8b8 c000 	ldrh.w	ip, [r8]
 8028dee:	6810      	ldr	r0, [r2, #0]
 8028df0:	fa1f fe83 	uxth.w	lr, r3
 8028df4:	ea4f 212c 	mov.w	r1, ip, asr #8
 8028df8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8028dfc:	43db      	mvns	r3, r3
 8028dfe:	b2db      	uxtb	r3, r3
 8028e00:	fb12 f20e 	smulbb	r2, r2, lr
 8028e04:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8028e08:	fb01 2103 	mla	r1, r1, r3, r2
 8028e0c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8028e10:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8028e14:	b2c0      	uxtb	r0, r0
 8028e16:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8028e1a:	fb1b fb0e 	smulbb	fp, fp, lr
 8028e1e:	b289      	uxth	r1, r1
 8028e20:	fb10 fe0e 	smulbb	lr, r0, lr
 8028e24:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028e28:	fa5f fc8c 	uxtb.w	ip, ip
 8028e2c:	fb02 b203 	mla	r2, r2, r3, fp
 8028e30:	1c48      	adds	r0, r1, #1
 8028e32:	fb0c e303 	mla	r3, ip, r3, lr
 8028e36:	b292      	uxth	r2, r2
 8028e38:	b29b      	uxth	r3, r3
 8028e3a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8028e3e:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 8028e42:	f102 0b01 	add.w	fp, r2, #1
 8028e46:	1c59      	adds	r1, r3, #1
 8028e48:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8028e4c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8028e50:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8028e54:	0952      	lsrs	r2, r2, #5
 8028e56:	4301      	orrs	r1, r0
 8028e58:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028e5c:	4311      	orrs	r1, r2
 8028e5e:	f8a8 1000 	strh.w	r1, [r8]
 8028e62:	e739      	b.n	8028cd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8028e64:	f113 0b01 	adds.w	fp, r3, #1
 8028e68:	f53f af36 	bmi.w	8028cd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8028e6c:	45dc      	cmp	ip, fp
 8028e6e:	f6ff af33 	blt.w	8028cd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8028e72:	f110 0b01 	adds.w	fp, r0, #1
 8028e76:	f53f af2f 	bmi.w	8028cd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8028e7a:	45de      	cmp	lr, fp
 8028e7c:	f6ff af2c 	blt.w	8028cd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8028e80:	9a08      	ldr	r2, [sp, #32]
 8028e82:	9302      	str	r3, [sp, #8]
 8028e84:	fa0f f38e 	sxth.w	r3, lr
 8028e88:	9301      	str	r3, [sp, #4]
 8028e8a:	fa0f f38c 	sxth.w	r3, ip
 8028e8e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028e92:	9105      	str	r1, [sp, #20]
 8028e94:	9300      	str	r3, [sp, #0]
 8028e96:	463a      	mov	r2, r7
 8028e98:	4653      	mov	r3, sl
 8028e9a:	4641      	mov	r1, r8
 8028e9c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028e9e:	f7ff fd73 	bl	8028988 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8028ea2:	e719      	b.n	8028cd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8028ea4:	9906      	ldr	r1, [sp, #24]
 8028ea6:	1422      	asrs	r2, r4, #16
 8028ea8:	1433      	asrs	r3, r6, #16
 8028eaa:	fb01 2303 	mla	r3, r1, r3, r2
 8028eae:	085a      	lsrs	r2, r3, #1
 8028eb0:	07d9      	lsls	r1, r3, #31
 8028eb2:	5cba      	ldrb	r2, [r7, r2]
 8028eb4:	bf54      	ite	pl
 8028eb6:	f002 020f 	andpl.w	r2, r2, #15
 8028eba:	1112      	asrmi	r2, r2, #4
 8028ebc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028ec0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028ec4:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028ec8:	b2d2      	uxtb	r2, r2
 8028eca:	2800      	cmp	r0, #0
 8028ecc:	d062      	beq.n	8028f94 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8028ece:	f103 0a01 	add.w	sl, r3, #1
 8028ed2:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8028ed6:	f01a 0f01 	tst.w	sl, #1
 8028eda:	5c79      	ldrb	r1, [r7, r1]
 8028edc:	bf0c      	ite	eq
 8028ede:	f001 010f 	andeq.w	r1, r1, #15
 8028ee2:	1109      	asrne	r1, r1, #4
 8028ee4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028ee8:	b2c9      	uxtb	r1, r1
 8028eea:	910f      	str	r1, [sp, #60]	@ 0x3c
 8028eec:	f1bc 0f00 	cmp.w	ip, #0
 8028ef0:	d019      	beq.n	8028f26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8028ef2:	9908      	ldr	r1, [sp, #32]
 8028ef4:	440b      	add	r3, r1
 8028ef6:	0859      	lsrs	r1, r3, #1
 8028ef8:	f013 0f01 	tst.w	r3, #1
 8028efc:	5c79      	ldrb	r1, [r7, r1]
 8028efe:	bf0c      	ite	eq
 8028f00:	f001 010f 	andeq.w	r1, r1, #15
 8028f04:	1109      	asrne	r1, r1, #4
 8028f06:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028f0a:	b2c9      	uxtb	r1, r1
 8028f0c:	3301      	adds	r3, #1
 8028f0e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8028f10:	0859      	lsrs	r1, r3, #1
 8028f12:	07db      	lsls	r3, r3, #31
 8028f14:	5c79      	ldrb	r1, [r7, r1]
 8028f16:	bf54      	ite	pl
 8028f18:	f001 010f 	andpl.w	r1, r1, #15
 8028f1c:	1109      	asrmi	r1, r1, #4
 8028f1e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028f22:	b2c9      	uxtb	r1, r1
 8028f24:	9110      	str	r1, [sp, #64]	@ 0x40
 8028f26:	b280      	uxth	r0, r0
 8028f28:	fa1f fc8c 	uxth.w	ip, ip
 8028f2c:	fb00 f30c 	mul.w	r3, r0, ip
 8028f30:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8028f34:	0100      	lsls	r0, r0, #4
 8028f36:	fa1f fc8c 	uxth.w	ip, ip
 8028f3a:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8028f3e:	eba1 010c 	sub.w	r1, r1, ip
 8028f42:	fa1f fa81 	uxth.w	sl, r1
 8028f46:	1ac0      	subs	r0, r0, r3
 8028f48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8028f4a:	b280      	uxth	r0, r0
 8028f4c:	4348      	muls	r0, r1
 8028f4e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028f50:	fb02 020a 	mla	r2, r2, sl, r0
 8028f54:	fb0c 2c01 	mla	ip, ip, r1, r2
 8028f58:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028f5a:	fb03 c302 	mla	r3, r3, r2, ip
 8028f5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028f62:	2bff      	cmp	r3, #255	@ 0xff
 8028f64:	d12c      	bne.n	8028fc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8028f66:	4b14      	ldr	r3, [pc, #80]	@ (8028fb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8028f68:	681a      	ldr	r2, [r3, #0]
 8028f6a:	4b14      	ldr	r3, [pc, #80]	@ (8028fbc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8028f6c:	0951      	lsrs	r1, r2, #5
 8028f6e:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8028f72:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028f76:	430b      	orrs	r3, r1
 8028f78:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028f7c:	4313      	orrs	r3, r2
 8028f7e:	f8ae 3000 	strh.w	r3, [lr]
 8028f82:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028f84:	441c      	add	r4, r3
 8028f86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028f88:	f10e 0e02 	add.w	lr, lr, #2
 8028f8c:	441e      	add	r6, r3
 8028f8e:	f108 38ff 	add.w	r8, r8, #4294967295
 8028f92:	e6ce      	b.n	8028d32 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8028f94:	f1bc 0f00 	cmp.w	ip, #0
 8028f98:	d0c5      	beq.n	8028f26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8028f9a:	9908      	ldr	r1, [sp, #32]
 8028f9c:	440b      	add	r3, r1
 8028f9e:	0859      	lsrs	r1, r3, #1
 8028fa0:	07db      	lsls	r3, r3, #31
 8028fa2:	5c79      	ldrb	r1, [r7, r1]
 8028fa4:	bf54      	ite	pl
 8028fa6:	f001 010f 	andpl.w	r1, r1, #15
 8028faa:	1109      	asrmi	r1, r1, #4
 8028fac:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028fb0:	b2c9      	uxtb	r1, r1
 8028fb2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8028fb4:	e7b7      	b.n	8028f26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8028fb6:	bf00      	nop
 8028fb8:	200126f0 	.word	0x200126f0
 8028fbc:	fffff800 	.word	0xfffff800
 8028fc0:	2b00      	cmp	r3, #0
 8028fc2:	d0de      	beq.n	8028f82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8028fc4:	4a21      	ldr	r2, [pc, #132]	@ (802904c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 8028fc6:	f8be c000 	ldrh.w	ip, [lr]
 8028fca:	6810      	ldr	r0, [r2, #0]
 8028fcc:	fa1f fa83 	uxth.w	sl, r3
 8028fd0:	ea4f 212c 	mov.w	r1, ip, asr #8
 8028fd4:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8028fd8:	43db      	mvns	r3, r3
 8028fda:	b2db      	uxtb	r3, r3
 8028fdc:	fb12 f20a 	smulbb	r2, r2, sl
 8028fe0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8028fe4:	fb01 2103 	mla	r1, r1, r3, r2
 8028fe8:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8028fec:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8028ff0:	b2c0      	uxtb	r0, r0
 8028ff2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8028ff6:	fa5f fc8c 	uxtb.w	ip, ip
 8028ffa:	fb10 f00a 	smulbb	r0, r0, sl
 8028ffe:	fb0c 0003 	mla	r0, ip, r3, r0
 8029002:	b289      	uxth	r1, r1
 8029004:	fb1b fb0a 	smulbb	fp, fp, sl
 8029008:	b280      	uxth	r0, r0
 802900a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802900e:	fb02 b203 	mla	r2, r2, r3, fp
 8029012:	1c4b      	adds	r3, r1, #1
 8029014:	f100 0b01 	add.w	fp, r0, #1
 8029018:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802901c:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8029020:	b292      	uxth	r2, r2
 8029022:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8029026:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802902a:	ea4b 0101 	orr.w	r1, fp, r1
 802902e:	f102 0b01 	add.w	fp, r2, #1
 8029032:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8029036:	0952      	lsrs	r2, r2, #5
 8029038:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802903c:	4311      	orrs	r1, r2
 802903e:	f8ae 1000 	strh.w	r1, [lr]
 8029042:	e79e      	b.n	8028f82 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8029044:	b013      	add	sp, #76	@ 0x4c
 8029046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802904a:	bf00      	nop
 802904c:	200126f0 	.word	0x200126f0

08029050 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 8029050:	b570      	push	{r4, r5, r6, lr}
 8029052:	1208      	asrs	r0, r1, #8
 8029054:	b29e      	uxth	r6, r3
 8029056:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 802905a:	1213      	asrs	r3, r2, #8
 802905c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8029060:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8029064:	fb13 f305 	smulbb	r3, r3, r5
 8029068:	fb10 f006 	smulbb	r0, r0, r6
 802906c:	4418      	add	r0, r3
 802906e:	10cc      	asrs	r4, r1, #3
 8029070:	10d3      	asrs	r3, r2, #3
 8029072:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8029076:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802907a:	fb13 f305 	smulbb	r3, r3, r5
 802907e:	fb14 f406 	smulbb	r4, r4, r6
 8029082:	00c9      	lsls	r1, r1, #3
 8029084:	00d2      	lsls	r2, r2, #3
 8029086:	441c      	add	r4, r3
 8029088:	b2d2      	uxtb	r2, r2
 802908a:	b2cb      	uxtb	r3, r1
 802908c:	fb12 f205 	smulbb	r2, r2, r5
 8029090:	b280      	uxth	r0, r0
 8029092:	fb13 f306 	smulbb	r3, r3, r6
 8029096:	4413      	add	r3, r2
 8029098:	1c42      	adds	r2, r0, #1
 802909a:	b29b      	uxth	r3, r3
 802909c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80290a0:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 80290a4:	1c58      	adds	r0, r3, #1
 80290a6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80290aa:	b2a4      	uxth	r4, r4
 80290ac:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80290b0:	4310      	orrs	r0, r2
 80290b2:	1c62      	adds	r2, r4, #1
 80290b4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80290b8:	0964      	lsrs	r4, r4, #5
 80290ba:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80290be:	4320      	orrs	r0, r4
 80290c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080290c4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 80290c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80290c8:	b08f      	sub	sp, #60	@ 0x3c
 80290ca:	461c      	mov	r4, r3
 80290cc:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 80290d0:	9004      	str	r0, [sp, #16]
 80290d2:	460d      	mov	r5, r1
 80290d4:	4616      	mov	r6, r2
 80290d6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80290d8:	2f00      	cmp	r7, #0
 80290da:	f000 80f6 	beq.w	80292ca <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 80290de:	6820      	ldr	r0, [r4, #0]
 80290e0:	6861      	ldr	r1, [r4, #4]
 80290e2:	aa0a      	add	r2, sp, #40	@ 0x28
 80290e4:	c203      	stmia	r2!, {r0, r1}
 80290e6:	6818      	ldr	r0, [r3, #0]
 80290e8:	6859      	ldr	r1, [r3, #4]
 80290ea:	aa0c      	add	r2, sp, #48	@ 0x30
 80290ec:	c203      	stmia	r2!, {r0, r1}
 80290ee:	a80a      	add	r0, sp, #40	@ 0x28
 80290f0:	f7ef fb32 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80290f4:	4621      	mov	r1, r4
 80290f6:	a80c      	add	r0, sp, #48	@ 0x30
 80290f8:	f7ef fb56 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80290fc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8029100:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8029104:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8029108:	f002 0301 	and.w	r3, r2, #1
 802910c:	9306      	str	r3, [sp, #24]
 802910e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8029112:	f003 0101 	and.w	r1, r3, #1
 8029116:	9105      	str	r1, [sp, #20]
 8029118:	9805      	ldr	r0, [sp, #20]
 802911a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802911e:	4403      	add	r3, r0
 8029120:	fb01 2303 	mla	r3, r1, r3, r2
 8029124:	f04f 0802 	mov.w	r8, #2
 8029128:	fb93 f3f8 	sdiv	r3, r3, r8
 802912c:	441d      	add	r5, r3
 802912e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8029132:	441a      	add	r2, r3
 8029134:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8029138:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802913c:	4419      	add	r1, r3
 802913e:	4b64      	ldr	r3, [pc, #400]	@ (80292d0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8029140:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8029144:	6818      	ldr	r0, [r3, #0]
 8029146:	6803      	ldr	r3, [r0, #0]
 8029148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802914a:	4798      	blx	r3
 802914c:	4a61      	ldr	r2, [pc, #388]	@ (80292d4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 802914e:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8029152:	8813      	ldrh	r3, [r2, #0]
 8029154:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 8029158:	2fff      	cmp	r7, #255	@ 0xff
 802915a:	fb03 a404 	mla	r4, r3, r4, sl
 802915e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8029162:	f106 0604 	add.w	r6, r6, #4
 8029166:	4611      	mov	r1, r2
 8029168:	fb03 fb0b 	mul.w	fp, r3, fp
 802916c:	d06b      	beq.n	8029246 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 802916e:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 8029172:	9303      	str	r3, [sp, #12]
 8029174:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8029178:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802917c:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8029180:	9b07      	ldr	r3, [sp, #28]
 8029182:	42a3      	cmp	r3, r4
 8029184:	f240 809c 	bls.w	80292c0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8029188:	9b06      	ldr	r3, [sp, #24]
 802918a:	2b00      	cmp	r3, #0
 802918c:	d039      	beq.n	8029202 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 802918e:	782b      	ldrb	r3, [r5, #0]
 8029190:	8822      	ldrh	r2, [r4, #0]
 8029192:	9804      	ldr	r0, [sp, #16]
 8029194:	f003 030f 	and.w	r3, r3, #15
 8029198:	f105 0801 	add.w	r8, r5, #1
 802919c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80291a0:	9b03      	ldr	r3, [sp, #12]
 80291a2:	9300      	str	r3, [sp, #0]
 80291a4:	463b      	mov	r3, r7
 80291a6:	f7ff ff53 	bl	8029050 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80291aa:	f824 0b02 	strh.w	r0, [r4], #2
 80291ae:	f109 3bff 	add.w	fp, r9, #4294967295
 80291b2:	f1bb 0f01 	cmp.w	fp, #1
 80291b6:	46a2      	mov	sl, r4
 80291b8:	f104 0404 	add.w	r4, r4, #4
 80291bc:	dd24      	ble.n	8029208 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 80291be:	f898 3000 	ldrb.w	r3, [r8]
 80291c2:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 80291c6:	9804      	ldr	r0, [sp, #16]
 80291c8:	091b      	lsrs	r3, r3, #4
 80291ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80291ce:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80291d2:	9b03      	ldr	r3, [sp, #12]
 80291d4:	9300      	str	r3, [sp, #0]
 80291d6:	463b      	mov	r3, r7
 80291d8:	f7ff ff3a 	bl	8029050 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80291dc:	f824 0c04 	strh.w	r0, [r4, #-4]
 80291e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80291e4:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 80291e8:	9804      	ldr	r0, [sp, #16]
 80291ea:	f003 030f 	and.w	r3, r3, #15
 80291ee:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80291f2:	9b03      	ldr	r3, [sp, #12]
 80291f4:	9300      	str	r3, [sp, #0]
 80291f6:	463b      	mov	r3, r7
 80291f8:	f7ff ff2a 	bl	8029050 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80291fc:	f824 0c02 	strh.w	r0, [r4, #-2]
 8029200:	e7d7      	b.n	80291b2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8029202:	46a8      	mov	r8, r5
 8029204:	46cb      	mov	fp, r9
 8029206:	e7d4      	b.n	80291b2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8029208:	d10e      	bne.n	8029228 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 802920a:	f898 3000 	ldrb.w	r3, [r8]
 802920e:	f8ba 2000 	ldrh.w	r2, [sl]
 8029212:	9804      	ldr	r0, [sp, #16]
 8029214:	091b      	lsrs	r3, r3, #4
 8029216:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802921a:	9b03      	ldr	r3, [sp, #12]
 802921c:	9300      	str	r3, [sp, #0]
 802921e:	463b      	mov	r3, r7
 8029220:	f7ff ff16 	bl	8029050 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8029224:	f82a 0b02 	strh.w	r0, [sl], #2
 8029228:	9b08      	ldr	r3, [sp, #32]
 802922a:	9a05      	ldr	r2, [sp, #20]
 802922c:	881c      	ldrh	r4, [r3, #0]
 802922e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8029232:	eba4 0409 	sub.w	r4, r4, r9
 8029236:	4413      	add	r3, r2
 8029238:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 802923c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802923e:	fb93 f3f2 	sdiv	r3, r3, r2
 8029242:	441d      	add	r5, r3
 8029244:	e79c      	b.n	8029180 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 8029246:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 802924a:	45a3      	cmp	fp, r4
 802924c:	d938      	bls.n	80292c0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 802924e:	9b06      	ldr	r3, [sp, #24]
 8029250:	b1f3      	cbz	r3, 8029290 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 8029252:	782b      	ldrb	r3, [r5, #0]
 8029254:	f003 030f 	and.w	r3, r3, #15
 8029258:	1c6a      	adds	r2, r5, #1
 802925a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802925e:	8023      	strh	r3, [r4, #0]
 8029260:	f109 30ff 	add.w	r0, r9, #4294967295
 8029264:	3402      	adds	r4, #2
 8029266:	2801      	cmp	r0, #1
 8029268:	4623      	mov	r3, r4
 802926a:	f104 0404 	add.w	r4, r4, #4
 802926e:	dd12      	ble.n	8029296 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8029270:	7813      	ldrb	r3, [r2, #0]
 8029272:	091b      	lsrs	r3, r3, #4
 8029274:	3802      	subs	r0, #2
 8029276:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802927a:	f824 3c04 	strh.w	r3, [r4, #-4]
 802927e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8029282:	f003 030f 	and.w	r3, r3, #15
 8029286:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802928a:	f824 3c02 	strh.w	r3, [r4, #-2]
 802928e:	e7ea      	b.n	8029266 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8029290:	462a      	mov	r2, r5
 8029292:	4648      	mov	r0, r9
 8029294:	e7e7      	b.n	8029266 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8029296:	d106      	bne.n	80292a6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8029298:	7812      	ldrb	r2, [r2, #0]
 802929a:	0912      	lsrs	r2, r2, #4
 802929c:	3302      	adds	r3, #2
 802929e:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80292a2:	f823 2c02 	strh.w	r2, [r3, #-2]
 80292a6:	880c      	ldrh	r4, [r1, #0]
 80292a8:	9a05      	ldr	r2, [sp, #20]
 80292aa:	eba4 0409 	sub.w	r4, r4, r9
 80292ae:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80292b2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80292b6:	4413      	add	r3, r2
 80292b8:	fb93 f3f8 	sdiv	r3, r3, r8
 80292bc:	441d      	add	r5, r3
 80292be:	e7c4      	b.n	802924a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 80292c0:	4b03      	ldr	r3, [pc, #12]	@ (80292d0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80292c2:	6818      	ldr	r0, [r3, #0]
 80292c4:	6803      	ldr	r3, [r0, #0]
 80292c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80292c8:	4798      	blx	r3
 80292ca:	b00f      	add	sp, #60	@ 0x3c
 80292cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80292d0:	200126e0 	.word	0x200126e0
 80292d4:	200126da 	.word	0x200126da

080292d8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 80292d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80292da:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80292de:	2dff      	cmp	r5, #255	@ 0xff
 80292e0:	ea4f 2711 	mov.w	r7, r1, lsr #8
 80292e4:	d10c      	bne.n	8029300 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 80292e6:	2bff      	cmp	r3, #255	@ 0xff
 80292e8:	d10a      	bne.n	8029300 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 80292ea:	4b25      	ldr	r3, [pc, #148]	@ (8029380 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 80292ec:	0948      	lsrs	r0, r1, #5
 80292ee:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80292f2:	403b      	ands	r3, r7
 80292f4:	4318      	orrs	r0, r3
 80292f6:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80292fa:	4308      	orrs	r0, r1
 80292fc:	b280      	uxth	r0, r0
 80292fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029300:	fb15 f503 	smulbb	r5, r5, r3
 8029304:	b2ab      	uxth	r3, r5
 8029306:	1c5d      	adds	r5, r3, #1
 8029308:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 802930c:	1214      	asrs	r4, r2, #8
 802930e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8029312:	fa1f fc85 	uxth.w	ip, r5
 8029316:	10d6      	asrs	r6, r2, #3
 8029318:	00d0      	lsls	r0, r2, #3
 802931a:	43ed      	mvns	r5, r5
 802931c:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8029320:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8029324:	b2eb      	uxtb	r3, r5
 8029326:	b2c0      	uxtb	r0, r0
 8029328:	fb12 f20c 	smulbb	r2, r2, ip
 802932c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8029330:	fb04 2403 	mla	r4, r4, r3, r2
 8029334:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8029338:	b2c8      	uxtb	r0, r1
 802933a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802933e:	b2fd      	uxtb	r5, r7
 8029340:	fb10 f00c 	smulbb	r0, r0, ip
 8029344:	b2a4      	uxth	r4, r4
 8029346:	fb02 0003 	mla	r0, r2, r3, r0
 802934a:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802934e:	fb15 f50c 	smulbb	r5, r5, ip
 8029352:	fb06 5503 	mla	r5, r6, r3, r5
 8029356:	b283      	uxth	r3, r0
 8029358:	1c60      	adds	r0, r4, #1
 802935a:	b2ad      	uxth	r5, r5
 802935c:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8029360:	1c58      	adds	r0, r3, #1
 8029362:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8029366:	1c6b      	adds	r3, r5, #1
 8029368:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802936c:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8029370:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8029374:	096d      	lsrs	r5, r5, #5
 8029376:	4320      	orrs	r0, r4
 8029378:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802937c:	4328      	orrs	r0, r5
 802937e:	e7be      	b.n	80292fe <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8029380:	00fff800 	.word	0x00fff800

08029384 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8029384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029388:	461c      	mov	r4, r3
 802938a:	b08d      	sub	sp, #52	@ 0x34
 802938c:	460d      	mov	r5, r1
 802938e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029390:	6861      	ldr	r1, [r4, #4]
 8029392:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 8029396:	4680      	mov	r8, r0
 8029398:	6820      	ldr	r0, [r4, #0]
 802939a:	4616      	mov	r6, r2
 802939c:	aa08      	add	r2, sp, #32
 802939e:	c203      	stmia	r2!, {r0, r1}
 80293a0:	6818      	ldr	r0, [r3, #0]
 80293a2:	6859      	ldr	r1, [r3, #4]
 80293a4:	aa0a      	add	r2, sp, #40	@ 0x28
 80293a6:	c203      	stmia	r2!, {r0, r1}
 80293a8:	a808      	add	r0, sp, #32
 80293aa:	f7ef f9d5 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80293ae:	4621      	mov	r1, r4
 80293b0:	a80a      	add	r0, sp, #40	@ 0x28
 80293b2:	f7ef f9f9 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80293b6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 80293ba:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 80293be:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 80293c2:	f002 0301 	and.w	r3, r2, #1
 80293c6:	9303      	str	r3, [sp, #12]
 80293c8:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80293cc:	f003 0101 	and.w	r1, r3, #1
 80293d0:	9102      	str	r1, [sp, #8]
 80293d2:	9802      	ldr	r0, [sp, #8]
 80293d4:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 80293d8:	4403      	add	r3, r0
 80293da:	fb01 2303 	mla	r3, r1, r3, r2
 80293de:	f04f 0a02 	mov.w	sl, #2
 80293e2:	fb93 f3fa 	sdiv	r3, r3, sl
 80293e6:	441d      	add	r5, r3
 80293e8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80293ec:	441a      	add	r2, r3
 80293ee:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80293f2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80293f6:	4a3f      	ldr	r2, [pc, #252]	@ (80294f4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 80293f8:	9205      	str	r2, [sp, #20]
 80293fa:	4419      	add	r1, r3
 80293fc:	6810      	ldr	r0, [r2, #0]
 80293fe:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 8029402:	6803      	ldr	r3, [r0, #0]
 8029404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029406:	4798      	blx	r3
 8029408:	4b3b      	ldr	r3, [pc, #236]	@ (80294f8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 802940a:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 802940e:	8819      	ldrh	r1, [r3, #0]
 8029410:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8029414:	fb01 c404 	mla	r4, r1, r4, ip
 8029418:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802941c:	434f      	muls	r7, r1
 802941e:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8029422:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8029426:	3604      	adds	r6, #4
 8029428:	9204      	str	r2, [sp, #16]
 802942a:	9b04      	ldr	r3, [sp, #16]
 802942c:	429c      	cmp	r4, r3
 802942e:	d258      	bcs.n	80294e2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8029430:	9b03      	ldr	r3, [sp, #12]
 8029432:	2b00      	cmp	r3, #0
 8029434:	d034      	beq.n	80294a0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8029436:	782b      	ldrb	r3, [r5, #0]
 8029438:	f003 030f 	and.w	r3, r3, #15
 802943c:	1c6f      	adds	r7, r5, #1
 802943e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8029442:	0e0b      	lsrs	r3, r1, #24
 8029444:	d006      	beq.n	8029454 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8029446:	8822      	ldrh	r2, [r4, #0]
 8029448:	9300      	str	r3, [sp, #0]
 802944a:	4640      	mov	r0, r8
 802944c:	464b      	mov	r3, r9
 802944e:	f7ff ff43 	bl	80292d8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8029452:	8020      	strh	r0, [r4, #0]
 8029454:	3402      	adds	r4, #2
 8029456:	f10b 3aff 	add.w	sl, fp, #4294967295
 802945a:	f1ba 0f01 	cmp.w	sl, #1
 802945e:	dd22      	ble.n	80294a6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8029460:	783b      	ldrb	r3, [r7, #0]
 8029462:	091b      	lsrs	r3, r3, #4
 8029464:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8029468:	0e0b      	lsrs	r3, r1, #24
 802946a:	d006      	beq.n	802947a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 802946c:	8822      	ldrh	r2, [r4, #0]
 802946e:	9300      	str	r3, [sp, #0]
 8029470:	4640      	mov	r0, r8
 8029472:	464b      	mov	r3, r9
 8029474:	f7ff ff30 	bl	80292d8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8029478:	8020      	strh	r0, [r4, #0]
 802947a:	f817 3b01 	ldrb.w	r3, [r7], #1
 802947e:	f003 030f 	and.w	r3, r3, #15
 8029482:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8029486:	0e0b      	lsrs	r3, r1, #24
 8029488:	d006      	beq.n	8029498 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 802948a:	8862      	ldrh	r2, [r4, #2]
 802948c:	9300      	str	r3, [sp, #0]
 802948e:	4640      	mov	r0, r8
 8029490:	464b      	mov	r3, r9
 8029492:	f7ff ff21 	bl	80292d8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8029496:	8060      	strh	r0, [r4, #2]
 8029498:	3404      	adds	r4, #4
 802949a:	f1aa 0a02 	sub.w	sl, sl, #2
 802949e:	e7dc      	b.n	802945a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 80294a0:	462f      	mov	r7, r5
 80294a2:	46da      	mov	sl, fp
 80294a4:	e7d9      	b.n	802945a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 80294a6:	d10d      	bne.n	80294c4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 80294a8:	783b      	ldrb	r3, [r7, #0]
 80294aa:	091b      	lsrs	r3, r3, #4
 80294ac:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80294b0:	0e0b      	lsrs	r3, r1, #24
 80294b2:	d006      	beq.n	80294c2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 80294b4:	8822      	ldrh	r2, [r4, #0]
 80294b6:	9300      	str	r3, [sp, #0]
 80294b8:	4640      	mov	r0, r8
 80294ba:	464b      	mov	r3, r9
 80294bc:	f7ff ff0c 	bl	80292d8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80294c0:	8020      	strh	r0, [r4, #0]
 80294c2:	3402      	adds	r4, #2
 80294c4:	9b06      	ldr	r3, [sp, #24]
 80294c6:	9a02      	ldr	r2, [sp, #8]
 80294c8:	881b      	ldrh	r3, [r3, #0]
 80294ca:	eba3 030b 	sub.w	r3, r3, fp
 80294ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80294d2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80294d6:	4413      	add	r3, r2
 80294d8:	9a07      	ldr	r2, [sp, #28]
 80294da:	fb93 f3f2 	sdiv	r3, r3, r2
 80294de:	441d      	add	r5, r3
 80294e0:	e7a3      	b.n	802942a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 80294e2:	9b05      	ldr	r3, [sp, #20]
 80294e4:	6818      	ldr	r0, [r3, #0]
 80294e6:	6803      	ldr	r3, [r0, #0]
 80294e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80294ea:	4798      	blx	r3
 80294ec:	b00d      	add	sp, #52	@ 0x34
 80294ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80294f2:	bf00      	nop
 80294f4:	200126e0 	.word	0x200126e0
 80294f8:	200126da 	.word	0x200126da

080294fc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 80294fc:	b570      	push	{r4, r5, r6, lr}
 80294fe:	1214      	asrs	r4, r2, #8
 8029500:	788d      	ldrb	r5, [r1, #2]
 8029502:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8029506:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802950a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802950e:	fb15 f503 	smulbb	r5, r5, r3
 8029512:	fb04 5506 	mla	r5, r4, r6, r5
 8029516:	10d0      	asrs	r0, r2, #3
 8029518:	784c      	ldrb	r4, [r1, #1]
 802951a:	7809      	ldrb	r1, [r1, #0]
 802951c:	00d2      	lsls	r2, r2, #3
 802951e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029522:	b2d2      	uxtb	r2, r2
 8029524:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8029528:	fb14 f403 	smulbb	r4, r4, r3
 802952c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8029530:	fb11 f303 	smulbb	r3, r1, r3
 8029534:	fb00 4406 	mla	r4, r0, r6, r4
 8029538:	fb02 3306 	mla	r3, r2, r6, r3
 802953c:	b2ad      	uxth	r5, r5
 802953e:	b29b      	uxth	r3, r3
 8029540:	b2a4      	uxth	r4, r4
 8029542:	1c68      	adds	r0, r5, #1
 8029544:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8029548:	1c62      	adds	r2, r4, #1
 802954a:	1c58      	adds	r0, r3, #1
 802954c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8029550:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8029554:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8029558:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802955c:	0964      	lsrs	r4, r4, #5
 802955e:	4328      	orrs	r0, r5
 8029560:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8029564:	4320      	orrs	r0, r4
 8029566:	bd70      	pop	{r4, r5, r6, pc}

08029568 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8029568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802956c:	b08f      	sub	sp, #60	@ 0x3c
 802956e:	461c      	mov	r4, r3
 8029570:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8029574:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029576:	4682      	mov	sl, r0
 8029578:	460e      	mov	r6, r1
 802957a:	4615      	mov	r5, r2
 802957c:	2f00      	cmp	r7, #0
 802957e:	f000 8142 	beq.w	8029806 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 8029582:	6820      	ldr	r0, [r4, #0]
 8029584:	6861      	ldr	r1, [r4, #4]
 8029586:	aa0a      	add	r2, sp, #40	@ 0x28
 8029588:	c203      	stmia	r2!, {r0, r1}
 802958a:	6818      	ldr	r0, [r3, #0]
 802958c:	6859      	ldr	r1, [r3, #4]
 802958e:	aa0c      	add	r2, sp, #48	@ 0x30
 8029590:	c203      	stmia	r2!, {r0, r1}
 8029592:	a80a      	add	r0, sp, #40	@ 0x28
 8029594:	f7ef f8e0 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029598:	4621      	mov	r1, r4
 802959a:	a80c      	add	r0, sp, #48	@ 0x30
 802959c:	f7ef f904 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80295a0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80295a4:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 80295a8:	f002 0301 	and.w	r3, r2, #1
 80295ac:	9306      	str	r3, [sp, #24]
 80295ae:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80295b2:	f003 0101 	and.w	r1, r3, #1
 80295b6:	9105      	str	r1, [sp, #20]
 80295b8:	9805      	ldr	r0, [sp, #20]
 80295ba:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80295be:	4403      	add	r3, r0
 80295c0:	fb01 2303 	mla	r3, r1, r3, r2
 80295c4:	f04f 0802 	mov.w	r8, #2
 80295c8:	fb93 f3f8 	sdiv	r3, r3, r8
 80295cc:	441e      	add	r6, r3
 80295ce:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80295d2:	441a      	add	r2, r3
 80295d4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80295d8:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80295dc:	4419      	add	r1, r3
 80295de:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80295e2:	9303      	str	r3, [sp, #12]
 80295e4:	4b89      	ldr	r3, [pc, #548]	@ (802980c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 80295e6:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80295ea:	6818      	ldr	r0, [r3, #0]
 80295ec:	6803      	ldr	r3, [r0, #0]
 80295ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80295f0:	4798      	blx	r3
 80295f2:	4a87      	ldr	r2, [pc, #540]	@ (8029810 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 80295f4:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80295f8:	8813      	ldrh	r3, [r2, #0]
 80295fa:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 80295fe:	2fff      	cmp	r7, #255	@ 0xff
 8029600:	fb03 9404 	mla	r4, r3, r4, r9
 8029604:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8029608:	f105 0504 	add.w	r5, r5, #4
 802960c:	4694      	mov	ip, r2
 802960e:	fb03 f30b 	mul.w	r3, r3, fp
 8029612:	d071      	beq.n	80296f8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 8029614:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8029618:	43f9      	mvns	r1, r7
 802961a:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802961e:	b2c9      	uxtb	r1, r1
 8029620:	9104      	str	r1, [sp, #16]
 8029622:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8029626:	9b07      	ldr	r3, [sp, #28]
 8029628:	42a3      	cmp	r3, r4
 802962a:	f240 80e7 	bls.w	80297fc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 802962e:	9b06      	ldr	r3, [sp, #24]
 8029630:	2b00      	cmp	r3, #0
 8029632:	d03d      	beq.n	80296b0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 8029634:	7831      	ldrb	r1, [r6, #0]
 8029636:	9b04      	ldr	r3, [sp, #16]
 8029638:	8822      	ldrh	r2, [r4, #0]
 802963a:	9300      	str	r3, [sp, #0]
 802963c:	f001 010f 	and.w	r1, r1, #15
 8029640:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029644:	463b      	mov	r3, r7
 8029646:	4429      	add	r1, r5
 8029648:	4650      	mov	r0, sl
 802964a:	f7ff ff57 	bl	80294fc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802964e:	9b03      	ldr	r3, [sp, #12]
 8029650:	f824 0b02 	strh.w	r0, [r4], #2
 8029654:	f106 0801 	add.w	r8, r6, #1
 8029658:	f103 3bff 	add.w	fp, r3, #4294967295
 802965c:	f1bb 0f01 	cmp.w	fp, #1
 8029660:	46a1      	mov	r9, r4
 8029662:	f104 0404 	add.w	r4, r4, #4
 8029666:	dd27      	ble.n	80296b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 8029668:	f898 1000 	ldrb.w	r1, [r8]
 802966c:	9b04      	ldr	r3, [sp, #16]
 802966e:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8029672:	9300      	str	r3, [sp, #0]
 8029674:	0909      	lsrs	r1, r1, #4
 8029676:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802967a:	463b      	mov	r3, r7
 802967c:	4429      	add	r1, r5
 802967e:	4650      	mov	r0, sl
 8029680:	f7ff ff3c 	bl	80294fc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8029684:	f824 0c04 	strh.w	r0, [r4, #-4]
 8029688:	f818 1b01 	ldrb.w	r1, [r8], #1
 802968c:	9b04      	ldr	r3, [sp, #16]
 802968e:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8029692:	9300      	str	r3, [sp, #0]
 8029694:	f001 010f 	and.w	r1, r1, #15
 8029698:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802969c:	463b      	mov	r3, r7
 802969e:	4429      	add	r1, r5
 80296a0:	4650      	mov	r0, sl
 80296a2:	f7ff ff2b 	bl	80294fc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80296a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80296aa:	f824 0c02 	strh.w	r0, [r4, #-2]
 80296ae:	e7d5      	b.n	802965c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 80296b0:	46b0      	mov	r8, r6
 80296b2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80296b6:	e7d1      	b.n	802965c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 80296b8:	d10f      	bne.n	80296da <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 80296ba:	f898 1000 	ldrb.w	r1, [r8]
 80296be:	9b04      	ldr	r3, [sp, #16]
 80296c0:	f8b9 2000 	ldrh.w	r2, [r9]
 80296c4:	9300      	str	r3, [sp, #0]
 80296c6:	0909      	lsrs	r1, r1, #4
 80296c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80296cc:	463b      	mov	r3, r7
 80296ce:	4429      	add	r1, r5
 80296d0:	4650      	mov	r0, sl
 80296d2:	f7ff ff13 	bl	80294fc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80296d6:	f829 0b02 	strh.w	r0, [r9], #2
 80296da:	9b08      	ldr	r3, [sp, #32]
 80296dc:	9a05      	ldr	r2, [sp, #20]
 80296de:	881c      	ldrh	r4, [r3, #0]
 80296e0:	9b03      	ldr	r3, [sp, #12]
 80296e2:	1ae4      	subs	r4, r4, r3
 80296e4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80296e8:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80296ec:	4413      	add	r3, r2
 80296ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80296f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80296f4:	441e      	add	r6, r3
 80296f6:	e796      	b.n	8029626 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 80296f8:	4f46      	ldr	r7, [pc, #280]	@ (8029814 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 80296fa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80296fe:	42a3      	cmp	r3, r4
 8029700:	d97c      	bls.n	80297fc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 8029702:	9a06      	ldr	r2, [sp, #24]
 8029704:	2a00      	cmp	r2, #0
 8029706:	d054      	beq.n	80297b2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 8029708:	7830      	ldrb	r0, [r6, #0]
 802970a:	f000 000f 	and.w	r0, r0, #15
 802970e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8029712:	eb05 0e00 	add.w	lr, r5, r0
 8029716:	5c28      	ldrb	r0, [r5, r0]
 8029718:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802971c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8029720:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029724:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8029728:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802972c:	ea42 020e 	orr.w	r2, r2, lr
 8029730:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8029734:	f824 2b02 	strh.w	r2, [r4], #2
 8029738:	9a03      	ldr	r2, [sp, #12]
 802973a:	1c71      	adds	r1, r6, #1
 802973c:	f102 3eff 	add.w	lr, r2, #4294967295
 8029740:	f1be 0f01 	cmp.w	lr, #1
 8029744:	4620      	mov	r0, r4
 8029746:	f104 0404 	add.w	r4, r4, #4
 802974a:	dd36      	ble.n	80297ba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 802974c:	7808      	ldrb	r0, [r1, #0]
 802974e:	0900      	lsrs	r0, r0, #4
 8029750:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8029754:	eb05 0a00 	add.w	sl, r5, r0
 8029758:	f1ae 0e02 	sub.w	lr, lr, #2
 802975c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8029760:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8029764:	00d2      	lsls	r2, r2, #3
 8029766:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802976a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802976e:	ea49 0202 	orr.w	r2, r9, r2
 8029772:	f815 9000 	ldrb.w	r9, [r5, r0]
 8029776:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802977a:	f824 2c04 	strh.w	r2, [r4, #-4]
 802977e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8029782:	f000 000f 	and.w	r0, r0, #15
 8029786:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802978a:	eb05 0a00 	add.w	sl, r5, r0
 802978e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8029792:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8029796:	00d2      	lsls	r2, r2, #3
 8029798:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802979c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80297a0:	ea49 0202 	orr.w	r2, r9, r2
 80297a4:	f815 9000 	ldrb.w	r9, [r5, r0]
 80297a8:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 80297ac:	f824 2c02 	strh.w	r2, [r4, #-2]
 80297b0:	e7c6      	b.n	8029740 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 80297b2:	4631      	mov	r1, r6
 80297b4:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80297b8:	e7c2      	b.n	8029740 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 80297ba:	d111      	bne.n	80297e0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 80297bc:	7809      	ldrb	r1, [r1, #0]
 80297be:	0909      	lsrs	r1, r1, #4
 80297c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80297c4:	186c      	adds	r4, r5, r1
 80297c6:	5c69      	ldrb	r1, [r5, r1]
 80297c8:	78a2      	ldrb	r2, [r4, #2]
 80297ca:	7864      	ldrb	r4, [r4, #1]
 80297cc:	00e4      	lsls	r4, r4, #3
 80297ce:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 80297d2:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80297d6:	4322      	orrs	r2, r4
 80297d8:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 80297dc:	f820 2b02 	strh.w	r2, [r0], #2
 80297e0:	9a03      	ldr	r2, [sp, #12]
 80297e2:	f8bc 4000 	ldrh.w	r4, [ip]
 80297e6:	9905      	ldr	r1, [sp, #20]
 80297e8:	1aa4      	subs	r4, r4, r2
 80297ea:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80297ee:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80297f2:	440a      	add	r2, r1
 80297f4:	fb92 f2f8 	sdiv	r2, r2, r8
 80297f8:	4416      	add	r6, r2
 80297fa:	e780      	b.n	80296fe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 80297fc:	4b03      	ldr	r3, [pc, #12]	@ (802980c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 80297fe:	6818      	ldr	r0, [r3, #0]
 8029800:	6803      	ldr	r3, [r0, #0]
 8029802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029804:	4798      	blx	r3
 8029806:	b00f      	add	sp, #60	@ 0x3c
 8029808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802980c:	200126e0 	.word	0x200126e0
 8029810:	200126da 	.word	0x200126da
 8029814:	fffff800 	.word	0xfffff800

08029818 <CRC_Lock>:
 8029818:	b530      	push	{r4, r5, lr}
 802981a:	4a2d      	ldr	r2, [pc, #180]	@ (80298d0 <CRC_Lock+0xb8>)
 802981c:	6813      	ldr	r3, [r2, #0]
 802981e:	f023 0301 	bic.w	r3, r3, #1
 8029822:	6013      	str	r3, [r2, #0]
 8029824:	4b2b      	ldr	r3, [pc, #172]	@ (80298d4 <CRC_Lock+0xbc>)
 8029826:	681c      	ldr	r4, [r3, #0]
 8029828:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 802982c:	4014      	ands	r4, r2
 802982e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8029832:	42ac      	cmp	r4, r5
 8029834:	d005      	beq.n	8029842 <CRC_Lock+0x2a>
 8029836:	681c      	ldr	r4, [r3, #0]
 8029838:	f24c 2570 	movw	r5, #49776	@ 0xc270
 802983c:	4014      	ands	r4, r2
 802983e:	42ac      	cmp	r4, r5
 8029840:	d125      	bne.n	802988e <CRC_Lock+0x76>
 8029842:	4b25      	ldr	r3, [pc, #148]	@ (80298d8 <CRC_Lock+0xc0>)
 8029844:	681b      	ldr	r3, [r3, #0]
 8029846:	2b00      	cmp	r3, #0
 8029848:	d139      	bne.n	80298be <CRC_Lock+0xa6>
 802984a:	4b24      	ldr	r3, [pc, #144]	@ (80298dc <CRC_Lock+0xc4>)
 802984c:	681a      	ldr	r2, [r3, #0]
 802984e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029852:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8029856:	d00d      	beq.n	8029874 <CRC_Lock+0x5c>
 8029858:	681a      	ldr	r2, [r3, #0]
 802985a:	f240 4483 	movw	r4, #1155	@ 0x483
 802985e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029862:	42a2      	cmp	r2, r4
 8029864:	d006      	beq.n	8029874 <CRC_Lock+0x5c>
 8029866:	681b      	ldr	r3, [r3, #0]
 8029868:	f240 4285 	movw	r2, #1157	@ 0x485
 802986c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029870:	4293      	cmp	r3, r2
 8029872:	d124      	bne.n	80298be <CRC_Lock+0xa6>
 8029874:	4b1a      	ldr	r3, [pc, #104]	@ (80298e0 <CRC_Lock+0xc8>)
 8029876:	2201      	movs	r2, #1
 8029878:	601a      	str	r2, [r3, #0]
 802987a:	681a      	ldr	r2, [r3, #0]
 802987c:	2a00      	cmp	r2, #0
 802987e:	d1fc      	bne.n	802987a <CRC_Lock+0x62>
 8029880:	4b18      	ldr	r3, [pc, #96]	@ (80298e4 <CRC_Lock+0xcc>)
 8029882:	6018      	str	r0, [r3, #0]
 8029884:	6818      	ldr	r0, [r3, #0]
 8029886:	1a43      	subs	r3, r0, r1
 8029888:	4258      	negs	r0, r3
 802988a:	4158      	adcs	r0, r3
 802988c:	e00e      	b.n	80298ac <CRC_Lock+0x94>
 802988e:	681b      	ldr	r3, [r3, #0]
 8029890:	4013      	ands	r3, r2
 8029892:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8029896:	4293      	cmp	r3, r2
 8029898:	d111      	bne.n	80298be <CRC_Lock+0xa6>
 802989a:	4b13      	ldr	r3, [pc, #76]	@ (80298e8 <CRC_Lock+0xd0>)
 802989c:	681b      	ldr	r3, [r3, #0]
 802989e:	f240 4286 	movw	r2, #1158	@ 0x486
 80298a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80298a6:	4293      	cmp	r3, r2
 80298a8:	d001      	beq.n	80298ae <CRC_Lock+0x96>
 80298aa:	2000      	movs	r0, #0
 80298ac:	bd30      	pop	{r4, r5, pc}
 80298ae:	4b0f      	ldr	r3, [pc, #60]	@ (80298ec <CRC_Lock+0xd4>)
 80298b0:	2201      	movs	r2, #1
 80298b2:	601a      	str	r2, [r3, #0]
 80298b4:	681a      	ldr	r2, [r3, #0]
 80298b6:	2a00      	cmp	r2, #0
 80298b8:	d1fc      	bne.n	80298b4 <CRC_Lock+0x9c>
 80298ba:	4b0d      	ldr	r3, [pc, #52]	@ (80298f0 <CRC_Lock+0xd8>)
 80298bc:	e7e1      	b.n	8029882 <CRC_Lock+0x6a>
 80298be:	4b0d      	ldr	r3, [pc, #52]	@ (80298f4 <CRC_Lock+0xdc>)
 80298c0:	2201      	movs	r2, #1
 80298c2:	601a      	str	r2, [r3, #0]
 80298c4:	681a      	ldr	r2, [r3, #0]
 80298c6:	2a00      	cmp	r2, #0
 80298c8:	d1fc      	bne.n	80298c4 <CRC_Lock+0xac>
 80298ca:	4b0b      	ldr	r3, [pc, #44]	@ (80298f8 <CRC_Lock+0xe0>)
 80298cc:	e7d9      	b.n	8029882 <CRC_Lock+0x6a>
 80298ce:	bf00      	nop
 80298d0:	e0002000 	.word	0xe0002000
 80298d4:	e000ed00 	.word	0xe000ed00
 80298d8:	e0042000 	.word	0xe0042000
 80298dc:	5c001000 	.word	0x5c001000
 80298e0:	58024c08 	.word	0x58024c08
 80298e4:	58024c00 	.word	0x58024c00
 80298e8:	46008ff0 	.word	0x46008ff0
 80298ec:	46024c08 	.word	0x46024c08
 80298f0:	46024c00 	.word	0x46024c00
 80298f4:	40023008 	.word	0x40023008
 80298f8:	40023000 	.word	0x40023000

080298fc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80298fc:	6101      	str	r1, [r0, #16]
 80298fe:	4770      	bx	lr

08029900 <_ZN8touchgfx8Gestures4tickEv>:
 8029900:	7b83      	ldrb	r3, [r0, #14]
 8029902:	b14b      	cbz	r3, 8029918 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029904:	8903      	ldrh	r3, [r0, #8]
 8029906:	3301      	adds	r3, #1
 8029908:	b29b      	uxth	r3, r3
 802990a:	2b07      	cmp	r3, #7
 802990c:	8103      	strh	r3, [r0, #8]
 802990e:	bf81      	itttt	hi
 8029910:	2300      	movhi	r3, #0
 8029912:	8143      	strhhi	r3, [r0, #10]
 8029914:	8183      	strhhi	r3, [r0, #12]
 8029916:	7383      	strbhi	r3, [r0, #14]
 8029918:	4770      	bx	lr
	...

0802991c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802991c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029920:	4698      	mov	r8, r3
 8029922:	8883      	ldrh	r3, [r0, #4]
 8029924:	f8ad 3006 	strh.w	r3, [sp, #6]
 8029928:	eba8 0303 	sub.w	r3, r8, r3
 802992c:	b21b      	sxth	r3, r3
 802992e:	4604      	mov	r4, r0
 8029930:	2b00      	cmp	r3, #0
 8029932:	4617      	mov	r7, r2
 8029934:	4a18      	ldr	r2, [pc, #96]	@ (8029998 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8029936:	9200      	str	r2, [sp, #0]
 8029938:	bfb8      	it	lt
 802993a:	425b      	neglt	r3, r3
 802993c:	8aa2      	ldrh	r2, [r4, #20]
 802993e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8029942:	f8ad 800a 	strh.w	r8, [sp, #10]
 8029946:	b21b      	sxth	r3, r3
 8029948:	460e      	mov	r6, r1
 802994a:	4293      	cmp	r3, r2
 802994c:	88c1      	ldrh	r1, [r0, #6]
 802994e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8029952:	f04f 0000 	mov.w	r0, #0
 8029956:	f88d 0004 	strb.w	r0, [sp, #4]
 802995a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802995e:	dc07      	bgt.n	8029970 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 8029960:	1a69      	subs	r1, r5, r1
 8029962:	b209      	sxth	r1, r1
 8029964:	2900      	cmp	r1, #0
 8029966:	bfb8      	it	lt
 8029968:	4249      	neglt	r1, r1
 802996a:	b209      	sxth	r1, r1
 802996c:	428a      	cmp	r2, r1
 802996e:	da10      	bge.n	8029992 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 8029970:	6920      	ldr	r0, [r4, #16]
 8029972:	6803      	ldr	r3, [r0, #0]
 8029974:	4669      	mov	r1, sp
 8029976:	685b      	ldr	r3, [r3, #4]
 8029978:	4798      	blx	r3
 802997a:	eba8 0606 	sub.w	r6, r8, r6
 802997e:	2300      	movs	r3, #0
 8029980:	1bef      	subs	r7, r5, r7
 8029982:	2001      	movs	r0, #1
 8029984:	8123      	strh	r3, [r4, #8]
 8029986:	8166      	strh	r6, [r4, #10]
 8029988:	81a7      	strh	r7, [r4, #12]
 802998a:	f8a4 8004 	strh.w	r8, [r4, #4]
 802998e:	80e5      	strh	r5, [r4, #6]
 8029990:	73a0      	strb	r0, [r4, #14]
 8029992:	b004      	add	sp, #16
 8029994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029998:	0802ead4 	.word	0x0802ead4

0802999c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802999c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802999e:	461e      	mov	r6, r3
 80299a0:	1e4b      	subs	r3, r1, #1
 80299a2:	2b01      	cmp	r3, #1
 80299a4:	b085      	sub	sp, #20
 80299a6:	4604      	mov	r4, r0
 80299a8:	460d      	mov	r5, r1
 80299aa:	4617      	mov	r7, r2
 80299ac:	d84b      	bhi.n	8029a46 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80299ae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80299b2:	1cd3      	adds	r3, r2, #3
 80299b4:	b29b      	uxth	r3, r3
 80299b6:	2b06      	cmp	r3, #6
 80299b8:	d916      	bls.n	80299e8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80299ba:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8029a5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80299be:	f8cd c004 	str.w	ip, [sp, #4]
 80299c2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80299c6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80299ca:	6900      	ldr	r0, [r0, #16]
 80299cc:	f8ad 100c 	strh.w	r1, [sp, #12]
 80299d0:	f04f 0c00 	mov.w	ip, #0
 80299d4:	f88d c008 	strb.w	ip, [sp, #8]
 80299d8:	f8ad 200a 	strh.w	r2, [sp, #10]
 80299dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80299e0:	6803      	ldr	r3, [r0, #0]
 80299e2:	a901      	add	r1, sp, #4
 80299e4:	689b      	ldr	r3, [r3, #8]
 80299e6:	4798      	blx	r3
 80299e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80299ec:	1cd3      	adds	r3, r2, #3
 80299ee:	b29b      	uxth	r3, r3
 80299f0:	2b06      	cmp	r3, #6
 80299f2:	d916      	bls.n	8029a22 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80299f4:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8029a5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80299f8:	f8cd c004 	str.w	ip, [sp, #4]
 80299fc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029a00:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029a04:	6920      	ldr	r0, [r4, #16]
 8029a06:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029a0a:	f04f 0c01 	mov.w	ip, #1
 8029a0e:	f88d c008 	strb.w	ip, [sp, #8]
 8029a12:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029a16:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029a1a:	6803      	ldr	r3, [r0, #0]
 8029a1c:	a901      	add	r1, sp, #4
 8029a1e:	689b      	ldr	r3, [r3, #8]
 8029a20:	4798      	blx	r3
 8029a22:	4b0d      	ldr	r3, [pc, #52]	@ (8029a58 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8029a24:	9301      	str	r3, [sp, #4]
 8029a26:	6920      	ldr	r0, [r4, #16]
 8029a28:	f88d 5008 	strb.w	r5, [sp, #8]
 8029a2c:	2300      	movs	r3, #0
 8029a2e:	f8ad 700a 	strh.w	r7, [sp, #10]
 8029a32:	f8ad 600c 	strh.w	r6, [sp, #12]
 8029a36:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029a3a:	6803      	ldr	r3, [r0, #0]
 8029a3c:	a901      	add	r1, sp, #4
 8029a3e:	681b      	ldr	r3, [r3, #0]
 8029a40:	4798      	blx	r3
 8029a42:	b005      	add	sp, #20
 8029a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029a46:	2900      	cmp	r1, #0
 8029a48:	d1eb      	bne.n	8029a22 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029a4a:	80a2      	strh	r2, [r4, #4]
 8029a4c:	80c6      	strh	r6, [r0, #6]
 8029a4e:	60a1      	str	r1, [r4, #8]
 8029a50:	81a1      	strh	r1, [r4, #12]
 8029a52:	73a1      	strb	r1, [r4, #14]
 8029a54:	e7e5      	b.n	8029a22 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029a56:	bf00      	nop
 8029a58:	0802eac0 	.word	0x0802eac0
 8029a5c:	0802eae8 	.word	0x0802eae8

08029a60 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8029a60:	10c9      	asrs	r1, r1, #3
 8029a62:	2900      	cmp	r1, #0
 8029a64:	bfb8      	it	lt
 8029a66:	4249      	neglt	r1, r1
 8029a68:	2801      	cmp	r0, #1
 8029a6a:	d108      	bne.n	8029a7e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8029a6c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8029a70:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8029a74:	4601      	mov	r1, r0
 8029a76:	dd02      	ble.n	8029a7e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8029a78:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8029a7c:	4770      	bx	lr
 8029a7e:	29ff      	cmp	r1, #255	@ 0xff
 8029a80:	bfa8      	it	ge
 8029a82:	21ff      	movge	r1, #255	@ 0xff
 8029a84:	4608      	mov	r0, r1
 8029a86:	4770      	bx	lr

08029a88 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8029a88:	b410      	push	{r4}
 8029a8a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8029a8e:	429c      	cmp	r4, r3
 8029a90:	d803      	bhi.n	8029a9a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8029a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029a96:	f7ed b963 	b.w	8016d60 <_ZN8touchgfx7Outline6lineToEii>
 8029a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029a9e:	4770      	bx	lr

08029aa0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8029aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029aa4:	b08b      	sub	sp, #44	@ 0x2c
 8029aa6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8029aaa:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8029aae:	9308      	str	r3, [sp, #32]
 8029ab0:	4606      	mov	r6, r0
 8029ab2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8029ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8029ab8:	468a      	mov	sl, r1
 8029aba:	f7ed fabe 	bl	801703a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8029abe:	68b5      	ldr	r5, [r6, #8]
 8029ac0:	4604      	mov	r4, r0
 8029ac2:	2d00      	cmp	r5, #0
 8029ac4:	d044      	beq.n	8029b50 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8029ac6:	6873      	ldr	r3, [r6, #4]
 8029ac8:	42ab      	cmp	r3, r5
 8029aca:	d33d      	bcc.n	8029b48 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8029acc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8029ad0:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8029ad4:	eb02 0b03 	add.w	fp, r2, r3
 8029ad8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8029adc:	fb02 1203 	mla	r2, r2, r3, r1
 8029ae0:	9205      	str	r2, [sp, #20]
 8029ae2:	1e6a      	subs	r2, r5, #1
 8029ae4:	9204      	str	r2, [sp, #16]
 8029ae6:	f04f 0800 	mov.w	r8, #0
 8029aea:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8029aee:	f9b4 7000 	ldrsh.w	r7, [r4]
 8029af2:	454b      	cmp	r3, r9
 8029af4:	463a      	mov	r2, r7
 8029af6:	d008      	beq.n	8029b0a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8029af8:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8029afc:	eb03 0b09 	add.w	fp, r3, r9
 8029b00:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8029b04:	fb03 1309 	mla	r3, r3, r9, r1
 8029b08:	9305      	str	r3, [sp, #20]
 8029b0a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8029b0e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8029b12:	4498      	add	r8, r3
 8029b14:	9b04      	ldr	r3, [sp, #16]
 8029b16:	3b01      	subs	r3, #1
 8029b18:	9304      	str	r3, [sp, #16]
 8029b1a:	9b04      	ldr	r3, [sp, #16]
 8029b1c:	3301      	adds	r3, #1
 8029b1e:	d015      	beq.n	8029b4c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8029b20:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8029b24:	42bb      	cmp	r3, r7
 8029b26:	d117      	bne.n	8029b58 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8029b28:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8029b2c:	9b04      	ldr	r3, [sp, #16]
 8029b2e:	4548      	cmp	r0, r9
 8029b30:	f103 33ff 	add.w	r3, r3, #4294967295
 8029b34:	d17f      	bne.n	8029c36 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x196>
 8029b36:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8029b3a:	4401      	add	r1, r0
 8029b3c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8029b40:	4480      	add	r8, r0
 8029b42:	e7e9      	b.n	8029b18 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8029b44:	461f      	mov	r7, r3
 8029b46:	e044      	b.n	8029bd2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x132>
 8029b48:	2000      	movs	r0, #0
 8029b4a:	e002      	b.n	8029b52 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8029b4c:	2900      	cmp	r1, #0
 8029b4e:	d16f      	bne.n	8029c30 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x190>
 8029b50:	2001      	movs	r0, #1
 8029b52:	b00b      	add	sp, #44	@ 0x2c
 8029b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029b58:	2900      	cmp	r1, #0
 8029b5a:	d030      	beq.n	8029bbe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11e>
 8029b5c:	2f00      	cmp	r7, #0
 8029b5e:	db29      	blt.n	8029bb4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 8029b60:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8029b64:	42bb      	cmp	r3, r7
 8029b66:	dd25      	ble.n	8029bb4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 8029b68:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8029b6c:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8029b70:	f7ff ff76 	bl	8029a60 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8029b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029b76:	fb10 f003 	smulbb	r0, r0, r3
 8029b7a:	b280      	uxth	r0, r0
 8029b7c:	1c41      	adds	r1, r0, #1
 8029b7e:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8029b82:	1209      	asrs	r1, r1, #8
 8029b84:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8029b88:	d014      	beq.n	8029bb4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 8029b8a:	9808      	ldr	r0, [sp, #32]
 8029b8c:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8029b8e:	b2c9      	uxtb	r1, r1
 8029b90:	b2ba      	uxth	r2, r7
 8029b92:	9102      	str	r1, [sp, #8]
 8029b94:	2101      	movs	r1, #1
 8029b96:	4413      	add	r3, r2
 8029b98:	9101      	str	r1, [sp, #4]
 8029b9a:	4402      	add	r2, r0
 8029b9c:	fa0f f18b 	sxth.w	r1, fp
 8029ba0:	f8da 0000 	ldr.w	r0, [sl]
 8029ba4:	9100      	str	r1, [sp, #0]
 8029ba6:	6941      	ldr	r1, [r0, #20]
 8029ba8:	b21b      	sxth	r3, r3
 8029baa:	460d      	mov	r5, r1
 8029bac:	b212      	sxth	r2, r2
 8029bae:	9905      	ldr	r1, [sp, #20]
 8029bb0:	4650      	mov	r0, sl
 8029bb2:	47a8      	blx	r5
 8029bb4:	9b04      	ldr	r3, [sp, #16]
 8029bb6:	3301      	adds	r3, #1
 8029bb8:	f107 0201 	add.w	r2, r7, #1
 8029bbc:	d0c8      	beq.n	8029b50 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8029bbe:	f9b4 7000 	ldrsh.w	r7, [r4]
 8029bc2:	1abb      	subs	r3, r7, r2
 8029bc4:	2b00      	cmp	r3, #0
 8029bc6:	dd31      	ble.n	8029c2c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8029bc8:	2a00      	cmp	r2, #0
 8029bca:	dabb      	bge.n	8029b44 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8029bcc:	2f00      	cmp	r7, #0
 8029bce:	dd2d      	ble.n	8029c2c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8029bd0:	2200      	movs	r2, #0
 8029bd2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8029bd6:	19d1      	adds	r1, r2, r7
 8029bd8:	4299      	cmp	r1, r3
 8029bda:	db02      	blt.n	8029be2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x142>
 8029bdc:	1a9f      	subs	r7, r3, r2
 8029bde:	2f00      	cmp	r7, #0
 8029be0:	dd24      	ble.n	8029c2c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8029be2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8029be6:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8029bea:	f7ff ff39 	bl	8029a60 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8029bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029bf0:	fb10 f003 	smulbb	r0, r0, r3
 8029bf4:	b280      	uxth	r0, r0
 8029bf6:	1c41      	adds	r1, r0, #1
 8029bf8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8029bfc:	1209      	asrs	r1, r1, #8
 8029bfe:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8029c02:	d013      	beq.n	8029c2c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8029c04:	9808      	ldr	r0, [sp, #32]
 8029c06:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8029c08:	b292      	uxth	r2, r2
 8029c0a:	b2c9      	uxtb	r1, r1
 8029c0c:	4413      	add	r3, r2
 8029c0e:	9102      	str	r1, [sp, #8]
 8029c10:	4402      	add	r2, r0
 8029c12:	b23f      	sxth	r7, r7
 8029c14:	f8da 0000 	ldr.w	r0, [sl]
 8029c18:	9701      	str	r7, [sp, #4]
 8029c1a:	fa0f f18b 	sxth.w	r1, fp
 8029c1e:	9100      	str	r1, [sp, #0]
 8029c20:	6947      	ldr	r7, [r0, #20]
 8029c22:	9905      	ldr	r1, [sp, #20]
 8029c24:	b21b      	sxth	r3, r3
 8029c26:	b212      	sxth	r2, r2
 8029c28:	4650      	mov	r0, sl
 8029c2a:	47b8      	blx	r7
 8029c2c:	464b      	mov	r3, r9
 8029c2e:	e75c      	b.n	8029aea <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8029c30:	2f00      	cmp	r7, #0
 8029c32:	da95      	bge.n	8029b60 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xc0>
 8029c34:	e78c      	b.n	8029b50 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8029c36:	2900      	cmp	r1, #0
 8029c38:	d0f8      	beq.n	8029c2c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8029c3a:	e78f      	b.n	8029b5c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbc>

08029c3c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8029c3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8029c40:	461e      	mov	r6, r3
 8029c42:	4b36      	ldr	r3, [pc, #216]	@ (8029d1c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8029c44:	e9c0 3100 	strd	r3, r1, [r0]
 8029c48:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8029c4c:	8103      	strh	r3, [r0, #8]
 8029c4e:	2500      	movs	r5, #0
 8029c50:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8029c54:	7283      	strb	r3, [r0, #10]
 8029c56:	f100 0814 	add.w	r8, r0, #20
 8029c5a:	4604      	mov	r4, r0
 8029c5c:	8185      	strh	r5, [r0, #12]
 8029c5e:	81c5      	strh	r5, [r0, #14]
 8029c60:	8205      	strh	r5, [r0, #16]
 8029c62:	8245      	strh	r5, [r0, #18]
 8029c64:	4640      	mov	r0, r8
 8029c66:	4617      	mov	r7, r2
 8029c68:	f7ec fbb2 	bl	80163d0 <_ZN8touchgfx7OutlineC1Ev>
 8029c6c:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8029c70:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8029c74:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8029c78:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8029c7c:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8029c80:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8029c84:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8029c88:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8029c8c:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8029c90:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8029c94:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8029c98:	6830      	ldr	r0, [r6, #0]
 8029c9a:	6871      	ldr	r1, [r6, #4]
 8029c9c:	8872      	ldrh	r2, [r6, #2]
 8029c9e:	8835      	ldrh	r5, [r6, #0]
 8029ca0:	466b      	mov	r3, sp
 8029ca2:	c303      	stmia	r3!, {r0, r1}
 8029ca4:	887b      	ldrh	r3, [r7, #2]
 8029ca6:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8029caa:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8029cae:	4413      	add	r3, r2
 8029cb0:	883a      	ldrh	r2, [r7, #0]
 8029cb2:	81e3      	strh	r3, [r4, #14]
 8029cb4:	442a      	add	r2, r5
 8029cb6:	81a2      	strh	r2, [r4, #12]
 8029cb8:	8220      	strh	r0, [r4, #16]
 8029cba:	8261      	strh	r1, [r4, #18]
 8029cbc:	4668      	mov	r0, sp
 8029cbe:	4639      	mov	r1, r7
 8029cc0:	f7ee fd72 	bl	80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029cc4:	f104 000c 	add.w	r0, r4, #12
 8029cc8:	f7ee fd46 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029ccc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8029cd0:	f8bd 2000 	ldrh.w	r2, [sp]
 8029cd4:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8029cd8:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8029cdc:	4640      	mov	r0, r8
 8029cde:	f7ec fb5b 	bl	8016398 <_ZN8touchgfx7Outline5resetEv>
 8029ce2:	f9bd 3000 	ldrsh.w	r3, [sp]
 8029ce6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8029cea:	015b      	lsls	r3, r3, #5
 8029cec:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8029cee:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8029cf2:	015b      	lsls	r3, r3, #5
 8029cf4:	6523      	str	r3, [r4, #80]	@ 0x50
 8029cf6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8029cfa:	015b      	lsls	r3, r3, #5
 8029cfc:	6563      	str	r3, [r4, #84]	@ 0x54
 8029cfe:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8029d02:	015b      	lsls	r3, r3, #5
 8029d04:	65a3      	str	r3, [r4, #88]	@ 0x58
 8029d06:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8029d0a:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8029d0e:	4620      	mov	r0, r4
 8029d10:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8029d14:	b002      	add	sp, #8
 8029d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029d1a:	bf00      	nop
 8029d1c:	0802ee0c 	.word	0x0802ee0c

08029d20 <_ZN8touchgfx6Canvas5closeEv>:
 8029d20:	b538      	push	{r3, r4, r5, lr}
 8029d22:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8029d26:	4604      	mov	r4, r0
 8029d28:	b193      	cbz	r3, 8029d50 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029d2a:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8029d2e:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 8029d32:	4213      	tst	r3, r2
 8029d34:	d10c      	bne.n	8029d50 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029d36:	f100 0514 	add.w	r5, r0, #20
 8029d3a:	b123      	cbz	r3, 8029d46 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8029d3c:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8029d40:	4628      	mov	r0, r5
 8029d42:	f7ff fea1 	bl	8029a88 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029d46:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8029d4a:	4628      	mov	r0, r5
 8029d4c:	f7ff fe9c 	bl	8029a88 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029d50:	2300      	movs	r3, #0
 8029d52:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8029d56:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8029d5a:	4298      	cmp	r0, r3
 8029d5c:	bf34      	ite	cc
 8029d5e:	2000      	movcc	r0, #0
 8029d60:	2001      	movcs	r0, #1
 8029d62:	bd38      	pop	{r3, r4, r5, pc}

08029d64 <_ZN8touchgfx6Canvas6renderEh>:
 8029d64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8029d68:	7a85      	ldrb	r5, [r0, #10]
 8029d6a:	4369      	muls	r1, r5
 8029d6c:	1c4d      	adds	r5, r1, #1
 8029d6e:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8029d72:	122d      	asrs	r5, r5, #8
 8029d74:	4604      	mov	r4, r0
 8029d76:	f000 8099 	beq.w	8029eac <_ZN8touchgfx6Canvas6renderEh+0x148>
 8029d7a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8029d7e:	2b00      	cmp	r3, #0
 8029d80:	f000 8094 	beq.w	8029eac <_ZN8touchgfx6Canvas6renderEh+0x148>
 8029d84:	f7ff ffcc 	bl	8029d20 <_ZN8touchgfx6Canvas5closeEv>
 8029d88:	4607      	mov	r7, r0
 8029d8a:	2800      	cmp	r0, #0
 8029d8c:	d045      	beq.n	8029e1a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8029d8e:	6860      	ldr	r0, [r4, #4]
 8029d90:	4e47      	ldr	r6, [pc, #284]	@ (8029eb0 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 8029d92:	6803      	ldr	r3, [r0, #0]
 8029d94:	6837      	ldr	r7, [r6, #0]
 8029d96:	689b      	ldr	r3, [r3, #8]
 8029d98:	4798      	blx	r3
 8029d9a:	4601      	mov	r1, r0
 8029d9c:	4638      	mov	r0, r7
 8029d9e:	f7e9 ff73 	bl	8013c88 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8029da2:	4607      	mov	r7, r0
 8029da4:	f7e2 fd34 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 8029da8:	6803      	ldr	r3, [r0, #0]
 8029daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029dac:	4798      	blx	r3
 8029dae:	4680      	mov	r8, r0
 8029db0:	f7e2 fd2e 	bl	800c810 <_ZN8touchgfx3HAL3lcdEv>
 8029db4:	6803      	ldr	r3, [r0, #0]
 8029db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029db8:	4798      	blx	r3
 8029dba:	280b      	cmp	r0, #11
 8029dbc:	d85b      	bhi.n	8029e76 <_ZN8touchgfx6Canvas6renderEh+0x112>
 8029dbe:	e8df f000 	tbb	[pc, r0]
 8029dc2:	5c51      	.short	0x5c51
 8029dc4:	305a066c 	.word	0x305a066c
 8029dc8:	65656540 	.word	0x65656540
 8029dcc:	6565      	.short	0x6565
 8029dce:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029dd2:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8029dd6:	2208      	movs	r2, #8
 8029dd8:	fb91 f2f2 	sdiv	r2, r1, r2
 8029ddc:	fb08 2303 	mla	r3, r8, r3, r2
 8029de0:	441f      	add	r7, r3
 8029de2:	424b      	negs	r3, r1
 8029de4:	f003 0307 	and.w	r3, r3, #7
 8029de8:	f001 0107 	and.w	r1, r1, #7
 8029dec:	bf58      	it	pl
 8029dee:	4259      	negpl	r1, r3
 8029df0:	b2c9      	uxtb	r1, r1
 8029df2:	b2ed      	uxtb	r5, r5
 8029df4:	463a      	mov	r2, r7
 8029df6:	e9cd 1500 	strd	r1, r5, [sp]
 8029dfa:	fa0f f388 	sxth.w	r3, r8
 8029dfe:	6861      	ldr	r1, [r4, #4]
 8029e00:	f104 0014 	add.w	r0, r4, #20
 8029e04:	f7ff fe4c 	bl	8029aa0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8029e08:	4607      	mov	r7, r0
 8029e0a:	6860      	ldr	r0, [r4, #4]
 8029e0c:	6803      	ldr	r3, [r0, #0]
 8029e0e:	691b      	ldr	r3, [r3, #16]
 8029e10:	4798      	blx	r3
 8029e12:	6830      	ldr	r0, [r6, #0]
 8029e14:	6803      	ldr	r3, [r0, #0]
 8029e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029e18:	4798      	blx	r3
 8029e1a:	4638      	mov	r0, r7
 8029e1c:	b002      	add	sp, #8
 8029e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029e22:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029e26:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8029e2a:	2204      	movs	r2, #4
 8029e2c:	fb91 f2f2 	sdiv	r2, r1, r2
 8029e30:	fb08 2303 	mla	r3, r8, r3, r2
 8029e34:	441f      	add	r7, r3
 8029e36:	424b      	negs	r3, r1
 8029e38:	f003 0303 	and.w	r3, r3, #3
 8029e3c:	f001 0103 	and.w	r1, r1, #3
 8029e40:	e7d4      	b.n	8029dec <_ZN8touchgfx6Canvas6renderEh+0x88>
 8029e42:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8029e46:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029e4a:	2900      	cmp	r1, #0
 8029e4c:	f04f 0202 	mov.w	r2, #2
 8029e50:	fb91 f2f2 	sdiv	r2, r1, r2
 8029e54:	f001 0101 	and.w	r1, r1, #1
 8029e58:	fb08 2303 	mla	r3, r8, r3, r2
 8029e5c:	441f      	add	r7, r3
 8029e5e:	bfb8      	it	lt
 8029e60:	4249      	neglt	r1, r1
 8029e62:	e7c5      	b.n	8029df0 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 8029e64:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029e6c:	fb08 f303 	mul.w	r3, r8, r3
 8029e70:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8029e74:	441f      	add	r7, r3
 8029e76:	2100      	movs	r1, #0
 8029e78:	e7bb      	b.n	8029df2 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8029e7a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029e7e:	fb08 f203 	mul.w	r2, r8, r3
 8029e82:	89a3      	ldrh	r3, [r4, #12]
 8029e84:	2103      	movs	r1, #3
 8029e86:	fb13 2301 	smlabb	r3, r3, r1, r2
 8029e8a:	e7f3      	b.n	8029e74 <_ZN8touchgfx6Canvas6renderEh+0x110>
 8029e8c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029e94:	fb08 2303 	mla	r3, r8, r3, r2
 8029e98:	e7ec      	b.n	8029e74 <_ZN8touchgfx6Canvas6renderEh+0x110>
 8029e9a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029e9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029ea2:	fb08 f303 	mul.w	r3, r8, r3
 8029ea6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8029eaa:	e7e3      	b.n	8029e74 <_ZN8touchgfx6Canvas6renderEh+0x110>
 8029eac:	2701      	movs	r7, #1
 8029eae:	e7b4      	b.n	8029e1a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8029eb0:	200126e0 	.word	0x200126e0

08029eb4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8029eb4:	b510      	push	{r4, lr}
 8029eb6:	4b06      	ldr	r3, [pc, #24]	@ (8029ed0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 8029eb8:	781b      	ldrb	r3, [r3, #0]
 8029eba:	2b01      	cmp	r3, #1
 8029ebc:	d107      	bne.n	8029ece <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 8029ebe:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8029ec2:	680b      	ldr	r3, [r1, #0]
 8029ec4:	6814      	ldr	r4, [r2, #0]
 8029ec6:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8029eca:	6013      	str	r3, [r2, #0]
 8029ecc:	600c      	str	r4, [r1, #0]
 8029ece:	bd10      	pop	{r4, pc}
 8029ed0:	200126d8 	.word	0x200126d8

08029ed4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8029ed4:	b513      	push	{r0, r1, r4, lr}
 8029ed6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8029eda:	4604      	mov	r4, r0
 8029edc:	e9cd 2100 	strd	r2, r1, [sp]
 8029ee0:	b9a3      	cbnz	r3, 8029f0c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8029ee2:	466a      	mov	r2, sp
 8029ee4:	a901      	add	r1, sp, #4
 8029ee6:	4620      	mov	r0, r4
 8029ee8:	f7ff ffe4 	bl	8029eb4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029eec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8029eee:	9901      	ldr	r1, [sp, #4]
 8029ef0:	9a00      	ldr	r2, [sp, #0]
 8029ef2:	1ac9      	subs	r1, r1, r3
 8029ef4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8029ef6:	9101      	str	r1, [sp, #4]
 8029ef8:	1ad2      	subs	r2, r2, r3
 8029efa:	2a00      	cmp	r2, #0
 8029efc:	9200      	str	r2, [sp, #0]
 8029efe:	da0b      	bge.n	8029f18 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8029f00:	2301      	movs	r3, #1
 8029f02:	2900      	cmp	r1, #0
 8029f04:	da0e      	bge.n	8029f24 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8029f06:	f043 0304 	orr.w	r3, r3, #4
 8029f0a:	e013      	b.n	8029f34 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8029f0c:	f7ff ff08 	bl	8029d20 <_ZN8touchgfx6Canvas5closeEv>
 8029f10:	2800      	cmp	r0, #0
 8029f12:	d1e6      	bne.n	8029ee2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8029f14:	b002      	add	sp, #8
 8029f16:	bd10      	pop	{r4, pc}
 8029f18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8029f1a:	429a      	cmp	r2, r3
 8029f1c:	bfac      	ite	ge
 8029f1e:	2302      	movge	r3, #2
 8029f20:	2300      	movlt	r3, #0
 8029f22:	e7ee      	b.n	8029f02 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8029f24:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8029f26:	4281      	cmp	r1, r0
 8029f28:	bfac      	ite	ge
 8029f2a:	2008      	movge	r0, #8
 8029f2c:	2000      	movlt	r0, #0
 8029f2e:	4318      	orrs	r0, r3
 8029f30:	b2c3      	uxtb	r3, r0
 8029f32:	b158      	cbz	r0, 8029f4c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8029f34:	2200      	movs	r2, #0
 8029f36:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8029f3a:	9901      	ldr	r1, [sp, #4]
 8029f3c:	9a00      	ldr	r2, [sp, #0]
 8029f3e:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8029f40:	6722      	str	r2, [r4, #112]	@ 0x70
 8029f42:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8029f46:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8029f4a:	e7e3      	b.n	8029f14 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8029f4c:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8029f50:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8029f54:	4298      	cmp	r0, r3
 8029f56:	d803      	bhi.n	8029f60 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8029f58:	f104 0014 	add.w	r0, r4, #20
 8029f5c:	f7ec ff1a 	bl	8016d94 <_ZN8touchgfx7Outline6moveToEii>
 8029f60:	2301      	movs	r3, #1
 8029f62:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8029f66:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8029f6a:	2300      	movs	r3, #0
 8029f6c:	e7e5      	b.n	8029f3a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08029f6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8029f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029f70:	ab02      	add	r3, sp, #8
 8029f72:	4604      	mov	r4, r0
 8029f74:	f843 2d08 	str.w	r2, [r3, #-8]!
 8029f78:	9101      	str	r1, [sp, #4]
 8029f7a:	461a      	mov	r2, r3
 8029f7c:	a901      	add	r1, sp, #4
 8029f7e:	f7ff ff99 	bl	8029eb4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029f82:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8029f84:	9901      	ldr	r1, [sp, #4]
 8029f86:	9a00      	ldr	r2, [sp, #0]
 8029f88:	1ac9      	subs	r1, r1, r3
 8029f8a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8029f8c:	9101      	str	r1, [sp, #4]
 8029f8e:	1ad2      	subs	r2, r2, r3
 8029f90:	2a00      	cmp	r2, #0
 8029f92:	9200      	str	r2, [sp, #0]
 8029f94:	db1c      	blt.n	8029fd0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8029f96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8029f98:	429a      	cmp	r2, r3
 8029f9a:	bfac      	ite	ge
 8029f9c:	2002      	movge	r0, #2
 8029f9e:	2000      	movlt	r0, #0
 8029fa0:	2900      	cmp	r1, #0
 8029fa2:	db17      	blt.n	8029fd4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8029fa4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8029fa6:	4299      	cmp	r1, r3
 8029fa8:	bfac      	ite	ge
 8029faa:	2308      	movge	r3, #8
 8029fac:	2300      	movlt	r3, #0
 8029fae:	4303      	orrs	r3, r0
 8029fb0:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8029fb4:	b2dd      	uxtb	r5, r3
 8029fb6:	b978      	cbnz	r0, 8029fd8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8029fb8:	f104 0014 	add.w	r0, r4, #20
 8029fbc:	f7ff fd64 	bl	8029a88 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029fc0:	9b01      	ldr	r3, [sp, #4]
 8029fc2:	6623      	str	r3, [r4, #96]	@ 0x60
 8029fc4:	9b00      	ldr	r3, [sp, #0]
 8029fc6:	6663      	str	r3, [r4, #100]	@ 0x64
 8029fc8:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8029fcc:	b002      	add	sp, #8
 8029fce:	bd70      	pop	{r4, r5, r6, pc}
 8029fd0:	2001      	movs	r0, #1
 8029fd2:	e7e5      	b.n	8029fa0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8029fd4:	2304      	movs	r3, #4
 8029fd6:	e7ea      	b.n	8029fae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8029fd8:	b113      	cbz	r3, 8029fe0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8029fda:	ea10 0305 	ands.w	r3, r0, r5
 8029fde:	d11c      	bne.n	802a01a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8029fe0:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8029fe4:	f104 0614 	add.w	r6, r4, #20
 8029fe8:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8029fec:	b98b      	cbnz	r3, 802a012 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8029fee:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8029ff2:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8029ff6:	4298      	cmp	r0, r3
 8029ff8:	d802      	bhi.n	802a000 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8029ffa:	4630      	mov	r0, r6
 8029ffc:	f7ec feca 	bl	8016d94 <_ZN8touchgfx7Outline6moveToEii>
 802a000:	2301      	movs	r3, #1
 802a002:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802a006:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802a00a:	e9dd 2100 	ldrd	r2, r1, [sp]
 802a00e:	4630      	mov	r0, r6
 802a010:	e7d4      	b.n	8029fbc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802a012:	4630      	mov	r0, r6
 802a014:	f7ff fd38 	bl	8029a88 <_ZN8touchgfx10Rasterizer6lineToEii>
 802a018:	e7f7      	b.n	802a00a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802a01a:	461d      	mov	r5, r3
 802a01c:	e7d0      	b.n	8029fc0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802a020 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 802a020:	b538      	push	{r3, r4, r5, lr}
 802a022:	ed2d 8b10 	vpush	{d8-d15}
 802a026:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 802a02a:	ed9f ba5a 	vldr	s22, [pc, #360]	@ 802a194 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 802a02e:	4605      	mov	r5, r0
 802a030:	eeb0 ca40 	vmov.f32	s24, s0
 802a034:	eef0 ca60 	vmov.f32	s25, s1
 802a038:	eeb0 da41 	vmov.f32	s26, s2
 802a03c:	eef0 da61 	vmov.f32	s27, s3
 802a040:	eeb0 ea42 	vmov.f32	s28, s4
 802a044:	eef0 ea62 	vmov.f32	s29, s5
 802a048:	460c      	mov	r4, r1
 802a04a:	eef0 aa6b 	vmov.f32	s21, s23
 802a04e:	2c08      	cmp	r4, #8
 802a050:	d86e      	bhi.n	802a130 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802a052:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 802a056:	ee7d 7aee 	vsub.f32	s15, s27, s29
 802a05a:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802a05e:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802a062:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 802a066:	ee3c fa0d 	vadd.f32	s30, s24, s26
 802a06a:	eee6 7a07 	vfma.f32	s15, s12, s14
 802a06e:	ee7c faad 	vadd.f32	s31, s25, s27
 802a072:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 802a076:	ee3d aaae 	vadd.f32	s20, s27, s29
 802a07a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802a07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a082:	ee2f fa2b 	vmul.f32	s30, s30, s23
 802a086:	ee6f faab 	vmul.f32	s31, s31, s23
 802a08a:	ee69 9aab 	vmul.f32	s19, s19, s23
 802a08e:	ee2a aa2b 	vmul.f32	s20, s20, s23
 802a092:	bf48      	it	mi
 802a094:	eef1 7a67 	vnegmi.f32	s15, s15
 802a098:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802a09c:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 802a0a0:	eef4 7acb 	vcmpe.f32	s15, s22
 802a0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a0a8:	ee68 8aab 	vmul.f32	s17, s17, s23
 802a0ac:	ee29 9a2b 	vmul.f32	s18, s18, s23
 802a0b0:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 802a0b4:	dd3f      	ble.n	802a136 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 802a0b6:	ee27 7a07 	vmul.f32	s14, s14, s14
 802a0ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802a0be:	eea6 7aa6 	vfma.f32	s14, s13, s13
 802a0c2:	ee27 7a06 	vmul.f32	s14, s14, s12
 802a0c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 802a0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a0ce:	d847      	bhi.n	802a160 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802a0d0:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 802a0d4:	ee3e 0aed 	vsub.f32	s0, s29, s27
 802a0d8:	f000 fa3b 	bl	802a552 <atan2f>
 802a0dc:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 802a0e0:	eeb0 8a40 	vmov.f32	s16, s0
 802a0e4:	ee3d 0aec 	vsub.f32	s0, s27, s25
 802a0e8:	f000 fa33 	bl	802a552 <atan2f>
 802a0ec:	ee38 0a40 	vsub.f32	s0, s16, s0
 802a0f0:	eddf 7a29 	vldr	s15, [pc, #164]	@ 802a198 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 802a0f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802a0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a0fc:	bf48      	it	mi
 802a0fe:	eeb1 0a40 	vnegmi.f32	s0, s0
 802a102:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a10a:	bfa4      	itt	ge
 802a10c:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 802a19c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 802a110:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802a114:	eddf 7a22 	vldr	s15, [pc, #136]	@ 802a1a0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 802a118:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a120:	d51e      	bpl.n	802a160 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802a122:	eef0 0a49 	vmov.f32	s1, s18
 802a126:	eeb0 0a68 	vmov.f32	s0, s17
 802a12a:	4628      	mov	r0, r5
 802a12c:	f7ea ff14 	bl	8014f58 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802a130:	ecbd 8b10 	vpop	{d8-d15}
 802a134:	bd38      	pop	{r3, r4, r5, pc}
 802a136:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 802a13a:	eeb0 7a68 	vmov.f32	s14, s17
 802a13e:	eea7 7aea 	vfms.f32	s14, s15, s21
 802a142:	ee7c 7aae 	vadd.f32	s15, s25, s29
 802a146:	eef0 6a49 	vmov.f32	s13, s18
 802a14a:	eee7 6aea 	vfms.f32	s13, s15, s21
 802a14e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 802a152:	eee7 7a07 	vfma.f32	s15, s14, s14
 802a156:	eef4 7ac6 	vcmpe.f32	s15, s12
 802a15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a15e:	d9e0      	bls.n	802a122 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 802a160:	3401      	adds	r4, #1
 802a162:	eef0 0a6c 	vmov.f32	s1, s25
 802a166:	eeb0 0a4c 	vmov.f32	s0, s24
 802a16a:	4621      	mov	r1, r4
 802a16c:	eef0 2a49 	vmov.f32	s5, s18
 802a170:	eeb0 2a68 	vmov.f32	s4, s17
 802a174:	eef0 1a6f 	vmov.f32	s3, s31
 802a178:	eeb0 1a4f 	vmov.f32	s2, s30
 802a17c:	4628      	mov	r0, r5
 802a17e:	f7ff ff4f 	bl	802a020 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 802a182:	eef0 da4a 	vmov.f32	s27, s20
 802a186:	eeb0 da69 	vmov.f32	s26, s19
 802a18a:	eef0 ca49 	vmov.f32	s25, s18
 802a18e:	eeb0 ca68 	vmov.f32	s24, s17
 802a192:	e75c      	b.n	802a04e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 802a194:	2edbe6ff 	.word	0x2edbe6ff
 802a198:	40490fdb 	.word	0x40490fdb
 802a19c:	40c90fdb 	.word	0x40c90fdb
 802a1a0:	3dcccccd 	.word	0x3dcccccd

0802a1a4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 802a1a4:	b530      	push	{r4, r5, lr}
 802a1a6:	ed2d 8b10 	vpush	{d8-d15}
 802a1aa:	4604      	mov	r4, r0
 802a1ac:	b085      	sub	sp, #20
 802a1ae:	eef0 8a40 	vmov.f32	s17, s0
 802a1b2:	eef0 9a60 	vmov.f32	s19, s1
 802a1b6:	eef0 fa41 	vmov.f32	s31, s2
 802a1ba:	eeb0 fa61 	vmov.f32	s30, s3
 802a1be:	eef0 ba42 	vmov.f32	s23, s4
 802a1c2:	eeb0 ca62 	vmov.f32	s24, s5
 802a1c6:	eef0 aa43 	vmov.f32	s21, s6
 802a1ca:	eeb0 ba63 	vmov.f32	s22, s7
 802a1ce:	460d      	mov	r5, r1
 802a1d0:	2d08      	cmp	r5, #8
 802a1d2:	f200 8115 	bhi.w	802a400 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x25c>
 802a1d6:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 802a1da:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802a1de:	ee7f 6aab 	vadd.f32	s13, s31, s23
 802a1e2:	ee26 6a27 	vmul.f32	s12, s12, s15
 802a1e6:	ee38 daaf 	vadd.f32	s26, s17, s31
 802a1ea:	ed8d 6a01 	vstr	s12, [sp, #4]
 802a1ee:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802a1f2:	ee2d da27 	vmul.f32	s26, s26, s15
 802a1f6:	ee7c ca0b 	vadd.f32	s25, s24, s22
 802a1fa:	eeb0 ea4d 	vmov.f32	s28, s26
 802a1fe:	eea6 eaa7 	vfma.f32	s28, s13, s15
 802a202:	ee6c caa7 	vmul.f32	s25, s25, s15
 802a206:	ee66 6a27 	vmul.f32	s13, s12, s15
 802a20a:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 802a20e:	edcd 6a03 	vstr	s13, [sp, #12]
 802a212:	ee79 da8f 	vadd.f32	s27, s19, s30
 802a216:	eef0 6a6c 	vmov.f32	s13, s25
 802a21a:	eee7 6a27 	vfma.f32	s13, s14, s15
 802a21e:	ee6d daa7 	vmul.f32	s27, s27, s15
 802a222:	ee2e ea27 	vmul.f32	s28, s28, s15
 802a226:	eef0 ea6d 	vmov.f32	s29, s27
 802a22a:	eee7 ea27 	vfma.f32	s29, s14, s15
 802a22e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 802a232:	ee6e eaa7 	vmul.f32	s29, s29, s15
 802a236:	ed8d 7a02 	vstr	s14, [sp, #8]
 802a23a:	ed9d 7a03 	vldr	s14, [sp, #12]
 802a23e:	ee3e 9a07 	vadd.f32	s18, s28, s14
 802a242:	ed9d 7a02 	vldr	s14, [sp, #8]
 802a246:	ee3e aa87 	vadd.f32	s20, s29, s14
 802a24a:	ee29 9a27 	vmul.f32	s18, s18, s15
 802a24e:	ee2a aa27 	vmul.f32	s20, s20, s15
 802a252:	eef0 6a67 	vmov.f32	s13, s15
 802a256:	2d00      	cmp	r5, #0
 802a258:	f000 810d 	beq.w	802a476 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2d2>
 802a25c:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 802a260:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 802a264:	ee7b 7a69 	vsub.f32	s15, s22, s19
 802a268:	ee3f 6aea 	vsub.f32	s12, s31, s21
 802a26c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 802a270:	ee3b 5aea 	vsub.f32	s10, s23, s21
 802a274:	eea6 7a27 	vfma.f32	s14, s12, s15
 802a278:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 802a27c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802a280:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 802a284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a288:	eea5 6a27 	vfma.f32	s12, s10, s15
 802a28c:	eddf 4a8b 	vldr	s9, [pc, #556]	@ 802a4bc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802a290:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 802a294:	bf48      	it	mi
 802a296:	eeb1 7a47 	vnegmi.f32	s14, s14
 802a29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a29e:	eeb4 7ae4 	vcmpe.f32	s14, s9
 802a2a2:	bf48      	it	mi
 802a2a4:	eeb1 6a46 	vnegmi.f32	s12, s12
 802a2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a2ac:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 802a2b0:	f340 80aa 	ble.w	802a408 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x264>
 802a2b4:	eeb4 6ae4 	vcmpe.f32	s12, s9
 802a2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a2bc:	dd5c      	ble.n	802a378 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d4>
 802a2be:	ee65 5aa5 	vmul.f32	s11, s11, s11
 802a2c2:	ee37 7a06 	vadd.f32	s14, s14, s12
 802a2c6:	eee7 5aa7 	vfma.f32	s11, s15, s15
 802a2ca:	ee27 7a07 	vmul.f32	s14, s14, s14
 802a2ce:	ee65 7a85 	vmul.f32	s15, s11, s10
 802a2d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802a2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a2da:	f200 80cc 	bhi.w	802a476 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2d2>
 802a2de:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802a2e2:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802a2e6:	f000 f934 	bl	802a552 <atan2f>
 802a2ea:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802a2ee:	eeb0 8a40 	vmov.f32	s16, s0
 802a2f2:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802a2f6:	f000 f92c 	bl	802a552 <atan2f>
 802a2fa:	ee38 fa40 	vsub.f32	s30, s16, s0
 802a2fe:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802a302:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 802a306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a30a:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802a30e:	bf48      	it	mi
 802a310:	eeb1 fa4f 	vnegmi.f32	s30, s30
 802a314:	f000 f91d 	bl	802a552 <atan2f>
 802a318:	ee30 0a48 	vsub.f32	s0, s0, s16
 802a31c:	eddf 7a68 	vldr	s15, [pc, #416]	@ 802a4c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802a320:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802a324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a328:	eeb4 fae7 	vcmpe.f32	s30, s15
 802a32c:	bf48      	it	mi
 802a32e:	eeb1 0a40 	vnegmi.f32	s0, s0
 802a332:	eddf 7a63 	vldr	s15, [pc, #396]	@ 802a4c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802a336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a33a:	bfa8      	it	ge
 802a33c:	ed9f 7a61 	vldrge	s14, [pc, #388]	@ 802a4c4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802a340:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a344:	bfa8      	it	ge
 802a346:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 802a34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a34e:	bfa8      	it	ge
 802a350:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 802a4c4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802a354:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 802a4c8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x324>
 802a358:	bfa8      	it	ge
 802a35a:	ee37 0a40 	vsubge.f32	s0, s14, s0
 802a35e:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802a362:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a36a:	f140 8084 	bpl.w	802a476 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2d2>
 802a36e:	eef0 0a4a 	vmov.f32	s1, s20
 802a372:	eeb0 0a49 	vmov.f32	s0, s18
 802a376:	e040      	b.n	802a3fa <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x256>
 802a378:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802a37c:	ee27 7a07 	vmul.f32	s14, s14, s14
 802a380:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802a384:	ee67 7a85 	vmul.f32	s15, s15, s10
 802a388:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802a38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a390:	d871      	bhi.n	802a476 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2d2>
 802a392:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802a396:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802a39a:	f000 f8da 	bl	802a552 <atan2f>
 802a39e:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802a3a2:	eeb0 8a40 	vmov.f32	s16, s0
 802a3a6:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802a3aa:	f000 f8d2 	bl	802a552 <atan2f>
 802a3ae:	ee38 0a40 	vsub.f32	s0, s16, s0
 802a3b2:	eddf 7a43 	vldr	s15, [pc, #268]	@ 802a4c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802a3b6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802a3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a3be:	bf48      	it	mi
 802a3c0:	eeb1 0a40 	vnegmi.f32	s0, s0
 802a3c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a3cc:	bfa4      	itt	ge
 802a3ce:	eddf 7a3d 	vldrge	s15, [pc, #244]	@ 802a4c4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802a3d2:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 802a3d6:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 802a4c8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x324>
 802a3da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a3e2:	d548      	bpl.n	802a476 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2d2>
 802a3e4:	eef0 0a4f 	vmov.f32	s1, s30
 802a3e8:	eeb0 0a6f 	vmov.f32	s0, s31
 802a3ec:	4620      	mov	r0, r4
 802a3ee:	f7ea fdb3 	bl	8014f58 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802a3f2:	eef0 0a4c 	vmov.f32	s1, s24
 802a3f6:	eeb0 0a6b 	vmov.f32	s0, s23
 802a3fa:	4620      	mov	r0, r4
 802a3fc:	f7ea fdac 	bl	8014f58 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802a400:	b005      	add	sp, #20
 802a402:	ecbd 8b10 	vpop	{d8-d15}
 802a406:	bd30      	pop	{r4, r5, pc}
 802a408:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 802a4bc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802a40c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802a410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a414:	dd19      	ble.n	802a44a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a6>
 802a416:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802a41a:	ee26 7a06 	vmul.f32	s14, s12, s12
 802a41e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802a422:	ee67 7a85 	vmul.f32	s15, s15, s10
 802a426:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802a42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a42e:	d822      	bhi.n	802a476 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2d2>
 802a430:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802a434:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802a438:	f000 f88b 	bl	802a552 <atan2f>
 802a43c:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802a440:	eeb0 8a40 	vmov.f32	s16, s0
 802a444:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802a448:	e7af      	b.n	802a3aa <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x206>
 802a44a:	ee78 7aaa 	vadd.f32	s15, s17, s21
 802a44e:	eeb0 7a49 	vmov.f32	s14, s18
 802a452:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802a456:	ee79 7a8b 	vadd.f32	s15, s19, s22
 802a45a:	eeb0 6a4a 	vmov.f32	s12, s20
 802a45e:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802a462:	ee66 7a06 	vmul.f32	s15, s12, s12
 802a466:	eee7 7a07 	vfma.f32	s15, s14, s14
 802a46a:	eef4 7ac5 	vcmpe.f32	s15, s10
 802a46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a472:	f67f af7c 	bls.w	802a36e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1ca>
 802a476:	3501      	adds	r5, #1
 802a478:	eef0 0a69 	vmov.f32	s1, s19
 802a47c:	eeb0 0a68 	vmov.f32	s0, s17
 802a480:	4629      	mov	r1, r5
 802a482:	eef0 3a4a 	vmov.f32	s7, s20
 802a486:	eeb0 3a49 	vmov.f32	s6, s18
 802a48a:	eef0 2a6e 	vmov.f32	s5, s29
 802a48e:	eeb0 2a4e 	vmov.f32	s4, s28
 802a492:	eef0 1a6d 	vmov.f32	s3, s27
 802a496:	eeb0 1a4d 	vmov.f32	s2, s26
 802a49a:	4620      	mov	r0, r4
 802a49c:	f7ff fe82 	bl	802a1a4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 802a4a0:	eeb0 ca6c 	vmov.f32	s24, s25
 802a4a4:	eddd ba01 	vldr	s23, [sp, #4]
 802a4a8:	ed9d fa02 	vldr	s30, [sp, #8]
 802a4ac:	eddd fa03 	vldr	s31, [sp, #12]
 802a4b0:	eef0 9a4a 	vmov.f32	s19, s20
 802a4b4:	eef0 8a49 	vmov.f32	s17, s18
 802a4b8:	e68a      	b.n	802a1d0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 802a4ba:	bf00      	nop
 802a4bc:	2edbe6ff 	.word	0x2edbe6ff
 802a4c0:	40490fdb 	.word	0x40490fdb
 802a4c4:	40c90fdb 	.word	0x40c90fdb
 802a4c8:	3dcccccd 	.word	0x3dcccccd

0802a4cc <_ZN8touchgfx6CanvasD1Ev>:
 802a4cc:	b510      	push	{r4, lr}
 802a4ce:	4b04      	ldr	r3, [pc, #16]	@ (802a4e0 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802a4d0:	4604      	mov	r4, r0
 802a4d2:	f840 3b14 	str.w	r3, [r0], #20
 802a4d6:	f7eb ff57 	bl	8016388 <_ZN8touchgfx7OutlineD1Ev>
 802a4da:	4620      	mov	r0, r4
 802a4dc:	bd10      	pop	{r4, pc}
 802a4de:	bf00      	nop
 802a4e0:	0802ee0c 	.word	0x0802ee0c

0802a4e4 <_ZN8touchgfx6CanvasD0Ev>:
 802a4e4:	b510      	push	{r4, lr}
 802a4e6:	4604      	mov	r4, r0
 802a4e8:	f7ff fff0 	bl	802a4cc <_ZN8touchgfx6CanvasD1Ev>
 802a4ec:	4620      	mov	r0, r4
 802a4ee:	2174      	movs	r1, #116	@ 0x74
 802a4f0:	f000 f807 	bl	802a502 <_ZdlPvj>
 802a4f4:	4620      	mov	r0, r4
 802a4f6:	bd10      	pop	{r4, pc}

0802a4f8 <__aeabi_atexit>:
 802a4f8:	460b      	mov	r3, r1
 802a4fa:	4601      	mov	r1, r0
 802a4fc:	4618      	mov	r0, r3
 802a4fe:	f001 b829 	b.w	802b554 <__cxa_atexit>

0802a502 <_ZdlPvj>:
 802a502:	f000 b812 	b.w	802a52a <_ZdlPv>

0802a506 <__cxa_guard_acquire>:
 802a506:	6802      	ldr	r2, [r0, #0]
 802a508:	07d2      	lsls	r2, r2, #31
 802a50a:	4603      	mov	r3, r0
 802a50c:	d405      	bmi.n	802a51a <__cxa_guard_acquire+0x14>
 802a50e:	7842      	ldrb	r2, [r0, #1]
 802a510:	b102      	cbz	r2, 802a514 <__cxa_guard_acquire+0xe>
 802a512:	deff      	udf	#255	@ 0xff
 802a514:	2001      	movs	r0, #1
 802a516:	7058      	strb	r0, [r3, #1]
 802a518:	4770      	bx	lr
 802a51a:	2000      	movs	r0, #0
 802a51c:	4770      	bx	lr

0802a51e <__cxa_guard_release>:
 802a51e:	2301      	movs	r3, #1
 802a520:	6003      	str	r3, [r0, #0]
 802a522:	4770      	bx	lr

0802a524 <__cxa_pure_virtual>:
 802a524:	b508      	push	{r3, lr}
 802a526:	f000 f80f 	bl	802a548 <_ZSt9terminatev>

0802a52a <_ZdlPv>:
 802a52a:	f000 bf5d 	b.w	802b3e8 <free>

0802a52e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802a52e:	b508      	push	{r3, lr}
 802a530:	4780      	blx	r0
 802a532:	f000 ff25 	bl	802b380 <abort>
	...

0802a538 <_ZSt13get_terminatev>:
 802a538:	4b02      	ldr	r3, [pc, #8]	@ (802a544 <_ZSt13get_terminatev+0xc>)
 802a53a:	6818      	ldr	r0, [r3, #0]
 802a53c:	f3bf 8f5b 	dmb	ish
 802a540:	4770      	bx	lr
 802a542:	bf00      	nop
 802a544:	20000108 	.word	0x20000108

0802a548 <_ZSt9terminatev>:
 802a548:	b508      	push	{r3, lr}
 802a54a:	f7ff fff5 	bl	802a538 <_ZSt13get_terminatev>
 802a54e:	f7ff ffee 	bl	802a52e <_ZN10__cxxabiv111__terminateEPFvvE>

0802a552 <atan2f>:
 802a552:	f000 b94d 	b.w	802a7f0 <__ieee754_atan2f>
	...

0802a558 <sqrtf>:
 802a558:	b508      	push	{r3, lr}
 802a55a:	ed2d 8b02 	vpush	{d8}
 802a55e:	eeb0 8a40 	vmov.f32	s16, s0
 802a562:	f000 f8a1 	bl	802a6a8 <__ieee754_sqrtf>
 802a566:	eeb4 8a48 	vcmp.f32	s16, s16
 802a56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a56e:	d60c      	bvs.n	802a58a <sqrtf+0x32>
 802a570:	eddf 8a07 	vldr	s17, [pc, #28]	@ 802a590 <sqrtf+0x38>
 802a574:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802a578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a57c:	d505      	bpl.n	802a58a <sqrtf+0x32>
 802a57e:	f001 f9d1 	bl	802b924 <__errno>
 802a582:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802a586:	2321      	movs	r3, #33	@ 0x21
 802a588:	6003      	str	r3, [r0, #0]
 802a58a:	ecbd 8b02 	vpop	{d8}
 802a58e:	bd08      	pop	{r3, pc}
 802a590:	00000000 	.word	0x00000000

0802a594 <cosf>:
 802a594:	ee10 3a10 	vmov	r3, s0
 802a598:	b507      	push	{r0, r1, r2, lr}
 802a59a:	4a1e      	ldr	r2, [pc, #120]	@ (802a614 <cosf+0x80>)
 802a59c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802a5a0:	4293      	cmp	r3, r2
 802a5a2:	d806      	bhi.n	802a5b2 <cosf+0x1e>
 802a5a4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 802a618 <cosf+0x84>
 802a5a8:	b003      	add	sp, #12
 802a5aa:	f85d eb04 	ldr.w	lr, [sp], #4
 802a5ae:	f000 b87f 	b.w	802a6b0 <__kernel_cosf>
 802a5b2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802a5b6:	d304      	bcc.n	802a5c2 <cosf+0x2e>
 802a5b8:	ee30 0a40 	vsub.f32	s0, s0, s0
 802a5bc:	b003      	add	sp, #12
 802a5be:	f85d fb04 	ldr.w	pc, [sp], #4
 802a5c2:	4668      	mov	r0, sp
 802a5c4:	f000 f9b4 	bl	802a930 <__ieee754_rem_pio2f>
 802a5c8:	f000 0003 	and.w	r0, r0, #3
 802a5cc:	2801      	cmp	r0, #1
 802a5ce:	d009      	beq.n	802a5e4 <cosf+0x50>
 802a5d0:	2802      	cmp	r0, #2
 802a5d2:	d010      	beq.n	802a5f6 <cosf+0x62>
 802a5d4:	b9b0      	cbnz	r0, 802a604 <cosf+0x70>
 802a5d6:	eddd 0a01 	vldr	s1, [sp, #4]
 802a5da:	ed9d 0a00 	vldr	s0, [sp]
 802a5de:	f000 f867 	bl	802a6b0 <__kernel_cosf>
 802a5e2:	e7eb      	b.n	802a5bc <cosf+0x28>
 802a5e4:	eddd 0a01 	vldr	s1, [sp, #4]
 802a5e8:	ed9d 0a00 	vldr	s0, [sp]
 802a5ec:	f000 f8b8 	bl	802a760 <__kernel_sinf>
 802a5f0:	eeb1 0a40 	vneg.f32	s0, s0
 802a5f4:	e7e2      	b.n	802a5bc <cosf+0x28>
 802a5f6:	eddd 0a01 	vldr	s1, [sp, #4]
 802a5fa:	ed9d 0a00 	vldr	s0, [sp]
 802a5fe:	f000 f857 	bl	802a6b0 <__kernel_cosf>
 802a602:	e7f5      	b.n	802a5f0 <cosf+0x5c>
 802a604:	eddd 0a01 	vldr	s1, [sp, #4]
 802a608:	ed9d 0a00 	vldr	s0, [sp]
 802a60c:	2001      	movs	r0, #1
 802a60e:	f000 f8a7 	bl	802a760 <__kernel_sinf>
 802a612:	e7d3      	b.n	802a5bc <cosf+0x28>
 802a614:	3f490fd8 	.word	0x3f490fd8
 802a618:	00000000 	.word	0x00000000

0802a61c <sinf>:
 802a61c:	ee10 3a10 	vmov	r3, s0
 802a620:	b507      	push	{r0, r1, r2, lr}
 802a622:	4a1f      	ldr	r2, [pc, #124]	@ (802a6a0 <sinf+0x84>)
 802a624:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802a628:	4293      	cmp	r3, r2
 802a62a:	d807      	bhi.n	802a63c <sinf+0x20>
 802a62c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 802a6a4 <sinf+0x88>
 802a630:	2000      	movs	r0, #0
 802a632:	b003      	add	sp, #12
 802a634:	f85d eb04 	ldr.w	lr, [sp], #4
 802a638:	f000 b892 	b.w	802a760 <__kernel_sinf>
 802a63c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802a640:	d304      	bcc.n	802a64c <sinf+0x30>
 802a642:	ee30 0a40 	vsub.f32	s0, s0, s0
 802a646:	b003      	add	sp, #12
 802a648:	f85d fb04 	ldr.w	pc, [sp], #4
 802a64c:	4668      	mov	r0, sp
 802a64e:	f000 f96f 	bl	802a930 <__ieee754_rem_pio2f>
 802a652:	f000 0003 	and.w	r0, r0, #3
 802a656:	2801      	cmp	r0, #1
 802a658:	d00a      	beq.n	802a670 <sinf+0x54>
 802a65a:	2802      	cmp	r0, #2
 802a65c:	d00f      	beq.n	802a67e <sinf+0x62>
 802a65e:	b9c0      	cbnz	r0, 802a692 <sinf+0x76>
 802a660:	eddd 0a01 	vldr	s1, [sp, #4]
 802a664:	ed9d 0a00 	vldr	s0, [sp]
 802a668:	2001      	movs	r0, #1
 802a66a:	f000 f879 	bl	802a760 <__kernel_sinf>
 802a66e:	e7ea      	b.n	802a646 <sinf+0x2a>
 802a670:	eddd 0a01 	vldr	s1, [sp, #4]
 802a674:	ed9d 0a00 	vldr	s0, [sp]
 802a678:	f000 f81a 	bl	802a6b0 <__kernel_cosf>
 802a67c:	e7e3      	b.n	802a646 <sinf+0x2a>
 802a67e:	eddd 0a01 	vldr	s1, [sp, #4]
 802a682:	ed9d 0a00 	vldr	s0, [sp]
 802a686:	2001      	movs	r0, #1
 802a688:	f000 f86a 	bl	802a760 <__kernel_sinf>
 802a68c:	eeb1 0a40 	vneg.f32	s0, s0
 802a690:	e7d9      	b.n	802a646 <sinf+0x2a>
 802a692:	eddd 0a01 	vldr	s1, [sp, #4]
 802a696:	ed9d 0a00 	vldr	s0, [sp]
 802a69a:	f000 f809 	bl	802a6b0 <__kernel_cosf>
 802a69e:	e7f5      	b.n	802a68c <sinf+0x70>
 802a6a0:	3f490fd8 	.word	0x3f490fd8
 802a6a4:	00000000 	.word	0x00000000

0802a6a8 <__ieee754_sqrtf>:
 802a6a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802a6ac:	4770      	bx	lr
	...

0802a6b0 <__kernel_cosf>:
 802a6b0:	ee10 3a10 	vmov	r3, s0
 802a6b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802a6b8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802a6bc:	eef0 6a40 	vmov.f32	s13, s0
 802a6c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802a6c4:	d204      	bcs.n	802a6d0 <__kernel_cosf+0x20>
 802a6c6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 802a6ca:	ee17 2a90 	vmov	r2, s15
 802a6ce:	b342      	cbz	r2, 802a722 <__kernel_cosf+0x72>
 802a6d0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 802a6d4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 802a740 <__kernel_cosf+0x90>
 802a6d8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 802a744 <__kernel_cosf+0x94>
 802a6dc:	4a1a      	ldr	r2, [pc, #104]	@ (802a748 <__kernel_cosf+0x98>)
 802a6de:	eea7 6a27 	vfma.f32	s12, s14, s15
 802a6e2:	4293      	cmp	r3, r2
 802a6e4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802a74c <__kernel_cosf+0x9c>
 802a6e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 802a6ec:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 802a750 <__kernel_cosf+0xa0>
 802a6f0:	eea7 6a87 	vfma.f32	s12, s15, s14
 802a6f4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 802a754 <__kernel_cosf+0xa4>
 802a6f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 802a6fc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 802a758 <__kernel_cosf+0xa8>
 802a700:	eea7 6a87 	vfma.f32	s12, s15, s14
 802a704:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 802a708:	ee26 6a07 	vmul.f32	s12, s12, s14
 802a70c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802a710:	eee7 0a06 	vfma.f32	s1, s14, s12
 802a714:	ee67 7a27 	vmul.f32	s15, s14, s15
 802a718:	d804      	bhi.n	802a724 <__kernel_cosf+0x74>
 802a71a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802a71e:	ee30 0a67 	vsub.f32	s0, s0, s15
 802a722:	4770      	bx	lr
 802a724:	4a0d      	ldr	r2, [pc, #52]	@ (802a75c <__kernel_cosf+0xac>)
 802a726:	4293      	cmp	r3, r2
 802a728:	bf9a      	itte	ls
 802a72a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 802a72e:	ee07 3a10 	vmovls	s14, r3
 802a732:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 802a736:	ee30 0a47 	vsub.f32	s0, s0, s14
 802a73a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a73e:	e7ec      	b.n	802a71a <__kernel_cosf+0x6a>
 802a740:	ad47d74e 	.word	0xad47d74e
 802a744:	310f74f6 	.word	0x310f74f6
 802a748:	3e999999 	.word	0x3e999999
 802a74c:	b493f27c 	.word	0xb493f27c
 802a750:	37d00d01 	.word	0x37d00d01
 802a754:	bab60b61 	.word	0xbab60b61
 802a758:	3d2aaaab 	.word	0x3d2aaaab
 802a75c:	3f480000 	.word	0x3f480000

0802a760 <__kernel_sinf>:
 802a760:	ee10 3a10 	vmov	r3, s0
 802a764:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802a768:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802a76c:	d204      	bcs.n	802a778 <__kernel_sinf+0x18>
 802a76e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802a772:	ee17 3a90 	vmov	r3, s15
 802a776:	b35b      	cbz	r3, 802a7d0 <__kernel_sinf+0x70>
 802a778:	ee20 7a00 	vmul.f32	s14, s0, s0
 802a77c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802a7d4 <__kernel_sinf+0x74>
 802a780:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 802a7d8 <__kernel_sinf+0x78>
 802a784:	eea7 6a27 	vfma.f32	s12, s14, s15
 802a788:	eddf 7a14 	vldr	s15, [pc, #80]	@ 802a7dc <__kernel_sinf+0x7c>
 802a78c:	eee6 7a07 	vfma.f32	s15, s12, s14
 802a790:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 802a7e0 <__kernel_sinf+0x80>
 802a794:	eea7 6a87 	vfma.f32	s12, s15, s14
 802a798:	eddf 7a12 	vldr	s15, [pc, #72]	@ 802a7e4 <__kernel_sinf+0x84>
 802a79c:	ee60 6a07 	vmul.f32	s13, s0, s14
 802a7a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 802a7a4:	b930      	cbnz	r0, 802a7b4 <__kernel_sinf+0x54>
 802a7a6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 802a7e8 <__kernel_sinf+0x88>
 802a7aa:	eea7 6a27 	vfma.f32	s12, s14, s15
 802a7ae:	eea6 0a26 	vfma.f32	s0, s12, s13
 802a7b2:	4770      	bx	lr
 802a7b4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802a7b8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 802a7bc:	eee0 7a86 	vfma.f32	s15, s1, s12
 802a7c0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802a7c4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 802a7ec <__kernel_sinf+0x8c>
 802a7c8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802a7cc:	ee30 0a60 	vsub.f32	s0, s0, s1
 802a7d0:	4770      	bx	lr
 802a7d2:	bf00      	nop
 802a7d4:	2f2ec9d3 	.word	0x2f2ec9d3
 802a7d8:	b2d72f34 	.word	0xb2d72f34
 802a7dc:	3638ef1b 	.word	0x3638ef1b
 802a7e0:	b9500d01 	.word	0xb9500d01
 802a7e4:	3c088889 	.word	0x3c088889
 802a7e8:	be2aaaab 	.word	0xbe2aaaab
 802a7ec:	3e2aaaab 	.word	0x3e2aaaab

0802a7f0 <__ieee754_atan2f>:
 802a7f0:	ee10 2a90 	vmov	r2, s1
 802a7f4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 802a7f8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802a7fc:	b510      	push	{r4, lr}
 802a7fe:	eef0 7a40 	vmov.f32	s15, s0
 802a802:	d806      	bhi.n	802a812 <__ieee754_atan2f+0x22>
 802a804:	ee10 0a10 	vmov	r0, s0
 802a808:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802a80c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802a810:	d904      	bls.n	802a81c <__ieee754_atan2f+0x2c>
 802a812:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802a816:	eeb0 0a67 	vmov.f32	s0, s15
 802a81a:	bd10      	pop	{r4, pc}
 802a81c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 802a820:	d103      	bne.n	802a82a <__ieee754_atan2f+0x3a>
 802a822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a826:	f000 b9b3 	b.w	802ab90 <atanf>
 802a82a:	1794      	asrs	r4, r2, #30
 802a82c:	f004 0402 	and.w	r4, r4, #2
 802a830:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802a834:	b943      	cbnz	r3, 802a848 <__ieee754_atan2f+0x58>
 802a836:	2c02      	cmp	r4, #2
 802a838:	d05e      	beq.n	802a8f8 <__ieee754_atan2f+0x108>
 802a83a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 802a90c <__ieee754_atan2f+0x11c>
 802a83e:	2c03      	cmp	r4, #3
 802a840:	bf08      	it	eq
 802a842:	eef0 7a47 	vmoveq.f32	s15, s14
 802a846:	e7e6      	b.n	802a816 <__ieee754_atan2f+0x26>
 802a848:	b941      	cbnz	r1, 802a85c <__ieee754_atan2f+0x6c>
 802a84a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 802a910 <__ieee754_atan2f+0x120>
 802a84e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 802a914 <__ieee754_atan2f+0x124>
 802a852:	2800      	cmp	r0, #0
 802a854:	bfb8      	it	lt
 802a856:	eef0 7a47 	vmovlt.f32	s15, s14
 802a85a:	e7dc      	b.n	802a816 <__ieee754_atan2f+0x26>
 802a85c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802a860:	d110      	bne.n	802a884 <__ieee754_atan2f+0x94>
 802a862:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802a866:	f104 34ff 	add.w	r4, r4, #4294967295
 802a86a:	d107      	bne.n	802a87c <__ieee754_atan2f+0x8c>
 802a86c:	2c02      	cmp	r4, #2
 802a86e:	d846      	bhi.n	802a8fe <__ieee754_atan2f+0x10e>
 802a870:	4b29      	ldr	r3, [pc, #164]	@ (802a918 <__ieee754_atan2f+0x128>)
 802a872:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802a876:	edd3 7a00 	vldr	s15, [r3]
 802a87a:	e7cc      	b.n	802a816 <__ieee754_atan2f+0x26>
 802a87c:	2c02      	cmp	r4, #2
 802a87e:	d841      	bhi.n	802a904 <__ieee754_atan2f+0x114>
 802a880:	4b26      	ldr	r3, [pc, #152]	@ (802a91c <__ieee754_atan2f+0x12c>)
 802a882:	e7f6      	b.n	802a872 <__ieee754_atan2f+0x82>
 802a884:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802a888:	d0df      	beq.n	802a84a <__ieee754_atan2f+0x5a>
 802a88a:	1a5b      	subs	r3, r3, r1
 802a88c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802a890:	ea4f 51e3 	mov.w	r1, r3, asr #23
 802a894:	da1a      	bge.n	802a8cc <__ieee754_atan2f+0xdc>
 802a896:	2a00      	cmp	r2, #0
 802a898:	da01      	bge.n	802a89e <__ieee754_atan2f+0xae>
 802a89a:	313c      	adds	r1, #60	@ 0x3c
 802a89c:	db19      	blt.n	802a8d2 <__ieee754_atan2f+0xe2>
 802a89e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802a8a2:	f000 fa49 	bl	802ad38 <fabsf>
 802a8a6:	f000 f973 	bl	802ab90 <atanf>
 802a8aa:	eef0 7a40 	vmov.f32	s15, s0
 802a8ae:	2c01      	cmp	r4, #1
 802a8b0:	d012      	beq.n	802a8d8 <__ieee754_atan2f+0xe8>
 802a8b2:	2c02      	cmp	r4, #2
 802a8b4:	d017      	beq.n	802a8e6 <__ieee754_atan2f+0xf6>
 802a8b6:	2c00      	cmp	r4, #0
 802a8b8:	d0ad      	beq.n	802a816 <__ieee754_atan2f+0x26>
 802a8ba:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802a920 <__ieee754_atan2f+0x130>
 802a8be:	ee77 7a87 	vadd.f32	s15, s15, s14
 802a8c2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 802a924 <__ieee754_atan2f+0x134>
 802a8c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a8ca:	e7a4      	b.n	802a816 <__ieee754_atan2f+0x26>
 802a8cc:	eddf 7a10 	vldr	s15, [pc, #64]	@ 802a910 <__ieee754_atan2f+0x120>
 802a8d0:	e7ed      	b.n	802a8ae <__ieee754_atan2f+0xbe>
 802a8d2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802a928 <__ieee754_atan2f+0x138>
 802a8d6:	e7ea      	b.n	802a8ae <__ieee754_atan2f+0xbe>
 802a8d8:	ee17 3a90 	vmov	r3, s15
 802a8dc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802a8e0:	ee07 3a90 	vmov	s15, r3
 802a8e4:	e797      	b.n	802a816 <__ieee754_atan2f+0x26>
 802a8e6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802a920 <__ieee754_atan2f+0x130>
 802a8ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 802a8ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 802a924 <__ieee754_atan2f+0x134>
 802a8f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 802a8f6:	e78e      	b.n	802a816 <__ieee754_atan2f+0x26>
 802a8f8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 802a924 <__ieee754_atan2f+0x134>
 802a8fc:	e78b      	b.n	802a816 <__ieee754_atan2f+0x26>
 802a8fe:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 802a92c <__ieee754_atan2f+0x13c>
 802a902:	e788      	b.n	802a816 <__ieee754_atan2f+0x26>
 802a904:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802a928 <__ieee754_atan2f+0x138>
 802a908:	e785      	b.n	802a816 <__ieee754_atan2f+0x26>
 802a90a:	bf00      	nop
 802a90c:	c0490fdb 	.word	0xc0490fdb
 802a910:	3fc90fdb 	.word	0x3fc90fdb
 802a914:	bfc90fdb 	.word	0xbfc90fdb
 802a918:	0802ee24 	.word	0x0802ee24
 802a91c:	0802ee18 	.word	0x0802ee18
 802a920:	33bbbd2e 	.word	0x33bbbd2e
 802a924:	40490fdb 	.word	0x40490fdb
 802a928:	00000000 	.word	0x00000000
 802a92c:	3f490fdb 	.word	0x3f490fdb

0802a930 <__ieee754_rem_pio2f>:
 802a930:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a932:	ee10 6a10 	vmov	r6, s0
 802a936:	4b88      	ldr	r3, [pc, #544]	@ (802ab58 <__ieee754_rem_pio2f+0x228>)
 802a938:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 802a93c:	429d      	cmp	r5, r3
 802a93e:	b087      	sub	sp, #28
 802a940:	4604      	mov	r4, r0
 802a942:	d805      	bhi.n	802a950 <__ieee754_rem_pio2f+0x20>
 802a944:	2300      	movs	r3, #0
 802a946:	ed80 0a00 	vstr	s0, [r0]
 802a94a:	6043      	str	r3, [r0, #4]
 802a94c:	2000      	movs	r0, #0
 802a94e:	e022      	b.n	802a996 <__ieee754_rem_pio2f+0x66>
 802a950:	4b82      	ldr	r3, [pc, #520]	@ (802ab5c <__ieee754_rem_pio2f+0x22c>)
 802a952:	429d      	cmp	r5, r3
 802a954:	d83a      	bhi.n	802a9cc <__ieee754_rem_pio2f+0x9c>
 802a956:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802a95a:	2e00      	cmp	r6, #0
 802a95c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 802ab60 <__ieee754_rem_pio2f+0x230>
 802a960:	4a80      	ldr	r2, [pc, #512]	@ (802ab64 <__ieee754_rem_pio2f+0x234>)
 802a962:	f023 030f 	bic.w	r3, r3, #15
 802a966:	dd18      	ble.n	802a99a <__ieee754_rem_pio2f+0x6a>
 802a968:	4293      	cmp	r3, r2
 802a96a:	ee70 7a47 	vsub.f32	s15, s0, s14
 802a96e:	bf09      	itett	eq
 802a970:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 802ab68 <__ieee754_rem_pio2f+0x238>
 802a974:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 802ab6c <__ieee754_rem_pio2f+0x23c>
 802a978:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 802ab70 <__ieee754_rem_pio2f+0x240>
 802a97c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 802a980:	ee37 7ae6 	vsub.f32	s14, s15, s13
 802a984:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a988:	ed80 7a00 	vstr	s14, [r0]
 802a98c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802a990:	edc0 7a01 	vstr	s15, [r0, #4]
 802a994:	2001      	movs	r0, #1
 802a996:	b007      	add	sp, #28
 802a998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a99a:	4293      	cmp	r3, r2
 802a99c:	ee70 7a07 	vadd.f32	s15, s0, s14
 802a9a0:	bf09      	itett	eq
 802a9a2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 802ab68 <__ieee754_rem_pio2f+0x238>
 802a9a6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 802ab6c <__ieee754_rem_pio2f+0x23c>
 802a9aa:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 802ab70 <__ieee754_rem_pio2f+0x240>
 802a9ae:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 802a9b2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802a9b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a9ba:	ed80 7a00 	vstr	s14, [r0]
 802a9be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802a9c2:	edc0 7a01 	vstr	s15, [r0, #4]
 802a9c6:	f04f 30ff 	mov.w	r0, #4294967295
 802a9ca:	e7e4      	b.n	802a996 <__ieee754_rem_pio2f+0x66>
 802a9cc:	4b69      	ldr	r3, [pc, #420]	@ (802ab74 <__ieee754_rem_pio2f+0x244>)
 802a9ce:	429d      	cmp	r5, r3
 802a9d0:	d873      	bhi.n	802aaba <__ieee754_rem_pio2f+0x18a>
 802a9d2:	f000 f9b1 	bl	802ad38 <fabsf>
 802a9d6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 802ab78 <__ieee754_rem_pio2f+0x248>
 802a9da:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802a9de:	eee0 7a07 	vfma.f32	s15, s0, s14
 802a9e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802a9e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802a9ea:	ee17 0a90 	vmov	r0, s15
 802a9ee:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 802ab60 <__ieee754_rem_pio2f+0x230>
 802a9f2:	eea7 0a67 	vfms.f32	s0, s14, s15
 802a9f6:	281f      	cmp	r0, #31
 802a9f8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 802ab6c <__ieee754_rem_pio2f+0x23c>
 802a9fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 802aa00:	eeb1 6a47 	vneg.f32	s12, s14
 802aa04:	ee70 6a67 	vsub.f32	s13, s0, s15
 802aa08:	ee16 1a90 	vmov	r1, s13
 802aa0c:	dc09      	bgt.n	802aa22 <__ieee754_rem_pio2f+0xf2>
 802aa0e:	4a5b      	ldr	r2, [pc, #364]	@ (802ab7c <__ieee754_rem_pio2f+0x24c>)
 802aa10:	1e47      	subs	r7, r0, #1
 802aa12:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802aa16:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 802aa1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802aa1e:	4293      	cmp	r3, r2
 802aa20:	d107      	bne.n	802aa32 <__ieee754_rem_pio2f+0x102>
 802aa22:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 802aa26:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 802aa2a:	2a08      	cmp	r2, #8
 802aa2c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 802aa30:	dc14      	bgt.n	802aa5c <__ieee754_rem_pio2f+0x12c>
 802aa32:	6021      	str	r1, [r4, #0]
 802aa34:	ed94 7a00 	vldr	s14, [r4]
 802aa38:	ee30 0a47 	vsub.f32	s0, s0, s14
 802aa3c:	2e00      	cmp	r6, #0
 802aa3e:	ee30 0a67 	vsub.f32	s0, s0, s15
 802aa42:	ed84 0a01 	vstr	s0, [r4, #4]
 802aa46:	daa6      	bge.n	802a996 <__ieee754_rem_pio2f+0x66>
 802aa48:	eeb1 7a47 	vneg.f32	s14, s14
 802aa4c:	eeb1 0a40 	vneg.f32	s0, s0
 802aa50:	ed84 7a00 	vstr	s14, [r4]
 802aa54:	ed84 0a01 	vstr	s0, [r4, #4]
 802aa58:	4240      	negs	r0, r0
 802aa5a:	e79c      	b.n	802a996 <__ieee754_rem_pio2f+0x66>
 802aa5c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 802ab68 <__ieee754_rem_pio2f+0x238>
 802aa60:	eef0 6a40 	vmov.f32	s13, s0
 802aa64:	eee6 6a25 	vfma.f32	s13, s12, s11
 802aa68:	ee70 7a66 	vsub.f32	s15, s0, s13
 802aa6c:	eee6 7a25 	vfma.f32	s15, s12, s11
 802aa70:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 802ab70 <__ieee754_rem_pio2f+0x240>
 802aa74:	eed7 7a25 	vfnms.f32	s15, s14, s11
 802aa78:	ee76 5ae7 	vsub.f32	s11, s13, s15
 802aa7c:	ee15 2a90 	vmov	r2, s11
 802aa80:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802aa84:	1a5b      	subs	r3, r3, r1
 802aa86:	2b19      	cmp	r3, #25
 802aa88:	dc04      	bgt.n	802aa94 <__ieee754_rem_pio2f+0x164>
 802aa8a:	edc4 5a00 	vstr	s11, [r4]
 802aa8e:	eeb0 0a66 	vmov.f32	s0, s13
 802aa92:	e7cf      	b.n	802aa34 <__ieee754_rem_pio2f+0x104>
 802aa94:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 802ab80 <__ieee754_rem_pio2f+0x250>
 802aa98:	eeb0 0a66 	vmov.f32	s0, s13
 802aa9c:	eea6 0a25 	vfma.f32	s0, s12, s11
 802aaa0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802aaa4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 802ab84 <__ieee754_rem_pio2f+0x254>
 802aaa8:	eee6 7a25 	vfma.f32	s15, s12, s11
 802aaac:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802aab0:	ee30 7a67 	vsub.f32	s14, s0, s15
 802aab4:	ed84 7a00 	vstr	s14, [r4]
 802aab8:	e7bc      	b.n	802aa34 <__ieee754_rem_pio2f+0x104>
 802aaba:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 802aabe:	d306      	bcc.n	802aace <__ieee754_rem_pio2f+0x19e>
 802aac0:	ee70 7a40 	vsub.f32	s15, s0, s0
 802aac4:	edc0 7a01 	vstr	s15, [r0, #4]
 802aac8:	edc0 7a00 	vstr	s15, [r0]
 802aacc:	e73e      	b.n	802a94c <__ieee754_rem_pio2f+0x1c>
 802aace:	15ea      	asrs	r2, r5, #23
 802aad0:	3a86      	subs	r2, #134	@ 0x86
 802aad2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802aad6:	ee07 3a90 	vmov	s15, r3
 802aada:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802aade:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 802ab88 <__ieee754_rem_pio2f+0x258>
 802aae2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802aae6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802aaea:	ed8d 7a03 	vstr	s14, [sp, #12]
 802aaee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802aaf2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802aaf6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802aafa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802aafe:	ed8d 7a04 	vstr	s14, [sp, #16]
 802ab02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802ab06:	eef5 7a40 	vcmp.f32	s15, #0.0
 802ab0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ab0e:	edcd 7a05 	vstr	s15, [sp, #20]
 802ab12:	d11e      	bne.n	802ab52 <__ieee754_rem_pio2f+0x222>
 802ab14:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802ab18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ab1c:	bf0c      	ite	eq
 802ab1e:	2301      	moveq	r3, #1
 802ab20:	2302      	movne	r3, #2
 802ab22:	491a      	ldr	r1, [pc, #104]	@ (802ab8c <__ieee754_rem_pio2f+0x25c>)
 802ab24:	9101      	str	r1, [sp, #4]
 802ab26:	2102      	movs	r1, #2
 802ab28:	9100      	str	r1, [sp, #0]
 802ab2a:	a803      	add	r0, sp, #12
 802ab2c:	4621      	mov	r1, r4
 802ab2e:	f000 f971 	bl	802ae14 <__kernel_rem_pio2f>
 802ab32:	2e00      	cmp	r6, #0
 802ab34:	f6bf af2f 	bge.w	802a996 <__ieee754_rem_pio2f+0x66>
 802ab38:	edd4 7a00 	vldr	s15, [r4]
 802ab3c:	eef1 7a67 	vneg.f32	s15, s15
 802ab40:	edc4 7a00 	vstr	s15, [r4]
 802ab44:	edd4 7a01 	vldr	s15, [r4, #4]
 802ab48:	eef1 7a67 	vneg.f32	s15, s15
 802ab4c:	edc4 7a01 	vstr	s15, [r4, #4]
 802ab50:	e782      	b.n	802aa58 <__ieee754_rem_pio2f+0x128>
 802ab52:	2303      	movs	r3, #3
 802ab54:	e7e5      	b.n	802ab22 <__ieee754_rem_pio2f+0x1f2>
 802ab56:	bf00      	nop
 802ab58:	3f490fd8 	.word	0x3f490fd8
 802ab5c:	4016cbe3 	.word	0x4016cbe3
 802ab60:	3fc90f80 	.word	0x3fc90f80
 802ab64:	3fc90fd0 	.word	0x3fc90fd0
 802ab68:	37354400 	.word	0x37354400
 802ab6c:	37354443 	.word	0x37354443
 802ab70:	2e85a308 	.word	0x2e85a308
 802ab74:	43490f80 	.word	0x43490f80
 802ab78:	3f22f984 	.word	0x3f22f984
 802ab7c:	0802ee30 	.word	0x0802ee30
 802ab80:	2e85a300 	.word	0x2e85a300
 802ab84:	248d3132 	.word	0x248d3132
 802ab88:	43800000 	.word	0x43800000
 802ab8c:	0802eeb0 	.word	0x0802eeb0

0802ab90 <atanf>:
 802ab90:	b538      	push	{r3, r4, r5, lr}
 802ab92:	ee10 5a10 	vmov	r5, s0
 802ab96:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802ab9a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802ab9e:	eef0 7a40 	vmov.f32	s15, s0
 802aba2:	d310      	bcc.n	802abc6 <atanf+0x36>
 802aba4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802aba8:	d904      	bls.n	802abb4 <atanf+0x24>
 802abaa:	ee70 7a00 	vadd.f32	s15, s0, s0
 802abae:	eeb0 0a67 	vmov.f32	s0, s15
 802abb2:	bd38      	pop	{r3, r4, r5, pc}
 802abb4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 802acec <atanf+0x15c>
 802abb8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802acf0 <atanf+0x160>
 802abbc:	2d00      	cmp	r5, #0
 802abbe:	bfc8      	it	gt
 802abc0:	eef0 7a47 	vmovgt.f32	s15, s14
 802abc4:	e7f3      	b.n	802abae <atanf+0x1e>
 802abc6:	4b4b      	ldr	r3, [pc, #300]	@ (802acf4 <atanf+0x164>)
 802abc8:	429c      	cmp	r4, r3
 802abca:	d810      	bhi.n	802abee <atanf+0x5e>
 802abcc:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802abd0:	d20a      	bcs.n	802abe8 <atanf+0x58>
 802abd2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802acf8 <atanf+0x168>
 802abd6:	ee30 7a07 	vadd.f32	s14, s0, s14
 802abda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802abde:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802abe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802abe6:	dce2      	bgt.n	802abae <atanf+0x1e>
 802abe8:	f04f 33ff 	mov.w	r3, #4294967295
 802abec:	e013      	b.n	802ac16 <atanf+0x86>
 802abee:	f000 f8a3 	bl	802ad38 <fabsf>
 802abf2:	4b42      	ldr	r3, [pc, #264]	@ (802acfc <atanf+0x16c>)
 802abf4:	429c      	cmp	r4, r3
 802abf6:	d84f      	bhi.n	802ac98 <atanf+0x108>
 802abf8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802abfc:	429c      	cmp	r4, r3
 802abfe:	d841      	bhi.n	802ac84 <atanf+0xf4>
 802ac00:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802ac04:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802ac08:	eea0 7a27 	vfma.f32	s14, s0, s15
 802ac0c:	2300      	movs	r3, #0
 802ac0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 802ac12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802ac16:	1c5a      	adds	r2, r3, #1
 802ac18:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802ac1c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 802ad00 <atanf+0x170>
 802ac20:	eddf 5a38 	vldr	s11, [pc, #224]	@ 802ad04 <atanf+0x174>
 802ac24:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 802ad08 <atanf+0x178>
 802ac28:	ee66 6a06 	vmul.f32	s13, s12, s12
 802ac2c:	eee6 5a87 	vfma.f32	s11, s13, s14
 802ac30:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 802ad0c <atanf+0x17c>
 802ac34:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802ac38:	eddf 5a35 	vldr	s11, [pc, #212]	@ 802ad10 <atanf+0x180>
 802ac3c:	eee7 5a26 	vfma.f32	s11, s14, s13
 802ac40:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 802ad14 <atanf+0x184>
 802ac44:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802ac48:	eddf 5a33 	vldr	s11, [pc, #204]	@ 802ad18 <atanf+0x188>
 802ac4c:	eee7 5a26 	vfma.f32	s11, s14, s13
 802ac50:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802ad1c <atanf+0x18c>
 802ac54:	eea6 5a87 	vfma.f32	s10, s13, s14
 802ac58:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 802ad20 <atanf+0x190>
 802ac5c:	eea5 7a26 	vfma.f32	s14, s10, s13
 802ac60:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 802ad24 <atanf+0x194>
 802ac64:	eea7 5a26 	vfma.f32	s10, s14, s13
 802ac68:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 802ad28 <atanf+0x198>
 802ac6c:	eea5 7a26 	vfma.f32	s14, s10, s13
 802ac70:	ee27 7a26 	vmul.f32	s14, s14, s13
 802ac74:	eea5 7a86 	vfma.f32	s14, s11, s12
 802ac78:	ee27 7a87 	vmul.f32	s14, s15, s14
 802ac7c:	d121      	bne.n	802acc2 <atanf+0x132>
 802ac7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802ac82:	e794      	b.n	802abae <atanf+0x1e>
 802ac84:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802ac88:	ee30 7a67 	vsub.f32	s14, s0, s15
 802ac8c:	ee30 0a27 	vadd.f32	s0, s0, s15
 802ac90:	2301      	movs	r3, #1
 802ac92:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802ac96:	e7be      	b.n	802ac16 <atanf+0x86>
 802ac98:	4b24      	ldr	r3, [pc, #144]	@ (802ad2c <atanf+0x19c>)
 802ac9a:	429c      	cmp	r4, r3
 802ac9c:	d80b      	bhi.n	802acb6 <atanf+0x126>
 802ac9e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802aca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802aca6:	eea0 7a27 	vfma.f32	s14, s0, s15
 802acaa:	2302      	movs	r3, #2
 802acac:	ee70 6a67 	vsub.f32	s13, s0, s15
 802acb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802acb4:	e7af      	b.n	802ac16 <atanf+0x86>
 802acb6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802acba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802acbe:	2303      	movs	r3, #3
 802acc0:	e7a9      	b.n	802ac16 <atanf+0x86>
 802acc2:	4a1b      	ldr	r2, [pc, #108]	@ (802ad30 <atanf+0x1a0>)
 802acc4:	491b      	ldr	r1, [pc, #108]	@ (802ad34 <atanf+0x1a4>)
 802acc6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802acca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802acce:	edd3 6a00 	vldr	s13, [r3]
 802acd2:	ee37 7a66 	vsub.f32	s14, s14, s13
 802acd6:	2d00      	cmp	r5, #0
 802acd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 802acdc:	edd2 7a00 	vldr	s15, [r2]
 802ace0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802ace4:	bfb8      	it	lt
 802ace6:	eef1 7a67 	vneglt.f32	s15, s15
 802acea:	e760      	b.n	802abae <atanf+0x1e>
 802acec:	bfc90fdb 	.word	0xbfc90fdb
 802acf0:	3fc90fdb 	.word	0x3fc90fdb
 802acf4:	3edfffff 	.word	0x3edfffff
 802acf8:	7149f2ca 	.word	0x7149f2ca
 802acfc:	3f97ffff 	.word	0x3f97ffff
 802ad00:	3c8569d7 	.word	0x3c8569d7
 802ad04:	3d4bda59 	.word	0x3d4bda59
 802ad08:	bd6ef16b 	.word	0xbd6ef16b
 802ad0c:	3d886b35 	.word	0x3d886b35
 802ad10:	3dba2e6e 	.word	0x3dba2e6e
 802ad14:	3e124925 	.word	0x3e124925
 802ad18:	3eaaaaab 	.word	0x3eaaaaab
 802ad1c:	bd15a221 	.word	0xbd15a221
 802ad20:	bd9d8795 	.word	0xbd9d8795
 802ad24:	bde38e38 	.word	0xbde38e38
 802ad28:	be4ccccd 	.word	0xbe4ccccd
 802ad2c:	401bffff 	.word	0x401bffff
 802ad30:	0802f1d8 	.word	0x0802f1d8
 802ad34:	0802f1c8 	.word	0x0802f1c8

0802ad38 <fabsf>:
 802ad38:	ee10 3a10 	vmov	r3, s0
 802ad3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802ad40:	ee00 3a10 	vmov	s0, r3
 802ad44:	4770      	bx	lr
	...

0802ad48 <scalbnf>:
 802ad48:	ee10 3a10 	vmov	r3, s0
 802ad4c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 802ad50:	d02b      	beq.n	802adaa <scalbnf+0x62>
 802ad52:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 802ad56:	d302      	bcc.n	802ad5e <scalbnf+0x16>
 802ad58:	ee30 0a00 	vadd.f32	s0, s0, s0
 802ad5c:	4770      	bx	lr
 802ad5e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 802ad62:	d123      	bne.n	802adac <scalbnf+0x64>
 802ad64:	4b24      	ldr	r3, [pc, #144]	@ (802adf8 <scalbnf+0xb0>)
 802ad66:	eddf 7a25 	vldr	s15, [pc, #148]	@ 802adfc <scalbnf+0xb4>
 802ad6a:	4298      	cmp	r0, r3
 802ad6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 802ad70:	db17      	blt.n	802ada2 <scalbnf+0x5a>
 802ad72:	ee10 3a10 	vmov	r3, s0
 802ad76:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802ad7a:	3a19      	subs	r2, #25
 802ad7c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 802ad80:	4288      	cmp	r0, r1
 802ad82:	dd15      	ble.n	802adb0 <scalbnf+0x68>
 802ad84:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 802ae00 <scalbnf+0xb8>
 802ad88:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 802ae04 <scalbnf+0xbc>
 802ad8c:	ee10 3a10 	vmov	r3, s0
 802ad90:	eeb0 7a67 	vmov.f32	s14, s15
 802ad94:	2b00      	cmp	r3, #0
 802ad96:	bfb8      	it	lt
 802ad98:	eef0 7a66 	vmovlt.f32	s15, s13
 802ad9c:	ee27 0a87 	vmul.f32	s0, s15, s14
 802ada0:	4770      	bx	lr
 802ada2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802ae08 <scalbnf+0xc0>
 802ada6:	ee27 0a80 	vmul.f32	s0, s15, s0
 802adaa:	4770      	bx	lr
 802adac:	0dd2      	lsrs	r2, r2, #23
 802adae:	e7e5      	b.n	802ad7c <scalbnf+0x34>
 802adb0:	4410      	add	r0, r2
 802adb2:	28fe      	cmp	r0, #254	@ 0xfe
 802adb4:	dce6      	bgt.n	802ad84 <scalbnf+0x3c>
 802adb6:	2800      	cmp	r0, #0
 802adb8:	dd06      	ble.n	802adc8 <scalbnf+0x80>
 802adba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802adbe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802adc2:	ee00 3a10 	vmov	s0, r3
 802adc6:	4770      	bx	lr
 802adc8:	f110 0f16 	cmn.w	r0, #22
 802adcc:	da09      	bge.n	802ade2 <scalbnf+0x9a>
 802adce:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 802ae08 <scalbnf+0xc0>
 802add2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 802ae0c <scalbnf+0xc4>
 802add6:	ee10 3a10 	vmov	r3, s0
 802adda:	eeb0 7a67 	vmov.f32	s14, s15
 802adde:	2b00      	cmp	r3, #0
 802ade0:	e7d9      	b.n	802ad96 <scalbnf+0x4e>
 802ade2:	3019      	adds	r0, #25
 802ade4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802ade8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802adec:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 802ae10 <scalbnf+0xc8>
 802adf0:	ee07 3a90 	vmov	s15, r3
 802adf4:	e7d7      	b.n	802ada6 <scalbnf+0x5e>
 802adf6:	bf00      	nop
 802adf8:	ffff3cb0 	.word	0xffff3cb0
 802adfc:	4c000000 	.word	0x4c000000
 802ae00:	7149f2ca 	.word	0x7149f2ca
 802ae04:	f149f2ca 	.word	0xf149f2ca
 802ae08:	0da24260 	.word	0x0da24260
 802ae0c:	8da24260 	.word	0x8da24260
 802ae10:	33000000 	.word	0x33000000

0802ae14 <__kernel_rem_pio2f>:
 802ae14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ae18:	ed2d 8b04 	vpush	{d8-d9}
 802ae1c:	b0d9      	sub	sp, #356	@ 0x164
 802ae1e:	4690      	mov	r8, r2
 802ae20:	9001      	str	r0, [sp, #4]
 802ae22:	4ab9      	ldr	r2, [pc, #740]	@ (802b108 <__kernel_rem_pio2f+0x2f4>)
 802ae24:	9866      	ldr	r0, [sp, #408]	@ 0x198
 802ae26:	f118 0f04 	cmn.w	r8, #4
 802ae2a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 802ae2e:	460f      	mov	r7, r1
 802ae30:	f103 3bff 	add.w	fp, r3, #4294967295
 802ae34:	db27      	blt.n	802ae86 <__kernel_rem_pio2f+0x72>
 802ae36:	f1b8 0203 	subs.w	r2, r8, #3
 802ae3a:	bf48      	it	mi
 802ae3c:	f108 0204 	addmi.w	r2, r8, #4
 802ae40:	10d2      	asrs	r2, r2, #3
 802ae42:	1c55      	adds	r5, r2, #1
 802ae44:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802ae46:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 802b118 <__kernel_rem_pio2f+0x304>
 802ae4a:	00e8      	lsls	r0, r5, #3
 802ae4c:	eba2 060b 	sub.w	r6, r2, fp
 802ae50:	9002      	str	r0, [sp, #8]
 802ae52:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 802ae56:	eb0a 0c0b 	add.w	ip, sl, fp
 802ae5a:	ac1c      	add	r4, sp, #112	@ 0x70
 802ae5c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 802ae60:	2000      	movs	r0, #0
 802ae62:	4560      	cmp	r0, ip
 802ae64:	dd11      	ble.n	802ae8a <__kernel_rem_pio2f+0x76>
 802ae66:	a91c      	add	r1, sp, #112	@ 0x70
 802ae68:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 802ae6c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 802ae70:	f04f 0c00 	mov.w	ip, #0
 802ae74:	45d4      	cmp	ip, sl
 802ae76:	dc27      	bgt.n	802aec8 <__kernel_rem_pio2f+0xb4>
 802ae78:	f8dd e004 	ldr.w	lr, [sp, #4]
 802ae7c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 802b118 <__kernel_rem_pio2f+0x304>
 802ae80:	4606      	mov	r6, r0
 802ae82:	2400      	movs	r4, #0
 802ae84:	e016      	b.n	802aeb4 <__kernel_rem_pio2f+0xa0>
 802ae86:	2200      	movs	r2, #0
 802ae88:	e7db      	b.n	802ae42 <__kernel_rem_pio2f+0x2e>
 802ae8a:	42c6      	cmn	r6, r0
 802ae8c:	bf5d      	ittte	pl
 802ae8e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 802ae92:	ee07 1a90 	vmovpl	s15, r1
 802ae96:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802ae9a:	eef0 7a47 	vmovmi.f32	s15, s14
 802ae9e:	ece4 7a01 	vstmia	r4!, {s15}
 802aea2:	3001      	adds	r0, #1
 802aea4:	e7dd      	b.n	802ae62 <__kernel_rem_pio2f+0x4e>
 802aea6:	ecfe 6a01 	vldmia	lr!, {s13}
 802aeaa:	ed96 7a00 	vldr	s14, [r6]
 802aeae:	eee6 7a87 	vfma.f32	s15, s13, s14
 802aeb2:	3401      	adds	r4, #1
 802aeb4:	455c      	cmp	r4, fp
 802aeb6:	f1a6 0604 	sub.w	r6, r6, #4
 802aeba:	ddf4      	ble.n	802aea6 <__kernel_rem_pio2f+0x92>
 802aebc:	ece9 7a01 	vstmia	r9!, {s15}
 802aec0:	f10c 0c01 	add.w	ip, ip, #1
 802aec4:	3004      	adds	r0, #4
 802aec6:	e7d5      	b.n	802ae74 <__kernel_rem_pio2f+0x60>
 802aec8:	a908      	add	r1, sp, #32
 802aeca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802aece:	9104      	str	r1, [sp, #16]
 802aed0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 802aed2:	eddf 8a90 	vldr	s17, [pc, #576]	@ 802b114 <__kernel_rem_pio2f+0x300>
 802aed6:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 802b110 <__kernel_rem_pio2f+0x2fc>
 802aeda:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 802aede:	9203      	str	r2, [sp, #12]
 802aee0:	4654      	mov	r4, sl
 802aee2:	00a2      	lsls	r2, r4, #2
 802aee4:	9205      	str	r2, [sp, #20]
 802aee6:	aa58      	add	r2, sp, #352	@ 0x160
 802aee8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 802aeec:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 802aef0:	a944      	add	r1, sp, #272	@ 0x110
 802aef2:	aa08      	add	r2, sp, #32
 802aef4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 802aef8:	4694      	mov	ip, r2
 802aefa:	4626      	mov	r6, r4
 802aefc:	2e00      	cmp	r6, #0
 802aefe:	f1a0 0004 	sub.w	r0, r0, #4
 802af02:	dc4c      	bgt.n	802af9e <__kernel_rem_pio2f+0x18a>
 802af04:	4628      	mov	r0, r5
 802af06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802af0a:	f7ff ff1d 	bl	802ad48 <scalbnf>
 802af0e:	eeb0 8a40 	vmov.f32	s16, s0
 802af12:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 802af16:	ee28 0a00 	vmul.f32	s0, s16, s0
 802af1a:	f000 f9ed 	bl	802b2f8 <floorf>
 802af1e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 802af22:	eea0 8a67 	vfms.f32	s16, s0, s15
 802af26:	2d00      	cmp	r5, #0
 802af28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802af2c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802af30:	ee17 9a90 	vmov	r9, s15
 802af34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802af38:	ee38 8a67 	vsub.f32	s16, s16, s15
 802af3c:	dd41      	ble.n	802afc2 <__kernel_rem_pio2f+0x1ae>
 802af3e:	f104 3cff 	add.w	ip, r4, #4294967295
 802af42:	a908      	add	r1, sp, #32
 802af44:	f1c5 0e08 	rsb	lr, r5, #8
 802af48:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 802af4c:	fa46 f00e 	asr.w	r0, r6, lr
 802af50:	4481      	add	r9, r0
 802af52:	fa00 f00e 	lsl.w	r0, r0, lr
 802af56:	1a36      	subs	r6, r6, r0
 802af58:	f1c5 0007 	rsb	r0, r5, #7
 802af5c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 802af60:	4106      	asrs	r6, r0
 802af62:	2e00      	cmp	r6, #0
 802af64:	dd3c      	ble.n	802afe0 <__kernel_rem_pio2f+0x1cc>
 802af66:	f04f 0e00 	mov.w	lr, #0
 802af6a:	f109 0901 	add.w	r9, r9, #1
 802af6e:	4670      	mov	r0, lr
 802af70:	4574      	cmp	r4, lr
 802af72:	dc68      	bgt.n	802b046 <__kernel_rem_pio2f+0x232>
 802af74:	2d00      	cmp	r5, #0
 802af76:	dd03      	ble.n	802af80 <__kernel_rem_pio2f+0x16c>
 802af78:	2d01      	cmp	r5, #1
 802af7a:	d074      	beq.n	802b066 <__kernel_rem_pio2f+0x252>
 802af7c:	2d02      	cmp	r5, #2
 802af7e:	d07d      	beq.n	802b07c <__kernel_rem_pio2f+0x268>
 802af80:	2e02      	cmp	r6, #2
 802af82:	d12d      	bne.n	802afe0 <__kernel_rem_pio2f+0x1cc>
 802af84:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802af88:	ee30 8a48 	vsub.f32	s16, s0, s16
 802af8c:	b340      	cbz	r0, 802afe0 <__kernel_rem_pio2f+0x1cc>
 802af8e:	4628      	mov	r0, r5
 802af90:	9306      	str	r3, [sp, #24]
 802af92:	f7ff fed9 	bl	802ad48 <scalbnf>
 802af96:	9b06      	ldr	r3, [sp, #24]
 802af98:	ee38 8a40 	vsub.f32	s16, s16, s0
 802af9c:	e020      	b.n	802afe0 <__kernel_rem_pio2f+0x1cc>
 802af9e:	ee60 7a28 	vmul.f32	s15, s0, s17
 802afa2:	3e01      	subs	r6, #1
 802afa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802afa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802afac:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802afb0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802afb4:	ecac 0a01 	vstmia	ip!, {s0}
 802afb8:	ed90 0a00 	vldr	s0, [r0]
 802afbc:	ee37 0a80 	vadd.f32	s0, s15, s0
 802afc0:	e79c      	b.n	802aefc <__kernel_rem_pio2f+0xe8>
 802afc2:	d105      	bne.n	802afd0 <__kernel_rem_pio2f+0x1bc>
 802afc4:	1e60      	subs	r0, r4, #1
 802afc6:	a908      	add	r1, sp, #32
 802afc8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 802afcc:	11f6      	asrs	r6, r6, #7
 802afce:	e7c8      	b.n	802af62 <__kernel_rem_pio2f+0x14e>
 802afd0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802afd4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802afd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802afdc:	da31      	bge.n	802b042 <__kernel_rem_pio2f+0x22e>
 802afde:	2600      	movs	r6, #0
 802afe0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802afe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802afe8:	f040 8098 	bne.w	802b11c <__kernel_rem_pio2f+0x308>
 802afec:	1e60      	subs	r0, r4, #1
 802afee:	2200      	movs	r2, #0
 802aff0:	4550      	cmp	r0, sl
 802aff2:	da4b      	bge.n	802b08c <__kernel_rem_pio2f+0x278>
 802aff4:	2a00      	cmp	r2, #0
 802aff6:	d065      	beq.n	802b0c4 <__kernel_rem_pio2f+0x2b0>
 802aff8:	3c01      	subs	r4, #1
 802affa:	ab08      	add	r3, sp, #32
 802affc:	3d08      	subs	r5, #8
 802affe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802b002:	2b00      	cmp	r3, #0
 802b004:	d0f8      	beq.n	802aff8 <__kernel_rem_pio2f+0x1e4>
 802b006:	4628      	mov	r0, r5
 802b008:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802b00c:	f7ff fe9c 	bl	802ad48 <scalbnf>
 802b010:	1c63      	adds	r3, r4, #1
 802b012:	aa44      	add	r2, sp, #272	@ 0x110
 802b014:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 802b114 <__kernel_rem_pio2f+0x300>
 802b018:	0099      	lsls	r1, r3, #2
 802b01a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802b01e:	4623      	mov	r3, r4
 802b020:	2b00      	cmp	r3, #0
 802b022:	f280 80a9 	bge.w	802b178 <__kernel_rem_pio2f+0x364>
 802b026:	4623      	mov	r3, r4
 802b028:	2b00      	cmp	r3, #0
 802b02a:	f2c0 80c7 	blt.w	802b1bc <__kernel_rem_pio2f+0x3a8>
 802b02e:	aa44      	add	r2, sp, #272	@ 0x110
 802b030:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802b034:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 802b10c <__kernel_rem_pio2f+0x2f8>
 802b038:	eddf 7a37 	vldr	s15, [pc, #220]	@ 802b118 <__kernel_rem_pio2f+0x304>
 802b03c:	2000      	movs	r0, #0
 802b03e:	1ae2      	subs	r2, r4, r3
 802b040:	e0b1      	b.n	802b1a6 <__kernel_rem_pio2f+0x392>
 802b042:	2602      	movs	r6, #2
 802b044:	e78f      	b.n	802af66 <__kernel_rem_pio2f+0x152>
 802b046:	f852 1b04 	ldr.w	r1, [r2], #4
 802b04a:	b948      	cbnz	r0, 802b060 <__kernel_rem_pio2f+0x24c>
 802b04c:	b121      	cbz	r1, 802b058 <__kernel_rem_pio2f+0x244>
 802b04e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802b052:	f842 1c04 	str.w	r1, [r2, #-4]
 802b056:	2101      	movs	r1, #1
 802b058:	f10e 0e01 	add.w	lr, lr, #1
 802b05c:	4608      	mov	r0, r1
 802b05e:	e787      	b.n	802af70 <__kernel_rem_pio2f+0x15c>
 802b060:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 802b064:	e7f5      	b.n	802b052 <__kernel_rem_pio2f+0x23e>
 802b066:	f104 3cff 	add.w	ip, r4, #4294967295
 802b06a:	aa08      	add	r2, sp, #32
 802b06c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802b070:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 802b074:	a908      	add	r1, sp, #32
 802b076:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802b07a:	e781      	b.n	802af80 <__kernel_rem_pio2f+0x16c>
 802b07c:	f104 3cff 	add.w	ip, r4, #4294967295
 802b080:	aa08      	add	r2, sp, #32
 802b082:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802b086:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802b08a:	e7f3      	b.n	802b074 <__kernel_rem_pio2f+0x260>
 802b08c:	a908      	add	r1, sp, #32
 802b08e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802b092:	3801      	subs	r0, #1
 802b094:	430a      	orrs	r2, r1
 802b096:	e7ab      	b.n	802aff0 <__kernel_rem_pio2f+0x1dc>
 802b098:	3201      	adds	r2, #1
 802b09a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 802b09e:	2e00      	cmp	r6, #0
 802b0a0:	d0fa      	beq.n	802b098 <__kernel_rem_pio2f+0x284>
 802b0a2:	9905      	ldr	r1, [sp, #20]
 802b0a4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 802b0a8:	eb0d 0001 	add.w	r0, sp, r1
 802b0ac:	18e6      	adds	r6, r4, r3
 802b0ae:	a91c      	add	r1, sp, #112	@ 0x70
 802b0b0:	f104 0c01 	add.w	ip, r4, #1
 802b0b4:	384c      	subs	r0, #76	@ 0x4c
 802b0b6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 802b0ba:	4422      	add	r2, r4
 802b0bc:	4562      	cmp	r2, ip
 802b0be:	da04      	bge.n	802b0ca <__kernel_rem_pio2f+0x2b6>
 802b0c0:	4614      	mov	r4, r2
 802b0c2:	e70e      	b.n	802aee2 <__kernel_rem_pio2f+0xce>
 802b0c4:	9804      	ldr	r0, [sp, #16]
 802b0c6:	2201      	movs	r2, #1
 802b0c8:	e7e7      	b.n	802b09a <__kernel_rem_pio2f+0x286>
 802b0ca:	9903      	ldr	r1, [sp, #12]
 802b0cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 802b0d0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 802b0d4:	9105      	str	r1, [sp, #20]
 802b0d6:	ee07 1a90 	vmov	s15, r1
 802b0da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802b0de:	2400      	movs	r4, #0
 802b0e0:	ece6 7a01 	vstmia	r6!, {s15}
 802b0e4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 802b118 <__kernel_rem_pio2f+0x304>
 802b0e8:	46b1      	mov	r9, r6
 802b0ea:	455c      	cmp	r4, fp
 802b0ec:	dd04      	ble.n	802b0f8 <__kernel_rem_pio2f+0x2e4>
 802b0ee:	ece0 7a01 	vstmia	r0!, {s15}
 802b0f2:	f10c 0c01 	add.w	ip, ip, #1
 802b0f6:	e7e1      	b.n	802b0bc <__kernel_rem_pio2f+0x2a8>
 802b0f8:	ecfe 6a01 	vldmia	lr!, {s13}
 802b0fc:	ed39 7a01 	vldmdb	r9!, {s14}
 802b100:	3401      	adds	r4, #1
 802b102:	eee6 7a87 	vfma.f32	s15, s13, s14
 802b106:	e7f0      	b.n	802b0ea <__kernel_rem_pio2f+0x2d6>
 802b108:	0802f214 	.word	0x0802f214
 802b10c:	0802f1e8 	.word	0x0802f1e8
 802b110:	43800000 	.word	0x43800000
 802b114:	3b800000 	.word	0x3b800000
 802b118:	00000000 	.word	0x00000000
 802b11c:	9b02      	ldr	r3, [sp, #8]
 802b11e:	eeb0 0a48 	vmov.f32	s0, s16
 802b122:	eba3 0008 	sub.w	r0, r3, r8
 802b126:	f7ff fe0f 	bl	802ad48 <scalbnf>
 802b12a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 802b110 <__kernel_rem_pio2f+0x2fc>
 802b12e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802b132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b136:	db19      	blt.n	802b16c <__kernel_rem_pio2f+0x358>
 802b138:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 802b114 <__kernel_rem_pio2f+0x300>
 802b13c:	ee60 7a27 	vmul.f32	s15, s0, s15
 802b140:	aa08      	add	r2, sp, #32
 802b142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802b146:	3508      	adds	r5, #8
 802b148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802b14c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802b150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802b154:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802b158:	ee10 3a10 	vmov	r3, s0
 802b15c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802b160:	ee17 3a90 	vmov	r3, s15
 802b164:	3401      	adds	r4, #1
 802b166:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802b16a:	e74c      	b.n	802b006 <__kernel_rem_pio2f+0x1f2>
 802b16c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802b170:	aa08      	add	r2, sp, #32
 802b172:	ee10 3a10 	vmov	r3, s0
 802b176:	e7f6      	b.n	802b166 <__kernel_rem_pio2f+0x352>
 802b178:	a808      	add	r0, sp, #32
 802b17a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802b17e:	9001      	str	r0, [sp, #4]
 802b180:	ee07 0a90 	vmov	s15, r0
 802b184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802b188:	3b01      	subs	r3, #1
 802b18a:	ee67 7a80 	vmul.f32	s15, s15, s0
 802b18e:	ee20 0a07 	vmul.f32	s0, s0, s14
 802b192:	ed62 7a01 	vstmdb	r2!, {s15}
 802b196:	e743      	b.n	802b020 <__kernel_rem_pio2f+0x20c>
 802b198:	ecfc 6a01 	vldmia	ip!, {s13}
 802b19c:	ecb5 7a01 	vldmia	r5!, {s14}
 802b1a0:	eee6 7a87 	vfma.f32	s15, s13, s14
 802b1a4:	3001      	adds	r0, #1
 802b1a6:	4550      	cmp	r0, sl
 802b1a8:	dc01      	bgt.n	802b1ae <__kernel_rem_pio2f+0x39a>
 802b1aa:	4282      	cmp	r2, r0
 802b1ac:	daf4      	bge.n	802b198 <__kernel_rem_pio2f+0x384>
 802b1ae:	a858      	add	r0, sp, #352	@ 0x160
 802b1b0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 802b1b4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 802b1b8:	3b01      	subs	r3, #1
 802b1ba:	e735      	b.n	802b028 <__kernel_rem_pio2f+0x214>
 802b1bc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802b1be:	2b02      	cmp	r3, #2
 802b1c0:	dc09      	bgt.n	802b1d6 <__kernel_rem_pio2f+0x3c2>
 802b1c2:	2b00      	cmp	r3, #0
 802b1c4:	dc2b      	bgt.n	802b21e <__kernel_rem_pio2f+0x40a>
 802b1c6:	d044      	beq.n	802b252 <__kernel_rem_pio2f+0x43e>
 802b1c8:	f009 0007 	and.w	r0, r9, #7
 802b1cc:	b059      	add	sp, #356	@ 0x164
 802b1ce:	ecbd 8b04 	vpop	{d8-d9}
 802b1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b1d6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802b1d8:	2b03      	cmp	r3, #3
 802b1da:	d1f5      	bne.n	802b1c8 <__kernel_rem_pio2f+0x3b4>
 802b1dc:	aa30      	add	r2, sp, #192	@ 0xc0
 802b1de:	1f0b      	subs	r3, r1, #4
 802b1e0:	4413      	add	r3, r2
 802b1e2:	461a      	mov	r2, r3
 802b1e4:	4620      	mov	r0, r4
 802b1e6:	2800      	cmp	r0, #0
 802b1e8:	f1a2 0204 	sub.w	r2, r2, #4
 802b1ec:	dc52      	bgt.n	802b294 <__kernel_rem_pio2f+0x480>
 802b1ee:	4622      	mov	r2, r4
 802b1f0:	2a01      	cmp	r2, #1
 802b1f2:	f1a3 0304 	sub.w	r3, r3, #4
 802b1f6:	dc5d      	bgt.n	802b2b4 <__kernel_rem_pio2f+0x4a0>
 802b1f8:	ab30      	add	r3, sp, #192	@ 0xc0
 802b1fa:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 802b118 <__kernel_rem_pio2f+0x304>
 802b1fe:	440b      	add	r3, r1
 802b200:	2c01      	cmp	r4, #1
 802b202:	dc67      	bgt.n	802b2d4 <__kernel_rem_pio2f+0x4c0>
 802b204:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 802b208:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 802b20c:	2e00      	cmp	r6, #0
 802b20e:	d167      	bne.n	802b2e0 <__kernel_rem_pio2f+0x4cc>
 802b210:	edc7 6a00 	vstr	s13, [r7]
 802b214:	ed87 7a01 	vstr	s14, [r7, #4]
 802b218:	edc7 7a02 	vstr	s15, [r7, #8]
 802b21c:	e7d4      	b.n	802b1c8 <__kernel_rem_pio2f+0x3b4>
 802b21e:	ab30      	add	r3, sp, #192	@ 0xc0
 802b220:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 802b118 <__kernel_rem_pio2f+0x304>
 802b224:	440b      	add	r3, r1
 802b226:	4622      	mov	r2, r4
 802b228:	2a00      	cmp	r2, #0
 802b22a:	da24      	bge.n	802b276 <__kernel_rem_pio2f+0x462>
 802b22c:	b34e      	cbz	r6, 802b282 <__kernel_rem_pio2f+0x46e>
 802b22e:	eef1 7a47 	vneg.f32	s15, s14
 802b232:	edc7 7a00 	vstr	s15, [r7]
 802b236:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 802b23a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b23e:	aa31      	add	r2, sp, #196	@ 0xc4
 802b240:	2301      	movs	r3, #1
 802b242:	429c      	cmp	r4, r3
 802b244:	da20      	bge.n	802b288 <__kernel_rem_pio2f+0x474>
 802b246:	b10e      	cbz	r6, 802b24c <__kernel_rem_pio2f+0x438>
 802b248:	eef1 7a67 	vneg.f32	s15, s15
 802b24c:	edc7 7a01 	vstr	s15, [r7, #4]
 802b250:	e7ba      	b.n	802b1c8 <__kernel_rem_pio2f+0x3b4>
 802b252:	ab30      	add	r3, sp, #192	@ 0xc0
 802b254:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 802b118 <__kernel_rem_pio2f+0x304>
 802b258:	440b      	add	r3, r1
 802b25a:	2c00      	cmp	r4, #0
 802b25c:	da05      	bge.n	802b26a <__kernel_rem_pio2f+0x456>
 802b25e:	b10e      	cbz	r6, 802b264 <__kernel_rem_pio2f+0x450>
 802b260:	eef1 7a67 	vneg.f32	s15, s15
 802b264:	edc7 7a00 	vstr	s15, [r7]
 802b268:	e7ae      	b.n	802b1c8 <__kernel_rem_pio2f+0x3b4>
 802b26a:	ed33 7a01 	vldmdb	r3!, {s14}
 802b26e:	3c01      	subs	r4, #1
 802b270:	ee77 7a87 	vadd.f32	s15, s15, s14
 802b274:	e7f1      	b.n	802b25a <__kernel_rem_pio2f+0x446>
 802b276:	ed73 7a01 	vldmdb	r3!, {s15}
 802b27a:	3a01      	subs	r2, #1
 802b27c:	ee37 7a27 	vadd.f32	s14, s14, s15
 802b280:	e7d2      	b.n	802b228 <__kernel_rem_pio2f+0x414>
 802b282:	eef0 7a47 	vmov.f32	s15, s14
 802b286:	e7d4      	b.n	802b232 <__kernel_rem_pio2f+0x41e>
 802b288:	ecb2 7a01 	vldmia	r2!, {s14}
 802b28c:	3301      	adds	r3, #1
 802b28e:	ee77 7a87 	vadd.f32	s15, s15, s14
 802b292:	e7d6      	b.n	802b242 <__kernel_rem_pio2f+0x42e>
 802b294:	edd2 7a00 	vldr	s15, [r2]
 802b298:	edd2 6a01 	vldr	s13, [r2, #4]
 802b29c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802b2a0:	3801      	subs	r0, #1
 802b2a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b2a6:	ed82 7a00 	vstr	s14, [r2]
 802b2aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802b2ae:	edc2 7a01 	vstr	s15, [r2, #4]
 802b2b2:	e798      	b.n	802b1e6 <__kernel_rem_pio2f+0x3d2>
 802b2b4:	edd3 7a00 	vldr	s15, [r3]
 802b2b8:	edd3 6a01 	vldr	s13, [r3, #4]
 802b2bc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802b2c0:	3a01      	subs	r2, #1
 802b2c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b2c6:	ed83 7a00 	vstr	s14, [r3]
 802b2ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802b2ce:	edc3 7a01 	vstr	s15, [r3, #4]
 802b2d2:	e78d      	b.n	802b1f0 <__kernel_rem_pio2f+0x3dc>
 802b2d4:	ed33 7a01 	vldmdb	r3!, {s14}
 802b2d8:	3c01      	subs	r4, #1
 802b2da:	ee77 7a87 	vadd.f32	s15, s15, s14
 802b2de:	e78f      	b.n	802b200 <__kernel_rem_pio2f+0x3ec>
 802b2e0:	eef1 6a66 	vneg.f32	s13, s13
 802b2e4:	eeb1 7a47 	vneg.f32	s14, s14
 802b2e8:	edc7 6a00 	vstr	s13, [r7]
 802b2ec:	ed87 7a01 	vstr	s14, [r7, #4]
 802b2f0:	eef1 7a67 	vneg.f32	s15, s15
 802b2f4:	e790      	b.n	802b218 <__kernel_rem_pio2f+0x404>
 802b2f6:	bf00      	nop

0802b2f8 <floorf>:
 802b2f8:	ee10 3a10 	vmov	r3, s0
 802b2fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802b300:	3a7f      	subs	r2, #127	@ 0x7f
 802b302:	2a16      	cmp	r2, #22
 802b304:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 802b308:	dc2b      	bgt.n	802b362 <floorf+0x6a>
 802b30a:	2a00      	cmp	r2, #0
 802b30c:	da12      	bge.n	802b334 <floorf+0x3c>
 802b30e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802b374 <floorf+0x7c>
 802b312:	ee30 0a27 	vadd.f32	s0, s0, s15
 802b316:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b31e:	dd06      	ble.n	802b32e <floorf+0x36>
 802b320:	2b00      	cmp	r3, #0
 802b322:	da24      	bge.n	802b36e <floorf+0x76>
 802b324:	2900      	cmp	r1, #0
 802b326:	4b14      	ldr	r3, [pc, #80]	@ (802b378 <floorf+0x80>)
 802b328:	bf08      	it	eq
 802b32a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 802b32e:	ee00 3a10 	vmov	s0, r3
 802b332:	4770      	bx	lr
 802b334:	4911      	ldr	r1, [pc, #68]	@ (802b37c <floorf+0x84>)
 802b336:	4111      	asrs	r1, r2
 802b338:	420b      	tst	r3, r1
 802b33a:	d0fa      	beq.n	802b332 <floorf+0x3a>
 802b33c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 802b374 <floorf+0x7c>
 802b340:	ee30 0a27 	vadd.f32	s0, s0, s15
 802b344:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802b348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b34c:	ddef      	ble.n	802b32e <floorf+0x36>
 802b34e:	2b00      	cmp	r3, #0
 802b350:	bfbe      	ittt	lt
 802b352:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 802b356:	fa40 f202 	asrlt.w	r2, r0, r2
 802b35a:	189b      	addlt	r3, r3, r2
 802b35c:	ea23 0301 	bic.w	r3, r3, r1
 802b360:	e7e5      	b.n	802b32e <floorf+0x36>
 802b362:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802b366:	d3e4      	bcc.n	802b332 <floorf+0x3a>
 802b368:	ee30 0a00 	vadd.f32	s0, s0, s0
 802b36c:	4770      	bx	lr
 802b36e:	2300      	movs	r3, #0
 802b370:	e7dd      	b.n	802b32e <floorf+0x36>
 802b372:	bf00      	nop
 802b374:	7149f2ca 	.word	0x7149f2ca
 802b378:	bf800000 	.word	0xbf800000
 802b37c:	007fffff 	.word	0x007fffff

0802b380 <abort>:
 802b380:	b508      	push	{r3, lr}
 802b382:	2006      	movs	r0, #6
 802b384:	f000 fa5c 	bl	802b840 <raise>
 802b388:	2001      	movs	r0, #1
 802b38a:	f7d6 fcdb 	bl	8001d44 <_exit>
	...

0802b390 <__assert_func>:
 802b390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802b392:	4614      	mov	r4, r2
 802b394:	461a      	mov	r2, r3
 802b396:	4b09      	ldr	r3, [pc, #36]	@ (802b3bc <__assert_func+0x2c>)
 802b398:	681b      	ldr	r3, [r3, #0]
 802b39a:	4605      	mov	r5, r0
 802b39c:	68d8      	ldr	r0, [r3, #12]
 802b39e:	b954      	cbnz	r4, 802b3b6 <__assert_func+0x26>
 802b3a0:	4b07      	ldr	r3, [pc, #28]	@ (802b3c0 <__assert_func+0x30>)
 802b3a2:	461c      	mov	r4, r3
 802b3a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802b3a8:	9100      	str	r1, [sp, #0]
 802b3aa:	462b      	mov	r3, r5
 802b3ac:	4905      	ldr	r1, [pc, #20]	@ (802b3c4 <__assert_func+0x34>)
 802b3ae:	f000 f983 	bl	802b6b8 <fiprintf>
 802b3b2:	f7ff ffe5 	bl	802b380 <abort>
 802b3b6:	4b04      	ldr	r3, [pc, #16]	@ (802b3c8 <__assert_func+0x38>)
 802b3b8:	e7f4      	b.n	802b3a4 <__assert_func+0x14>
 802b3ba:	bf00      	nop
 802b3bc:	20000118 	.word	0x20000118
 802b3c0:	0802f25b 	.word	0x0802f25b
 802b3c4:	0802f22d 	.word	0x0802f22d
 802b3c8:	0802f220 	.word	0x0802f220

0802b3cc <atexit>:
 802b3cc:	2300      	movs	r3, #0
 802b3ce:	4601      	mov	r1, r0
 802b3d0:	461a      	mov	r2, r3
 802b3d2:	4618      	mov	r0, r3
 802b3d4:	f000 bae2 	b.w	802b99c <__register_exitproc>

0802b3d8 <malloc>:
 802b3d8:	4b02      	ldr	r3, [pc, #8]	@ (802b3e4 <malloc+0xc>)
 802b3da:	4601      	mov	r1, r0
 802b3dc:	6818      	ldr	r0, [r3, #0]
 802b3de:	f000 b82d 	b.w	802b43c <_malloc_r>
 802b3e2:	bf00      	nop
 802b3e4:	20000118 	.word	0x20000118

0802b3e8 <free>:
 802b3e8:	4b02      	ldr	r3, [pc, #8]	@ (802b3f4 <free+0xc>)
 802b3ea:	4601      	mov	r1, r0
 802b3ec:	6818      	ldr	r0, [r3, #0]
 802b3ee:	f000 bb31 	b.w	802ba54 <_free_r>
 802b3f2:	bf00      	nop
 802b3f4:	20000118 	.word	0x20000118

0802b3f8 <sbrk_aligned>:
 802b3f8:	b570      	push	{r4, r5, r6, lr}
 802b3fa:	4e0f      	ldr	r6, [pc, #60]	@ (802b438 <sbrk_aligned+0x40>)
 802b3fc:	460c      	mov	r4, r1
 802b3fe:	6831      	ldr	r1, [r6, #0]
 802b400:	4605      	mov	r5, r0
 802b402:	b911      	cbnz	r1, 802b40a <sbrk_aligned+0x12>
 802b404:	f000 fa6c 	bl	802b8e0 <_sbrk_r>
 802b408:	6030      	str	r0, [r6, #0]
 802b40a:	4621      	mov	r1, r4
 802b40c:	4628      	mov	r0, r5
 802b40e:	f000 fa67 	bl	802b8e0 <_sbrk_r>
 802b412:	1c43      	adds	r3, r0, #1
 802b414:	d103      	bne.n	802b41e <sbrk_aligned+0x26>
 802b416:	f04f 34ff 	mov.w	r4, #4294967295
 802b41a:	4620      	mov	r0, r4
 802b41c:	bd70      	pop	{r4, r5, r6, pc}
 802b41e:	1cc4      	adds	r4, r0, #3
 802b420:	f024 0403 	bic.w	r4, r4, #3
 802b424:	42a0      	cmp	r0, r4
 802b426:	d0f8      	beq.n	802b41a <sbrk_aligned+0x22>
 802b428:	1a21      	subs	r1, r4, r0
 802b42a:	4628      	mov	r0, r5
 802b42c:	f000 fa58 	bl	802b8e0 <_sbrk_r>
 802b430:	3001      	adds	r0, #1
 802b432:	d1f2      	bne.n	802b41a <sbrk_aligned+0x22>
 802b434:	e7ef      	b.n	802b416 <sbrk_aligned+0x1e>
 802b436:	bf00      	nop
 802b438:	20013034 	.word	0x20013034

0802b43c <_malloc_r>:
 802b43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b440:	1ccd      	adds	r5, r1, #3
 802b442:	f025 0503 	bic.w	r5, r5, #3
 802b446:	3508      	adds	r5, #8
 802b448:	2d0c      	cmp	r5, #12
 802b44a:	bf38      	it	cc
 802b44c:	250c      	movcc	r5, #12
 802b44e:	2d00      	cmp	r5, #0
 802b450:	4606      	mov	r6, r0
 802b452:	db01      	blt.n	802b458 <_malloc_r+0x1c>
 802b454:	42a9      	cmp	r1, r5
 802b456:	d904      	bls.n	802b462 <_malloc_r+0x26>
 802b458:	230c      	movs	r3, #12
 802b45a:	6033      	str	r3, [r6, #0]
 802b45c:	2000      	movs	r0, #0
 802b45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b462:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802b538 <_malloc_r+0xfc>
 802b466:	f000 f869 	bl	802b53c <__malloc_lock>
 802b46a:	f8d8 3000 	ldr.w	r3, [r8]
 802b46e:	461c      	mov	r4, r3
 802b470:	bb44      	cbnz	r4, 802b4c4 <_malloc_r+0x88>
 802b472:	4629      	mov	r1, r5
 802b474:	4630      	mov	r0, r6
 802b476:	f7ff ffbf 	bl	802b3f8 <sbrk_aligned>
 802b47a:	1c43      	adds	r3, r0, #1
 802b47c:	4604      	mov	r4, r0
 802b47e:	d158      	bne.n	802b532 <_malloc_r+0xf6>
 802b480:	f8d8 4000 	ldr.w	r4, [r8]
 802b484:	4627      	mov	r7, r4
 802b486:	2f00      	cmp	r7, #0
 802b488:	d143      	bne.n	802b512 <_malloc_r+0xd6>
 802b48a:	2c00      	cmp	r4, #0
 802b48c:	d04b      	beq.n	802b526 <_malloc_r+0xea>
 802b48e:	6823      	ldr	r3, [r4, #0]
 802b490:	4639      	mov	r1, r7
 802b492:	4630      	mov	r0, r6
 802b494:	eb04 0903 	add.w	r9, r4, r3
 802b498:	f000 fa22 	bl	802b8e0 <_sbrk_r>
 802b49c:	4581      	cmp	r9, r0
 802b49e:	d142      	bne.n	802b526 <_malloc_r+0xea>
 802b4a0:	6821      	ldr	r1, [r4, #0]
 802b4a2:	1a6d      	subs	r5, r5, r1
 802b4a4:	4629      	mov	r1, r5
 802b4a6:	4630      	mov	r0, r6
 802b4a8:	f7ff ffa6 	bl	802b3f8 <sbrk_aligned>
 802b4ac:	3001      	adds	r0, #1
 802b4ae:	d03a      	beq.n	802b526 <_malloc_r+0xea>
 802b4b0:	6823      	ldr	r3, [r4, #0]
 802b4b2:	442b      	add	r3, r5
 802b4b4:	6023      	str	r3, [r4, #0]
 802b4b6:	f8d8 3000 	ldr.w	r3, [r8]
 802b4ba:	685a      	ldr	r2, [r3, #4]
 802b4bc:	bb62      	cbnz	r2, 802b518 <_malloc_r+0xdc>
 802b4be:	f8c8 7000 	str.w	r7, [r8]
 802b4c2:	e00f      	b.n	802b4e4 <_malloc_r+0xa8>
 802b4c4:	6822      	ldr	r2, [r4, #0]
 802b4c6:	1b52      	subs	r2, r2, r5
 802b4c8:	d420      	bmi.n	802b50c <_malloc_r+0xd0>
 802b4ca:	2a0b      	cmp	r2, #11
 802b4cc:	d917      	bls.n	802b4fe <_malloc_r+0xc2>
 802b4ce:	1961      	adds	r1, r4, r5
 802b4d0:	42a3      	cmp	r3, r4
 802b4d2:	6025      	str	r5, [r4, #0]
 802b4d4:	bf18      	it	ne
 802b4d6:	6059      	strne	r1, [r3, #4]
 802b4d8:	6863      	ldr	r3, [r4, #4]
 802b4da:	bf08      	it	eq
 802b4dc:	f8c8 1000 	streq.w	r1, [r8]
 802b4e0:	5162      	str	r2, [r4, r5]
 802b4e2:	604b      	str	r3, [r1, #4]
 802b4e4:	4630      	mov	r0, r6
 802b4e6:	f000 f82f 	bl	802b548 <__malloc_unlock>
 802b4ea:	f104 000b 	add.w	r0, r4, #11
 802b4ee:	1d23      	adds	r3, r4, #4
 802b4f0:	f020 0007 	bic.w	r0, r0, #7
 802b4f4:	1ac2      	subs	r2, r0, r3
 802b4f6:	bf1c      	itt	ne
 802b4f8:	1a1b      	subne	r3, r3, r0
 802b4fa:	50a3      	strne	r3, [r4, r2]
 802b4fc:	e7af      	b.n	802b45e <_malloc_r+0x22>
 802b4fe:	6862      	ldr	r2, [r4, #4]
 802b500:	42a3      	cmp	r3, r4
 802b502:	bf0c      	ite	eq
 802b504:	f8c8 2000 	streq.w	r2, [r8]
 802b508:	605a      	strne	r2, [r3, #4]
 802b50a:	e7eb      	b.n	802b4e4 <_malloc_r+0xa8>
 802b50c:	4623      	mov	r3, r4
 802b50e:	6864      	ldr	r4, [r4, #4]
 802b510:	e7ae      	b.n	802b470 <_malloc_r+0x34>
 802b512:	463c      	mov	r4, r7
 802b514:	687f      	ldr	r7, [r7, #4]
 802b516:	e7b6      	b.n	802b486 <_malloc_r+0x4a>
 802b518:	461a      	mov	r2, r3
 802b51a:	685b      	ldr	r3, [r3, #4]
 802b51c:	42a3      	cmp	r3, r4
 802b51e:	d1fb      	bne.n	802b518 <_malloc_r+0xdc>
 802b520:	2300      	movs	r3, #0
 802b522:	6053      	str	r3, [r2, #4]
 802b524:	e7de      	b.n	802b4e4 <_malloc_r+0xa8>
 802b526:	230c      	movs	r3, #12
 802b528:	6033      	str	r3, [r6, #0]
 802b52a:	4630      	mov	r0, r6
 802b52c:	f000 f80c 	bl	802b548 <__malloc_unlock>
 802b530:	e794      	b.n	802b45c <_malloc_r+0x20>
 802b532:	6005      	str	r5, [r0, #0]
 802b534:	e7d6      	b.n	802b4e4 <_malloc_r+0xa8>
 802b536:	bf00      	nop
 802b538:	20013038 	.word	0x20013038

0802b53c <__malloc_lock>:
 802b53c:	4801      	ldr	r0, [pc, #4]	@ (802b544 <__malloc_lock+0x8>)
 802b53e:	f000 ba1c 	b.w	802b97a <__retarget_lock_acquire_recursive>
 802b542:	bf00      	nop
 802b544:	2001317c 	.word	0x2001317c

0802b548 <__malloc_unlock>:
 802b548:	4801      	ldr	r0, [pc, #4]	@ (802b550 <__malloc_unlock+0x8>)
 802b54a:	f000 ba17 	b.w	802b97c <__retarget_lock_release_recursive>
 802b54e:	bf00      	nop
 802b550:	2001317c 	.word	0x2001317c

0802b554 <__cxa_atexit>:
 802b554:	b510      	push	{r4, lr}
 802b556:	4604      	mov	r4, r0
 802b558:	4804      	ldr	r0, [pc, #16]	@ (802b56c <__cxa_atexit+0x18>)
 802b55a:	4613      	mov	r3, r2
 802b55c:	b120      	cbz	r0, 802b568 <__cxa_atexit+0x14>
 802b55e:	460a      	mov	r2, r1
 802b560:	2002      	movs	r0, #2
 802b562:	4621      	mov	r1, r4
 802b564:	f000 fa1a 	bl	802b99c <__register_exitproc>
 802b568:	bd10      	pop	{r4, pc}
 802b56a:	bf00      	nop
 802b56c:	0802b99d 	.word	0x0802b99d

0802b570 <std>:
 802b570:	2300      	movs	r3, #0
 802b572:	b510      	push	{r4, lr}
 802b574:	4604      	mov	r4, r0
 802b576:	e9c0 3300 	strd	r3, r3, [r0]
 802b57a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b57e:	6083      	str	r3, [r0, #8]
 802b580:	8181      	strh	r1, [r0, #12]
 802b582:	6643      	str	r3, [r0, #100]	@ 0x64
 802b584:	81c2      	strh	r2, [r0, #14]
 802b586:	6183      	str	r3, [r0, #24]
 802b588:	4619      	mov	r1, r3
 802b58a:	2208      	movs	r2, #8
 802b58c:	305c      	adds	r0, #92	@ 0x5c
 802b58e:	f000 f926 	bl	802b7de <memset>
 802b592:	4b0d      	ldr	r3, [pc, #52]	@ (802b5c8 <std+0x58>)
 802b594:	6263      	str	r3, [r4, #36]	@ 0x24
 802b596:	4b0d      	ldr	r3, [pc, #52]	@ (802b5cc <std+0x5c>)
 802b598:	62a3      	str	r3, [r4, #40]	@ 0x28
 802b59a:	4b0d      	ldr	r3, [pc, #52]	@ (802b5d0 <std+0x60>)
 802b59c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802b59e:	4b0d      	ldr	r3, [pc, #52]	@ (802b5d4 <std+0x64>)
 802b5a0:	6323      	str	r3, [r4, #48]	@ 0x30
 802b5a2:	4b0d      	ldr	r3, [pc, #52]	@ (802b5d8 <std+0x68>)
 802b5a4:	6224      	str	r4, [r4, #32]
 802b5a6:	429c      	cmp	r4, r3
 802b5a8:	d006      	beq.n	802b5b8 <std+0x48>
 802b5aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802b5ae:	4294      	cmp	r4, r2
 802b5b0:	d002      	beq.n	802b5b8 <std+0x48>
 802b5b2:	33d0      	adds	r3, #208	@ 0xd0
 802b5b4:	429c      	cmp	r4, r3
 802b5b6:	d105      	bne.n	802b5c4 <std+0x54>
 802b5b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802b5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b5c0:	f000 b9da 	b.w	802b978 <__retarget_lock_init_recursive>
 802b5c4:	bd10      	pop	{r4, pc}
 802b5c6:	bf00      	nop
 802b5c8:	0802b759 	.word	0x0802b759
 802b5cc:	0802b77b 	.word	0x0802b77b
 802b5d0:	0802b7b3 	.word	0x0802b7b3
 802b5d4:	0802b7d7 	.word	0x0802b7d7
 802b5d8:	2001303c 	.word	0x2001303c

0802b5dc <stdio_exit_handler>:
 802b5dc:	4a02      	ldr	r2, [pc, #8]	@ (802b5e8 <stdio_exit_handler+0xc>)
 802b5de:	4903      	ldr	r1, [pc, #12]	@ (802b5ec <stdio_exit_handler+0x10>)
 802b5e0:	4803      	ldr	r0, [pc, #12]	@ (802b5f0 <stdio_exit_handler+0x14>)
 802b5e2:	f000 b87b 	b.w	802b6dc <_fwalk_sglue>
 802b5e6:	bf00      	nop
 802b5e8:	2000010c 	.word	0x2000010c
 802b5ec:	0802c441 	.word	0x0802c441
 802b5f0:	2000011c 	.word	0x2000011c

0802b5f4 <cleanup_stdio>:
 802b5f4:	6841      	ldr	r1, [r0, #4]
 802b5f6:	4b0c      	ldr	r3, [pc, #48]	@ (802b628 <cleanup_stdio+0x34>)
 802b5f8:	4299      	cmp	r1, r3
 802b5fa:	b510      	push	{r4, lr}
 802b5fc:	4604      	mov	r4, r0
 802b5fe:	d001      	beq.n	802b604 <cleanup_stdio+0x10>
 802b600:	f000 ff1e 	bl	802c440 <_fflush_r>
 802b604:	68a1      	ldr	r1, [r4, #8]
 802b606:	4b09      	ldr	r3, [pc, #36]	@ (802b62c <cleanup_stdio+0x38>)
 802b608:	4299      	cmp	r1, r3
 802b60a:	d002      	beq.n	802b612 <cleanup_stdio+0x1e>
 802b60c:	4620      	mov	r0, r4
 802b60e:	f000 ff17 	bl	802c440 <_fflush_r>
 802b612:	68e1      	ldr	r1, [r4, #12]
 802b614:	4b06      	ldr	r3, [pc, #24]	@ (802b630 <cleanup_stdio+0x3c>)
 802b616:	4299      	cmp	r1, r3
 802b618:	d004      	beq.n	802b624 <cleanup_stdio+0x30>
 802b61a:	4620      	mov	r0, r4
 802b61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b620:	f000 bf0e 	b.w	802c440 <_fflush_r>
 802b624:	bd10      	pop	{r4, pc}
 802b626:	bf00      	nop
 802b628:	2001303c 	.word	0x2001303c
 802b62c:	200130a4 	.word	0x200130a4
 802b630:	2001310c 	.word	0x2001310c

0802b634 <global_stdio_init.part.0>:
 802b634:	b510      	push	{r4, lr}
 802b636:	4b0b      	ldr	r3, [pc, #44]	@ (802b664 <global_stdio_init.part.0+0x30>)
 802b638:	4c0b      	ldr	r4, [pc, #44]	@ (802b668 <global_stdio_init.part.0+0x34>)
 802b63a:	4a0c      	ldr	r2, [pc, #48]	@ (802b66c <global_stdio_init.part.0+0x38>)
 802b63c:	601a      	str	r2, [r3, #0]
 802b63e:	4620      	mov	r0, r4
 802b640:	2200      	movs	r2, #0
 802b642:	2104      	movs	r1, #4
 802b644:	f7ff ff94 	bl	802b570 <std>
 802b648:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802b64c:	2201      	movs	r2, #1
 802b64e:	2109      	movs	r1, #9
 802b650:	f7ff ff8e 	bl	802b570 <std>
 802b654:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802b658:	2202      	movs	r2, #2
 802b65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b65e:	2112      	movs	r1, #18
 802b660:	f7ff bf86 	b.w	802b570 <std>
 802b664:	20013174 	.word	0x20013174
 802b668:	2001303c 	.word	0x2001303c
 802b66c:	0802b5dd 	.word	0x0802b5dd

0802b670 <__sfp_lock_acquire>:
 802b670:	4801      	ldr	r0, [pc, #4]	@ (802b678 <__sfp_lock_acquire+0x8>)
 802b672:	f000 b982 	b.w	802b97a <__retarget_lock_acquire_recursive>
 802b676:	bf00      	nop
 802b678:	2001317e 	.word	0x2001317e

0802b67c <__sfp_lock_release>:
 802b67c:	4801      	ldr	r0, [pc, #4]	@ (802b684 <__sfp_lock_release+0x8>)
 802b67e:	f000 b97d 	b.w	802b97c <__retarget_lock_release_recursive>
 802b682:	bf00      	nop
 802b684:	2001317e 	.word	0x2001317e

0802b688 <__sinit>:
 802b688:	b510      	push	{r4, lr}
 802b68a:	4604      	mov	r4, r0
 802b68c:	f7ff fff0 	bl	802b670 <__sfp_lock_acquire>
 802b690:	6a23      	ldr	r3, [r4, #32]
 802b692:	b11b      	cbz	r3, 802b69c <__sinit+0x14>
 802b694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b698:	f7ff bff0 	b.w	802b67c <__sfp_lock_release>
 802b69c:	4b04      	ldr	r3, [pc, #16]	@ (802b6b0 <__sinit+0x28>)
 802b69e:	6223      	str	r3, [r4, #32]
 802b6a0:	4b04      	ldr	r3, [pc, #16]	@ (802b6b4 <__sinit+0x2c>)
 802b6a2:	681b      	ldr	r3, [r3, #0]
 802b6a4:	2b00      	cmp	r3, #0
 802b6a6:	d1f5      	bne.n	802b694 <__sinit+0xc>
 802b6a8:	f7ff ffc4 	bl	802b634 <global_stdio_init.part.0>
 802b6ac:	e7f2      	b.n	802b694 <__sinit+0xc>
 802b6ae:	bf00      	nop
 802b6b0:	0802b5f5 	.word	0x0802b5f5
 802b6b4:	20013174 	.word	0x20013174

0802b6b8 <fiprintf>:
 802b6b8:	b40e      	push	{r1, r2, r3}
 802b6ba:	b503      	push	{r0, r1, lr}
 802b6bc:	4601      	mov	r1, r0
 802b6be:	ab03      	add	r3, sp, #12
 802b6c0:	4805      	ldr	r0, [pc, #20]	@ (802b6d8 <fiprintf+0x20>)
 802b6c2:	f853 2b04 	ldr.w	r2, [r3], #4
 802b6c6:	6800      	ldr	r0, [r0, #0]
 802b6c8:	9301      	str	r3, [sp, #4]
 802b6ca:	f000 fb8f 	bl	802bdec <_vfiprintf_r>
 802b6ce:	b002      	add	sp, #8
 802b6d0:	f85d eb04 	ldr.w	lr, [sp], #4
 802b6d4:	b003      	add	sp, #12
 802b6d6:	4770      	bx	lr
 802b6d8:	20000118 	.word	0x20000118

0802b6dc <_fwalk_sglue>:
 802b6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b6e0:	4607      	mov	r7, r0
 802b6e2:	4688      	mov	r8, r1
 802b6e4:	4614      	mov	r4, r2
 802b6e6:	2600      	movs	r6, #0
 802b6e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b6ec:	f1b9 0901 	subs.w	r9, r9, #1
 802b6f0:	d505      	bpl.n	802b6fe <_fwalk_sglue+0x22>
 802b6f2:	6824      	ldr	r4, [r4, #0]
 802b6f4:	2c00      	cmp	r4, #0
 802b6f6:	d1f7      	bne.n	802b6e8 <_fwalk_sglue+0xc>
 802b6f8:	4630      	mov	r0, r6
 802b6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b6fe:	89ab      	ldrh	r3, [r5, #12]
 802b700:	2b01      	cmp	r3, #1
 802b702:	d907      	bls.n	802b714 <_fwalk_sglue+0x38>
 802b704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b708:	3301      	adds	r3, #1
 802b70a:	d003      	beq.n	802b714 <_fwalk_sglue+0x38>
 802b70c:	4629      	mov	r1, r5
 802b70e:	4638      	mov	r0, r7
 802b710:	47c0      	blx	r8
 802b712:	4306      	orrs	r6, r0
 802b714:	3568      	adds	r5, #104	@ 0x68
 802b716:	e7e9      	b.n	802b6ec <_fwalk_sglue+0x10>

0802b718 <siprintf>:
 802b718:	b40e      	push	{r1, r2, r3}
 802b71a:	b500      	push	{lr}
 802b71c:	b09c      	sub	sp, #112	@ 0x70
 802b71e:	ab1d      	add	r3, sp, #116	@ 0x74
 802b720:	9002      	str	r0, [sp, #8]
 802b722:	9006      	str	r0, [sp, #24]
 802b724:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802b728:	4809      	ldr	r0, [pc, #36]	@ (802b750 <siprintf+0x38>)
 802b72a:	9107      	str	r1, [sp, #28]
 802b72c:	9104      	str	r1, [sp, #16]
 802b72e:	4909      	ldr	r1, [pc, #36]	@ (802b754 <siprintf+0x3c>)
 802b730:	f853 2b04 	ldr.w	r2, [r3], #4
 802b734:	9105      	str	r1, [sp, #20]
 802b736:	6800      	ldr	r0, [r0, #0]
 802b738:	9301      	str	r3, [sp, #4]
 802b73a:	a902      	add	r1, sp, #8
 802b73c:	f000 fa30 	bl	802bba0 <_svfiprintf_r>
 802b740:	9b02      	ldr	r3, [sp, #8]
 802b742:	2200      	movs	r2, #0
 802b744:	701a      	strb	r2, [r3, #0]
 802b746:	b01c      	add	sp, #112	@ 0x70
 802b748:	f85d eb04 	ldr.w	lr, [sp], #4
 802b74c:	b003      	add	sp, #12
 802b74e:	4770      	bx	lr
 802b750:	20000118 	.word	0x20000118
 802b754:	ffff0208 	.word	0xffff0208

0802b758 <__sread>:
 802b758:	b510      	push	{r4, lr}
 802b75a:	460c      	mov	r4, r1
 802b75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b760:	f000 f898 	bl	802b894 <_read_r>
 802b764:	2800      	cmp	r0, #0
 802b766:	bfab      	itete	ge
 802b768:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802b76a:	89a3      	ldrhlt	r3, [r4, #12]
 802b76c:	181b      	addge	r3, r3, r0
 802b76e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802b772:	bfac      	ite	ge
 802b774:	6563      	strge	r3, [r4, #84]	@ 0x54
 802b776:	81a3      	strhlt	r3, [r4, #12]
 802b778:	bd10      	pop	{r4, pc}

0802b77a <__swrite>:
 802b77a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b77e:	461f      	mov	r7, r3
 802b780:	898b      	ldrh	r3, [r1, #12]
 802b782:	05db      	lsls	r3, r3, #23
 802b784:	4605      	mov	r5, r0
 802b786:	460c      	mov	r4, r1
 802b788:	4616      	mov	r6, r2
 802b78a:	d505      	bpl.n	802b798 <__swrite+0x1e>
 802b78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b790:	2302      	movs	r3, #2
 802b792:	2200      	movs	r2, #0
 802b794:	f000 f86c 	bl	802b870 <_lseek_r>
 802b798:	89a3      	ldrh	r3, [r4, #12]
 802b79a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b79e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802b7a2:	81a3      	strh	r3, [r4, #12]
 802b7a4:	4632      	mov	r2, r6
 802b7a6:	463b      	mov	r3, r7
 802b7a8:	4628      	mov	r0, r5
 802b7aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b7ae:	f000 b8a7 	b.w	802b900 <_write_r>

0802b7b2 <__sseek>:
 802b7b2:	b510      	push	{r4, lr}
 802b7b4:	460c      	mov	r4, r1
 802b7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b7ba:	f000 f859 	bl	802b870 <_lseek_r>
 802b7be:	1c43      	adds	r3, r0, #1
 802b7c0:	89a3      	ldrh	r3, [r4, #12]
 802b7c2:	bf15      	itete	ne
 802b7c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 802b7c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802b7ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802b7ce:	81a3      	strheq	r3, [r4, #12]
 802b7d0:	bf18      	it	ne
 802b7d2:	81a3      	strhne	r3, [r4, #12]
 802b7d4:	bd10      	pop	{r4, pc}

0802b7d6 <__sclose>:
 802b7d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b7da:	f000 b839 	b.w	802b850 <_close_r>

0802b7de <memset>:
 802b7de:	4402      	add	r2, r0
 802b7e0:	4603      	mov	r3, r0
 802b7e2:	4293      	cmp	r3, r2
 802b7e4:	d100      	bne.n	802b7e8 <memset+0xa>
 802b7e6:	4770      	bx	lr
 802b7e8:	f803 1b01 	strb.w	r1, [r3], #1
 802b7ec:	e7f9      	b.n	802b7e2 <memset+0x4>

0802b7ee <_raise_r>:
 802b7ee:	291f      	cmp	r1, #31
 802b7f0:	b538      	push	{r3, r4, r5, lr}
 802b7f2:	4605      	mov	r5, r0
 802b7f4:	460c      	mov	r4, r1
 802b7f6:	d904      	bls.n	802b802 <_raise_r+0x14>
 802b7f8:	2316      	movs	r3, #22
 802b7fa:	6003      	str	r3, [r0, #0]
 802b7fc:	f04f 30ff 	mov.w	r0, #4294967295
 802b800:	bd38      	pop	{r3, r4, r5, pc}
 802b802:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802b804:	b112      	cbz	r2, 802b80c <_raise_r+0x1e>
 802b806:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b80a:	b94b      	cbnz	r3, 802b820 <_raise_r+0x32>
 802b80c:	4628      	mov	r0, r5
 802b80e:	f000 f865 	bl	802b8dc <_getpid_r>
 802b812:	4622      	mov	r2, r4
 802b814:	4601      	mov	r1, r0
 802b816:	4628      	mov	r0, r5
 802b818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b81c:	f000 b84c 	b.w	802b8b8 <_kill_r>
 802b820:	2b01      	cmp	r3, #1
 802b822:	d00a      	beq.n	802b83a <_raise_r+0x4c>
 802b824:	1c59      	adds	r1, r3, #1
 802b826:	d103      	bne.n	802b830 <_raise_r+0x42>
 802b828:	2316      	movs	r3, #22
 802b82a:	6003      	str	r3, [r0, #0]
 802b82c:	2001      	movs	r0, #1
 802b82e:	e7e7      	b.n	802b800 <_raise_r+0x12>
 802b830:	2100      	movs	r1, #0
 802b832:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802b836:	4620      	mov	r0, r4
 802b838:	4798      	blx	r3
 802b83a:	2000      	movs	r0, #0
 802b83c:	e7e0      	b.n	802b800 <_raise_r+0x12>
	...

0802b840 <raise>:
 802b840:	4b02      	ldr	r3, [pc, #8]	@ (802b84c <raise+0xc>)
 802b842:	4601      	mov	r1, r0
 802b844:	6818      	ldr	r0, [r3, #0]
 802b846:	f7ff bfd2 	b.w	802b7ee <_raise_r>
 802b84a:	bf00      	nop
 802b84c:	20000118 	.word	0x20000118

0802b850 <_close_r>:
 802b850:	b538      	push	{r3, r4, r5, lr}
 802b852:	4d06      	ldr	r5, [pc, #24]	@ (802b86c <_close_r+0x1c>)
 802b854:	2300      	movs	r3, #0
 802b856:	4604      	mov	r4, r0
 802b858:	4608      	mov	r0, r1
 802b85a:	602b      	str	r3, [r5, #0]
 802b85c:	f7d6 fab6 	bl	8001dcc <_close>
 802b860:	1c43      	adds	r3, r0, #1
 802b862:	d102      	bne.n	802b86a <_close_r+0x1a>
 802b864:	682b      	ldr	r3, [r5, #0]
 802b866:	b103      	cbz	r3, 802b86a <_close_r+0x1a>
 802b868:	6023      	str	r3, [r4, #0]
 802b86a:	bd38      	pop	{r3, r4, r5, pc}
 802b86c:	20013178 	.word	0x20013178

0802b870 <_lseek_r>:
 802b870:	b538      	push	{r3, r4, r5, lr}
 802b872:	4d07      	ldr	r5, [pc, #28]	@ (802b890 <_lseek_r+0x20>)
 802b874:	4604      	mov	r4, r0
 802b876:	4608      	mov	r0, r1
 802b878:	4611      	mov	r1, r2
 802b87a:	2200      	movs	r2, #0
 802b87c:	602a      	str	r2, [r5, #0]
 802b87e:	461a      	mov	r2, r3
 802b880:	f7d6 facb 	bl	8001e1a <_lseek>
 802b884:	1c43      	adds	r3, r0, #1
 802b886:	d102      	bne.n	802b88e <_lseek_r+0x1e>
 802b888:	682b      	ldr	r3, [r5, #0]
 802b88a:	b103      	cbz	r3, 802b88e <_lseek_r+0x1e>
 802b88c:	6023      	str	r3, [r4, #0]
 802b88e:	bd38      	pop	{r3, r4, r5, pc}
 802b890:	20013178 	.word	0x20013178

0802b894 <_read_r>:
 802b894:	b538      	push	{r3, r4, r5, lr}
 802b896:	4d07      	ldr	r5, [pc, #28]	@ (802b8b4 <_read_r+0x20>)
 802b898:	4604      	mov	r4, r0
 802b89a:	4608      	mov	r0, r1
 802b89c:	4611      	mov	r1, r2
 802b89e:	2200      	movs	r2, #0
 802b8a0:	602a      	str	r2, [r5, #0]
 802b8a2:	461a      	mov	r2, r3
 802b8a4:	f7d6 fa59 	bl	8001d5a <_read>
 802b8a8:	1c43      	adds	r3, r0, #1
 802b8aa:	d102      	bne.n	802b8b2 <_read_r+0x1e>
 802b8ac:	682b      	ldr	r3, [r5, #0]
 802b8ae:	b103      	cbz	r3, 802b8b2 <_read_r+0x1e>
 802b8b0:	6023      	str	r3, [r4, #0]
 802b8b2:	bd38      	pop	{r3, r4, r5, pc}
 802b8b4:	20013178 	.word	0x20013178

0802b8b8 <_kill_r>:
 802b8b8:	b538      	push	{r3, r4, r5, lr}
 802b8ba:	4d07      	ldr	r5, [pc, #28]	@ (802b8d8 <_kill_r+0x20>)
 802b8bc:	2300      	movs	r3, #0
 802b8be:	4604      	mov	r4, r0
 802b8c0:	4608      	mov	r0, r1
 802b8c2:	4611      	mov	r1, r2
 802b8c4:	602b      	str	r3, [r5, #0]
 802b8c6:	f7d6 fa2d 	bl	8001d24 <_kill>
 802b8ca:	1c43      	adds	r3, r0, #1
 802b8cc:	d102      	bne.n	802b8d4 <_kill_r+0x1c>
 802b8ce:	682b      	ldr	r3, [r5, #0]
 802b8d0:	b103      	cbz	r3, 802b8d4 <_kill_r+0x1c>
 802b8d2:	6023      	str	r3, [r4, #0]
 802b8d4:	bd38      	pop	{r3, r4, r5, pc}
 802b8d6:	bf00      	nop
 802b8d8:	20013178 	.word	0x20013178

0802b8dc <_getpid_r>:
 802b8dc:	f7d6 ba1a 	b.w	8001d14 <_getpid>

0802b8e0 <_sbrk_r>:
 802b8e0:	b538      	push	{r3, r4, r5, lr}
 802b8e2:	4d06      	ldr	r5, [pc, #24]	@ (802b8fc <_sbrk_r+0x1c>)
 802b8e4:	2300      	movs	r3, #0
 802b8e6:	4604      	mov	r4, r0
 802b8e8:	4608      	mov	r0, r1
 802b8ea:	602b      	str	r3, [r5, #0]
 802b8ec:	f7d6 faa2 	bl	8001e34 <_sbrk>
 802b8f0:	1c43      	adds	r3, r0, #1
 802b8f2:	d102      	bne.n	802b8fa <_sbrk_r+0x1a>
 802b8f4:	682b      	ldr	r3, [r5, #0]
 802b8f6:	b103      	cbz	r3, 802b8fa <_sbrk_r+0x1a>
 802b8f8:	6023      	str	r3, [r4, #0]
 802b8fa:	bd38      	pop	{r3, r4, r5, pc}
 802b8fc:	20013178 	.word	0x20013178

0802b900 <_write_r>:
 802b900:	b538      	push	{r3, r4, r5, lr}
 802b902:	4d07      	ldr	r5, [pc, #28]	@ (802b920 <_write_r+0x20>)
 802b904:	4604      	mov	r4, r0
 802b906:	4608      	mov	r0, r1
 802b908:	4611      	mov	r1, r2
 802b90a:	2200      	movs	r2, #0
 802b90c:	602a      	str	r2, [r5, #0]
 802b90e:	461a      	mov	r2, r3
 802b910:	f7d6 fa40 	bl	8001d94 <_write>
 802b914:	1c43      	adds	r3, r0, #1
 802b916:	d102      	bne.n	802b91e <_write_r+0x1e>
 802b918:	682b      	ldr	r3, [r5, #0]
 802b91a:	b103      	cbz	r3, 802b91e <_write_r+0x1e>
 802b91c:	6023      	str	r3, [r4, #0]
 802b91e:	bd38      	pop	{r3, r4, r5, pc}
 802b920:	20013178 	.word	0x20013178

0802b924 <__errno>:
 802b924:	4b01      	ldr	r3, [pc, #4]	@ (802b92c <__errno+0x8>)
 802b926:	6818      	ldr	r0, [r3, #0]
 802b928:	4770      	bx	lr
 802b92a:	bf00      	nop
 802b92c:	20000118 	.word	0x20000118

0802b930 <__libc_init_array>:
 802b930:	b570      	push	{r4, r5, r6, lr}
 802b932:	4d0d      	ldr	r5, [pc, #52]	@ (802b968 <__libc_init_array+0x38>)
 802b934:	4c0d      	ldr	r4, [pc, #52]	@ (802b96c <__libc_init_array+0x3c>)
 802b936:	1b64      	subs	r4, r4, r5
 802b938:	10a4      	asrs	r4, r4, #2
 802b93a:	2600      	movs	r6, #0
 802b93c:	42a6      	cmp	r6, r4
 802b93e:	d109      	bne.n	802b954 <__libc_init_array+0x24>
 802b940:	4d0b      	ldr	r5, [pc, #44]	@ (802b970 <__libc_init_array+0x40>)
 802b942:	4c0c      	ldr	r4, [pc, #48]	@ (802b974 <__libc_init_array+0x44>)
 802b944:	f000 ff0c 	bl	802c760 <_init>
 802b948:	1b64      	subs	r4, r4, r5
 802b94a:	10a4      	asrs	r4, r4, #2
 802b94c:	2600      	movs	r6, #0
 802b94e:	42a6      	cmp	r6, r4
 802b950:	d105      	bne.n	802b95e <__libc_init_array+0x2e>
 802b952:	bd70      	pop	{r4, r5, r6, pc}
 802b954:	f855 3b04 	ldr.w	r3, [r5], #4
 802b958:	4798      	blx	r3
 802b95a:	3601      	adds	r6, #1
 802b95c:	e7ee      	b.n	802b93c <__libc_init_array+0xc>
 802b95e:	f855 3b04 	ldr.w	r3, [r5], #4
 802b962:	4798      	blx	r3
 802b964:	3601      	adds	r6, #1
 802b966:	e7f2      	b.n	802b94e <__libc_init_array+0x1e>
 802b968:	080503d4 	.word	0x080503d4
 802b96c:	080503d4 	.word	0x080503d4
 802b970:	080503d4 	.word	0x080503d4
 802b974:	080503e8 	.word	0x080503e8

0802b978 <__retarget_lock_init_recursive>:
 802b978:	4770      	bx	lr

0802b97a <__retarget_lock_acquire_recursive>:
 802b97a:	4770      	bx	lr

0802b97c <__retarget_lock_release_recursive>:
 802b97c:	4770      	bx	lr

0802b97e <memcpy>:
 802b97e:	440a      	add	r2, r1
 802b980:	4291      	cmp	r1, r2
 802b982:	f100 33ff 	add.w	r3, r0, #4294967295
 802b986:	d100      	bne.n	802b98a <memcpy+0xc>
 802b988:	4770      	bx	lr
 802b98a:	b510      	push	{r4, lr}
 802b98c:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b990:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b994:	4291      	cmp	r1, r2
 802b996:	d1f9      	bne.n	802b98c <memcpy+0xe>
 802b998:	bd10      	pop	{r4, pc}
	...

0802b99c <__register_exitproc>:
 802b99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b9a0:	4d27      	ldr	r5, [pc, #156]	@ (802ba40 <__register_exitproc+0xa4>)
 802b9a2:	4607      	mov	r7, r0
 802b9a4:	6828      	ldr	r0, [r5, #0]
 802b9a6:	4691      	mov	r9, r2
 802b9a8:	460e      	mov	r6, r1
 802b9aa:	4698      	mov	r8, r3
 802b9ac:	f7ff ffe5 	bl	802b97a <__retarget_lock_acquire_recursive>
 802b9b0:	4a24      	ldr	r2, [pc, #144]	@ (802ba44 <__register_exitproc+0xa8>)
 802b9b2:	6814      	ldr	r4, [r2, #0]
 802b9b4:	b93c      	cbnz	r4, 802b9c6 <__register_exitproc+0x2a>
 802b9b6:	4b24      	ldr	r3, [pc, #144]	@ (802ba48 <__register_exitproc+0xac>)
 802b9b8:	6013      	str	r3, [r2, #0]
 802b9ba:	4a24      	ldr	r2, [pc, #144]	@ (802ba4c <__register_exitproc+0xb0>)
 802b9bc:	b112      	cbz	r2, 802b9c4 <__register_exitproc+0x28>
 802b9be:	6812      	ldr	r2, [r2, #0]
 802b9c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802b9c4:	4c20      	ldr	r4, [pc, #128]	@ (802ba48 <__register_exitproc+0xac>)
 802b9c6:	6863      	ldr	r3, [r4, #4]
 802b9c8:	2b1f      	cmp	r3, #31
 802b9ca:	dd06      	ble.n	802b9da <__register_exitproc+0x3e>
 802b9cc:	6828      	ldr	r0, [r5, #0]
 802b9ce:	f7ff ffd5 	bl	802b97c <__retarget_lock_release_recursive>
 802b9d2:	f04f 30ff 	mov.w	r0, #4294967295
 802b9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b9da:	b32f      	cbz	r7, 802ba28 <__register_exitproc+0x8c>
 802b9dc:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802b9e0:	b968      	cbnz	r0, 802b9fe <__register_exitproc+0x62>
 802b9e2:	4b1b      	ldr	r3, [pc, #108]	@ (802ba50 <__register_exitproc+0xb4>)
 802b9e4:	2b00      	cmp	r3, #0
 802b9e6:	d0f1      	beq.n	802b9cc <__register_exitproc+0x30>
 802b9e8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802b9ec:	f7ff fcf4 	bl	802b3d8 <malloc>
 802b9f0:	2800      	cmp	r0, #0
 802b9f2:	d0eb      	beq.n	802b9cc <__register_exitproc+0x30>
 802b9f4:	2300      	movs	r3, #0
 802b9f6:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802b9fa:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802b9fe:	6863      	ldr	r3, [r4, #4]
 802ba00:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802ba04:	2201      	movs	r2, #1
 802ba06:	409a      	lsls	r2, r3
 802ba08:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802ba0c:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802ba10:	4313      	orrs	r3, r2
 802ba12:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802ba16:	2f02      	cmp	r7, #2
 802ba18:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802ba1c:	bf02      	ittt	eq
 802ba1e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802ba22:	4313      	orreq	r3, r2
 802ba24:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802ba28:	6863      	ldr	r3, [r4, #4]
 802ba2a:	6828      	ldr	r0, [r5, #0]
 802ba2c:	1c5a      	adds	r2, r3, #1
 802ba2e:	3302      	adds	r3, #2
 802ba30:	6062      	str	r2, [r4, #4]
 802ba32:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802ba36:	f7ff ffa1 	bl	802b97c <__retarget_lock_release_recursive>
 802ba3a:	2000      	movs	r0, #0
 802ba3c:	e7cb      	b.n	802b9d6 <__register_exitproc+0x3a>
 802ba3e:	bf00      	nop
 802ba40:	20000168 	.word	0x20000168
 802ba44:	2001320c 	.word	0x2001320c
 802ba48:	20013180 	.word	0x20013180
 802ba4c:	0802f25c 	.word	0x0802f25c
 802ba50:	0802b3d9 	.word	0x0802b3d9

0802ba54 <_free_r>:
 802ba54:	b538      	push	{r3, r4, r5, lr}
 802ba56:	4605      	mov	r5, r0
 802ba58:	2900      	cmp	r1, #0
 802ba5a:	d041      	beq.n	802bae0 <_free_r+0x8c>
 802ba5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ba60:	1f0c      	subs	r4, r1, #4
 802ba62:	2b00      	cmp	r3, #0
 802ba64:	bfb8      	it	lt
 802ba66:	18e4      	addlt	r4, r4, r3
 802ba68:	f7ff fd68 	bl	802b53c <__malloc_lock>
 802ba6c:	4a1d      	ldr	r2, [pc, #116]	@ (802bae4 <_free_r+0x90>)
 802ba6e:	6813      	ldr	r3, [r2, #0]
 802ba70:	b933      	cbnz	r3, 802ba80 <_free_r+0x2c>
 802ba72:	6063      	str	r3, [r4, #4]
 802ba74:	6014      	str	r4, [r2, #0]
 802ba76:	4628      	mov	r0, r5
 802ba78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ba7c:	f7ff bd64 	b.w	802b548 <__malloc_unlock>
 802ba80:	42a3      	cmp	r3, r4
 802ba82:	d908      	bls.n	802ba96 <_free_r+0x42>
 802ba84:	6820      	ldr	r0, [r4, #0]
 802ba86:	1821      	adds	r1, r4, r0
 802ba88:	428b      	cmp	r3, r1
 802ba8a:	bf01      	itttt	eq
 802ba8c:	6819      	ldreq	r1, [r3, #0]
 802ba8e:	685b      	ldreq	r3, [r3, #4]
 802ba90:	1809      	addeq	r1, r1, r0
 802ba92:	6021      	streq	r1, [r4, #0]
 802ba94:	e7ed      	b.n	802ba72 <_free_r+0x1e>
 802ba96:	461a      	mov	r2, r3
 802ba98:	685b      	ldr	r3, [r3, #4]
 802ba9a:	b10b      	cbz	r3, 802baa0 <_free_r+0x4c>
 802ba9c:	42a3      	cmp	r3, r4
 802ba9e:	d9fa      	bls.n	802ba96 <_free_r+0x42>
 802baa0:	6811      	ldr	r1, [r2, #0]
 802baa2:	1850      	adds	r0, r2, r1
 802baa4:	42a0      	cmp	r0, r4
 802baa6:	d10b      	bne.n	802bac0 <_free_r+0x6c>
 802baa8:	6820      	ldr	r0, [r4, #0]
 802baaa:	4401      	add	r1, r0
 802baac:	1850      	adds	r0, r2, r1
 802baae:	4283      	cmp	r3, r0
 802bab0:	6011      	str	r1, [r2, #0]
 802bab2:	d1e0      	bne.n	802ba76 <_free_r+0x22>
 802bab4:	6818      	ldr	r0, [r3, #0]
 802bab6:	685b      	ldr	r3, [r3, #4]
 802bab8:	6053      	str	r3, [r2, #4]
 802baba:	4408      	add	r0, r1
 802babc:	6010      	str	r0, [r2, #0]
 802babe:	e7da      	b.n	802ba76 <_free_r+0x22>
 802bac0:	d902      	bls.n	802bac8 <_free_r+0x74>
 802bac2:	230c      	movs	r3, #12
 802bac4:	602b      	str	r3, [r5, #0]
 802bac6:	e7d6      	b.n	802ba76 <_free_r+0x22>
 802bac8:	6820      	ldr	r0, [r4, #0]
 802baca:	1821      	adds	r1, r4, r0
 802bacc:	428b      	cmp	r3, r1
 802bace:	bf04      	itt	eq
 802bad0:	6819      	ldreq	r1, [r3, #0]
 802bad2:	685b      	ldreq	r3, [r3, #4]
 802bad4:	6063      	str	r3, [r4, #4]
 802bad6:	bf04      	itt	eq
 802bad8:	1809      	addeq	r1, r1, r0
 802bada:	6021      	streq	r1, [r4, #0]
 802badc:	6054      	str	r4, [r2, #4]
 802bade:	e7ca      	b.n	802ba76 <_free_r+0x22>
 802bae0:	bd38      	pop	{r3, r4, r5, pc}
 802bae2:	bf00      	nop
 802bae4:	20013038 	.word	0x20013038

0802bae8 <__ssputs_r>:
 802bae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802baec:	688e      	ldr	r6, [r1, #8]
 802baee:	461f      	mov	r7, r3
 802baf0:	42be      	cmp	r6, r7
 802baf2:	680b      	ldr	r3, [r1, #0]
 802baf4:	4682      	mov	sl, r0
 802baf6:	460c      	mov	r4, r1
 802baf8:	4690      	mov	r8, r2
 802bafa:	d82d      	bhi.n	802bb58 <__ssputs_r+0x70>
 802bafc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802bb00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802bb04:	d026      	beq.n	802bb54 <__ssputs_r+0x6c>
 802bb06:	6965      	ldr	r5, [r4, #20]
 802bb08:	6909      	ldr	r1, [r1, #16]
 802bb0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802bb0e:	eba3 0901 	sub.w	r9, r3, r1
 802bb12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802bb16:	1c7b      	adds	r3, r7, #1
 802bb18:	444b      	add	r3, r9
 802bb1a:	106d      	asrs	r5, r5, #1
 802bb1c:	429d      	cmp	r5, r3
 802bb1e:	bf38      	it	cc
 802bb20:	461d      	movcc	r5, r3
 802bb22:	0553      	lsls	r3, r2, #21
 802bb24:	d527      	bpl.n	802bb76 <__ssputs_r+0x8e>
 802bb26:	4629      	mov	r1, r5
 802bb28:	f7ff fc88 	bl	802b43c <_malloc_r>
 802bb2c:	4606      	mov	r6, r0
 802bb2e:	b360      	cbz	r0, 802bb8a <__ssputs_r+0xa2>
 802bb30:	6921      	ldr	r1, [r4, #16]
 802bb32:	464a      	mov	r2, r9
 802bb34:	f7ff ff23 	bl	802b97e <memcpy>
 802bb38:	89a3      	ldrh	r3, [r4, #12]
 802bb3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802bb3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802bb42:	81a3      	strh	r3, [r4, #12]
 802bb44:	6126      	str	r6, [r4, #16]
 802bb46:	6165      	str	r5, [r4, #20]
 802bb48:	444e      	add	r6, r9
 802bb4a:	eba5 0509 	sub.w	r5, r5, r9
 802bb4e:	6026      	str	r6, [r4, #0]
 802bb50:	60a5      	str	r5, [r4, #8]
 802bb52:	463e      	mov	r6, r7
 802bb54:	42be      	cmp	r6, r7
 802bb56:	d900      	bls.n	802bb5a <__ssputs_r+0x72>
 802bb58:	463e      	mov	r6, r7
 802bb5a:	6820      	ldr	r0, [r4, #0]
 802bb5c:	4632      	mov	r2, r6
 802bb5e:	4641      	mov	r1, r8
 802bb60:	f000 fd2a 	bl	802c5b8 <memmove>
 802bb64:	68a3      	ldr	r3, [r4, #8]
 802bb66:	1b9b      	subs	r3, r3, r6
 802bb68:	60a3      	str	r3, [r4, #8]
 802bb6a:	6823      	ldr	r3, [r4, #0]
 802bb6c:	4433      	add	r3, r6
 802bb6e:	6023      	str	r3, [r4, #0]
 802bb70:	2000      	movs	r0, #0
 802bb72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bb76:	462a      	mov	r2, r5
 802bb78:	f000 fd38 	bl	802c5ec <_realloc_r>
 802bb7c:	4606      	mov	r6, r0
 802bb7e:	2800      	cmp	r0, #0
 802bb80:	d1e0      	bne.n	802bb44 <__ssputs_r+0x5c>
 802bb82:	6921      	ldr	r1, [r4, #16]
 802bb84:	4650      	mov	r0, sl
 802bb86:	f7ff ff65 	bl	802ba54 <_free_r>
 802bb8a:	230c      	movs	r3, #12
 802bb8c:	f8ca 3000 	str.w	r3, [sl]
 802bb90:	89a3      	ldrh	r3, [r4, #12]
 802bb92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bb96:	81a3      	strh	r3, [r4, #12]
 802bb98:	f04f 30ff 	mov.w	r0, #4294967295
 802bb9c:	e7e9      	b.n	802bb72 <__ssputs_r+0x8a>
	...

0802bba0 <_svfiprintf_r>:
 802bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bba4:	4698      	mov	r8, r3
 802bba6:	898b      	ldrh	r3, [r1, #12]
 802bba8:	061b      	lsls	r3, r3, #24
 802bbaa:	b09d      	sub	sp, #116	@ 0x74
 802bbac:	4607      	mov	r7, r0
 802bbae:	460d      	mov	r5, r1
 802bbb0:	4614      	mov	r4, r2
 802bbb2:	d510      	bpl.n	802bbd6 <_svfiprintf_r+0x36>
 802bbb4:	690b      	ldr	r3, [r1, #16]
 802bbb6:	b973      	cbnz	r3, 802bbd6 <_svfiprintf_r+0x36>
 802bbb8:	2140      	movs	r1, #64	@ 0x40
 802bbba:	f7ff fc3f 	bl	802b43c <_malloc_r>
 802bbbe:	6028      	str	r0, [r5, #0]
 802bbc0:	6128      	str	r0, [r5, #16]
 802bbc2:	b930      	cbnz	r0, 802bbd2 <_svfiprintf_r+0x32>
 802bbc4:	230c      	movs	r3, #12
 802bbc6:	603b      	str	r3, [r7, #0]
 802bbc8:	f04f 30ff 	mov.w	r0, #4294967295
 802bbcc:	b01d      	add	sp, #116	@ 0x74
 802bbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bbd2:	2340      	movs	r3, #64	@ 0x40
 802bbd4:	616b      	str	r3, [r5, #20]
 802bbd6:	2300      	movs	r3, #0
 802bbd8:	9309      	str	r3, [sp, #36]	@ 0x24
 802bbda:	2320      	movs	r3, #32
 802bbdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802bbe0:	f8cd 800c 	str.w	r8, [sp, #12]
 802bbe4:	2330      	movs	r3, #48	@ 0x30
 802bbe6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 802bd84 <_svfiprintf_r+0x1e4>
 802bbea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802bbee:	f04f 0901 	mov.w	r9, #1
 802bbf2:	4623      	mov	r3, r4
 802bbf4:	469a      	mov	sl, r3
 802bbf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bbfa:	b10a      	cbz	r2, 802bc00 <_svfiprintf_r+0x60>
 802bbfc:	2a25      	cmp	r2, #37	@ 0x25
 802bbfe:	d1f9      	bne.n	802bbf4 <_svfiprintf_r+0x54>
 802bc00:	ebba 0b04 	subs.w	fp, sl, r4
 802bc04:	d00b      	beq.n	802bc1e <_svfiprintf_r+0x7e>
 802bc06:	465b      	mov	r3, fp
 802bc08:	4622      	mov	r2, r4
 802bc0a:	4629      	mov	r1, r5
 802bc0c:	4638      	mov	r0, r7
 802bc0e:	f7ff ff6b 	bl	802bae8 <__ssputs_r>
 802bc12:	3001      	adds	r0, #1
 802bc14:	f000 80a7 	beq.w	802bd66 <_svfiprintf_r+0x1c6>
 802bc18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802bc1a:	445a      	add	r2, fp
 802bc1c:	9209      	str	r2, [sp, #36]	@ 0x24
 802bc1e:	f89a 3000 	ldrb.w	r3, [sl]
 802bc22:	2b00      	cmp	r3, #0
 802bc24:	f000 809f 	beq.w	802bd66 <_svfiprintf_r+0x1c6>
 802bc28:	2300      	movs	r3, #0
 802bc2a:	f04f 32ff 	mov.w	r2, #4294967295
 802bc2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802bc32:	f10a 0a01 	add.w	sl, sl, #1
 802bc36:	9304      	str	r3, [sp, #16]
 802bc38:	9307      	str	r3, [sp, #28]
 802bc3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802bc3e:	931a      	str	r3, [sp, #104]	@ 0x68
 802bc40:	4654      	mov	r4, sl
 802bc42:	2205      	movs	r2, #5
 802bc44:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bc48:	484e      	ldr	r0, [pc, #312]	@ (802bd84 <_svfiprintf_r+0x1e4>)
 802bc4a:	f7d4 fad1 	bl	80001f0 <memchr>
 802bc4e:	9a04      	ldr	r2, [sp, #16]
 802bc50:	b9d8      	cbnz	r0, 802bc8a <_svfiprintf_r+0xea>
 802bc52:	06d0      	lsls	r0, r2, #27
 802bc54:	bf44      	itt	mi
 802bc56:	2320      	movmi	r3, #32
 802bc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802bc5c:	0711      	lsls	r1, r2, #28
 802bc5e:	bf44      	itt	mi
 802bc60:	232b      	movmi	r3, #43	@ 0x2b
 802bc62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802bc66:	f89a 3000 	ldrb.w	r3, [sl]
 802bc6a:	2b2a      	cmp	r3, #42	@ 0x2a
 802bc6c:	d015      	beq.n	802bc9a <_svfiprintf_r+0xfa>
 802bc6e:	9a07      	ldr	r2, [sp, #28]
 802bc70:	4654      	mov	r4, sl
 802bc72:	2000      	movs	r0, #0
 802bc74:	f04f 0c0a 	mov.w	ip, #10
 802bc78:	4621      	mov	r1, r4
 802bc7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802bc7e:	3b30      	subs	r3, #48	@ 0x30
 802bc80:	2b09      	cmp	r3, #9
 802bc82:	d94b      	bls.n	802bd1c <_svfiprintf_r+0x17c>
 802bc84:	b1b0      	cbz	r0, 802bcb4 <_svfiprintf_r+0x114>
 802bc86:	9207      	str	r2, [sp, #28]
 802bc88:	e014      	b.n	802bcb4 <_svfiprintf_r+0x114>
 802bc8a:	eba0 0308 	sub.w	r3, r0, r8
 802bc8e:	fa09 f303 	lsl.w	r3, r9, r3
 802bc92:	4313      	orrs	r3, r2
 802bc94:	9304      	str	r3, [sp, #16]
 802bc96:	46a2      	mov	sl, r4
 802bc98:	e7d2      	b.n	802bc40 <_svfiprintf_r+0xa0>
 802bc9a:	9b03      	ldr	r3, [sp, #12]
 802bc9c:	1d19      	adds	r1, r3, #4
 802bc9e:	681b      	ldr	r3, [r3, #0]
 802bca0:	9103      	str	r1, [sp, #12]
 802bca2:	2b00      	cmp	r3, #0
 802bca4:	bfbb      	ittet	lt
 802bca6:	425b      	neglt	r3, r3
 802bca8:	f042 0202 	orrlt.w	r2, r2, #2
 802bcac:	9307      	strge	r3, [sp, #28]
 802bcae:	9307      	strlt	r3, [sp, #28]
 802bcb0:	bfb8      	it	lt
 802bcb2:	9204      	strlt	r2, [sp, #16]
 802bcb4:	7823      	ldrb	r3, [r4, #0]
 802bcb6:	2b2e      	cmp	r3, #46	@ 0x2e
 802bcb8:	d10a      	bne.n	802bcd0 <_svfiprintf_r+0x130>
 802bcba:	7863      	ldrb	r3, [r4, #1]
 802bcbc:	2b2a      	cmp	r3, #42	@ 0x2a
 802bcbe:	d132      	bne.n	802bd26 <_svfiprintf_r+0x186>
 802bcc0:	9b03      	ldr	r3, [sp, #12]
 802bcc2:	1d1a      	adds	r2, r3, #4
 802bcc4:	681b      	ldr	r3, [r3, #0]
 802bcc6:	9203      	str	r2, [sp, #12]
 802bcc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802bccc:	3402      	adds	r4, #2
 802bcce:	9305      	str	r3, [sp, #20]
 802bcd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802bd94 <_svfiprintf_r+0x1f4>
 802bcd4:	7821      	ldrb	r1, [r4, #0]
 802bcd6:	2203      	movs	r2, #3
 802bcd8:	4650      	mov	r0, sl
 802bcda:	f7d4 fa89 	bl	80001f0 <memchr>
 802bcde:	b138      	cbz	r0, 802bcf0 <_svfiprintf_r+0x150>
 802bce0:	9b04      	ldr	r3, [sp, #16]
 802bce2:	eba0 000a 	sub.w	r0, r0, sl
 802bce6:	2240      	movs	r2, #64	@ 0x40
 802bce8:	4082      	lsls	r2, r0
 802bcea:	4313      	orrs	r3, r2
 802bcec:	3401      	adds	r4, #1
 802bcee:	9304      	str	r3, [sp, #16]
 802bcf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bcf4:	4824      	ldr	r0, [pc, #144]	@ (802bd88 <_svfiprintf_r+0x1e8>)
 802bcf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802bcfa:	2206      	movs	r2, #6
 802bcfc:	f7d4 fa78 	bl	80001f0 <memchr>
 802bd00:	2800      	cmp	r0, #0
 802bd02:	d036      	beq.n	802bd72 <_svfiprintf_r+0x1d2>
 802bd04:	4b21      	ldr	r3, [pc, #132]	@ (802bd8c <_svfiprintf_r+0x1ec>)
 802bd06:	bb1b      	cbnz	r3, 802bd50 <_svfiprintf_r+0x1b0>
 802bd08:	9b03      	ldr	r3, [sp, #12]
 802bd0a:	3307      	adds	r3, #7
 802bd0c:	f023 0307 	bic.w	r3, r3, #7
 802bd10:	3308      	adds	r3, #8
 802bd12:	9303      	str	r3, [sp, #12]
 802bd14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bd16:	4433      	add	r3, r6
 802bd18:	9309      	str	r3, [sp, #36]	@ 0x24
 802bd1a:	e76a      	b.n	802bbf2 <_svfiprintf_r+0x52>
 802bd1c:	fb0c 3202 	mla	r2, ip, r2, r3
 802bd20:	460c      	mov	r4, r1
 802bd22:	2001      	movs	r0, #1
 802bd24:	e7a8      	b.n	802bc78 <_svfiprintf_r+0xd8>
 802bd26:	2300      	movs	r3, #0
 802bd28:	3401      	adds	r4, #1
 802bd2a:	9305      	str	r3, [sp, #20]
 802bd2c:	4619      	mov	r1, r3
 802bd2e:	f04f 0c0a 	mov.w	ip, #10
 802bd32:	4620      	mov	r0, r4
 802bd34:	f810 2b01 	ldrb.w	r2, [r0], #1
 802bd38:	3a30      	subs	r2, #48	@ 0x30
 802bd3a:	2a09      	cmp	r2, #9
 802bd3c:	d903      	bls.n	802bd46 <_svfiprintf_r+0x1a6>
 802bd3e:	2b00      	cmp	r3, #0
 802bd40:	d0c6      	beq.n	802bcd0 <_svfiprintf_r+0x130>
 802bd42:	9105      	str	r1, [sp, #20]
 802bd44:	e7c4      	b.n	802bcd0 <_svfiprintf_r+0x130>
 802bd46:	fb0c 2101 	mla	r1, ip, r1, r2
 802bd4a:	4604      	mov	r4, r0
 802bd4c:	2301      	movs	r3, #1
 802bd4e:	e7f0      	b.n	802bd32 <_svfiprintf_r+0x192>
 802bd50:	ab03      	add	r3, sp, #12
 802bd52:	9300      	str	r3, [sp, #0]
 802bd54:	462a      	mov	r2, r5
 802bd56:	4b0e      	ldr	r3, [pc, #56]	@ (802bd90 <_svfiprintf_r+0x1f0>)
 802bd58:	a904      	add	r1, sp, #16
 802bd5a:	4638      	mov	r0, r7
 802bd5c:	f3af 8000 	nop.w
 802bd60:	1c42      	adds	r2, r0, #1
 802bd62:	4606      	mov	r6, r0
 802bd64:	d1d6      	bne.n	802bd14 <_svfiprintf_r+0x174>
 802bd66:	89ab      	ldrh	r3, [r5, #12]
 802bd68:	065b      	lsls	r3, r3, #25
 802bd6a:	f53f af2d 	bmi.w	802bbc8 <_svfiprintf_r+0x28>
 802bd6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802bd70:	e72c      	b.n	802bbcc <_svfiprintf_r+0x2c>
 802bd72:	ab03      	add	r3, sp, #12
 802bd74:	9300      	str	r3, [sp, #0]
 802bd76:	462a      	mov	r2, r5
 802bd78:	4b05      	ldr	r3, [pc, #20]	@ (802bd90 <_svfiprintf_r+0x1f0>)
 802bd7a:	a904      	add	r1, sp, #16
 802bd7c:	4638      	mov	r0, r7
 802bd7e:	f000 f9bb 	bl	802c0f8 <_printf_i>
 802bd82:	e7ed      	b.n	802bd60 <_svfiprintf_r+0x1c0>
 802bd84:	0802f260 	.word	0x0802f260
 802bd88:	0802f26a 	.word	0x0802f26a
 802bd8c:	00000000 	.word	0x00000000
 802bd90:	0802bae9 	.word	0x0802bae9
 802bd94:	0802f266 	.word	0x0802f266

0802bd98 <__sfputc_r>:
 802bd98:	6893      	ldr	r3, [r2, #8]
 802bd9a:	3b01      	subs	r3, #1
 802bd9c:	2b00      	cmp	r3, #0
 802bd9e:	b410      	push	{r4}
 802bda0:	6093      	str	r3, [r2, #8]
 802bda2:	da08      	bge.n	802bdb6 <__sfputc_r+0x1e>
 802bda4:	6994      	ldr	r4, [r2, #24]
 802bda6:	42a3      	cmp	r3, r4
 802bda8:	db01      	blt.n	802bdae <__sfputc_r+0x16>
 802bdaa:	290a      	cmp	r1, #10
 802bdac:	d103      	bne.n	802bdb6 <__sfputc_r+0x1e>
 802bdae:	f85d 4b04 	ldr.w	r4, [sp], #4
 802bdb2:	f000 bb6d 	b.w	802c490 <__swbuf_r>
 802bdb6:	6813      	ldr	r3, [r2, #0]
 802bdb8:	1c58      	adds	r0, r3, #1
 802bdba:	6010      	str	r0, [r2, #0]
 802bdbc:	7019      	strb	r1, [r3, #0]
 802bdbe:	4608      	mov	r0, r1
 802bdc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 802bdc4:	4770      	bx	lr

0802bdc6 <__sfputs_r>:
 802bdc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bdc8:	4606      	mov	r6, r0
 802bdca:	460f      	mov	r7, r1
 802bdcc:	4614      	mov	r4, r2
 802bdce:	18d5      	adds	r5, r2, r3
 802bdd0:	42ac      	cmp	r4, r5
 802bdd2:	d101      	bne.n	802bdd8 <__sfputs_r+0x12>
 802bdd4:	2000      	movs	r0, #0
 802bdd6:	e007      	b.n	802bde8 <__sfputs_r+0x22>
 802bdd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bddc:	463a      	mov	r2, r7
 802bdde:	4630      	mov	r0, r6
 802bde0:	f7ff ffda 	bl	802bd98 <__sfputc_r>
 802bde4:	1c43      	adds	r3, r0, #1
 802bde6:	d1f3      	bne.n	802bdd0 <__sfputs_r+0xa>
 802bde8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802bdec <_vfiprintf_r>:
 802bdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bdf0:	460d      	mov	r5, r1
 802bdf2:	b09d      	sub	sp, #116	@ 0x74
 802bdf4:	4614      	mov	r4, r2
 802bdf6:	4698      	mov	r8, r3
 802bdf8:	4606      	mov	r6, r0
 802bdfa:	b118      	cbz	r0, 802be04 <_vfiprintf_r+0x18>
 802bdfc:	6a03      	ldr	r3, [r0, #32]
 802bdfe:	b90b      	cbnz	r3, 802be04 <_vfiprintf_r+0x18>
 802be00:	f7ff fc42 	bl	802b688 <__sinit>
 802be04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802be06:	07d9      	lsls	r1, r3, #31
 802be08:	d405      	bmi.n	802be16 <_vfiprintf_r+0x2a>
 802be0a:	89ab      	ldrh	r3, [r5, #12]
 802be0c:	059a      	lsls	r2, r3, #22
 802be0e:	d402      	bmi.n	802be16 <_vfiprintf_r+0x2a>
 802be10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802be12:	f7ff fdb2 	bl	802b97a <__retarget_lock_acquire_recursive>
 802be16:	89ab      	ldrh	r3, [r5, #12]
 802be18:	071b      	lsls	r3, r3, #28
 802be1a:	d501      	bpl.n	802be20 <_vfiprintf_r+0x34>
 802be1c:	692b      	ldr	r3, [r5, #16]
 802be1e:	b99b      	cbnz	r3, 802be48 <_vfiprintf_r+0x5c>
 802be20:	4629      	mov	r1, r5
 802be22:	4630      	mov	r0, r6
 802be24:	f000 fb72 	bl	802c50c <__swsetup_r>
 802be28:	b170      	cbz	r0, 802be48 <_vfiprintf_r+0x5c>
 802be2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802be2c:	07dc      	lsls	r4, r3, #31
 802be2e:	d504      	bpl.n	802be3a <_vfiprintf_r+0x4e>
 802be30:	f04f 30ff 	mov.w	r0, #4294967295
 802be34:	b01d      	add	sp, #116	@ 0x74
 802be36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802be3a:	89ab      	ldrh	r3, [r5, #12]
 802be3c:	0598      	lsls	r0, r3, #22
 802be3e:	d4f7      	bmi.n	802be30 <_vfiprintf_r+0x44>
 802be40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802be42:	f7ff fd9b 	bl	802b97c <__retarget_lock_release_recursive>
 802be46:	e7f3      	b.n	802be30 <_vfiprintf_r+0x44>
 802be48:	2300      	movs	r3, #0
 802be4a:	9309      	str	r3, [sp, #36]	@ 0x24
 802be4c:	2320      	movs	r3, #32
 802be4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802be52:	f8cd 800c 	str.w	r8, [sp, #12]
 802be56:	2330      	movs	r3, #48	@ 0x30
 802be58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802c008 <_vfiprintf_r+0x21c>
 802be5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802be60:	f04f 0901 	mov.w	r9, #1
 802be64:	4623      	mov	r3, r4
 802be66:	469a      	mov	sl, r3
 802be68:	f813 2b01 	ldrb.w	r2, [r3], #1
 802be6c:	b10a      	cbz	r2, 802be72 <_vfiprintf_r+0x86>
 802be6e:	2a25      	cmp	r2, #37	@ 0x25
 802be70:	d1f9      	bne.n	802be66 <_vfiprintf_r+0x7a>
 802be72:	ebba 0b04 	subs.w	fp, sl, r4
 802be76:	d00b      	beq.n	802be90 <_vfiprintf_r+0xa4>
 802be78:	465b      	mov	r3, fp
 802be7a:	4622      	mov	r2, r4
 802be7c:	4629      	mov	r1, r5
 802be7e:	4630      	mov	r0, r6
 802be80:	f7ff ffa1 	bl	802bdc6 <__sfputs_r>
 802be84:	3001      	adds	r0, #1
 802be86:	f000 80a7 	beq.w	802bfd8 <_vfiprintf_r+0x1ec>
 802be8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802be8c:	445a      	add	r2, fp
 802be8e:	9209      	str	r2, [sp, #36]	@ 0x24
 802be90:	f89a 3000 	ldrb.w	r3, [sl]
 802be94:	2b00      	cmp	r3, #0
 802be96:	f000 809f 	beq.w	802bfd8 <_vfiprintf_r+0x1ec>
 802be9a:	2300      	movs	r3, #0
 802be9c:	f04f 32ff 	mov.w	r2, #4294967295
 802bea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802bea4:	f10a 0a01 	add.w	sl, sl, #1
 802bea8:	9304      	str	r3, [sp, #16]
 802beaa:	9307      	str	r3, [sp, #28]
 802beac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802beb0:	931a      	str	r3, [sp, #104]	@ 0x68
 802beb2:	4654      	mov	r4, sl
 802beb4:	2205      	movs	r2, #5
 802beb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802beba:	4853      	ldr	r0, [pc, #332]	@ (802c008 <_vfiprintf_r+0x21c>)
 802bebc:	f7d4 f998 	bl	80001f0 <memchr>
 802bec0:	9a04      	ldr	r2, [sp, #16]
 802bec2:	b9d8      	cbnz	r0, 802befc <_vfiprintf_r+0x110>
 802bec4:	06d1      	lsls	r1, r2, #27
 802bec6:	bf44      	itt	mi
 802bec8:	2320      	movmi	r3, #32
 802beca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802bece:	0713      	lsls	r3, r2, #28
 802bed0:	bf44      	itt	mi
 802bed2:	232b      	movmi	r3, #43	@ 0x2b
 802bed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802bed8:	f89a 3000 	ldrb.w	r3, [sl]
 802bedc:	2b2a      	cmp	r3, #42	@ 0x2a
 802bede:	d015      	beq.n	802bf0c <_vfiprintf_r+0x120>
 802bee0:	9a07      	ldr	r2, [sp, #28]
 802bee2:	4654      	mov	r4, sl
 802bee4:	2000      	movs	r0, #0
 802bee6:	f04f 0c0a 	mov.w	ip, #10
 802beea:	4621      	mov	r1, r4
 802beec:	f811 3b01 	ldrb.w	r3, [r1], #1
 802bef0:	3b30      	subs	r3, #48	@ 0x30
 802bef2:	2b09      	cmp	r3, #9
 802bef4:	d94b      	bls.n	802bf8e <_vfiprintf_r+0x1a2>
 802bef6:	b1b0      	cbz	r0, 802bf26 <_vfiprintf_r+0x13a>
 802bef8:	9207      	str	r2, [sp, #28]
 802befa:	e014      	b.n	802bf26 <_vfiprintf_r+0x13a>
 802befc:	eba0 0308 	sub.w	r3, r0, r8
 802bf00:	fa09 f303 	lsl.w	r3, r9, r3
 802bf04:	4313      	orrs	r3, r2
 802bf06:	9304      	str	r3, [sp, #16]
 802bf08:	46a2      	mov	sl, r4
 802bf0a:	e7d2      	b.n	802beb2 <_vfiprintf_r+0xc6>
 802bf0c:	9b03      	ldr	r3, [sp, #12]
 802bf0e:	1d19      	adds	r1, r3, #4
 802bf10:	681b      	ldr	r3, [r3, #0]
 802bf12:	9103      	str	r1, [sp, #12]
 802bf14:	2b00      	cmp	r3, #0
 802bf16:	bfbb      	ittet	lt
 802bf18:	425b      	neglt	r3, r3
 802bf1a:	f042 0202 	orrlt.w	r2, r2, #2
 802bf1e:	9307      	strge	r3, [sp, #28]
 802bf20:	9307      	strlt	r3, [sp, #28]
 802bf22:	bfb8      	it	lt
 802bf24:	9204      	strlt	r2, [sp, #16]
 802bf26:	7823      	ldrb	r3, [r4, #0]
 802bf28:	2b2e      	cmp	r3, #46	@ 0x2e
 802bf2a:	d10a      	bne.n	802bf42 <_vfiprintf_r+0x156>
 802bf2c:	7863      	ldrb	r3, [r4, #1]
 802bf2e:	2b2a      	cmp	r3, #42	@ 0x2a
 802bf30:	d132      	bne.n	802bf98 <_vfiprintf_r+0x1ac>
 802bf32:	9b03      	ldr	r3, [sp, #12]
 802bf34:	1d1a      	adds	r2, r3, #4
 802bf36:	681b      	ldr	r3, [r3, #0]
 802bf38:	9203      	str	r2, [sp, #12]
 802bf3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802bf3e:	3402      	adds	r4, #2
 802bf40:	9305      	str	r3, [sp, #20]
 802bf42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802c018 <_vfiprintf_r+0x22c>
 802bf46:	7821      	ldrb	r1, [r4, #0]
 802bf48:	2203      	movs	r2, #3
 802bf4a:	4650      	mov	r0, sl
 802bf4c:	f7d4 f950 	bl	80001f0 <memchr>
 802bf50:	b138      	cbz	r0, 802bf62 <_vfiprintf_r+0x176>
 802bf52:	9b04      	ldr	r3, [sp, #16]
 802bf54:	eba0 000a 	sub.w	r0, r0, sl
 802bf58:	2240      	movs	r2, #64	@ 0x40
 802bf5a:	4082      	lsls	r2, r0
 802bf5c:	4313      	orrs	r3, r2
 802bf5e:	3401      	adds	r4, #1
 802bf60:	9304      	str	r3, [sp, #16]
 802bf62:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bf66:	4829      	ldr	r0, [pc, #164]	@ (802c00c <_vfiprintf_r+0x220>)
 802bf68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802bf6c:	2206      	movs	r2, #6
 802bf6e:	f7d4 f93f 	bl	80001f0 <memchr>
 802bf72:	2800      	cmp	r0, #0
 802bf74:	d03f      	beq.n	802bff6 <_vfiprintf_r+0x20a>
 802bf76:	4b26      	ldr	r3, [pc, #152]	@ (802c010 <_vfiprintf_r+0x224>)
 802bf78:	bb1b      	cbnz	r3, 802bfc2 <_vfiprintf_r+0x1d6>
 802bf7a:	9b03      	ldr	r3, [sp, #12]
 802bf7c:	3307      	adds	r3, #7
 802bf7e:	f023 0307 	bic.w	r3, r3, #7
 802bf82:	3308      	adds	r3, #8
 802bf84:	9303      	str	r3, [sp, #12]
 802bf86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bf88:	443b      	add	r3, r7
 802bf8a:	9309      	str	r3, [sp, #36]	@ 0x24
 802bf8c:	e76a      	b.n	802be64 <_vfiprintf_r+0x78>
 802bf8e:	fb0c 3202 	mla	r2, ip, r2, r3
 802bf92:	460c      	mov	r4, r1
 802bf94:	2001      	movs	r0, #1
 802bf96:	e7a8      	b.n	802beea <_vfiprintf_r+0xfe>
 802bf98:	2300      	movs	r3, #0
 802bf9a:	3401      	adds	r4, #1
 802bf9c:	9305      	str	r3, [sp, #20]
 802bf9e:	4619      	mov	r1, r3
 802bfa0:	f04f 0c0a 	mov.w	ip, #10
 802bfa4:	4620      	mov	r0, r4
 802bfa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 802bfaa:	3a30      	subs	r2, #48	@ 0x30
 802bfac:	2a09      	cmp	r2, #9
 802bfae:	d903      	bls.n	802bfb8 <_vfiprintf_r+0x1cc>
 802bfb0:	2b00      	cmp	r3, #0
 802bfb2:	d0c6      	beq.n	802bf42 <_vfiprintf_r+0x156>
 802bfb4:	9105      	str	r1, [sp, #20]
 802bfb6:	e7c4      	b.n	802bf42 <_vfiprintf_r+0x156>
 802bfb8:	fb0c 2101 	mla	r1, ip, r1, r2
 802bfbc:	4604      	mov	r4, r0
 802bfbe:	2301      	movs	r3, #1
 802bfc0:	e7f0      	b.n	802bfa4 <_vfiprintf_r+0x1b8>
 802bfc2:	ab03      	add	r3, sp, #12
 802bfc4:	9300      	str	r3, [sp, #0]
 802bfc6:	462a      	mov	r2, r5
 802bfc8:	4b12      	ldr	r3, [pc, #72]	@ (802c014 <_vfiprintf_r+0x228>)
 802bfca:	a904      	add	r1, sp, #16
 802bfcc:	4630      	mov	r0, r6
 802bfce:	f3af 8000 	nop.w
 802bfd2:	4607      	mov	r7, r0
 802bfd4:	1c78      	adds	r0, r7, #1
 802bfd6:	d1d6      	bne.n	802bf86 <_vfiprintf_r+0x19a>
 802bfd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802bfda:	07d9      	lsls	r1, r3, #31
 802bfdc:	d405      	bmi.n	802bfea <_vfiprintf_r+0x1fe>
 802bfde:	89ab      	ldrh	r3, [r5, #12]
 802bfe0:	059a      	lsls	r2, r3, #22
 802bfe2:	d402      	bmi.n	802bfea <_vfiprintf_r+0x1fe>
 802bfe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802bfe6:	f7ff fcc9 	bl	802b97c <__retarget_lock_release_recursive>
 802bfea:	89ab      	ldrh	r3, [r5, #12]
 802bfec:	065b      	lsls	r3, r3, #25
 802bfee:	f53f af1f 	bmi.w	802be30 <_vfiprintf_r+0x44>
 802bff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802bff4:	e71e      	b.n	802be34 <_vfiprintf_r+0x48>
 802bff6:	ab03      	add	r3, sp, #12
 802bff8:	9300      	str	r3, [sp, #0]
 802bffa:	462a      	mov	r2, r5
 802bffc:	4b05      	ldr	r3, [pc, #20]	@ (802c014 <_vfiprintf_r+0x228>)
 802bffe:	a904      	add	r1, sp, #16
 802c000:	4630      	mov	r0, r6
 802c002:	f000 f879 	bl	802c0f8 <_printf_i>
 802c006:	e7e4      	b.n	802bfd2 <_vfiprintf_r+0x1e6>
 802c008:	0802f260 	.word	0x0802f260
 802c00c:	0802f26a 	.word	0x0802f26a
 802c010:	00000000 	.word	0x00000000
 802c014:	0802bdc7 	.word	0x0802bdc7
 802c018:	0802f266 	.word	0x0802f266

0802c01c <_printf_common>:
 802c01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c020:	4616      	mov	r6, r2
 802c022:	4698      	mov	r8, r3
 802c024:	688a      	ldr	r2, [r1, #8]
 802c026:	690b      	ldr	r3, [r1, #16]
 802c028:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802c02c:	4293      	cmp	r3, r2
 802c02e:	bfb8      	it	lt
 802c030:	4613      	movlt	r3, r2
 802c032:	6033      	str	r3, [r6, #0]
 802c034:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802c038:	4607      	mov	r7, r0
 802c03a:	460c      	mov	r4, r1
 802c03c:	b10a      	cbz	r2, 802c042 <_printf_common+0x26>
 802c03e:	3301      	adds	r3, #1
 802c040:	6033      	str	r3, [r6, #0]
 802c042:	6823      	ldr	r3, [r4, #0]
 802c044:	0699      	lsls	r1, r3, #26
 802c046:	bf42      	ittt	mi
 802c048:	6833      	ldrmi	r3, [r6, #0]
 802c04a:	3302      	addmi	r3, #2
 802c04c:	6033      	strmi	r3, [r6, #0]
 802c04e:	6825      	ldr	r5, [r4, #0]
 802c050:	f015 0506 	ands.w	r5, r5, #6
 802c054:	d106      	bne.n	802c064 <_printf_common+0x48>
 802c056:	f104 0a19 	add.w	sl, r4, #25
 802c05a:	68e3      	ldr	r3, [r4, #12]
 802c05c:	6832      	ldr	r2, [r6, #0]
 802c05e:	1a9b      	subs	r3, r3, r2
 802c060:	42ab      	cmp	r3, r5
 802c062:	dc26      	bgt.n	802c0b2 <_printf_common+0x96>
 802c064:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802c068:	6822      	ldr	r2, [r4, #0]
 802c06a:	3b00      	subs	r3, #0
 802c06c:	bf18      	it	ne
 802c06e:	2301      	movne	r3, #1
 802c070:	0692      	lsls	r2, r2, #26
 802c072:	d42b      	bmi.n	802c0cc <_printf_common+0xb0>
 802c074:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802c078:	4641      	mov	r1, r8
 802c07a:	4638      	mov	r0, r7
 802c07c:	47c8      	blx	r9
 802c07e:	3001      	adds	r0, #1
 802c080:	d01e      	beq.n	802c0c0 <_printf_common+0xa4>
 802c082:	6823      	ldr	r3, [r4, #0]
 802c084:	6922      	ldr	r2, [r4, #16]
 802c086:	f003 0306 	and.w	r3, r3, #6
 802c08a:	2b04      	cmp	r3, #4
 802c08c:	bf02      	ittt	eq
 802c08e:	68e5      	ldreq	r5, [r4, #12]
 802c090:	6833      	ldreq	r3, [r6, #0]
 802c092:	1aed      	subeq	r5, r5, r3
 802c094:	68a3      	ldr	r3, [r4, #8]
 802c096:	bf0c      	ite	eq
 802c098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802c09c:	2500      	movne	r5, #0
 802c09e:	4293      	cmp	r3, r2
 802c0a0:	bfc4      	itt	gt
 802c0a2:	1a9b      	subgt	r3, r3, r2
 802c0a4:	18ed      	addgt	r5, r5, r3
 802c0a6:	2600      	movs	r6, #0
 802c0a8:	341a      	adds	r4, #26
 802c0aa:	42b5      	cmp	r5, r6
 802c0ac:	d11a      	bne.n	802c0e4 <_printf_common+0xc8>
 802c0ae:	2000      	movs	r0, #0
 802c0b0:	e008      	b.n	802c0c4 <_printf_common+0xa8>
 802c0b2:	2301      	movs	r3, #1
 802c0b4:	4652      	mov	r2, sl
 802c0b6:	4641      	mov	r1, r8
 802c0b8:	4638      	mov	r0, r7
 802c0ba:	47c8      	blx	r9
 802c0bc:	3001      	adds	r0, #1
 802c0be:	d103      	bne.n	802c0c8 <_printf_common+0xac>
 802c0c0:	f04f 30ff 	mov.w	r0, #4294967295
 802c0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c0c8:	3501      	adds	r5, #1
 802c0ca:	e7c6      	b.n	802c05a <_printf_common+0x3e>
 802c0cc:	18e1      	adds	r1, r4, r3
 802c0ce:	1c5a      	adds	r2, r3, #1
 802c0d0:	2030      	movs	r0, #48	@ 0x30
 802c0d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802c0d6:	4422      	add	r2, r4
 802c0d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802c0dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802c0e0:	3302      	adds	r3, #2
 802c0e2:	e7c7      	b.n	802c074 <_printf_common+0x58>
 802c0e4:	2301      	movs	r3, #1
 802c0e6:	4622      	mov	r2, r4
 802c0e8:	4641      	mov	r1, r8
 802c0ea:	4638      	mov	r0, r7
 802c0ec:	47c8      	blx	r9
 802c0ee:	3001      	adds	r0, #1
 802c0f0:	d0e6      	beq.n	802c0c0 <_printf_common+0xa4>
 802c0f2:	3601      	adds	r6, #1
 802c0f4:	e7d9      	b.n	802c0aa <_printf_common+0x8e>
	...

0802c0f8 <_printf_i>:
 802c0f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c0fc:	7e0f      	ldrb	r7, [r1, #24]
 802c0fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802c100:	2f78      	cmp	r7, #120	@ 0x78
 802c102:	4691      	mov	r9, r2
 802c104:	4680      	mov	r8, r0
 802c106:	460c      	mov	r4, r1
 802c108:	469a      	mov	sl, r3
 802c10a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802c10e:	d807      	bhi.n	802c120 <_printf_i+0x28>
 802c110:	2f62      	cmp	r7, #98	@ 0x62
 802c112:	d80a      	bhi.n	802c12a <_printf_i+0x32>
 802c114:	2f00      	cmp	r7, #0
 802c116:	f000 80d2 	beq.w	802c2be <_printf_i+0x1c6>
 802c11a:	2f58      	cmp	r7, #88	@ 0x58
 802c11c:	f000 80b9 	beq.w	802c292 <_printf_i+0x19a>
 802c120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802c124:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802c128:	e03a      	b.n	802c1a0 <_printf_i+0xa8>
 802c12a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802c12e:	2b15      	cmp	r3, #21
 802c130:	d8f6      	bhi.n	802c120 <_printf_i+0x28>
 802c132:	a101      	add	r1, pc, #4	@ (adr r1, 802c138 <_printf_i+0x40>)
 802c134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802c138:	0802c191 	.word	0x0802c191
 802c13c:	0802c1a5 	.word	0x0802c1a5
 802c140:	0802c121 	.word	0x0802c121
 802c144:	0802c121 	.word	0x0802c121
 802c148:	0802c121 	.word	0x0802c121
 802c14c:	0802c121 	.word	0x0802c121
 802c150:	0802c1a5 	.word	0x0802c1a5
 802c154:	0802c121 	.word	0x0802c121
 802c158:	0802c121 	.word	0x0802c121
 802c15c:	0802c121 	.word	0x0802c121
 802c160:	0802c121 	.word	0x0802c121
 802c164:	0802c2a5 	.word	0x0802c2a5
 802c168:	0802c1cf 	.word	0x0802c1cf
 802c16c:	0802c25f 	.word	0x0802c25f
 802c170:	0802c121 	.word	0x0802c121
 802c174:	0802c121 	.word	0x0802c121
 802c178:	0802c2c7 	.word	0x0802c2c7
 802c17c:	0802c121 	.word	0x0802c121
 802c180:	0802c1cf 	.word	0x0802c1cf
 802c184:	0802c121 	.word	0x0802c121
 802c188:	0802c121 	.word	0x0802c121
 802c18c:	0802c267 	.word	0x0802c267
 802c190:	6833      	ldr	r3, [r6, #0]
 802c192:	1d1a      	adds	r2, r3, #4
 802c194:	681b      	ldr	r3, [r3, #0]
 802c196:	6032      	str	r2, [r6, #0]
 802c198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802c19c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802c1a0:	2301      	movs	r3, #1
 802c1a2:	e09d      	b.n	802c2e0 <_printf_i+0x1e8>
 802c1a4:	6833      	ldr	r3, [r6, #0]
 802c1a6:	6820      	ldr	r0, [r4, #0]
 802c1a8:	1d19      	adds	r1, r3, #4
 802c1aa:	6031      	str	r1, [r6, #0]
 802c1ac:	0606      	lsls	r6, r0, #24
 802c1ae:	d501      	bpl.n	802c1b4 <_printf_i+0xbc>
 802c1b0:	681d      	ldr	r5, [r3, #0]
 802c1b2:	e003      	b.n	802c1bc <_printf_i+0xc4>
 802c1b4:	0645      	lsls	r5, r0, #25
 802c1b6:	d5fb      	bpl.n	802c1b0 <_printf_i+0xb8>
 802c1b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 802c1bc:	2d00      	cmp	r5, #0
 802c1be:	da03      	bge.n	802c1c8 <_printf_i+0xd0>
 802c1c0:	232d      	movs	r3, #45	@ 0x2d
 802c1c2:	426d      	negs	r5, r5
 802c1c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802c1c8:	4859      	ldr	r0, [pc, #356]	@ (802c330 <_printf_i+0x238>)
 802c1ca:	230a      	movs	r3, #10
 802c1cc:	e011      	b.n	802c1f2 <_printf_i+0xfa>
 802c1ce:	6821      	ldr	r1, [r4, #0]
 802c1d0:	6833      	ldr	r3, [r6, #0]
 802c1d2:	0608      	lsls	r0, r1, #24
 802c1d4:	f853 5b04 	ldr.w	r5, [r3], #4
 802c1d8:	d402      	bmi.n	802c1e0 <_printf_i+0xe8>
 802c1da:	0649      	lsls	r1, r1, #25
 802c1dc:	bf48      	it	mi
 802c1de:	b2ad      	uxthmi	r5, r5
 802c1e0:	2f6f      	cmp	r7, #111	@ 0x6f
 802c1e2:	4853      	ldr	r0, [pc, #332]	@ (802c330 <_printf_i+0x238>)
 802c1e4:	6033      	str	r3, [r6, #0]
 802c1e6:	bf14      	ite	ne
 802c1e8:	230a      	movne	r3, #10
 802c1ea:	2308      	moveq	r3, #8
 802c1ec:	2100      	movs	r1, #0
 802c1ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802c1f2:	6866      	ldr	r6, [r4, #4]
 802c1f4:	60a6      	str	r6, [r4, #8]
 802c1f6:	2e00      	cmp	r6, #0
 802c1f8:	bfa2      	ittt	ge
 802c1fa:	6821      	ldrge	r1, [r4, #0]
 802c1fc:	f021 0104 	bicge.w	r1, r1, #4
 802c200:	6021      	strge	r1, [r4, #0]
 802c202:	b90d      	cbnz	r5, 802c208 <_printf_i+0x110>
 802c204:	2e00      	cmp	r6, #0
 802c206:	d04b      	beq.n	802c2a0 <_printf_i+0x1a8>
 802c208:	4616      	mov	r6, r2
 802c20a:	fbb5 f1f3 	udiv	r1, r5, r3
 802c20e:	fb03 5711 	mls	r7, r3, r1, r5
 802c212:	5dc7      	ldrb	r7, [r0, r7]
 802c214:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802c218:	462f      	mov	r7, r5
 802c21a:	42bb      	cmp	r3, r7
 802c21c:	460d      	mov	r5, r1
 802c21e:	d9f4      	bls.n	802c20a <_printf_i+0x112>
 802c220:	2b08      	cmp	r3, #8
 802c222:	d10b      	bne.n	802c23c <_printf_i+0x144>
 802c224:	6823      	ldr	r3, [r4, #0]
 802c226:	07df      	lsls	r7, r3, #31
 802c228:	d508      	bpl.n	802c23c <_printf_i+0x144>
 802c22a:	6923      	ldr	r3, [r4, #16]
 802c22c:	6861      	ldr	r1, [r4, #4]
 802c22e:	4299      	cmp	r1, r3
 802c230:	bfde      	ittt	le
 802c232:	2330      	movle	r3, #48	@ 0x30
 802c234:	f806 3c01 	strble.w	r3, [r6, #-1]
 802c238:	f106 36ff 	addle.w	r6, r6, #4294967295
 802c23c:	1b92      	subs	r2, r2, r6
 802c23e:	6122      	str	r2, [r4, #16]
 802c240:	f8cd a000 	str.w	sl, [sp]
 802c244:	464b      	mov	r3, r9
 802c246:	aa03      	add	r2, sp, #12
 802c248:	4621      	mov	r1, r4
 802c24a:	4640      	mov	r0, r8
 802c24c:	f7ff fee6 	bl	802c01c <_printf_common>
 802c250:	3001      	adds	r0, #1
 802c252:	d14a      	bne.n	802c2ea <_printf_i+0x1f2>
 802c254:	f04f 30ff 	mov.w	r0, #4294967295
 802c258:	b004      	add	sp, #16
 802c25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c25e:	6823      	ldr	r3, [r4, #0]
 802c260:	f043 0320 	orr.w	r3, r3, #32
 802c264:	6023      	str	r3, [r4, #0]
 802c266:	4833      	ldr	r0, [pc, #204]	@ (802c334 <_printf_i+0x23c>)
 802c268:	2778      	movs	r7, #120	@ 0x78
 802c26a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802c26e:	6823      	ldr	r3, [r4, #0]
 802c270:	6831      	ldr	r1, [r6, #0]
 802c272:	061f      	lsls	r7, r3, #24
 802c274:	f851 5b04 	ldr.w	r5, [r1], #4
 802c278:	d402      	bmi.n	802c280 <_printf_i+0x188>
 802c27a:	065f      	lsls	r7, r3, #25
 802c27c:	bf48      	it	mi
 802c27e:	b2ad      	uxthmi	r5, r5
 802c280:	6031      	str	r1, [r6, #0]
 802c282:	07d9      	lsls	r1, r3, #31
 802c284:	bf44      	itt	mi
 802c286:	f043 0320 	orrmi.w	r3, r3, #32
 802c28a:	6023      	strmi	r3, [r4, #0]
 802c28c:	b11d      	cbz	r5, 802c296 <_printf_i+0x19e>
 802c28e:	2310      	movs	r3, #16
 802c290:	e7ac      	b.n	802c1ec <_printf_i+0xf4>
 802c292:	4827      	ldr	r0, [pc, #156]	@ (802c330 <_printf_i+0x238>)
 802c294:	e7e9      	b.n	802c26a <_printf_i+0x172>
 802c296:	6823      	ldr	r3, [r4, #0]
 802c298:	f023 0320 	bic.w	r3, r3, #32
 802c29c:	6023      	str	r3, [r4, #0]
 802c29e:	e7f6      	b.n	802c28e <_printf_i+0x196>
 802c2a0:	4616      	mov	r6, r2
 802c2a2:	e7bd      	b.n	802c220 <_printf_i+0x128>
 802c2a4:	6833      	ldr	r3, [r6, #0]
 802c2a6:	6825      	ldr	r5, [r4, #0]
 802c2a8:	6961      	ldr	r1, [r4, #20]
 802c2aa:	1d18      	adds	r0, r3, #4
 802c2ac:	6030      	str	r0, [r6, #0]
 802c2ae:	062e      	lsls	r6, r5, #24
 802c2b0:	681b      	ldr	r3, [r3, #0]
 802c2b2:	d501      	bpl.n	802c2b8 <_printf_i+0x1c0>
 802c2b4:	6019      	str	r1, [r3, #0]
 802c2b6:	e002      	b.n	802c2be <_printf_i+0x1c6>
 802c2b8:	0668      	lsls	r0, r5, #25
 802c2ba:	d5fb      	bpl.n	802c2b4 <_printf_i+0x1bc>
 802c2bc:	8019      	strh	r1, [r3, #0]
 802c2be:	2300      	movs	r3, #0
 802c2c0:	6123      	str	r3, [r4, #16]
 802c2c2:	4616      	mov	r6, r2
 802c2c4:	e7bc      	b.n	802c240 <_printf_i+0x148>
 802c2c6:	6833      	ldr	r3, [r6, #0]
 802c2c8:	1d1a      	adds	r2, r3, #4
 802c2ca:	6032      	str	r2, [r6, #0]
 802c2cc:	681e      	ldr	r6, [r3, #0]
 802c2ce:	6862      	ldr	r2, [r4, #4]
 802c2d0:	2100      	movs	r1, #0
 802c2d2:	4630      	mov	r0, r6
 802c2d4:	f7d3 ff8c 	bl	80001f0 <memchr>
 802c2d8:	b108      	cbz	r0, 802c2de <_printf_i+0x1e6>
 802c2da:	1b80      	subs	r0, r0, r6
 802c2dc:	6060      	str	r0, [r4, #4]
 802c2de:	6863      	ldr	r3, [r4, #4]
 802c2e0:	6123      	str	r3, [r4, #16]
 802c2e2:	2300      	movs	r3, #0
 802c2e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802c2e8:	e7aa      	b.n	802c240 <_printf_i+0x148>
 802c2ea:	6923      	ldr	r3, [r4, #16]
 802c2ec:	4632      	mov	r2, r6
 802c2ee:	4649      	mov	r1, r9
 802c2f0:	4640      	mov	r0, r8
 802c2f2:	47d0      	blx	sl
 802c2f4:	3001      	adds	r0, #1
 802c2f6:	d0ad      	beq.n	802c254 <_printf_i+0x15c>
 802c2f8:	6823      	ldr	r3, [r4, #0]
 802c2fa:	079b      	lsls	r3, r3, #30
 802c2fc:	d413      	bmi.n	802c326 <_printf_i+0x22e>
 802c2fe:	68e0      	ldr	r0, [r4, #12]
 802c300:	9b03      	ldr	r3, [sp, #12]
 802c302:	4298      	cmp	r0, r3
 802c304:	bfb8      	it	lt
 802c306:	4618      	movlt	r0, r3
 802c308:	e7a6      	b.n	802c258 <_printf_i+0x160>
 802c30a:	2301      	movs	r3, #1
 802c30c:	4632      	mov	r2, r6
 802c30e:	4649      	mov	r1, r9
 802c310:	4640      	mov	r0, r8
 802c312:	47d0      	blx	sl
 802c314:	3001      	adds	r0, #1
 802c316:	d09d      	beq.n	802c254 <_printf_i+0x15c>
 802c318:	3501      	adds	r5, #1
 802c31a:	68e3      	ldr	r3, [r4, #12]
 802c31c:	9903      	ldr	r1, [sp, #12]
 802c31e:	1a5b      	subs	r3, r3, r1
 802c320:	42ab      	cmp	r3, r5
 802c322:	dcf2      	bgt.n	802c30a <_printf_i+0x212>
 802c324:	e7eb      	b.n	802c2fe <_printf_i+0x206>
 802c326:	2500      	movs	r5, #0
 802c328:	f104 0619 	add.w	r6, r4, #25
 802c32c:	e7f5      	b.n	802c31a <_printf_i+0x222>
 802c32e:	bf00      	nop
 802c330:	0802f271 	.word	0x0802f271
 802c334:	0802f282 	.word	0x0802f282

0802c338 <__sflush_r>:
 802c338:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802c33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c340:	0716      	lsls	r6, r2, #28
 802c342:	4605      	mov	r5, r0
 802c344:	460c      	mov	r4, r1
 802c346:	d454      	bmi.n	802c3f2 <__sflush_r+0xba>
 802c348:	684b      	ldr	r3, [r1, #4]
 802c34a:	2b00      	cmp	r3, #0
 802c34c:	dc02      	bgt.n	802c354 <__sflush_r+0x1c>
 802c34e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802c350:	2b00      	cmp	r3, #0
 802c352:	dd48      	ble.n	802c3e6 <__sflush_r+0xae>
 802c354:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802c356:	2e00      	cmp	r6, #0
 802c358:	d045      	beq.n	802c3e6 <__sflush_r+0xae>
 802c35a:	2300      	movs	r3, #0
 802c35c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802c360:	682f      	ldr	r7, [r5, #0]
 802c362:	6a21      	ldr	r1, [r4, #32]
 802c364:	602b      	str	r3, [r5, #0]
 802c366:	d030      	beq.n	802c3ca <__sflush_r+0x92>
 802c368:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802c36a:	89a3      	ldrh	r3, [r4, #12]
 802c36c:	0759      	lsls	r1, r3, #29
 802c36e:	d505      	bpl.n	802c37c <__sflush_r+0x44>
 802c370:	6863      	ldr	r3, [r4, #4]
 802c372:	1ad2      	subs	r2, r2, r3
 802c374:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802c376:	b10b      	cbz	r3, 802c37c <__sflush_r+0x44>
 802c378:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802c37a:	1ad2      	subs	r2, r2, r3
 802c37c:	2300      	movs	r3, #0
 802c37e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802c380:	6a21      	ldr	r1, [r4, #32]
 802c382:	4628      	mov	r0, r5
 802c384:	47b0      	blx	r6
 802c386:	1c43      	adds	r3, r0, #1
 802c388:	89a3      	ldrh	r3, [r4, #12]
 802c38a:	d106      	bne.n	802c39a <__sflush_r+0x62>
 802c38c:	6829      	ldr	r1, [r5, #0]
 802c38e:	291d      	cmp	r1, #29
 802c390:	d82b      	bhi.n	802c3ea <__sflush_r+0xb2>
 802c392:	4a2a      	ldr	r2, [pc, #168]	@ (802c43c <__sflush_r+0x104>)
 802c394:	410a      	asrs	r2, r1
 802c396:	07d6      	lsls	r6, r2, #31
 802c398:	d427      	bmi.n	802c3ea <__sflush_r+0xb2>
 802c39a:	2200      	movs	r2, #0
 802c39c:	6062      	str	r2, [r4, #4]
 802c39e:	04d9      	lsls	r1, r3, #19
 802c3a0:	6922      	ldr	r2, [r4, #16]
 802c3a2:	6022      	str	r2, [r4, #0]
 802c3a4:	d504      	bpl.n	802c3b0 <__sflush_r+0x78>
 802c3a6:	1c42      	adds	r2, r0, #1
 802c3a8:	d101      	bne.n	802c3ae <__sflush_r+0x76>
 802c3aa:	682b      	ldr	r3, [r5, #0]
 802c3ac:	b903      	cbnz	r3, 802c3b0 <__sflush_r+0x78>
 802c3ae:	6560      	str	r0, [r4, #84]	@ 0x54
 802c3b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802c3b2:	602f      	str	r7, [r5, #0]
 802c3b4:	b1b9      	cbz	r1, 802c3e6 <__sflush_r+0xae>
 802c3b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802c3ba:	4299      	cmp	r1, r3
 802c3bc:	d002      	beq.n	802c3c4 <__sflush_r+0x8c>
 802c3be:	4628      	mov	r0, r5
 802c3c0:	f7ff fb48 	bl	802ba54 <_free_r>
 802c3c4:	2300      	movs	r3, #0
 802c3c6:	6363      	str	r3, [r4, #52]	@ 0x34
 802c3c8:	e00d      	b.n	802c3e6 <__sflush_r+0xae>
 802c3ca:	2301      	movs	r3, #1
 802c3cc:	4628      	mov	r0, r5
 802c3ce:	47b0      	blx	r6
 802c3d0:	4602      	mov	r2, r0
 802c3d2:	1c50      	adds	r0, r2, #1
 802c3d4:	d1c9      	bne.n	802c36a <__sflush_r+0x32>
 802c3d6:	682b      	ldr	r3, [r5, #0]
 802c3d8:	2b00      	cmp	r3, #0
 802c3da:	d0c6      	beq.n	802c36a <__sflush_r+0x32>
 802c3dc:	2b1d      	cmp	r3, #29
 802c3de:	d001      	beq.n	802c3e4 <__sflush_r+0xac>
 802c3e0:	2b16      	cmp	r3, #22
 802c3e2:	d11e      	bne.n	802c422 <__sflush_r+0xea>
 802c3e4:	602f      	str	r7, [r5, #0]
 802c3e6:	2000      	movs	r0, #0
 802c3e8:	e022      	b.n	802c430 <__sflush_r+0xf8>
 802c3ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c3ee:	b21b      	sxth	r3, r3
 802c3f0:	e01b      	b.n	802c42a <__sflush_r+0xf2>
 802c3f2:	690f      	ldr	r7, [r1, #16]
 802c3f4:	2f00      	cmp	r7, #0
 802c3f6:	d0f6      	beq.n	802c3e6 <__sflush_r+0xae>
 802c3f8:	0793      	lsls	r3, r2, #30
 802c3fa:	680e      	ldr	r6, [r1, #0]
 802c3fc:	bf08      	it	eq
 802c3fe:	694b      	ldreq	r3, [r1, #20]
 802c400:	600f      	str	r7, [r1, #0]
 802c402:	bf18      	it	ne
 802c404:	2300      	movne	r3, #0
 802c406:	eba6 0807 	sub.w	r8, r6, r7
 802c40a:	608b      	str	r3, [r1, #8]
 802c40c:	f1b8 0f00 	cmp.w	r8, #0
 802c410:	dde9      	ble.n	802c3e6 <__sflush_r+0xae>
 802c412:	6a21      	ldr	r1, [r4, #32]
 802c414:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c416:	4643      	mov	r3, r8
 802c418:	463a      	mov	r2, r7
 802c41a:	4628      	mov	r0, r5
 802c41c:	47b0      	blx	r6
 802c41e:	2800      	cmp	r0, #0
 802c420:	dc08      	bgt.n	802c434 <__sflush_r+0xfc>
 802c422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c42a:	81a3      	strh	r3, [r4, #12]
 802c42c:	f04f 30ff 	mov.w	r0, #4294967295
 802c430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c434:	4407      	add	r7, r0
 802c436:	eba8 0800 	sub.w	r8, r8, r0
 802c43a:	e7e7      	b.n	802c40c <__sflush_r+0xd4>
 802c43c:	dfbffffe 	.word	0xdfbffffe

0802c440 <_fflush_r>:
 802c440:	b538      	push	{r3, r4, r5, lr}
 802c442:	690b      	ldr	r3, [r1, #16]
 802c444:	4605      	mov	r5, r0
 802c446:	460c      	mov	r4, r1
 802c448:	b913      	cbnz	r3, 802c450 <_fflush_r+0x10>
 802c44a:	2500      	movs	r5, #0
 802c44c:	4628      	mov	r0, r5
 802c44e:	bd38      	pop	{r3, r4, r5, pc}
 802c450:	b118      	cbz	r0, 802c45a <_fflush_r+0x1a>
 802c452:	6a03      	ldr	r3, [r0, #32]
 802c454:	b90b      	cbnz	r3, 802c45a <_fflush_r+0x1a>
 802c456:	f7ff f917 	bl	802b688 <__sinit>
 802c45a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c45e:	2b00      	cmp	r3, #0
 802c460:	d0f3      	beq.n	802c44a <_fflush_r+0xa>
 802c462:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802c464:	07d0      	lsls	r0, r2, #31
 802c466:	d404      	bmi.n	802c472 <_fflush_r+0x32>
 802c468:	0599      	lsls	r1, r3, #22
 802c46a:	d402      	bmi.n	802c472 <_fflush_r+0x32>
 802c46c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c46e:	f7ff fa84 	bl	802b97a <__retarget_lock_acquire_recursive>
 802c472:	4628      	mov	r0, r5
 802c474:	4621      	mov	r1, r4
 802c476:	f7ff ff5f 	bl	802c338 <__sflush_r>
 802c47a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c47c:	07da      	lsls	r2, r3, #31
 802c47e:	4605      	mov	r5, r0
 802c480:	d4e4      	bmi.n	802c44c <_fflush_r+0xc>
 802c482:	89a3      	ldrh	r3, [r4, #12]
 802c484:	059b      	lsls	r3, r3, #22
 802c486:	d4e1      	bmi.n	802c44c <_fflush_r+0xc>
 802c488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c48a:	f7ff fa77 	bl	802b97c <__retarget_lock_release_recursive>
 802c48e:	e7dd      	b.n	802c44c <_fflush_r+0xc>

0802c490 <__swbuf_r>:
 802c490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c492:	460e      	mov	r6, r1
 802c494:	4614      	mov	r4, r2
 802c496:	4605      	mov	r5, r0
 802c498:	b118      	cbz	r0, 802c4a2 <__swbuf_r+0x12>
 802c49a:	6a03      	ldr	r3, [r0, #32]
 802c49c:	b90b      	cbnz	r3, 802c4a2 <__swbuf_r+0x12>
 802c49e:	f7ff f8f3 	bl	802b688 <__sinit>
 802c4a2:	69a3      	ldr	r3, [r4, #24]
 802c4a4:	60a3      	str	r3, [r4, #8]
 802c4a6:	89a3      	ldrh	r3, [r4, #12]
 802c4a8:	071a      	lsls	r2, r3, #28
 802c4aa:	d501      	bpl.n	802c4b0 <__swbuf_r+0x20>
 802c4ac:	6923      	ldr	r3, [r4, #16]
 802c4ae:	b943      	cbnz	r3, 802c4c2 <__swbuf_r+0x32>
 802c4b0:	4621      	mov	r1, r4
 802c4b2:	4628      	mov	r0, r5
 802c4b4:	f000 f82a 	bl	802c50c <__swsetup_r>
 802c4b8:	b118      	cbz	r0, 802c4c2 <__swbuf_r+0x32>
 802c4ba:	f04f 37ff 	mov.w	r7, #4294967295
 802c4be:	4638      	mov	r0, r7
 802c4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c4c2:	6823      	ldr	r3, [r4, #0]
 802c4c4:	6922      	ldr	r2, [r4, #16]
 802c4c6:	1a98      	subs	r0, r3, r2
 802c4c8:	6963      	ldr	r3, [r4, #20]
 802c4ca:	b2f6      	uxtb	r6, r6
 802c4cc:	4283      	cmp	r3, r0
 802c4ce:	4637      	mov	r7, r6
 802c4d0:	dc05      	bgt.n	802c4de <__swbuf_r+0x4e>
 802c4d2:	4621      	mov	r1, r4
 802c4d4:	4628      	mov	r0, r5
 802c4d6:	f7ff ffb3 	bl	802c440 <_fflush_r>
 802c4da:	2800      	cmp	r0, #0
 802c4dc:	d1ed      	bne.n	802c4ba <__swbuf_r+0x2a>
 802c4de:	68a3      	ldr	r3, [r4, #8]
 802c4e0:	3b01      	subs	r3, #1
 802c4e2:	60a3      	str	r3, [r4, #8]
 802c4e4:	6823      	ldr	r3, [r4, #0]
 802c4e6:	1c5a      	adds	r2, r3, #1
 802c4e8:	6022      	str	r2, [r4, #0]
 802c4ea:	701e      	strb	r6, [r3, #0]
 802c4ec:	6962      	ldr	r2, [r4, #20]
 802c4ee:	1c43      	adds	r3, r0, #1
 802c4f0:	429a      	cmp	r2, r3
 802c4f2:	d004      	beq.n	802c4fe <__swbuf_r+0x6e>
 802c4f4:	89a3      	ldrh	r3, [r4, #12]
 802c4f6:	07db      	lsls	r3, r3, #31
 802c4f8:	d5e1      	bpl.n	802c4be <__swbuf_r+0x2e>
 802c4fa:	2e0a      	cmp	r6, #10
 802c4fc:	d1df      	bne.n	802c4be <__swbuf_r+0x2e>
 802c4fe:	4621      	mov	r1, r4
 802c500:	4628      	mov	r0, r5
 802c502:	f7ff ff9d 	bl	802c440 <_fflush_r>
 802c506:	2800      	cmp	r0, #0
 802c508:	d0d9      	beq.n	802c4be <__swbuf_r+0x2e>
 802c50a:	e7d6      	b.n	802c4ba <__swbuf_r+0x2a>

0802c50c <__swsetup_r>:
 802c50c:	b538      	push	{r3, r4, r5, lr}
 802c50e:	4b29      	ldr	r3, [pc, #164]	@ (802c5b4 <__swsetup_r+0xa8>)
 802c510:	4605      	mov	r5, r0
 802c512:	6818      	ldr	r0, [r3, #0]
 802c514:	460c      	mov	r4, r1
 802c516:	b118      	cbz	r0, 802c520 <__swsetup_r+0x14>
 802c518:	6a03      	ldr	r3, [r0, #32]
 802c51a:	b90b      	cbnz	r3, 802c520 <__swsetup_r+0x14>
 802c51c:	f7ff f8b4 	bl	802b688 <__sinit>
 802c520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c524:	0719      	lsls	r1, r3, #28
 802c526:	d422      	bmi.n	802c56e <__swsetup_r+0x62>
 802c528:	06da      	lsls	r2, r3, #27
 802c52a:	d407      	bmi.n	802c53c <__swsetup_r+0x30>
 802c52c:	2209      	movs	r2, #9
 802c52e:	602a      	str	r2, [r5, #0]
 802c530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c534:	81a3      	strh	r3, [r4, #12]
 802c536:	f04f 30ff 	mov.w	r0, #4294967295
 802c53a:	e033      	b.n	802c5a4 <__swsetup_r+0x98>
 802c53c:	0758      	lsls	r0, r3, #29
 802c53e:	d512      	bpl.n	802c566 <__swsetup_r+0x5a>
 802c540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802c542:	b141      	cbz	r1, 802c556 <__swsetup_r+0x4a>
 802c544:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802c548:	4299      	cmp	r1, r3
 802c54a:	d002      	beq.n	802c552 <__swsetup_r+0x46>
 802c54c:	4628      	mov	r0, r5
 802c54e:	f7ff fa81 	bl	802ba54 <_free_r>
 802c552:	2300      	movs	r3, #0
 802c554:	6363      	str	r3, [r4, #52]	@ 0x34
 802c556:	89a3      	ldrh	r3, [r4, #12]
 802c558:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802c55c:	81a3      	strh	r3, [r4, #12]
 802c55e:	2300      	movs	r3, #0
 802c560:	6063      	str	r3, [r4, #4]
 802c562:	6923      	ldr	r3, [r4, #16]
 802c564:	6023      	str	r3, [r4, #0]
 802c566:	89a3      	ldrh	r3, [r4, #12]
 802c568:	f043 0308 	orr.w	r3, r3, #8
 802c56c:	81a3      	strh	r3, [r4, #12]
 802c56e:	6923      	ldr	r3, [r4, #16]
 802c570:	b94b      	cbnz	r3, 802c586 <__swsetup_r+0x7a>
 802c572:	89a3      	ldrh	r3, [r4, #12]
 802c574:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802c578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802c57c:	d003      	beq.n	802c586 <__swsetup_r+0x7a>
 802c57e:	4621      	mov	r1, r4
 802c580:	4628      	mov	r0, r5
 802c582:	f000 f887 	bl	802c694 <__smakebuf_r>
 802c586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c58a:	f013 0201 	ands.w	r2, r3, #1
 802c58e:	d00a      	beq.n	802c5a6 <__swsetup_r+0x9a>
 802c590:	2200      	movs	r2, #0
 802c592:	60a2      	str	r2, [r4, #8]
 802c594:	6962      	ldr	r2, [r4, #20]
 802c596:	4252      	negs	r2, r2
 802c598:	61a2      	str	r2, [r4, #24]
 802c59a:	6922      	ldr	r2, [r4, #16]
 802c59c:	b942      	cbnz	r2, 802c5b0 <__swsetup_r+0xa4>
 802c59e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802c5a2:	d1c5      	bne.n	802c530 <__swsetup_r+0x24>
 802c5a4:	bd38      	pop	{r3, r4, r5, pc}
 802c5a6:	0799      	lsls	r1, r3, #30
 802c5a8:	bf58      	it	pl
 802c5aa:	6962      	ldrpl	r2, [r4, #20]
 802c5ac:	60a2      	str	r2, [r4, #8]
 802c5ae:	e7f4      	b.n	802c59a <__swsetup_r+0x8e>
 802c5b0:	2000      	movs	r0, #0
 802c5b2:	e7f7      	b.n	802c5a4 <__swsetup_r+0x98>
 802c5b4:	20000118 	.word	0x20000118

0802c5b8 <memmove>:
 802c5b8:	4288      	cmp	r0, r1
 802c5ba:	b510      	push	{r4, lr}
 802c5bc:	eb01 0402 	add.w	r4, r1, r2
 802c5c0:	d902      	bls.n	802c5c8 <memmove+0x10>
 802c5c2:	4284      	cmp	r4, r0
 802c5c4:	4623      	mov	r3, r4
 802c5c6:	d807      	bhi.n	802c5d8 <memmove+0x20>
 802c5c8:	1e43      	subs	r3, r0, #1
 802c5ca:	42a1      	cmp	r1, r4
 802c5cc:	d008      	beq.n	802c5e0 <memmove+0x28>
 802c5ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c5d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 802c5d6:	e7f8      	b.n	802c5ca <memmove+0x12>
 802c5d8:	4402      	add	r2, r0
 802c5da:	4601      	mov	r1, r0
 802c5dc:	428a      	cmp	r2, r1
 802c5de:	d100      	bne.n	802c5e2 <memmove+0x2a>
 802c5e0:	bd10      	pop	{r4, pc}
 802c5e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802c5e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802c5ea:	e7f7      	b.n	802c5dc <memmove+0x24>

0802c5ec <_realloc_r>:
 802c5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c5f0:	4680      	mov	r8, r0
 802c5f2:	4615      	mov	r5, r2
 802c5f4:	460c      	mov	r4, r1
 802c5f6:	b921      	cbnz	r1, 802c602 <_realloc_r+0x16>
 802c5f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c5fc:	4611      	mov	r1, r2
 802c5fe:	f7fe bf1d 	b.w	802b43c <_malloc_r>
 802c602:	b92a      	cbnz	r2, 802c610 <_realloc_r+0x24>
 802c604:	f7ff fa26 	bl	802ba54 <_free_r>
 802c608:	2400      	movs	r4, #0
 802c60a:	4620      	mov	r0, r4
 802c60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c610:	f000 f89e 	bl	802c750 <_malloc_usable_size_r>
 802c614:	4285      	cmp	r5, r0
 802c616:	4606      	mov	r6, r0
 802c618:	d802      	bhi.n	802c620 <_realloc_r+0x34>
 802c61a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802c61e:	d8f4      	bhi.n	802c60a <_realloc_r+0x1e>
 802c620:	4629      	mov	r1, r5
 802c622:	4640      	mov	r0, r8
 802c624:	f7fe ff0a 	bl	802b43c <_malloc_r>
 802c628:	4607      	mov	r7, r0
 802c62a:	2800      	cmp	r0, #0
 802c62c:	d0ec      	beq.n	802c608 <_realloc_r+0x1c>
 802c62e:	42b5      	cmp	r5, r6
 802c630:	462a      	mov	r2, r5
 802c632:	4621      	mov	r1, r4
 802c634:	bf28      	it	cs
 802c636:	4632      	movcs	r2, r6
 802c638:	f7ff f9a1 	bl	802b97e <memcpy>
 802c63c:	4621      	mov	r1, r4
 802c63e:	4640      	mov	r0, r8
 802c640:	f7ff fa08 	bl	802ba54 <_free_r>
 802c644:	463c      	mov	r4, r7
 802c646:	e7e0      	b.n	802c60a <_realloc_r+0x1e>

0802c648 <__swhatbuf_r>:
 802c648:	b570      	push	{r4, r5, r6, lr}
 802c64a:	460c      	mov	r4, r1
 802c64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c650:	2900      	cmp	r1, #0
 802c652:	b096      	sub	sp, #88	@ 0x58
 802c654:	4615      	mov	r5, r2
 802c656:	461e      	mov	r6, r3
 802c658:	da0d      	bge.n	802c676 <__swhatbuf_r+0x2e>
 802c65a:	89a3      	ldrh	r3, [r4, #12]
 802c65c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802c660:	f04f 0100 	mov.w	r1, #0
 802c664:	bf14      	ite	ne
 802c666:	2340      	movne	r3, #64	@ 0x40
 802c668:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802c66c:	2000      	movs	r0, #0
 802c66e:	6031      	str	r1, [r6, #0]
 802c670:	602b      	str	r3, [r5, #0]
 802c672:	b016      	add	sp, #88	@ 0x58
 802c674:	bd70      	pop	{r4, r5, r6, pc}
 802c676:	466a      	mov	r2, sp
 802c678:	f000 f848 	bl	802c70c <_fstat_r>
 802c67c:	2800      	cmp	r0, #0
 802c67e:	dbec      	blt.n	802c65a <__swhatbuf_r+0x12>
 802c680:	9901      	ldr	r1, [sp, #4]
 802c682:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802c686:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802c68a:	4259      	negs	r1, r3
 802c68c:	4159      	adcs	r1, r3
 802c68e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c692:	e7eb      	b.n	802c66c <__swhatbuf_r+0x24>

0802c694 <__smakebuf_r>:
 802c694:	898b      	ldrh	r3, [r1, #12]
 802c696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802c698:	079d      	lsls	r5, r3, #30
 802c69a:	4606      	mov	r6, r0
 802c69c:	460c      	mov	r4, r1
 802c69e:	d507      	bpl.n	802c6b0 <__smakebuf_r+0x1c>
 802c6a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802c6a4:	6023      	str	r3, [r4, #0]
 802c6a6:	6123      	str	r3, [r4, #16]
 802c6a8:	2301      	movs	r3, #1
 802c6aa:	6163      	str	r3, [r4, #20]
 802c6ac:	b003      	add	sp, #12
 802c6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c6b0:	ab01      	add	r3, sp, #4
 802c6b2:	466a      	mov	r2, sp
 802c6b4:	f7ff ffc8 	bl	802c648 <__swhatbuf_r>
 802c6b8:	9f00      	ldr	r7, [sp, #0]
 802c6ba:	4605      	mov	r5, r0
 802c6bc:	4639      	mov	r1, r7
 802c6be:	4630      	mov	r0, r6
 802c6c0:	f7fe febc 	bl	802b43c <_malloc_r>
 802c6c4:	b948      	cbnz	r0, 802c6da <__smakebuf_r+0x46>
 802c6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c6ca:	059a      	lsls	r2, r3, #22
 802c6cc:	d4ee      	bmi.n	802c6ac <__smakebuf_r+0x18>
 802c6ce:	f023 0303 	bic.w	r3, r3, #3
 802c6d2:	f043 0302 	orr.w	r3, r3, #2
 802c6d6:	81a3      	strh	r3, [r4, #12]
 802c6d8:	e7e2      	b.n	802c6a0 <__smakebuf_r+0xc>
 802c6da:	89a3      	ldrh	r3, [r4, #12]
 802c6dc:	6020      	str	r0, [r4, #0]
 802c6de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802c6e2:	81a3      	strh	r3, [r4, #12]
 802c6e4:	9b01      	ldr	r3, [sp, #4]
 802c6e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802c6ea:	b15b      	cbz	r3, 802c704 <__smakebuf_r+0x70>
 802c6ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c6f0:	4630      	mov	r0, r6
 802c6f2:	f000 f81d 	bl	802c730 <_isatty_r>
 802c6f6:	b128      	cbz	r0, 802c704 <__smakebuf_r+0x70>
 802c6f8:	89a3      	ldrh	r3, [r4, #12]
 802c6fa:	f023 0303 	bic.w	r3, r3, #3
 802c6fe:	f043 0301 	orr.w	r3, r3, #1
 802c702:	81a3      	strh	r3, [r4, #12]
 802c704:	89a3      	ldrh	r3, [r4, #12]
 802c706:	431d      	orrs	r5, r3
 802c708:	81a5      	strh	r5, [r4, #12]
 802c70a:	e7cf      	b.n	802c6ac <__smakebuf_r+0x18>

0802c70c <_fstat_r>:
 802c70c:	b538      	push	{r3, r4, r5, lr}
 802c70e:	4d07      	ldr	r5, [pc, #28]	@ (802c72c <_fstat_r+0x20>)
 802c710:	2300      	movs	r3, #0
 802c712:	4604      	mov	r4, r0
 802c714:	4608      	mov	r0, r1
 802c716:	4611      	mov	r1, r2
 802c718:	602b      	str	r3, [r5, #0]
 802c71a:	f7d5 fb63 	bl	8001de4 <_fstat>
 802c71e:	1c43      	adds	r3, r0, #1
 802c720:	d102      	bne.n	802c728 <_fstat_r+0x1c>
 802c722:	682b      	ldr	r3, [r5, #0]
 802c724:	b103      	cbz	r3, 802c728 <_fstat_r+0x1c>
 802c726:	6023      	str	r3, [r4, #0]
 802c728:	bd38      	pop	{r3, r4, r5, pc}
 802c72a:	bf00      	nop
 802c72c:	20013178 	.word	0x20013178

0802c730 <_isatty_r>:
 802c730:	b538      	push	{r3, r4, r5, lr}
 802c732:	4d06      	ldr	r5, [pc, #24]	@ (802c74c <_isatty_r+0x1c>)
 802c734:	2300      	movs	r3, #0
 802c736:	4604      	mov	r4, r0
 802c738:	4608      	mov	r0, r1
 802c73a:	602b      	str	r3, [r5, #0]
 802c73c:	f7d5 fb62 	bl	8001e04 <_isatty>
 802c740:	1c43      	adds	r3, r0, #1
 802c742:	d102      	bne.n	802c74a <_isatty_r+0x1a>
 802c744:	682b      	ldr	r3, [r5, #0]
 802c746:	b103      	cbz	r3, 802c74a <_isatty_r+0x1a>
 802c748:	6023      	str	r3, [r4, #0]
 802c74a:	bd38      	pop	{r3, r4, r5, pc}
 802c74c:	20013178 	.word	0x20013178

0802c750 <_malloc_usable_size_r>:
 802c750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c754:	1f18      	subs	r0, r3, #4
 802c756:	2b00      	cmp	r3, #0
 802c758:	bfbc      	itt	lt
 802c75a:	580b      	ldrlt	r3, [r1, r0]
 802c75c:	18c0      	addlt	r0, r0, r3
 802c75e:	4770      	bx	lr

0802c760 <_init>:
 802c760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c762:	bf00      	nop
 802c764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c766:	bc08      	pop	{r3}
 802c768:	469e      	mov	lr, r3
 802c76a:	4770      	bx	lr

0802c76c <_fini>:
 802c76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c76e:	bf00      	nop
 802c770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c772:	bc08      	pop	{r3}
 802c774:	469e      	mov	lr, r3
 802c776:	4770      	bx	lr
